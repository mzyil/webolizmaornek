/**
 * Created by Melih on 12/6/2016.
 */
/* Copyright (c) 2006-2016 Livesport s.r.o.
 * You are not allowed to copy or redistribute this file.
 */
function FlashscoreDebugger(is_enabled) {
    var bugger = this;
    var container, menu, selected;
    var used = typeof is_enabled != 'undefined' && !!is_enabled;
    var ready = false;
    var logs = {};
    var logQueue = [];
    var FlashscoreDebuggerLog = function(id, name) {
        var id = id;
        var name = name;
        var domId = 'fsLog_' + id;
        var logContainer;
        var logQueue = [];
        var ready = false;
        var self = this;
        this.getName = function() {
            return name
        };
        this.getId = function() {
            return id
        };
        this.getDomId = function() {
            return domId
        };
        this.report = function(msg_type, message) {
            if ((pos = message.indexOf(':')) > 0) {
                parts = [message.substr(0, pos + 1), message.substr(pos + 1)];
                message = '<span class="heading">' + parts[0] + '</span>' + parts[1]
            }
            ready ? logContainer.append('<span class="' + msg_type + '" title="' + getTimestamp() + '">' + message + '</span>') : logQueue.push([msg_type, message])
        };
        this.processQueue = function() {
            for (i in logQueue) {
                this.report(logQueue[i][0], logQueue[i][1]);
                delete logQueue[i]
            }
        };
        this.createContainer = function() {
            if (!ready) {
                container.append('<div class="log" id="' + domId + '"><span class="info" title="' + getTimestamp() + '">Initialized</span></div>');
                logContainer = container.find('#' + domId);
                typeof selected == 'undefined' && (selected = id);
                ready = true;
                genMenu()
            }
        };
        var init = function() {
            logs[id] = self;
            bugger.isReady() ? self.createContainer() : logQueue.push(id)
        }()
    };
    this.createLog = function(id, name) {
        return new FlashscoreDebuggerLog(id, name)
    };
    this.report = function(log_id, msg_type, message) {
        log_id === null && (log_id = 'general');
        used && logs[log_id].report(msg_type, message)
    };
    this.isReady = function() {
        return ready
    };
    var genMenu = function() {
        if (used) {
            menu.html('');
            for (id in logs) {
                menu.append('<li class="' + logs[id].getId() + '">' + '<a href="#" rel="' + logs[id].getDomId() + '">' + logs[id].getName() + '</a>' + '</li>')
            }
            menu.children('.' + selected).addClass('selected');
            $('#' + logs[selected].getDomId()).css('display', 'inline-block');
            menu.find('a').click(function(e) {
                $(this).parent().siblings().removeClass('selected');
                $(this).parent().addClass('selected');
                container.find('div.log').hide();
                container.find('#' + $(this).attr('rel')).css('display', 'inline-block');
                return false
            })
        }
    };
    var getTimestamp = function() {
        var d = new Date();
        var date = [d.getFullYear(), d.getMonth(), d.getDay(), d.getHours(), d.getMinutes(), d.getSeconds()];
        for (var i in date) {
            if ((date[i] + "").length <= 1) {
                date[i] = "0" + date[i]
            }
        }
        return date[0] + '-' + date[1] + '-' + date[2] + ' ' + date[3] + ':' + date[4] + ':' + date[5]
    };
    var init = function() {
        if (used) {
            $(function() {
                $("body").append('<div id="fsDebuggerContainer"><ul class="menu"></ul></div>');
                container = $("#fsDebuggerContainer");
                menu = container.children(".menu");
                ready = true;
                bugger.createLog('general', 'General messages');
                for (id in logs) {
                    logs[id].createContainer();
                    logs[id].processQueue()
                }
            })
        }
    }()
}
var Debugger = new FlashscoreDebugger(false);
var l = {};
l.x_url = 'http://' + location.host + '/x/';
l.feed_url = l.x_url + 'feed/';
var req_url = l.x_url + 'req/';
var menumin_fix_param = false;
l.sports_count = {};
l.sports_count.data = null;
l.sports_count.displayed_menu = false;
l.sports_count.displayed_menumin = false;
l.sports_count.displayed_ls_sports_count = false;
l.sports_count.displayed_sports_count_in_link = false;
l.sports_count.title = 'Today\'s Matches:';
l.sports_count.reload_data = function() {
    this.data = null;
    if (this.displayed_menumin) {
        var sportMenuItems = $("#menumin li");
        sportMenuItems.removeAttr('title');
        sportMenuItems.find('.sportcount').remove();
        this.displayed_menumin = false
    }
    if (this.displayed_menu) {
        $('.menu-top > ul > li .todayEvents').remove();
        $('.menu-top > ul > li').not('.minority').find('a').removeAttr('title');
        this.displayed_menu = false;
        this.load_data('show_menu')
    }
};
l.sports_count.load_data = function(caller) {
    if (typeof caller == 'undefined') {
        caller = ''
    }(new cjs.AjaxJqObject(l.feed_url + 'mc_' + cjs.timezone.getTimezone(), void 0, 'callback', caller, this, void 0, ie6, webkit, feed_sign)).update()
};
l.sports_count.callback = function(r_status, r_headers, r_content, r_trigger) {
    var data = r_content.split(JS_ROW_END);
    this.data = {};
    for (var rowId in data) {
        var row = data[rowId];
        if (row.substr(0, 2) != 'SA') {
            continue
        }
        var sportData = row.split(JS_CELL_END);
        var sportID = sportData[0].substr(3);
        var eventCount = typeof sportData[1] != 'undefined' ? sportData[1].substr(3) : '0';
        var liveCount = typeof sportData[2] != 'undefined' ? sportData[2].substr(3) : '0';
        this.data[sportID] = {
            events: parseInt(eventCount),
            live: parseInt(liveCount)
        }
    }
    if (r_trigger == 'show_menu') {
        this.show_menu()
    } else if (r_trigger == 'show_menumin') {
        this.show_menumin()
    } else if (r_trigger == 'show_sports_count_in_link') {
        this.show_sports_count_in_link()
    } else if (r_trigger == 'show_ls_sports_count') {
        this.show_ls_sports_count()
    }
};
l.sports_count.show_menu = function() {
    if (this.displayed_menu) {
        return
    }
    if (!this.data) {
        return this.load_data('show_menu')
    }
    this.displayed_menu = true;
    $('.menu-top > ul > li').not('.minority').each(function(obj) {
        return function(index) {
            var sportID = this.className.replace(/(^|.* )s([-]{0,1}[0-9]{1,2})( .*|$)/g, '$2');
            if (typeof obj.data[sportID] != 'undefined' && obj.data[sportID].events) {
                $(this).find('a').attr('title', obj.title + ' ' + obj.data[sportID].events).append($(document.createElement('span')).addClass('todayEvents').text(obj.data[sportID].events))
            }
        }
    }(this))
};
l.sports_count.show_menumin = function() {
    if (this.displayed_menumin) {
        return
    }
    if (!this.data) {
        return this.load_data('show_menumin')
    }
    this.displayed_menumin = true;
    for (var sportID in this.data) {
        if (this.data[sportID].events) {
            var sportMenuItem = $("#menumin .s" + sportID);
            if (sportMenuItem.lenght == 0) {
                continue
            }
            sportMenuItem.attr('title', this.title + ' ' + this.data[sportID].events);
            var a = sportMenuItem.find('a');
            var txt_event = this.data[sportID].events;
            a.html(a.html() + ' <span class="sportcount">' + txt_event + '</span>')
        }
    }
};
l.sports_count.show_ls_sports_count = function() {
    if (this.displayed_ls_sports_count) {
        return
    }
    if (!this.data) {
        return this.load_data('show_ls_sports_count')
    }
    this.displayed_sports_count_in_link = true;
    $('#sport_tiles div.sport_tile strong.today_count').each(function(i, e) {
        var el = $(e);
        var sportId = e.id.split('-')[1];
        if (typeof l.sports_count.data[sportId] == 'undefined') {
            return
        }
        var eventCount = l.sports_count.data[sportId].events;
        if (eventCount) {
            $(e).html(eventCount)
        } else {
            $(e).html('-');
            $(e).removeClass('red')
        }
    })
};
l.sports_count.show_sports_count_in_link = function() {
    if (this.displayed_sports_count_in_link) {
        return
    }
    if (!this.data) {
        return this.load_data('show_sports_count_in_link')
    }
    var sports_counts = {};
    cjs.dic.get('dataEventHolderProxy').getHandler().each(function(index, id) {
        var eventItem = this.getItem(id);
        var sport = eventItem.getValue('sport_id');
        if (sport in sports_counts) {
            sports_counts[sport] += 1
        } else {
            sports_counts[sport] = 1
        }
    });
    this.displayed_sports_count_in_link = true;
    $('span[id^=cfm-sports]').each(function(i, e) {
        var el = $(e);
        var count = 0;
        var sportId = el.attr('id').split('-')[2];
        if (typeof l.sports_count.data[sportId] != 'undefined' && typeof l.sports_count.data[sportId].events != 'undefined' && l.sports_count.data[sportId].events) {
            count = l.sports_count.data[sportId].events
        }
        el.html(count);
        el.closest('.table-link-more-games').toggle(!(sportId in sports_counts && sports_counts[sportId] == count))
    })
};

function hide_intersecting_banners($elementBox, $rightColumn) {
    if ($rightColumn) {
        cjs.Util.Element.hideIntersectingBanners($elementBox, $rightColumn.find('.adscontent iframe'))
    }
}
function show_intersecting_banners($elementBox, $rightColumn) {
    if ($rightColumn) {
        $rightColumn.find('.adscontent iframe').show()
    }
}
function action_intersecting_banners($elementBox, callback) {
    var $rightColumn;
    var projectTypeName = cjs.Util.Config.get('app', 'project_type', 'name');
    if ($.inArray(projectTypeName, ['_fs', '_diretta-2', '_in']) !== -1) {
        if (projectTypeName === '_diretta-2') {
            $rightColumn = $(".right-column")
        } else if (projectTypeName === '_in') {
            $rightColumn = $(".col-right")
        } else {
            $rightColumn = $("#rccontent")
        }
    }
    if (typeof callback === 'function') {
        callback($elementBox, $rightColumn)
    }
}
function sports_count_reload() {
    l.sports_count.reload_data()
}
function menumin_show() {
    document.getElementById('menumin').style.display = 'block';
    if (!l.sports_count.displayed_menumin) {
        if (document.all && !document.querySelector) {
            $('div#header').css('zIndex', 100)
        }
    }
    l.sports_count.show_menumin()
}
function menumin_hide() {
    menumin_fix_param = false;
    setTimeout('menumin_try_to_hide()', 200);
    if (document.all && !document.querySelector) {
        $("div#header").removeAttr("style")
    }
}
function menumin_fix() {
    menumin_fix_param = true
}
function menumin_try_to_hide() {
    if (!menumin_fix_param) {
        document.getElementById('menumin').style.display = 'none'
    }
}
function show_more_templates() {
    var node = document.getElementById("mt");
    var els = node.getElementsByTagName("li");
    var elsLength = els.length;
    var hiddenFound = false;
    var reg = new RegExp('(\\s|^)' + "hidden-templates" + '(\\s|$)');
    for (var i = 0; i < elsLength; i++) {
        if (reg.test(els[i].className)) {
            els[i].className = els[i].className.replace(reg, ' ')
        } else if (hiddenFound) {
            break
        }
        if (els[i].className == "show-more") {
            els[i].className = "hidden-templates";
            hiddenFound = true
        }
    }
    if (typeof cjs.bannerScrollManager !== 'undefined' && typeof cjs.bannerScrollManager.refreshWaypoints === 'function') {
        cjs.bannerScrollManager.refreshWaypoints()
    }
}
function show_more_templates_2(context) {
    $(context).closest('ul').find('li.hidden-templates').removeClass('hidden-templates');
    $(context).closest('li').remove();
    if (typeof cjs.bannerScrollManager !== 'undefined' && typeof cjs.bannerScrollManager.refreshWaypoints === 'function') {
        cjs.bannerScrollManager.refreshWaypoints()
    }
}

function tz_switch(hide) {
    tz_flash_banner_switch(hide)
}

function tz_flash_banner_switch(hide) {
    var visibility = (typeof hide != 'undefined' && hide) ? 'hidden' : 'visible';
    var elements = $("div.adscontent");
    var banner_nohide_sport_list = '';
    var elen = elements.length;
    if (hide == true) {
        $("div.adsclick").css("display", "none");
        if (document.all && !document.querySelector) {
            $("div.banner").parent().not(".banner-right").find("div.banner").css("zIndex", -1)
        }
    } else {
        $("div.adsclick").css("display", "block");
        if (document.all && !document.querySelector) {
            $("div.banner").removeAttr("style")
        }
    }
    for (var i = 0; i < elen; i++) {
        el = elements[i];
        id_is_ok = typeof el.id != 'undefined' && el.id.match("^lsadvert-left_menu");
        if (id_is_ok) {
            if (el.id != 'lsadvert-left_menu_1' && banner_nohide_sport_list.match(sport)) {
                break
            }
            var next_sibling = el.nextSibling;
            var nclass = $(next_sibling).attr('class');
            el.style.visibility = visibility;
            nclass == "adsclick" || nclass == "adsgraphhori" && (next_sibling.style.visibility = visibility);
            nclass == "adsgraphhori" && (next_sibling.style.visibility = visibility)
        }
    }
    var callback = hide ? hide_intersecting_banners : show_intersecting_banners;
    action_intersecting_banners($('#tzcontent'), callback)
}
function display_lang(element_id) {
    cjs.dic.get('Helper_Window').closePopup('language');
    var callback = function($elementBox, $rightColumn) {
        var toggleOptions = {
            duration: 0
        };
        if ($rightColumn) {
            toggleOptions['complete'] = function() {
                var $iframes = $rightColumn.find('.adscontent iframe');
                if ($(this).is(':visible')) {
                    cjs.Util.Element.hideIntersectingBanners($elementBox, $iframes)
                } else {
                    $iframes.show()
                }
            }
        }
        $('#' + element_id).toggle(toggleOptions)
    };
    action_intersecting_banners($("#langcontent"), callback)
}
var BannerHandler = (function() {
    function BannerHandler(zoneIds, elementsBackgrounds, adsServers, noticeTextSelectors, jQueryObj, noticeText, storage, zoneIdsCond, requestOnInit) {
        this.verbose = false;
        if (zoneIds && zoneIds.constructor == Array) this.zoneIds = zoneIds;
        else {
            if (this.verbose) cerr('zoneIds must be array');
            this.zoneIds = []
        }
        this.backupedDroppedZoneIds = [];
        if (typeof noticeTextSelectors != 'object') {
            noticeTextSelectors = {}
        }
        this.noticeTextSelectors = noticeTextSelectors;
        if (typeof zoneIdsCond == 'undefined') {
            zoneIdsCond = null
        }
        this.zoneIdsCond = zoneIdsCond;
        if (typeof requestOnInit == 'undefined') {
            requestOnInit = true
        }
        this._backupPrepaired = false;
        this.elementsBackgrounds = elementsBackgrounds;
        if (!adsServers && this.verbose) cerr('adsServers must be set');
        this.adsServers = adsServers;
        if (jQueryObj) this.jq = jQueryObj;
        else this.jq = jQuery;
        this.validateBackgroundZones();
        this.noticeText = noticeText || '';
        if (storage) {
            this.storage = storage
        } else {
            this.storage = null
        }
        this.requests = 0;
        this.maxRequests = Math.min(3, this.adsServers.length);
        this.requestTTL = this.maxRequests == 1 ? 15 : 2;
        this.urlTemplate = 'http://{URL}/delivery?zones=';
        this.idPrefix = 'lsadvert-zid-';
        this.requested = false;
        this.responseHandled = false;
        this.displayed = false;
        this.displayCalled = false;
        this.adBlockedCallback = null;
        this.displayedCallback = null;
        this.zones = {};
        this.capping = {};
        if (this.storage) {
            var date = new Date();
            this.cappingKey = 'advertCapping_' + date.getFullYear() + '_' + date.getMonth() + '_' + date.getDate();
            this.capping = storage.get(this.cappingKey);
            this.capping = this.capping ? JSON.parse(this.capping) : {}
        }
        this.setBackgroundCallbacks = [];
        this.afterAdBackgroundElementCreatedCallbacks = [];
        this.bannersLoadedCallbacks = [];
        this.adBlocked = null;
        this._setIframeContentCounter = 0;
        this._setIframeContentTimeout = 20;
        this._backgroundSetTimeout = 100;
        if (requestOnInit) {
            this.request()
        }
    }
    BannerHandler.prototype.clientTypes = {
        mobile: "mobile",
        tablet: "tablet",
        PC: "PC"
    };
    BannerHandler.prototype.disableZone = function(zoneId) {
        var indexOfZone = this.zoneIds.indexOf(zoneId);
        if (indexOfZone != -1) {
            this.backupedDroppedZoneIds.push(zoneId);
            this.zoneIds.splice(indexOfZone, 1);
            return true
        }
        return false
    };
    BannerHandler.prototype.enableZone = function(zoneId) {
        var indexOfDroppedZone = this.backupedDroppedZoneIds.indexOf(zoneId);
        if (indexOfDroppedZone != -1) {
            this.zoneIds.push(zoneId);
            this.backupedDroppedZoneIds.splice(indexOfDroppedZone, 1);
            this.resetState();
            return true
        }
        return false
    };
    BannerHandler.prototype.resetState = function() {
        this.displayed = false;
        this.responseHandled = false;
        this.requested = false
    };
    BannerHandler.prototype.validateBackgroundZones = function() {
        if (this.getClientType() != this.clientTypes.mobile) {
            return
        }
        var newZoneIds = [];
        for (var zoneIndex in this.zoneIds) {
            if (typeof this.elementsBackgrounds[this.zoneIds[zoneIndex]] == 'undefined') {
                newZoneIds.push(this.zoneIds[zoneIndex])
            }
        }
        this.zoneIds = newZoneIds;
        this.elementsBackgrounds = {}
    };
    BannerHandler.prototype.setAdBlockedCallback = function(callback) {
        this.adBlockedCallback = callback
    };
    BannerHandler.prototype.setDisplayedCallback = function(callback) {
        this.displayedCallback = callback
    };
    BannerHandler.prototype.addSetBackgroundCallback = function(callback) {
        this.setBackgroundCallbacks.push(callback)
    };
    BannerHandler.prototype.addAfterAdBackgroundElementCreatedCallbacks = function(callback) {
        this.afterAdBackgroundElementCreatedCallbacks.push(callback)
    };
    BannerHandler.prototype.addBannersLoadedCallback = function(callback) {
        this.bannersLoadedCallbacks.push(callback)
    };
    BannerHandler.prototype.hasFlashSupport = function() {
        try {
            return !!((typeof swfobject != 'undefined' && swfobject.hasFlashPlayerVersion("1")) || navigator.mimeTypes["application/x-shockwave-flash"] || window.ActiveXObject && new ActiveXObject('ShockwaveFlash.ShockwaveFlash'))
        } catch (e) {}
        return false
    };
    BannerHandler.prototype.getClientType = function() {
        if (typeof this.jq.browser.mobile == 'undefined' || typeof this.jq.browser.mobile != 'undefined' && this.jq.browser.mobile) {
            return this.clientTypes.mobile
        } else if (/android|ipad|playbook|silk/i.test(navigator.userAgent || navigator.vendor || window.opera)) {
            return this.clientTypes.tablet
        }
        return this.clientTypes.PC
    };
    BannerHandler.prototype.getUrl = function() {
        var randUrlPos = Math.floor(Math.random() * this.adsServers.length);
        var randUrl = this.urlTemplate.replace('{URL}', this.adsServers[randUrlPos]);
        if (this.adsServers.length > 1) this.adsServers.splice(randUrlPos, 1);
        return randUrl
    };
    BannerHandler.prototype.getUrlCappingPart = function() {
        var i, j, retCap = {},
            hasCap = false;
        for (i = 0; i < this.zoneIds.length; i++) {
            if (typeof this.capping[this.zoneIds[i]] != 'undefined') {
                hasCap = true;
                for (j in this.capping[this.zoneIds[i]]) retCap[j] = this.capping[this.zoneIds[i]][j]
            }
        }
        return hasCap ? '&cap=' + encodeURI(JSON.stringify(retCap)) : ''
    };
    BannerHandler.prototype.getUrlFlashPart = function() {
        return this.hasFlashSupport() ? '' : '&no_flash=1'
    };
    BannerHandler.prototype.getUrlClientTypePart = function() {
        return '&clientType=' + this.getClientType()
    };
    BannerHandler.prototype.getZoneIdsWithMissingData = function() {
        if (Object.keys(this.zones).length == 0) {
            return this.zoneIds
        }
        var zonesToRequest = [];
        for (var key in this.zoneIds) {
            if (!this.zones[this.zoneIds[key]]) {
                zonesToRequest.push(this.zoneIds[key])
            }
        }
        return zonesToRequest
    };
    BannerHandler.prototype.request = function() {
        var zonesToRequest = this.getZoneIdsWithMissingData();
        if (zonesToRequest.length > 0) {
            this.requests++;
            if (this.verbose) clog('Request');
            var callbackThis = this;
            this.jq.ajax({
                url: this.getUrl() + zonesToRequest.join(',') + this.getUrlClientTypePart() + this.getUrlCappingPart() + this.getUrlFlashPart(),
                timeout: this.requestTTL * 1000,
                dataType: 'jsonp',
                jsonpCallback: 'delivery',
                success: function(data, textStatus, jqXHR) {
                    if (callbackThis.verbose) clog('Succes response');
                    if (jqXHR.status == 200) {
                        callbackThis.setData(data)
                    } else callbackThis.responseError(jqXHR)
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    callbackThis.responseError(jqXHR, errorThrown)
                }
            })
        }
        this.requested = true
    };
    BannerHandler.prototype.setData = function(data) {
        for (zoneId in data) {
            this.zones[zoneId] = data[zoneId];
            this._resizeZonetoContent(zoneId);
            this._callBannersLoadedCallback(zoneId)
        }
        this.responseHandled = true;
        if (this.displayCalled) this.display();
        else {
            for (var index = 0; index < this.zoneIds.length; index++) {
                zoneId = this.zoneIds[index];
                if (!this.zones[zoneId] || !this.zones[zoneId].content) this.hideZone(zoneId)
            }
        }
        var storeCapping = false;
        var zonesCond = [];
        for (var zoneKey = 0; zoneKey < this.zoneIds.length; zoneKey++) {
            var zone = this.zoneIds[zoneKey];
            if (this.zoneIdsCond != null && typeof this.zoneIdsCond[zone] != 'undefined') {
                if ((this.zoneIdsCond[zone].second_request || typeof this.zones[zone] == 'undefined') && (typeof this.zones[zone] == 'undefined' || typeof this.zones[zone].h == 'undefined' || this.zones[zone].h <= this.zoneIdsCond[zone].height)) {
                    for (var i in this.zoneIdsCond[zone].zones) {
                        zonesCond.push(this.zoneIdsCond[zone].zones[i])
                    }
                } else {
                    for (var i in this.zoneIdsCond[zone].zones) {
                        this.jq('#lsadvert-zid-' + this.zoneIdsCond[zone].zones[i]).hide()
                    }
                }
            }
        }
        for (var zone in this.zones) {
            if (typeof this.zones[zone].cap != 'undefined') {
                if (typeof this.capping[zone] == 'undefined') this.capping[zone] = {};
                if (typeof this.capping[zone][this.zones[zone].cap] == 'undefined') this.capping[zone][this.zones[zone].cap] = 1;
                else this.capping[zone][this.zones[zone].cap]++;
                storeCapping = true
            }
        }
        if (storeCapping && this.storage) this.storage.store(this.cappingKey, JSON.stringify(this.capping), 24 * 60 * 60, 'self', '/');
        if (zonesCond.length) {
            var zoneIdsBack = this.zoneIds;
            for (var i = 0; i < zonesCond.length; i++) {
                zoneIdsBack.push(zonesCond[i])
            }
            this.zoneIds = zonesCond;
            this.zoneIdsCond = null;
            this.requested = false;
            this.displayed = false;
            this.request();
            this.zoneIds = zoneIdsBack
        }
    };
    BannerHandler.prototype.responseError = function(jqXHR, errorThrown) {
        if (this.verbose) cerr('Response error');
        if (this.requests >= this.maxRequests) {
            this.setData({});
            if (!this.displayCalled) {
                this.requested = false;
                this.responseHandled = false
            }
        } else {
            this.requested = false;
            this.request()
        }
    };
    BannerHandler.prototype.getInt = function(int) {
        try {
            int = parseInt(int)
        } catch (e) {}
        if (typeof int == "number") {
            return int
        }
        return 0
    };
    BannerHandler.prototype._resizeZonetoContent = function(zoneId) {
        if (typeof zoneId == 'undefined') zoneId == 0;
        if (this.zones && this.zones[zoneId] && typeof this.zones[zoneId].w == "number" && typeof this.zones[zoneId].h == "number") {
            var width = Math.min(this.getInt(this.jq('#lsadvert-zid-' + zoneId).css('width')), this.zones[zoneId].w);
            var height = Math.min(this.getInt(this.jq('#lsadvert-zid-' + zoneId + ' > div').css('height')), this.zones[zoneId].h);
            this.zones[zoneId].width = width;
            this.zones[zoneId].height = height;
            this.jq('#lsadvert-zid-' + zoneId).css('width', width);
            this.jq('#lsadvert-zid-' + zoneId + ' > div').css('height', height);
            this.jq('#lsadvert-zid-' + zoneId + '-iframe').css({
                'width': width,
                'height': height
            })
        }
    };
    BannerHandler.prototype._callBannersLoadedCallback = function(zoneId) {
        for (var callbackIndex = 0; callbackIndex < this.bannersLoadedCallbacks.length; callbackIndex++) {
            if (Object.prototype.toString.call(this.bannersLoadedCallbacks[callbackIndex]) == '[object Function]') {
                this.bannersLoadedCallbacks[callbackIndex](zoneId)
            }
        }
    };
    BannerHandler.prototype.getContent = function(zoneId) {
        if (typeof zoneId == 'undefined') zoneId == 0;
        if (this.zones && this.zones[zoneId] && this.zones[zoneId].content) {
            var zoneContent = this.zones[zoneId].content.replace(/\[timestamp\]/g, Math.random());
            if ((this.jq.browser.msie || this.jq.browser.opera) && zoneContent.indexOf('<script') != -1) {
                var closeDelay = 700;
                if (this.jq.browser.version <= 8) closeDelay *= 8;
                if (this.jq.browser.opera) closeDelay = 10;
                zoneContent += "<script type=\"text/javascript\">setTimeout('document.close();', " + closeDelay + ");</s" + "cript>";
                if (this.jq.browser.opera) return "<script type=\"text/javascript\">setTimeout('document.write(unescape(\"" + escape("<body style=\"margin:0;padding:0;\">" + zoneContent + "</b" + "ody>") + "\"));',10);</s" + "cript>"
            }
            return "<body style=\"margin:0;padding:0;\">" + zoneContent + "</b" + "ody>"
        }
        return ''
    };
    BannerHandler.prototype._setIframeContent = function(zoneIfrm, zoneId, content) {
        var that = this;
        var iterator = this._setIframeContentCounter;
        setTimeout(function() {
            var zoneIfrmDoc = that._getIframeContentDocument(zoneIfrm);
            that.jq(zoneIfrm).css("visibility", "");
            if (that.noticeTextSelectors[zoneId]) {
                that._setNoticeTextToElement(that.noticeTextSelectors[zoneId]);
                for (var callbackIndex = 0; callbackIndex < that.setBackgroundCallbacks.length; callbackIndex++) {
                    if (Object.prototype.toString.call(that.setBackgroundCallbacks[callbackIndex]) == '[object Function]') {
                        that.setBackgroundCallbacks[callbackIndex]()
                    }
                }
            }
            if (!zoneIfrmDoc || typeof zoneIfrmDoc.document != 'object') {
                zoneIfrm.src = 'javascript:(function(){document.open();document.domain="' + document.domain + '";var c = window.parent.banners.getContent(' + zoneId + ');document.write(c);})()'
            } else {
                zoneIfrmDoc.document.open();
                zoneIfrmDoc.document.write(content)
            }
            if (!(banners.jq.browser.msie) || content.indexOf('<script') == -1) {
                zoneIfrmDoc.document.close()
            }
            if (that._setIframeContentCounter - 1 == iterator) {
                that.testAdBlock();
                if (that.displayedCallback !== null) {
                    that.displayedCallback()
                }
            }
        }, this._setIframeContentTimeout * this._setIframeContentCounter++)
    };
    BannerHandler.prototype._getIframeContentDocument = function(iframe) {
        if (iframe) {
            if (iframe.contentWindow) {
                return iframe.contentWindow
            } else if (iframe.contentDocument) {
                if (iframe.contentDocument.document) {
                    return iframe.contentDocument.document
                }
                return iframe.contentDocument
            }
        }
        return null
    };
    BannerHandler.prototype._setNoticeTextToElement = function(element_selector) {
        this.jq(element_selector).append('<span class="advert-bgr-notice">' + this.noticeText + '</span>')
    };
    BannerHandler.prototype._prepareBackup = function() {
        if (this.verbose) clog('PrepareBackup');
        if (this._backupPrepaired) return;
        this._backupPrepaired = true;
        if (typeof banners_backup_callbacks != "undefined") {
            var callbacks = banners_backup_callbacks;
            this.jq.getScript("//static.criteo.net/js/ld/publishertag.js", function() {
                for (var index = 0; index < callbacks.length; index++) {
                    var callback = callbacks[index];
                    if (typeof callback == 'function') callback()
                }
            })
        }
    };
    BannerHandler.prototype.display = function() {
        this.displayCalled = true;
        this._prepareBackup();
        if (this.verbose) clog('DisplayCalled');
        if (this.responseHandled && !this.displayed) {
            this.displayed = true;
            var zoneId = 0;
            var backgroundSet = function() {};
            var keys = [];
            for (var i in this.zones) {
                if (this.zones.hasOwnProperty(i)) {
                    keys.push(i)
                }
            }
            if (!keys.length) {
                this.adBlocked = true;
                if (this.adBlockedCallback !== null) {
                    this.adBlockedCallback(this.adBlocked, jQuery.browser)
                }
            }
            var isMobileOrTablet = this.getClientType() == this.clientTypes.mobile || this.getClientType() == this.clientTypes.tablet;
            var backgroundId = "";
            if (typeof cjs != 'undefined' && typeof cjs.dic != 'undefined' && cjs.dic.get('util_config').get('app', 'banner', 'zone_list', 'background', 'id') != null) {
                backgroundId = cjs.dic.get('util_config').get('app', 'banner', 'zone_list', 'background', 'id')
            }
            for (var index = 0; index < this.zoneIds.length; index++) {
                zoneId = this.zoneIds[index];
                if (isMobileOrTablet && backgroundId == zoneId) {
                    this.jq("#" + this.idPrefix + zoneId).remove();
                    continue
                }
                if (this.zones[zoneId] && this.zones[zoneId].content) {
                    var clickUrl = null;
                    if (this.zones[zoneId].id) {
                        clickUrl = 'https://ads.livesportmedia.eu/www/delivery/ck.php?oaparams=2__bannerid=' + this.zones[zoneId].id + '__zoneid=' + zoneId
                    }
                    if (this.elementsBackgrounds[zoneId]) {
                        backgroundSet = function(banners, zoneId, click) {
                            return function() {
                                for (var callbackIndex = 0; callbackIndex < banners.setBackgroundCallbacks.length; callbackIndex++) {
                                    if (Object.prototype.toString.call(banners.setBackgroundCallbacks[callbackIndex]) == '[object Function]') {
                                        banners.setBackgroundCallbacks[callbackIndex]()
                                    }
                                }
                                var bgrItem = banners.elementsBackgrounds[zoneId];
                                var backgroundElement = bgrItem.element;
                                var background = banners.jq('<div>' + banners.zones[zoneId].content).find('img').first().attr('src');
                                banners.jq(backgroundElement).css('background-image', 'url(' + background + ')').css('background-position', '49.9% 0').css('background-repeat', 'repeat-x').css('cursor', 'pointer');
                                if (bgrItem.fixed) {
                                    banners.jq(backgroundElement).css('background-attachment', 'fixed')
                                }
                                for (var callbackIndex = 0; callbackIndex < banners.afterAdBackgroundElementCreatedCallbacks.length; callbackIndex++) {
                                    if (Object.prototype.toString.call(banners.afterAdBackgroundElementCreatedCallbacks[callbackIndex]) == '[object Function]') {
                                        banners.afterAdBackgroundElementCreatedCallbacks[callbackIndex](backgroundElement, banners)
                                    }
                                }
                                if (bgrItem.notice) {
                                    banners._setNoticeTextToElement(bgrItem.notice)
                                }
                                if (banners.jq.browser.msie) {
                                    banners.jq(backgroundElement).css('cursor', 'hand')
                                }
                                banners.jq('head').append('<style type="text/css">' + backgroundElement + ' > * {cursor: default;}</style>');
                                if (click) {
                                    var clickableElement = banners.jq(backgroundElement).get(0);
                                    if (clickableElement) {
                                        banners.jq(clickableElement).click(function(_clickUrl, _clickableElement) {
                                            return function(e) {
                                                if (typeof e != 'undefined' && e.target == _clickableElement) {
                                                    window.open(_clickUrl, 'banner')
                                                }
                                            }
                                        }(click, clickableElement))
                                    }
                                }
                            }
                        }(this, zoneId, clickUrl);
                        continue
                    }
                    if (this.zones[zoneId].id) {
                        this.jq("#" + this.idPrefix + zoneId + " div.adscontent").parent().prepend('<div class="adsclick" style="width: 100% !important; height: 100% !important" onclick="window.open(\'' + clickUrl + '\', \'banner\')"></div>')
                    }
                    var zoneIfrm = this.jq("#" + this.idPrefix + zoneId + "-iframe")[0];
                    if (zoneIfrm) {
                        var content = this.getContent(zoneId);
                        this._setIframeContent(zoneIfrm, zoneId, content)
                    }
                } else {
                    this.hideZone(zoneId)
                }
            }
            setTimeout(backgroundSet, this._backgroundSetTimeout + this._setIframeContentTimeout * (this._setIframeContentCounter - 1));
            if (this.verbose) clog('Display')
        } else if (!this.requested) {
            this.request()
        }
    };
    BannerHandler.prototype.hideZone = function(zoneId) {
        this.jq("#" + this.idPrefix + zoneId).hide()
    };
    BannerHandler.prototype.testAdBlockElement = function(element) {
        return element.is(':hidden') || element.css('visibility') == 'hidden' || element.width() == 0 || element.height() == 0
    };
    BannerHandler.prototype.testAdBlock = function() {
        if (this.requested) {
            var that = this;
            setTimeout(function() {
                that.adBlocked = !that.responseHandled;
                if (!that.adBlocked) {
                    for (var i in that.zoneIds) {
                        var zoneIframe = that.jq("#" + that.idPrefix + that.zoneIds[i] + '-iframe');
                        if (typeof that.zones[that.zoneIds[i]] != 'undefined') {
                            if (zoneIframe.length == 0 || that.testAdBlockElement(zoneIframe)) {
                                that.adBlocked = true;
                                break
                            }
                            var zoneIframeObj = zoneIframe.get(0);
                            var zoneIframeDoc = (zoneIframeObj.contentWindow) ? zoneIframeObj.contentWindow : (zoneIframeObj.contentDocument.document) ? zoneIframeObj.contentDocument.document : zoneIframeObj.contentDocument;
                            if (typeof zoneIframeDoc.document != 'object') {
                                that.adBlocked = true;
                                break
                            } else {
                                var body = that.jq(zoneIframeDoc.document).find('body');
                                if (body.html().trim() == '' || that.testAdBlockElement(body)) {
                                    that.adBlocked = true;
                                    break
                                }
                            }
                        }
                    }
                } else {
                    that.adBlocked = true
                }
                if (that.adBlockedCallback !== null) {
                    that.adBlockedCallback(that.adBlocked, that.getBrowser())
                }
            }, 2000)
        }
    };
    BannerHandler.prototype.uaMatch = function(ua) {
        ua = ua.toLowerCase();
        var match = /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
        return {
            browser: match[1] || "",
            version: match[2] || "0"
        }
    };
    BannerHandler.prototype.getBrowser = function() {
        var matched = this.uaMatch(navigator.userAgent);
        var browser = {};
        if (matched.browser) {
            browser[matched.browser] = true;
            browser.version = matched.version
        }
        if (browser.chrome) {
            browser.webkit = true
        } else if (browser.webkit) {
            browser.safari = true
        }
        return browser
    };
    return BannerHandler
})();

function create_ofcontent(element_id) {
    var dof = clientStorage.get('fs_of');
    if (typeof of_list[dof] !== 'undefined') {
        of_current = dof
    } else {
        set_of(of_current, element_id);
        return
    }
    document.getElementById('ofactual').innerHTML = of_list[of_current]['name_title'];
    var html = new Array();
    html.push('<ul id="ofcontent">');
    var i = 0;
    for (var of_index in of_list) {
        if (of_index == of_current) {
            continue
        }
        html.push('<li', (i % 2 ? ' class="even"' : ''), '><a href="#" onclick="set_of(\'' + of_index.substring(0, 2).toLowerCase() + '\', \'' + element_id + '\')">', of_list[of_index]['name_title'], '</a></li>');
        i++
    }
    html.push('</ul>');
    document.getElementById(element_id).innerHTML = html.join('')
}
function set_of(format, element_id) {
    if (of_list[format] !== 'undefined') {
        switch_odd_format(format)
    }
    create_ofcontent(element_id)
}
function refresh_alert_check_on() {
    if (!inside) {
        inside = !!clientStorage.get('LS_refresh_inside')
    }
    if (clientStorage.get_from_session('LS_refresh_web') == window.location && inside) {
        window.count = parseInt(clientStorage.get_from_session('LS_refresh_count')) + 1;
        clientStorage.store_in_session('LS_refresh_count', window.count, 60)
    } else {
        clientStorage.store_in_session('LS_refresh_count', 0, 60)
    }
    clientStorage.store_in_session('LS_refresh_web', window.location, 30)
}
document.disable_refresh_check_once = function() {
    dont_check_me = true
};
document.refresh_alert = function(warning) {
    if (checked) {
        return
    }
    checked = true;
    if (typeof window.count == 'undefined') {
        window.count = 0
    }
    if (window.count > 1) {
        alert("The scores refresh automatically without delay.\nYou don\'t need to refresh the page.")
    }
    window.count = 0
};
window.onunload = function(e) {
    if (!dont_check_me) {
        clientStorage.store('LS_refresh_inside', 1, 3)
    } else {
        clientStorage.drop('LS_refresh_inside')
    }
};
var inside = false;
var check_count = 0;
var checked = false;
var dont_check_me = false;
window.open_help = function(url) {
    var id = Math.floor(Math.random() * 1000);
    return this.open(url, id, 'hotkeys=no, resizable=no, toolbar=no, status=no, dependent=yes, scrollbars=1, width=520, height=500')
};

function display_hide_element(id) {
    var element = document.getElementById(id);
    if (element) {
        if (element.style.display == 'block') {
            element.style.display = 'none'
        } else {
            element.style.display = 'block'
        }
    }
}
function display_element(id) {
    var element = document.getElementById(id);
    if (element) {
        element.style.display = 'block'
    }
}
function hide_element(id) {
    var element = document.getElementById(id);
    if (element) {
        element.style.display = 'none'
    }
}
function show_media(url, width, height) {
    var resizable = false;
    if (!width && !height) {
        width = 400;
        height = 400;
        var resizable = true
    } else {
        width = !width ? 300 : width + 10;
        height = !height ? 300 : height + 10;
        if (width < 100) {
            width = 100
        }
    }
    if (document.all) {
        var x = Math.round(window.screen.availWidth / 2 - width / 2);
        var y = Math.round(window.screen.availHeight / 2 - height / 2);
        if (x < 0) {
            x = 10
        }
        if (y < 0) {
            y = 10
        }
    } else {
        var x = 200,
            y = 200
    }
    var features = 'height=' + height + ', left=' + x + ', location=no, menubar=no, resizable=' + (resizable ? 'yes' : 'no') + ', ' + 'scrollbars=no, status=no, titlebar=no, toolbar=no, top=' + y + ', width=' + width;
    window.open(url, '_blank', features)
}
function tooltip(div_input_id, ident, disable) {
    this.max_width = 400;
    this.is_init = false;
    this.div = null;
    this.div_content = null;
    this.span_parent = null;
    this.td_parent = null;
    this.tr_parent = null;
    this.span_parent_title = '';
    this.td_parent_title = '';
    this.tr_parent_title = '';
    this.isDisabled = disable || false;
    this.div_id = (typeof div_input_id == 'undefined') ? null : div_input_id;
    this.ident = (typeof ident == 'undefined') ? 1 : ident;
    this.container_id = 'tooltip-' + this.ident;
    this.defaultZIndex = '999';
    this.currentZIndex = this.defaultZIndex;
    this.hideCallback = function() {};
    this.init = function() {
        if (this.is_init || this.isDisabled) {
            return
        }
        if (this.createTooltipElement()) {
            this.is_init = true
        }
    };
    this.show = function(elm, elm_event, opposite_direction, border_elm) {
        if (!this.is_init || this.isDisabled) {
            return
        }
        var title = elm.title;
        var title_length = title.length;
        title = title.replace(/\[b\]/i, '<strong>');
        title = title.replace(/\[\/b\]/i, '</strong>');
        title = title.replace(/\[br\]/ig, '<br />');
        title = title.replace(/\[u\]/i, ' &raquo; ');
        title = title.replace(/\[d\]/i, ' &raquo; ');
        title = title.replace(/\n/g, "<br \/>");
        title = title.replace(/\\'/g, '\'');
        if (title_length > 0) {
            var x = parseInt(elm_event.clientX);
            var y = parseInt(elm_event.clientY);
            if (typeof window.pageYOffset != 'undefined') {
                var window_top = window.pageYOffset;
                var window_left = window.pageXOffset
            } else {
                var window_top = document.documentElement.scrollTop;
                var window_left = document.documentElement.scrollLeft
            }
            this.div_content.innerHTML = title;
            elm.title = '';
            this.span_parent = elm.parentNode;
            this.span_parent_title = this.span_parent.title;
            this.span_parent.title = '';
            this.td_parent = this.span_parent.parentNode;
            this.td_parent_title = this.td_parent.title;
            this.td_parent.title = '';
            this.tr_parent = this.td_parent.parentNode;
            this.tr_parent_title = this.tr_parent.title;
            this.tr_parent.title = '';
            this.div.style.display = 'block';
            if (this.div.style.width = 'auto') {
                this.div.style.width = this.div.offsetWidth + 'px'
            }
            var div_width = this.div.offsetWidth;
            if (div_width > this.max_width) {
                div_width = this.max_width;
                this.div.style.width = this.max_width + 'px';
                this.div_content.style.whiteSpace = 'normal'
            }
            if (typeof opposite_direction == 'undefined') {
                opposite_direction = (($(window).width() / 2 - x) > 0)
            } else if (typeof opposite_direction != 'undefined' && opposite_direction == null && typeof border_elm != 'undefined') {
                var fence = $("div#" + border_elm);
                opposite_direction = true;
                if (x + div_width > fence.width()) {
                    opposite_direction = false
                }
            }
            if (opposite_direction == true) {
                $(this.div).addClass("revert")
            }
            document.getElementById(this.container_id + '-lt').style.height = this.div.offsetHeight + 'px';
            document.getElementById(this.container_id + '-rt').style.height = this.div.offsetHeight + 'px';
            document.getElementById(this.container_id + '-cb').style.width = this.div.offsetWidth + 'px';
            this.div.style.zIndex = this.getZIndex();
            var tooltip_indent_r = (project_type_name === '_fs' || project_type_name === '_diretta-2' ? 11 : 10);
            var tooltip_indent_l = (project_type_name === '_fs' || project_type_name === '_diretta-2' ? 11 : 10);
            var tooltip_indent_t = 10;
            var $elm = $(elm);
            var elm_coords = $elm.offset();
            var elm_width = $elm.width();
            var elm_height = $elm.height();
            var pos_top = (elm_coords.top + tooltip_indent_t + elm_height);
            var elm_midpoint = (elm_coords.left ? Math.floor(elm_width / 2) : Math.ceil(elm_width / 2));
            var pos_left1 = (elm_coords.left + elm_midpoint - tooltip_indent_r);
            var pos_left2 = (elm_coords.left - div_width + Math.ceil(elm_width / 2) + tooltip_indent_l);
            var pos_left = opposite_direction ? pos_left1 : pos_left2;
            this.div.title = '';
            this.div.style.top = pos_top + 'px';
            this.div.style.left = pos_left + 'px'
        }
    };
    this.hide = function(elm) {
        if (!this.is_init || this.isDisabled) {
            return
        }
        if (typeof this.hideCallback === "function") {
            this.hideCallback()
        }
        var title = this.div_content.innerHTML.replace(/<br( \/){0,1}>/gi, "\n");
        title = title.replace(/\<strong\>/i, '[b]');
        title = title.replace(/\<\/strong\>/i, '[/b]');
        if (title.length > 0) {
            if (elm.title == '') {
                elm.title = title
            }
            this.div.style.display = 'none';
            this.div.style.width = 'auto';
            this.div_content.innerHTML = '';
            $(this.div).removeClass("revert");
            if (this.span_parent !== null && this.span_parent.title == '') {
                this.span_parent.title = this.span_parent_title
            }
            if (this.td_parent !== null && this.td_parent.title == '') {
                this.td_parent.title = this.td_parent_title
            }
            if (this.tr_parent !== null && this.tr_parent.title == '') {
                this.tr_parent.title = this.tr_parent_title
            }
        }
    };
    this.hide_all = function() {
        if (!this.is_init || this.isDisabled) {
            return
        }
        this.div.style.display = 'none';
        this.div.style.width = 'auto';
        $(this.div).removeClass("revert")
    };
    this.set_max_width = function(width) {
        this.max_width = width - 0
    };
    this.getTooltipWrapper = function() {
        return this.div_id ? document.getElementById(this.div_id) : document.getElementsByTagName('body')[0]
    };
    this.createTooltipElement = function() {
        this.div = document.getElementById(this.container_id);
        if (this.div !== null) {
            this.div_content = this.div.getElementsByTagName('span')[0];
            return true
        }
        var wrapper = this.getTooltipWrapper();
        if (!wrapper) {
            return false
        }
        this.div = document.createElement('div');
        $(this.div).attr({
            'id': this.container_id,
            'class': 'tooltip'
        });
        this.div_content = document.createElement('span');
        this.div.appendChild(this.div_content);
        var div_lt = document.createElement('div');
        $(div_lt).attr({
            'id': this.container_id + '-lt',
            'class': 'tooltip-lt'
        });
        this.div.appendChild(div_lt);
        var div_rt = document.createElement('div');
        $(div_rt).attr({
            'id': this.container_id + '-rt',
            'class': 'tooltip-rt'
        });
        this.div.appendChild(div_rt);
        var div_lb = document.createElement('div');
        $(div_lb).attr({
            'id': this.container_id + '-lb',
            'class': 'tooltip-lb'
        });
        this.div.appendChild(div_lb);
        var div_cb = document.createElement('div');
        $(div_cb).attr({
            'id': this.container_id + '-cb',
            'class': 'tooltip-cb'
        });
        this.div.appendChild(div_cb);
        var div_rb = document.createElement('div');
        $(div_rb).attr({
            'id': this.container_id + '-rb',
            'class': 'tooltip-rb'
        });
        this.div.appendChild(div_rb);
        var div_rb = document.createElement('div');
        $(div_rb).attr({
            'id': this.container_id + '-ct',
            'class': 'tooltip-ct'
        });
        this.div.appendChild(div_rb);
        wrapper.appendChild(this.div);
        return true
    };
    this.setZIndex = function(value) {
        this.currentZIndex = value
    };
    this.getZIndex = function() {
        return this.currentZIndex
    };
    this.getDefaultZIndex = function() {
        return this.defaultZIndex
    };
    this.revertZIndex = function() {
        this.setZIndex(this.getDefaultZIndex())
    };
    this.setHideCallback = function(cb) {
        this.hideCallback = cb
    };
    this.init()
}
function share_button_get_uniqid() {
    return Math.round(+new Date() / 1000)
}
function share_button_get_url() {
    return location.href
}
function share_button_get_title() {
    return 'FlashScore.com: ' + document.title
}
function share_button_click(param) {
    var u = share_button_get_url();
    var t = share_button_get_title();
    var w_id = param + share_button_get_uniqid();
    switch (param) {
        case 'facebook':
            window.open('https://www.facebook.com/sharer.php?u=' + encodeURIComponent(u) + '&t=' + encodeURIComponent(t), w_id, 'toolbar=0,status=0,width=626,height=436');
            break;
        case 'twitter':
            var status = t + ' ' + u;
            window.open('http://twitter.com/?status=' + encodeURIComponent(status), w_id);
            break;
        case 'googleplus':
            window.open('https://plus.google.com/share?url=' + encodeURIComponent(u), w_id, 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');
            break;
        case 'vk':
            window.open('http://vk.com/share.php?url=' + encodeURIComponent(u), w_id, 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');
            break
    }
}
var TVCalendar = function() {
    return new function() {
        var self = this;
        var ready = false;
        var days = {};
        this.init = function() {
            this.browse_calendar();
            this.bind_actions();
            ready = true
        };
        this.prev_day = function() {
            document.location = days.prev_day.href
        };
        this.next_day = function() {
            document.location = days.next_day.href
        };
        this.browse_calendar = function() {
            var day_containers = $('.tv-gonet-bookmark #ifmenu-calendar-content li a');
            day_containers.each(function(i, el) {
                var el = $(el);
                if (el.hasClass('ifmenu-active')) {
                    typeof day_containers[i - 1] !== 'undefined' && (days.prev_day = day_containers[i - 1]);
                    typeof day_containers[i + 1] !== 'undefined' && (days.next_day = day_containers[i + 1]);
                    days.today = day_containers[i]
                }
            });
            $(".tv-gonet-bookmark #ifmenu-calendar").addClass(typeof days.prev_day === 'undefined' ? 'no-yesterday' : 'has-yesterday').addClass(typeof days.next_day === 'undefined' ? 'no-tomorrow' : 'has-tomorrow')
        };
        this.bind_actions = function() {
            $(".tv-gonet-bookmark .yesterday").bind('click', function(obj) {
                return function() {
                    obj.prev_day()
                }
            }(this));
            $(".tv-gonet-bookmark .tomorrow ").bind('click', function(obj) {
                return function() {
                    obj.next_day()
                }
            }(this))
        };
        $(function() {
            self.init()
        })
    }
}();

function event_tracking() {
    this.event_timeout = null;
    this.track_save = function(param1, param2) {
        if (typeof sport == 'undefined') {
            return
        }
        try {
            dataLayer.push({
                'event-name': param2,
                'event': param1,
                'event-sport': sport
            })
        } catch (err) {}
    };
    this.track_click = function(param1, param2) {
        this.track_save(param1, param2);
        return true
    };
    this.track_over = function(param1, param2) {
        if (this.event_timeout) {
            clearTimeout(this.event_timeout)
        }
        this.event_timeout = setTimeout("e_t.track_save('" + param1 + "', '" + param2 + "')", 500)
    };
    this.track_out = function() {
        if (this.event_timeout) {
            clearTimeout(this.event_timeout)
        }
    }
}
function core_update() {
    this.data_update = new Array();
    this.data_history = {};
    this.label_data_update = {};
    this.videoIconBlinkTimers = {}
}
core_update._tvTooltipTimeout = null;
core_update.prototype.element_defined = function(element_ident) {
    if (typeof this.data_update[element_ident] == 'undefined') {
        return false
    }
    return true
};
core_update.prototype.element_set = function(element_ident) {
    if (!this.element_defined(element_ident)) {
        this.data_update[element_ident] = new Array();
        this.data_history[element_ident] = {}
    }
};
core_update.prototype.element_history_get = function(element_ident) {
    return this.data_history[element_ident]
};
core_update.prototype.property_defined = function(element_ident, property_ident) {
    if (!this.element_defined(element_ident) || typeof this.data_update[element_ident][property_ident] == 'undefined') {
        return false
    }
    return true
};
core_update.prototype.did_property_changed = function(element_ident, property_ident, strictEqual) {
    if (typeof strictEqual === "undefined") {
        strictEqual = false
    }
    var changed = this.property_defined(element_ident, property_ident);
    if (strictEqual) {
        changed = changed && (this.data_update[element_ident][property_ident] !== this.data_history[element_ident][property_ident])
    } else {
        changed = changed && (this.data_update[element_ident][property_ident] != this.data_history[element_ident][property_ident])
    }
    return changed
};
core_update.prototype.did_property_increase = function(element_ident, property_ident) {
    if (!this.property_defined(element_ident, property_ident)) {
        return false
    }
    var current = this.data_update[element_ident][property_ident],
        history = this.data_history[element_ident][property_ident];
    return (null === history) || (current > history)
};
core_update.prototype.did_property_decrease = function(element_ident, property_ident) {
    if (!this.property_defined(element_ident, property_ident)) {
        return false
    }
    var current = this.data_update[element_ident][property_ident],
        history = this.data_history[element_ident][property_ident];
    return (null !== history) && (current < history)
};
core_update.prototype.get_property_history = function(element_ident, property_ident) {
    if (this.property_defined(element_ident, property_ident)) {
        return this.data_history[element_ident][property_ident]
    }
    return null
};
core_update.prototype.property_set = function(element_ident, property_ident, property_value, old_property_value) {
    this.element_set(element_ident);
    this.data_update[element_ident][property_ident] = property_value;
    if ('undefined' === typeof old_property_value) {
        old_property_value = property_value
    }
    this.data_history[element_ident][property_ident] = old_property_value
};
core_update.prototype.clear_update = function() {
    this.data_update = new Array()
};
core_update.prototype.strip_regenerate = function() {
    var strip_index = 0;
    var main_row = true;
    var tmp_id = null;
    $("div#fs tbody tr, table.base-table tbody tr:not(.show-more-last-matches,.season-row)").each(function() {
        var moveStripIndex = false;
        var $this = $(this);
        var r = /g_[0-9]{1,2}_[a-zA-Z0-9]{8,16}/;
        var isNoMatchRow = $this.find('td.no-match').length;
        var baseTable = $(this).closest('table').hasClass('base-table');
        if (baseTable && $(this).is(':hidden')) {
            return
        }
        if (r.test(this.id) || r.test(this.className) || isNoMatchRow || baseTable) {
            main_row = true
        } else {
            main_row = false
        }
        if (!main_row && $this.is('.row-link-more-games')) {
            moveStripIndex = true;
            main_row = true
        }
        if (strip_index % 2) {
            main_row ? $this.addClass('even') : $this.removeClass('even')
        } else {
            main_row ? $this.removeClass('even') : $this.addClass('even')
        }
        if (main_row) {
            strip_index++
        }
        if (moveStripIndex) {
            strip_index++
        }
    })
};
core_update.prototype.update = function(action) {
    this.updateTemplate();
    if (action && cjs.feedService[cjs.Feed_Service_LocalUpdate.NAME]) {
        cjs.feedService[cjs.Feed_Service_LocalUpdate.NAME].update(action)
    }
};
core_update.prototype.update_table_head = function(id) {
    $("thead tr#l_" + id + " span.matches-count").html(countCategoryGames(category, id))
};
core_update.prototype.icon_count = function(sportId) {
    var param_sport = SPORT_LIST_BY_ID[sportId];
    var tmp = ICON_LIST.length;
    if ($.inArray('shirt', ICON_LIST) !== -1 && $.inArray(param_sport, ['soccer', 'hockey', 'handball', 'basketball', 'cricket', 'aussie-rules', 'rugby-union', 'rugby-league', 'baseball', 'volleyball']) === -1) {
        tmp--
    }
    if (tmp < 0) {
        tmp = 0
    }
    return tmp
};
core_update.prototype.column_attr_list = function(id) {
    var attr = {
        css: {}
    };
    attr['css']['home'] = '';
    attr['css']['away'] = '';
    attr['css']['score'] = '';
    attr['css']['time'] = '';
    attr['css']['match_status'] = '';
    attr['css']['tournament'] = '';
    attr['css']['point_by_point'] = '';
    attr['css']['last_part_score'] = '';
    attr['css']['score_part'] = '';
    var eventItem, eventHolderProxy = cjs.dic.get('dataEventHolderProxy');
    if (eventHolderProxy.getHolder().hasItem(id) === false) {
        return attr
    }
    eventItem = eventHolderProxy.getHolder().getItem(id);
    var AC = eventItem.getValue('AC');
    var GH = eventItem.getValue('GH');
    var sport = eventItem.getValue('sport');
    var eventStages = cjs.dic.get('util_list').getEventStages();
    if (eventItem.isLive() || eventItem.isFinished() || eventItem.isToFinish() || eventItem.isDelayed()) {
        attr.css.score = ' bold';
        if (eventItem.isLive()) {
            if (!(sport == 'golf' && isNoDuelTournament(eventItem.getLeagueId()))) {
                attr.css.score += ' playing'
            }
            attr.css.time = ' time-playing';
            attr.css.match_status = ' playing';
            if (project_type_name == '_portable') {
                attr.css.point_by_point = ' playing';
                attr.css.last_part_score = ' playing';
                attr.css.home += ' playing';
                attr.css.away += ' playing'
            }
        } else {
            if (AC == eventStages.PENDING) {
                attr.css.score += ' playing';
                attr.css.match_status = ' playing'
            }
        }
        if (AC == eventStages.POSTPONED || AC == eventStages.ABANDONED || AC == eventStages.CANCELED) {
            attr.css.time = ' canceled'
        }
        if (eventItem.isOddsHomeWinner()) {
            attr.css.home = ' bold'
        } else if (eventItem.isOddsAwayWinner()) {
            attr.css.away = ' bold'
        }
    }
    if (typeof GH != 'undefined' && /^[0-9]{3,}$/i.test(GH)) {
        attr.css.hole = 'hole_start_time'
    }
    if (eventItem.getValue('sport') === 'golf') {
        var participantHoleInfo = eventItem.getParticipantHoleInfo();
        if (eventItem.getParticipantStatus()) {
            attr.css.score += ' player_cut_off';
            attr.css.home += ' player_cut_off';
            attr.css.hole += ' player_cut_off'
        } else if (eventItem.isLive() && eventItem.isParticipantLive()) {
            attr.css.hole += ' playing';
            attr.css.score += ' playing'
        }
    }
    return attr
};
core_update.prototype.colgroup = function(param_sport_id, param_labl_id) {
    var leagueHolder = cjs.dic.get('dataLeagueHolderProxy').getHolder();
    var sportDefinition = cjs.template.getTemplateDefinitionForLabel(parseInt(param_sport_id), leagueHolder.getItem(param_labl_id).getValue('ZC'));
    var colGroupHtml = sportDefinition.getHeaderColumnsHtmlTemplate();
    return colGroupHtml
};
core_update.prototype.add_match = function(table_type, match_id) {
    if (this.filterIsDenied(match_id)) {
        return false
    }
    var tbody = this.createTbody(table_type, match_id);
    if (!tbody) {
        return false
    }
    if (this.leagueIsCollapsed(match_id)) {
        return true
    }
    if (this.matchIsInTable(tbody, match_id)) {
        return false
    }
    this.addMatchFromTemplate(table_type, tbody, match_id, sub_category);
    return true
};
core_update.prototype.add_table = function(table_type, match_id) {
    var dataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var eventItem = dataHolder.getItem(match_id);
    var leagueItem = eventItem.getLeague();
    var labl_id = leagueItem.getId();
    var table = this.get_table(table_type, match_id);
    if (typeof table == 'undefined') {
        var div_is_new = false;
        var previous_labl_id = null;
        var table = document.createElement('table');
        var tbody = document.createElement('tbody');
        var div = $("div#fs div." + table_type);
        var sportId = parseInt(eventItem.getSportId());
        var sportName = eventItem.getValue('sport');
        if (typeof div == 'undefined') {
            div = document.createElement('div');
            div_is_new = true
        }
        var mygames_sport_header = '';
        if (category == 5 || cjs.Util.Page.isMixed() || cjs.Util.Page.isParent()) {
            if (!$("div#fs div.sport-label." + sportName).get(0)) {
                var sportHeaderJqObject = cjs.template.createSportHeader(sportId, eventItem.getValue('original_id'), TXT_SPORT[sportName]['name']);
                mygames_sport_header = sportHeaderJqObject.html()
            }
        }
        if (!div_is_new) {
            var tmp_labl_list = new Array();
            var actual_labl_id = null;
            var dataHandler = cjs.dic.get('dataEventHolderProxy').getHandler();
            dataHandler.each(function(index, id) {
                if (actual_labl_id == labl_id) {
                    return false
                }
                var leagueId = this.getItem(id).getLeague().getId();
                if (actual_labl_id != leagueId) {
                    tmp_labl_list.push(actual_labl_id)
                }
                actual_labl_id = leagueId
            });
            var tmp_labl_list_length = tmp_labl_list.length;
            if (tmp_labl_list_length > 0) {
                tmp_labl_list.reverse();
                for (i = 0; i < tmp_labl_list_length; i++) {
                    if ($("div#fs div." + table_type + " thead tr.l_" + tmp_labl_list[i]).length > 0) {
                        previous_labl_id = "l_" + tmp_labl_list[i];
                        break
                    }
                }
            }
        }
        if (ie) {
            $(table).attr({
                cellspacing: 0,
                cellpadding: 0
            })
        }
        var gameHeader;
        var thead = $('<thead>');
        var gameHeaderHtml = cjs.templateHeaderDataProxy.getFilledHeader(sportId, labl_id);
        thead.append(gameHeaderHtml);
        if (project_type_name !== '_portable') {
            $(table).append(this.colgroup(sportId, labl_id))
        }
        $(table).append(thead);
        $(table).append(tbody);
        $(table).attr("class", sportName);
        if (isNoDuelTournament(labl_id)) {
            $(table).addClass('no-duel')
        }
        if (sub_category == 2 || sub_category == 3) {
            $(table).addClass('odds')
        }
        if (div_is_new) {
            $(div).attr("class", table_type);
            $(div).append(mygames_sport_header);
            $(div).append(table);
            $(div).append('<div class="table-line-bottom" />');
            $("div#fs").append(div)
        } else {
            if (0) {
                $(div).find("table.table-link-more-games").remove()
            }
            if (previous_labl_id == null) {
                if ($("div#fs div." + table_type + " table").length == 0) {
                    $(div).find("div.no-match-found").remove();
                    var copyright = $("div#fs div." + table_type + " .copyright");
                    if (copyright) {
                        $(copyright).remove()
                    }
                    $(div).append(mygames_sport_header);
                    $(div).append(table);
                    $(div).append('<div class="table-line-bottom" />');
                    if (copyright) {
                        $(div).append(copyright)
                    }
                } else {
                    var item = $(div).children().get(0);
                    if ($(item).is("div.sport-label." + sportName) || $(item).is("div#odds-format")) {
                        $(item).after(table)
                    } else {
                        $(div).prepend(table);
                        $(div).prepend(mygames_sport_header)
                    }
                }
            } else {
                var elm = this.findTable(table_type, null, previous_labl_id);
                var $elmNext = $(elm).next();
                if ($elmNext.is('table.noduel-link, table.noduel-info')) {
                    elm = $elmNext
                }
                $(elm).after(mygames_sport_header);
                if ($(elm).next().is("div.sport-label." + sportName)) {
                    $(elm).next().after(table)
                } else {
                    $(elm).after(table)
                }
            }
        }
        if (category == 0 && cjs.Util.Page.isMixed() && 0 && sudate == 0) {
            $(div).find('div.sport-label').each(function(i, e) {
                var el = $(e);
                var elClass = el.attr('class').split(' ');
                if (typeof elClass[1] == 'undefined') {
                    return
                }
                var t = '<table class="table-link-more-games ' + elClass[1] + '"' + (ie ? ' cellspacing="0" cellpadding="0"' : '') + '>';
                t += '<tbody><tr><td><a href="' + SPORT_URL_BY_ID[SPORT_LIST[elClass[1]]] + '">' + cjs.Util.trans('TRANS_CLICK_FOR_MORE_SPORT_GAMES').replace('[sport]', TXT_SPORT[elClass[1]]['name'].toUpperCase()) + ' (<span id="cfm-sports-' + SPORT_LIST[elClass[1]] + '"></span>)</a></td></tr></tbody>';
                t += '</table>';
                $(e).nextAll('div:first').before(t)
            });
            l.sports_count.displayed_sports_count_in_link = false;
            l.sports_count.show_sports_count_in_link()
        }
        var html = [];
        add_show_all_games_link(html, labl_id);
        if (html.length) {
            $(table).after(html.join(''))
        }
        return true
    }
    return false
};
core_update.prototype.add_full_table = function(table_type, league_id) {
    var match_added = false;
    var dataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var dataHandler = cjs.dic.get('dataEventHolderProxy').getHandler();
    dataHandler.each((function(that, category, sub_category) {
        return function(index, id) {
            var eventItem = this.getItem(id);
            var leagueItem = eventItem.getLeague();
            if (leagueItem.getId() != league_id) {
                return
            }
            if (country == null && !leagueItem.getValue('display')) {
                that.add_table(table_type, id);
                return
            }
            var AB = eventItem.getValue('AB');
            var AI = eventItem.getValue('AI');
            if (!isGameHidden(id) && (category == 0 || (category == 1 && AI == 'y') || (category == 2 && AB == 3) || (category == 3 && AB == 1) || ((sub_category == 2 || sub_category == 3) && cjs.myLeagues.isEditable()) || (category == 5 && cjs.mygames.check(id)))) {
                that.add_match(table_type, id);
                match_added = true;
                cjs.scoreHighlighter.display(id.split("_")[2])
            }
        }
    })(this, category, sub_category));
    if (match_added) {
        this.strip_regenerate()
    }
};
core_update.prototype.remove_collapsed_tables_hack = function() {
    var league_on_page = [];
    var dataHandler = cjs.dic.get('dataEventHolderProxy').getHandler();
    dataHandler.each(function(index, id) {
        var eventItem = this.getItem(id);
        var leagueItem = eventItem.getLeague();
        var AI = eventItem.getValue('AI');
        var AB = eventItem.getValue('AB');
        if (category == 0 || (category == 1 && AI == 'y') || (category == 2 && AB == 3) || (category == 3 && AB == 1) || (category == 5 && cjs.mygames.check(id))) {
            league_on_page[leagueItem.getId()] = true
        }
    });
    var that = this;
    $("div#fs thead tr").each(function() {
        var id = getLeagueIdFromClassName($(this).attr('class'));
        if (id != null && typeof league_on_page[id] == 'undefined') {
            that.remove_table('table-main', null, false, id)
        }
    })
};
core_update.prototype.remove_match = function(table_type, match_id, remove_whole_table) {
    var tr0 = $("div#fs div." + table_type + " tbody tr#" + match_id).get(0);
    if (tr0) {
        var tbody = $(tr0).parent();
        var games_count = $(tbody).find('tr[id^="g_"]').length;
        tt.hide_all();
        if (games_count < 2) {
            remove_whole_table = (remove_whole_table ? true : false);
            return this.remove_table(table_type, match_id, remove_whole_table)
        } else {
            this.removeMatch(match_id, sub_category);
            $(tbody).find("tr:first").addClass("tr-first");
            return true
        }
    }
    return false
};
core_update.prototype.remove_table = function(table_type, match_id, remove_whole_table, league_id, remove_by_table_type) {
    var eventDataHolder;
    match_id = (typeof match_id == 'undefined' ? null : match_id);
    league_id = (typeof league_id == 'undefined' ? null : league_id);
    remove_whole_table = (remove_whole_table ? true : false);
    remove_by_table_type = (typeof remove_by_table_type == 'undefined' || remove_by_table_type ? true : false);
    var table = null;
    if (match_id != null) {
        if (league_id == null) {
            eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
            league_id = 'l_' + eventDataHolder.getEvent(match_id).getLeague().getId()
        }
        table = this.findTableForMatch(match_id).get(0)
    } else if (league_id != null) {
        table = this.findTable(table_type, null, league_id).get(0)
    }
    if (remove_by_table_type && (typeof table == 'undefined' || table == null)) {
        table = $("div#fs div." + table_type + " table")
    }
    if (table) {
        $(table).next('table.noduel-link, table.noduel-info').remove();
        if (remove_whole_table) {
            $(table).parent().remove()
        } else {
            if (category == 5 || cjs.Util.Page.isMixed() || cjs.Util.Page.isParent()) {
                var sport_decor = $(table).prev();
                var sport_table_next = $(table).next();
                if (sport_decor.is(".sport-label") && (!sport_table_next.is("table") || sport_table_next.is('table.table-link-more-games'))) {
                    if (sport_table_next.is('.table-link-more-games')) {
                        sport_table_next.remove()
                    }
                    var groupLabelDecor = $(sport_decor).prev('.group-label');
                    if (groupLabelDecor.length) {
                        $(table).next('div.table-line-bottom').remove();
                        if ($(table).next('div.sport-label').length == 0) {
                            groupLabelDecor.remove()
                        }
                    }
                    $(sport_decor).remove()
                }
            }
            $(table).remove();
            if ($("div#fs div." + table_type + " table").length == 0) {
                var cat = category;
                switch (table_type) {
                    case 'table-scheduled':
                        cat = 3;
                        break;
                    case 'table-result':
                        cat = 2;
                        break;
                    default:
                        break
                }
                $("div#fs div." + table_type + " div.table-line-bottom").before(no_match_found(cat));
                $("div#fs div." + table_type + " div.table-line-bottom").remove()
            }
        }
        this.finishRemovingTable(table_type);
        return true
    }
    return false
};
core_update.prototype.finishRemovingTable = function(tableType) {};
core_update.prototype.findTable = function(tableType, matchId, lablId) {
    var eventDataHolder;
    if (matchId || !lablId) {
        eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
        lablId = 'l_' + eventDataHolder.getEvent(matchId).getLeague().getId()
    }
    if (lablId.indexOf('l_') !== 0) {
        lablId = 'l_' + lablId
    }
    return $("div#fs div." + tableType + " thead tr." + lablId).parents("table")
};
core_update.prototype.findTableForMatch = function(matchId) {
    return $("tr#" + matchId).closest('table')
};
core_update.prototype.get_table = function(table_type, match_id) {
    return this.findTable(table_type, match_id).get(0)
};
core_update.prototype.get_tbody = function(table_type, match_id) {
    return this.findTable(table_type, match_id).find("tbody").get(0)
};
core_update.prototype.register_actions = function() {
    var border_element = '';
    var that = this;
    if (typeof(cjs.myLeagues) != 'undefined' && cjs.myLeagues.isEditable()) {
        cjs.myLeagues.delegateTooltips()
    }
    if (typeof cjs.myTeams != 'undefined') {
        cjs.myTeams.delegateTooltips()
    }
    if (typeof cjs.mygamesGroups != 'undefined') {
        cjs.mygamesGroups.registerEvents()
    }
    cjs.dic.get('Helper_CyclingJersey').delegateTooltips();
    cjs.dic.get('Helper_Rankings').delegateTooltips();
    $("div#fs, div#fs-results, div#fs-summary-results, div#fs-fixtures, div#fs-summary-fixtures, div#tournament-page-archiv, div#tournament-page-participants, div#ranking-table").delegate('tbody tr[id], tbody tr[class*=g_], tbody tr[class*=x_], tbody tr[class*=y_], tbody tr.rank-row', "mouseenter", function() {
        tr_over($(this))
    });
    $("div#fs, div#fs-results, div#fs-summary-results, div#fs-fixtures, div#fs-summary-fixtures, div#tournament-page-archiv, div#tournament-page-participants, div#ranking-table").delegate('tbody tr[id], tbody tr[class*=g_], tbody tr[class*=x_], tbody tr[class*=y_], tbody tr.rank-row', "mouseleave", function() {
        tr_out($(this))
    });
    $("div#fs, div#fs-results, div#fs-summary-results, div#fs-fixtures, div#fs-summary-fixtures, div#last-matches").delegate("table:not(.table-link-more-games, .table-golf-noduel-info) tbody tr:not(.blank-line, .event_round) td:not(.icons,.kx,.best-of,.comparison)", "mouseenter", function() {
        var id = $(this).parents("tr").get(0).id;
        if (!id) {
            id = getIdFromClass($(this).parents("tr").attr('class'))
        }
        if (!id) {
            return
        }
        var sportId = parseInt(id.split('_')[1]);
        if (cjs.dic.get('util_sport').hasDisabledDetail(sportId)) {
            return
        }
        if ($(this).find('span.final_result_only').length == 0) {
            if (sub_category == 3 && !odds_betslip) {
                $(this).attr("title", cjs.dic.get('util_trans')('TRANS_ODDS_CLICK_TO_BET_MATCH', [cjs.dic.get('Helper_Bookmaker').getName(cjs.geoIP)]))
            } else {
                if (cjs.Util.Sport.isRacingSport(sport_id)) {
                    var trans = 'TRANS_CLICK_FOR_DETAIL'
                } else if ($(this).closest('table').hasClass('no-duel')) {
                    var trans = 'TRANS_CLICK_FOR_PLAYER_CARD'
                } else {
                    var trans = 'TRANS_CLICK_FOR_MATCH_DETAIL'
                }
                $(this).attr("title", cjs.Util.trans(trans))
            }
        }
    });
    $("div#fs").delegate('thead tr.league td.project-bonus span', 'click', function(e) {
        var utilEnviroment = cjs.dic.get('utilEnviroment');
        var parentId = getLeagueIdFromClassName($(this).closest('tr').attr('class'));
        if (parentId) {
            var sportId = parentId.split('_')[0];
            if (typeof sportId != 'undefined') {
                var urlParams = {};
                urlParams.from = 'iframe-odds-bonus';
                urlParams.sport = sportId;
                var externalProjects = cjs.dic.get('util_config').get('app', 'odds', 'external_projects');
                if (externalProjects && externalProjects[utilEnviroment.getConfigHashId()]) {
                    urlParams.externalProjectId = externalProjects[utilEnviroment.getConfigHashId()]
                }
                var oddsBonus = cjs.dic.get('Feed_Content_OddsBonus');
                var bookmakerId = oddsBonus.getMainBookmakerId();
                var url = that.createBookmakerLink(urlParams, bookmakerId);
                window.open(url)
            }
        }
    });
    $("div#fs, div#fs-results, div#fs-summary-results").delegate("tbody tr[id] span.dw-icon", "click", function(e) {
        if (!e) {
            var e = window.event
        }
        e.cancelBubble = true;
        if (e.stopPropagation) {
            e.stopPropagation()
        }
    });
    $("div#fs, div#fs-results, div#fs-summary-results, div#fs-fixtures, div#fs-summary-fixtures, div#last-matches").delegate("tbody tr[id] td:not(.icons,.comparison,.kx,.best-of, .acronym), tbody tr[class*=g_] td:not(.icons,.comparison,.kx,.best-of, .acronym), tbody tr[class*=x_] td:not(.icons,.comparison,.kx,.best-of, .acronym), tbody tr[class*=y_] td:not(.icons,.comparison,.kx,.best-of, .acronym)", "click", function() {
        var utilEnviroment = cjs.dic.get('utilEnviroment');
        var $row = $(this).parents("tr");
        var id = $row.get(0).id;
        if (!id) {
            id = getIdFromClass($row.attr('class'))
        }
        var sportId = parseInt(id.split('_')[1]);
        if (cjs.dic.get('util_sport').hasDisabledDetail(sportId)) {
            return
        }
        if (sub_category == 3 && !odds_betslip) {
            if (us_odds_layout) {
                id = id.replace(/x_/, 'g_')
            }
            var urlParams = {};
            urlParams.from = 'iframe';
            urlParams.sport = sportId;
            var externalProjects = cjs.dic.get('util_config').get('app', 'odds', 'external_projects');
            if (externalProjects && externalProjects[utilEnviroment.getConfigHashId()]) {
                urlParams.externalProjectId = externalProjects[utilEnviroment.getConfigHashId()]
            }
            var oddsBonus = cjs.dic.get('Feed_Content_OddsBonus');
            var bookmakerId = oddsBonus.getMainBookmakerId();
            var url = that.createBookmakerLink(urlParams, bookmakerId);
            window.open(url)
        } else {
            var detailId = id.replace(/^._/, 'g_');
            var $parentTable = $(this).closest("table");
            if ($parentTable.hasClass('last-matches-table')) {
                detail_open(detailId, null, $row.attr('data-hp-url'), $row.attr('data-ap-url'), $row.attr('data-season'), false)
            } else {
                detail_open(detailId)
            }
            if (getNavigationCategory() == 4) {
                e_t.track_click('odds-iframe-click', 'detail')
            } else {
                e_t.track_click('iframe-click', 'detail')
            }
        }
    });
    $("div#fs, div#fs-results, div#fs-summary-results, div#fs-fixtures, div#fs-summary-fixtures").delegate("tbody td.serve-home, tbody td.serve-away", "mouseenter", function(event) {
        $(this).attr("title", '')
    });
    $("div#fs, div#fs-results, div#fs-summary-results, div#fs-fixtures, div#fs-summary-fixtures").delegate("table span.icons span, tbody td.icons.left", "mouseenter", function(event) {
        var icon_type = $(this).attr("class");
        var id = $(this).parents("tr").get(0).id;
        if (!id) {
            id = getIdFromClass($(this).parents("tr").attr('class'))
        }
        var leagueId = getLeagueIdFromClassName($(this).closest('tr').attr('class'));
        var fsDataId, fsLabelId;
        var title = '';
        var transKey;
        if (icon_type.match(/tomygai/)) {
            transKey = 'TRANS_MY_GAMES_CANNOT_REMOVE';
            title = cjs.Util.trans(transKey)
        } else if (icon_type.match(/tomyga/)) {
            if (leagueId != null) {
                if (isNoDuelTournament(leagueId)) {
                    transKey = 'TRANS_MY_GAMES_REMOVE_EVENT'
                } else {
                    transKey = 'TRANS_MY_GAMES_REMOVE_ALL'
                }
            } else {
                fsDataId = ($(this).closest('tr').attr('id') + "").replace(/^(y_|x_)/, 'g_');
                fsLabelId = cjs.dic.get('dataEvent').getEventValue(fsDataId, 'labl_id');
                if (sport_id == cjs.constants.sport.GOLF || cjs.Util.Sport.isStageSport(sport_id)) {
                    transKey = 'TRANS_MY_GAMES_REMOVE_DEFAULT'
                } else if (fsLabelId && isNoDuelTournament(fsLabelId)) {
                    transKey = 'TRANS_MY_GAMES_REMOVE_PLAYER'
                } else {
                    transKey = 'TRANS_MY_GAMES_REMOVE'
                }
            }
            title = cjs.Util.trans(transKey)
        } else if (icon_type.match(/tomyg/)) {
            if (leagueId != null) {
                if (isNoDuelTournament(leagueId)) {
                    transKey = 'TRANS_MY_GAMES_ADD_EVENT'
                } else {
                    transKey = 'TRANS_MY_GAMES_ADD_ALL'
                }
            } else {
                fsDataId = ($(this).closest('tr').attr('id') + "").replace(/^(y_|x_)/, 'g_');
                fsLabelId = cjs.dic.get('dataEvent').getEventValue(fsDataId, 'labl_id');
                if (sport_id == cjs.constants.sport.GOLF || cjs.Util.Sport.isStageSport(sport_id)) {
                    transKey = 'TRANS_MY_GAMES_ADD_DEFAULT'
                } else if (fsLabelId && isNoDuelTournament(fsLabelId)) {
                    transKey = 'TRANS_MY_GAMES_ADD_PLAYER'
                } else {
                    transKey = 'TRANS_MY_GAMES_ADD'
                }
            }
            title = cjs.Util.trans(transKey)
        } else if (icon_type.match(/info/)) {
            if ((cjs.dic.get('dataEvent').getEventValue(id, 'BW') == 1 || cjs.dic.get('dataLeague').getLeagueValue(cjs.dic.get('dataEvent').getEventValue(id, 'labl_id'), 'ZF') == 1 && cjs.dic.get('dataEvent').getEventValue(id, 'BW') == -1) && (cjs.dic.get('Helper_CurrentTime').getTimestamp() - cjs.dic.get('dataEvent').getEventValue(id, 'AD')) <= 3600 * 4 && (cjs.dic.get('dataEvent').getEventValue(id, 'AC') != 4 && cjs.dic.get('dataEvent').getEventValue(id, 'AC') != 5)) {
                title = cjs.Util.trans('TRANS_UNVERIFIED_SOURCE_INFO_NOTE')
            }
            title += (title ? "[br]" : '') + cjs.dic.get('dataEvent').getEventValue(id, 'AM');
            e_t.track_over('iframe-icon-mouseover', 'info')
        } else if (icon_type.match(/collapse-league/)) {
            title = cjs.Util.trans('TRANS_ASS_IFRAME_COLLAPSE_LEAGUE')
        } else if (icon_type.match(/expand-league/)) {
            $(this).parents("tr").eq(0).find("span.expand-league-link").eq(0).addClass("expand-league-link-hover");
            title = cjs.Util.trans('TRANS_ASS_IFRAME_EXPAND_LEAGUE')
        } else if (icon_type.match(/comparison/)) {
            title = cjs.Util.trans('TRANS_CLICK_FOR_ODDS_COMPARISON')
        } else if (icon_type.match(/live-centre/)) {
            if (cjs.dic.get('dataEventHolderProxy').getHolder().getEvent(id).getValue('AB') == 1) {
                title = cjs.Util.trans('TRANS_LIVE_CENTRE_ICON_TITLE_FUTURE')
            } else {
                title = cjs.Util.trans('TRANS_LIVE_CENTRE_ICON_TITLE')
            }
        } else if (icon_type.match(/stats/) || icon_type.match(/stats-draw/)) {
            title = cjs.dic.get('dataLeagueHolderProxy').getHolder().getLeague(id.replace('l_', '')).getValue('ZG') == 2 ? cjs.Util.trans('TRANS_STANDINGS_DRAW') : cjs.Util.trans('TRANS_STANDINGS_TABLE')
        } else if (icon_type.match(/clive/)) {
            title = cjs.Util.trans('TRANS_LIVE_BETTING_ICON_TITLE_LIVE')
        } else if (icon_type.match(/slive/)) {
            title = cjs.Util.trans('TRANS_LIVE_BETTING_ICON_TITLE_SCHEDULED')
        } else if (icon_type.match(/shirt/)) {
            title = cjs.Util.trans('TRANS_CLICK_TO_SEE_LINEUPS')
        } else if (icon_type.match(/video/)) {
            title = cjs.Util.trans('TRANS_CLICK_TO_WATCH_VIDEO_HIGHLIGHTS')
        } else if (icon_type.match(/tv/)) {
            var broadcastData = cjs.dic.get('dataEvent').getEventValue(id, 'AL');
            var availableBookmakers = cjs.dic.get('Helper_Bookmaker').getAvailableBookmakerListByGeoIp(cjs.geoIP);
            var filteredData = cjs.dic.get('Helper_Broadcast').getFilteredJsonData(broadcastData, availableBookmakers);
            title = cjs.dic.get('Helper_Formatter').getParsedBroadcast(filteredData);
            e_t.track_over('iframe-icon-mouseover', 'tv')
        } else if (icon_type.match(/tennis-serve/)) {
            title = cjs.Util.trans('TRANS_TENNIS_SERVING_PLAYER')
        } else if (icon_type.match(/badminton-serve/)) {
            title = cjs.Util.trans('TRANS_BADMINTON_SERVING_PLAYER')
        } else if (icon_type.match(/volleyball-serve/)) {
            title = cjs.Util.trans('TRANS_VOLLEYBALL_SERVING_TEAM')
        } else if (icon_type.match(/beach-volleyball-serve/)) {
            title = cjs.Util.trans('TRANS_BEACH_VOLLEYBALL_SERVING_TEAM')
        } else if (icon_type.match(/cricket-serve-opposite/)) {
            title = cjs.Util.trans('TRANS_CRICKET_BATTING_TEAM')
        } else if (icon_type.match(/cricket-serve/)) {
            title = cjs.Util.trans('TRANS_CRICKET_BOWLING_TEAM')
        } else if (icon_type.match(/darts-serve/)) {
            title = cjs.Util.trans('TRANS_DARTS_BEGINNING_PLAYER')
        } else if (icon_type.match(/baseball-serve-opposite/)) {
            title = cjs.Util.trans('TRANS_BASEBALL_BATTING_TEAM')
        } else if (icon_type.match(/baseball-serve/)) {
            title = cjs.Util.trans('TRANS_BASEBALL_PITCHING_TEAM')
        } else if (icon_type.match(/pesapallo-serve-opposite/)) {
            title = cjs.Util.trans('TRANS_PESAPALLO_BATTING_TEAM')
        } else if (icon_type.match(/pesapallo-serve/)) {
            title = cjs.Util.trans('TRANS_PESAPALLO_PITCHING_TEAM')
        } else if (icon_type.match(/american-football-serve/)) {
            title = cjs.Util.trans('TRANS_AMERICAN_FOOTBALL_TEAM_ON_BALL')
        }
        $(this).attr("title", title)
    });
    $("div#fs, div#fs-results, div#fs-summary-results, div#fs-fixtures, div#fs-summary-fixtures").delegate("table span.icons span, tbody td.icons.left", "mouseleave", function() {
        var icon_type = $(this).attr("class");
        if (icon_type.match(/test/)) {} else if (icon_type.match(/tv/)) {
            e_t.track_out()
        } else if (icon_type.match(/info/)) {
            e_t.track_out()
        } else if (icon_type.match(/expand-league/)) {
            $(this).parents("tr").eq(0).find("span.expand-league-link").eq(0).removeClass("expand-league-link-hover")
        }
    });
    $("div#fs, div#fs-results, div#fs-summary-results, div#fs-fixtures, div#fs-summary-fixtures").delegate("table span.icons span, tbody td.score, tbody td.icons.left", "click", function(clickEvent) {
        var utilEnviroment = cjs.dic.get('utilEnviroment');
        var icon_type = $(this).attr("class");
        var id = $(this).parents("tr").get(0).id;
        if (!id) {
            id = getIdFromClass($(this).parents("tr").attr('class'))
        }
        var leagueId = getLeagueIdFromClassName($($(this).parents("tr").get(0)).attr('class'));
        var participantId = getParticipantIdFromClassName($(this).closest('tr').attr('class'));
        var sportId;
        var leagueItem;
        if (icon_type.match(/shirt/)) {
            detail_open(id, cjs.Util.trans('TRANS_DETAIL_BOOKMARK_URL_IDENT_LINEUPS'));
            e_t.track_click('iframe-icon-click', 'shirt')
        } else if (icon_type.match(/comparison/)) {
            detail_open(id, cjs.Util.trans('TRANS_DETAIL_BOOKMARK_URL_IDENT_ODDS_COMPARISON'));
            e_t.track_click('iframe-icon-click', 'odds-comparison')
        } else if (icon_type.match(/live-centre/)) {
            sportId = cjs.dic.get('dataEventHolderProxy').getHolder().getEvent(id).getValue('sport_id');
            if (sportId == 2 || sportId == 4 || sportId == 6 || sportId == 5 || sportId == 3) {
                detail_open(id, cjs.Util.trans('TRANS_DETAIL_BOOKMARK_URL_IDENT_STATISTICS'))
            } else {
                detail_open(id)
            }
            e_t.track_click('iframe-icon-click', 'live-centre')
        } else if (icon_type.match(/live-centre/)) {
            e_t.track_click('iframe-icon-click', 'live-centre')
        } else if (icon_type.match(/collapse-league/) || icon_type.match(/expand-league/)) {
            expand_collapse_league(leagueId)
        } else if (icon_type.match(/tomyg/) || icon_type.match(/tomyga/)) {
            if (icon_type.match(/tomygai/)) {} else if (leagueId != null) {
                add_my_league($(this), clickEvent.delegateTarget);
                e_t.track_click('iframe-icon-click', 'my-games-league')
            } else if (participantId != null) {
                add_my_team(participantId, clickEvent.delegateTarget, this)
            } else {
                add_my_game(id, clickEvent.delegateTarget, this);
                e_t.track_click('iframe-icon-click', 'my-games-match')
            }
        } else if (icon_type.match(/stats/) || icon_type.match(/stats-draw/)) {
            id = id.replace('l_', '');
            leagueItem = cjs.dic.get('dataLeagueHolderProxy').getHolder().getLeague(leagueId);
            stats_open(leagueItem.getValue('ZE'), leagueItem.getValue('ZC'), leagueId.replace(/_.*/, ''), leagueItem.getValue('ZG'));
            e_t.track_click('iframe-icon-click', 'stats')
        } else if (icon_type.match(/slive/) || icon_type.match(/clive/)) {
            var from_param = 'live';
            if (icon_type.match(/clive/)) {
                from_param += '-live-match'
            }
            var eventDataHolder = cjs.dic.get('dataEventHolderProxy').findHolderByItemId(id);
            var eventItem = eventDataHolder.getEvent(id);
            var leagueId = eventItem.getLeagueId();
            var leagueItem = cjs.dic.get('dataLeagueHolderProxy').findLeagueHolderByLeagueId(leagueId).getLeague(leagueId);
            var urlParams = {};
            urlParams.from = from_param;
            urlParams.sport = eventItem.getSportId();
            urlParams.tournament = leagueItem.getTournamentStageId();
            urlParams.match = eventItem.getOriginalId();
            urlParams.day = utilEnviroment.getSudate();
            var externalProjects = cjs.dic.get('util_config').get('app', 'odds', 'external_projects');
            if (externalProjects && externalProjects[utilEnviroment.getConfigHashId()]) {
                urlParams.externalProjectId = externalProjects[utilEnviroment.getConfigHashId()]
            }
            var bookmakerId = cjs.dic.get('application').getMainBookmakerId();
            var url = that.createBookmakerLink(urlParams, bookmakerId);
            window.open(url);
            e_t.track_click('iframe-icon-click', 'live-betting')
        } else if (icon_type.match(/video/)) {
            detail_open(id, cjs.Util.trans('TRANS_DETAIL_BOOKMARK_URL_IDENT_VIDEO_HIGHLIGHTS'));
            e_t.track_click('iframe-icon-click', 'video')
        } else if (icon_type.match(/tv/)) {
            detail_open(id, cjs.Util.trans('TRANS_DETAIL_BOOKMARK_URL_IDENT_TV'));
            e_t.track_click('iframe-icon-click', 'tv')
        }
    });
    $("div#fs, div#fs-results, div#fs-summary-results").delegate("table span.dw-icon", "mouseenter", function(event) {
        $(this).attr("title", cjs.Util.trans('TRANS_WINNER_TOOLTIP'));
        if ($(this).hasClass('win')) {
            $(this).attr("title", cjs.Util.trans('TRANS_WINNER'))
        }
        tt.show($(this).get(0), event, true)
    });
    $("div#fs").delegate("tbody td.best-of span", "mouseenter", function(event) {
        var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
        var parent = $(this).parent().parent();
        var id = parent.attr('id');
        if (typeof id === 'undefined') {
            id = parent.attr('class').match(/(g_[0-9]+_[a-z0-9]+)/gi)[0]
        }
        var eventItem = eventDataHolder.getEvent(id);
        var WD = eventItem.getValue('WD');
        var WL = eventItem.getValue('WL');
        var sport = eventItem.getValue('sport');
        border_element = $(this).closest('div').parent().attr('id');
        var id = $(this).parents("tr").get(0).id;
        if (!id) {
            id = getIdFromClass($(this).parents("tr").attr('class'))
        }
        if (WD) {
            if (sport == 'snooker') {
                $(this).attr("title", cjs.Util.trans('TRANS_SNOOKER_BEST_OF_FRAMES').replace('%s', WD))
            } else if (sport == 'darts') {
                if (WL) {
                    $(this).attr("title", cjs.Util.trans('TRANS_DARTS_BEST_OF_SETS').replace('%s', WD))
                } else {
                    $(this).attr("title", cjs.Util.trans('TRANS_DARTS_BEST_OF_LEGS').replace('%s', WD))
                }
            }
            tt.show($(this).get(0), event, null, border_element)
        }
    });
    $('div#fs').delegate("tbody td.timer span.final_result_only", "mouseenter", function(event) {
        border_element = $(this).closest('div').parent().attr('id');
        $(this).attr("title", cjs.Util.trans('TRANS_FINAL_RESULT_ONLY'));
        tt.show($(this).get(0), event, true, border_element)
    });
    $('div#fs, div#fs-summary-fixtures, div#fs-summary-results, div#fs-fixtures, div#fs-results').delegate("tbody td.team-rank.player_cut_off", "mouseenter", function(event) {
        var $this = $(this);
        border_element = $this.closest('div').parent().attr('id');
        $tr = $this.closest('tr');
        var id = $tr.attr('id');
        if (!id) {
            id = getIdFromClass($tr.attr('class'))
        }
        var participantStatus = null;
        var holder = cjs.dic.get('dataEventHolderProxy').findHolderByItemId(id);
        if (holder === false) {
            return
        }
        var eventItem = holder.getEvent(id);
        if (eventItem) {
            if (cjs.Util.Sport.inGroup(eventItem.getSportId(), cjs.constants.sport.WINTER_SPORTS)) {
                participantStatus = eventItem.getStatsResultsStopReason()
            } else {
                participantStatus = eventItem.getParticipantStatus()
            }
        }
        if (participantStatus) {
            var trans = cjs.dic.get('helperTranslateParticipantStatus').translate(participantStatus);
            if (trans) {
                $(this).attr("title", trans);
                tt.show($(this).get(0), event, true, border_element)
            }
        }
    });
    $('div#fs, div#fs-summary-fixtures, div#fs-summary-results, div#fs-fixtures, div#fs-results').delegate("table tbody td.player .flag", "mouseenter", function(event) {
        var $this = $(this);
        border_element = $this.closest('div').parent().attr('id');
        var element = $this.closest('tr');
        var id;
        var _tmp = fs_update._getEventItemIdFromElement(element.get(0));
        if (_tmp === false) {
            return
        }
        id = _tmp.eventItemId;
        var holder = cjs.dic.get('dataEventHolderProxy').findHolderByItemId(id);
        if (holder === false) {
            return
        }
        var eventItem = holder.getEvent(id);
        var translatedCountry = eventItem.getValue('CC');
        var currSportId = eventItem.getSportId();
        if (translatedCountry) {
            $(this).attr("title", translatedCountry);
            if (!cjs.Util.Sport.isStageSport(currSportId) && currSportId != cjs.constants.sport.GOLF) {
                tt.show($(this).get(0), event, true, border_element)
            }
        }
    });
    $("div#fs, div#fs-results, div#fs-summary-results, div#fs-fixtures, div#fs-summary-fixtures").delegate(".golf tbody td.cell_sa", "mouseenter", function(event) {
        var $this = $(this);
        border_element = $this.closest('div').parent().attr('id');
        var id = $this.closest('tr').attr('id');
        var holder = cjs.dic.get('dataEventHolderProxy').findHolderByItemId(id);
        if (holder === false) {
            return
        }
        var eventItem = holder.getEvent(id);
        if (!eventItem.isFinished() || !eventItem.getGolfHolesPlayed()) {
            return
        }
        $(this).attr("title", (cjs.dic.get('util_trans')('TRANS_GOLF_HOLES_PLAYED') + "").replace('%s', eventItem.getGolfHolesPlayed()));
        tt.show($(this).get(0), event, true, border_element)
    });
    $("body").delegate("#tooltip-1", "mouseenter", function(event) {
        $('#tooltip-1').attr("isDelay", "2")
    });
    $("body").delegate("#tooltip-1", "mouseleave", function(event) {
        $('#tooltip-1').attr("isDelay", "0");
        tt.hide($(this).get(0))
    });
    $("div#fs, div#fs-results, div#fs-summary-results, div#fs-fixtures, div#fs-summary-fixtures").delegate("table span.icons span, table div.mg_dropdown_wrapper", "mouseenter", function(event) {
        border_element = $(this).closest('div').parent().attr('id');
        var icon_type = $(this).attr("class");
        var myGameType = false;
        if (icon_type.match(/tomyga/) || icon_type.match(/tomyg/) || icon_type.match(/mg_dropdown_wrapper/) || icon_type.match(/icons/) && icon_type.match(/left/)) {
            myGameType = true
        } else {
            myGameType = false
        }
        if ($("#tooltip-1").css('display') != "block" || $("#tooltip-1").css('top').replace("px", "") > event.pageY + 10) {
            if ($("#tooltip-1").css('top').replace("px", "") > event.pageY + 10) {
                tt.hide($(this).get(0))
            }
            if (myGameType) {
                tt.show($(this).get(0), event, true)
            } else {
                tt.show($(this).get(0), event, null, border_element)
            }
        }
    });
    $("div#fs, div#fs-results, div#fs-summary-results, div#fs-fixtures, div#fs-summary-fixtures").delegate("table span.icons span, table span.dw-icon, tbody td.best-of span, tbody td.icons.left, tbody td.timer span.final_result_only, table div.mg_dropdown_wrapper, tbody td.team-rank.player_cut_off, table tbody td.player .flag, .golf tbody td.cell_sa", "mouseleave", function() {
        var icon_type = $(this).attr("class");
        if (typeof icon_type != 'undefined' && icon_type.match(/tv/)) {
            if ($("#tooltip-1").css("display") == "block") {
                $("#tooltip-1").attr("isDelay", "1");
                core_update._tvTooltipTimeout = setTimeout(function() {
                    if ($("#tooltip-1").attr("isDelay") != "2") tt.hide($(this).get(0));
                    $('#tooltip-1').attr("isDelay", "0")
                }, 600)
            }
        } else {
            if ($("#tooltip-1").attr("isDelay") != "1") {
                tt.hide($(this).get(0))
            }
        }
    });
    $("div#fs, div#fs-fixtures, div#fs-summary-fixtures, div#fs-results, div#fs-summary-results").delegate("table tr.league span.stats-link", "click", function(event) {
        var id = getLeagueIdFromClassName($($(this).parents("tr").get(0)).attr('class'));
        stats_open(cjs.dic.get('dataLeague').getLeagueValue(id, 'ZE'), cjs.dic.get('dataLeague').getLeagueValue(id, 'ZC'), id.replace(/_.*/, ''), cjs.dic.get('dataLeague').getLeagueValue(id, 'ZG'));
        e_t.track_click('iframe-icon-click', 'stats')
    });
    var page = cjs.dic.get('page');
    if (page.isParticipantPage() || page.isSeriesPage()) {
        $("div#fs, div#fs-fixtures, div#fs-summary-fixtures, div#fs-results, div#fs-summary-results").delegate("table tr.league span.country span.name span.tournament_part", "click", function(event) {
            var id = getLeagueIdFromClassName($($(this).parents("tr").get(0)).attr('class'));
            id = id.replace('l_', '');
            location.href = cjs.dic.get('dataLeague').getLeagueValue(id, 'ZL')
        });
        $("div#fs, div#fs-fixtures, div#fs-summary-fixtures, div#fs-results, div#fs-summary-results").delegate("table tr.league span.country span.name span.tournament_part", "mouseenter", function(event) {
            $(this).css('cursor', 'pointer');
            $(this).css('text-decoration', 'underline')
        });
        $("div#fs, div#fs-fixtures, div#fs-summary-fixtures, div#fs-results, div#fs-summary-results").delegate("table tr.league span.country span.name span.tournament_part", "mouseleave", function(event) {
            $(this).css('cursor', 'inherit');
            $(this).css('text-decoration', 'inherit')
        })
    }
    var isStageSport = cjs.Util.Sport.isStageSport(sport_id);
    if (tournament === null || isStageSport); {
        $("div#fs").delegate("table tr.league span.country span.name span.tournament_part", "click", function(event) {
            var id = getLeagueIdFromClassName($($(this).parents("tr").get(0)).attr('class'));
            id = id.replace('l_', '');
            location.href = cjs.dic.get('dataLeagueHolderProxy').getHolder().getLeague(id).getValue('ZL')
        });
        $("div#fs").delegate("table.table-link-more-games span.tournament-pages-link", "click", function(event) {
            var labelId = $(this).data('label');
            if (cjs.dic.get('dataLeagueHolderProxy').getHolder().hasItem(labelId)) {
                $table = $(this).closest('table').prev('table');
                var leagueItem = cjs.dic.get('dataLeagueHolderProxy').getHolder().getItem(labelId);
                var oldPreloadTop = $('#preload').css('top');
                var winScroll = window.pageYOffset || document.documentElement.scrollTop;
                $('#preload').css('top', winScroll + 100);
                preload_show();
                setTimeout((function($table) {
                    return function() {
                        var cb = function() {
                            var group = cjs.mygamesGroups._valueToKey($table.find('thead tr span.mg_dropdown_selected').text());
                            var itemKey = labelId + ":" + group;
                            temporaryLeagueData.getOrCreateNewItem(itemKey).setValue('show_all', 1);
                            fs_update.addAllMatchesToTableAndSort($table, labelId);
                            $table.next('.table-link-more-games').remove();
                            preload_hide();
                            $('#preload').css('top', oldPreloadTop);
                            var html = [];
                            add_golf_noduel_info(html, labelId, leagueItem.getSportId());
                            $table.after(html.join(''));
                            fs_update.strip_regenerate()
                        };
                        if (category == 5) {
                            fs_update.loadFeedForNoduelMygames(labelId, cb)
                        } else {
                            cb()
                        }
                    }
                })($table), 10)
            }
        });
        $("div#fs").delegate("table tr.league span.country span.name span.tournament_part", "mouseenter", function(event) {
            $(this).css('cursor', 'pointer');
            $(this).css('text-decoration', 'underline')
        });
        $("div#fs").delegate("table tr.league span.country span.name span.tournament_part", "mouseleave", function(event) {
            $(this).css('cursor', 'inherit');
            $(this).css('text-decoration', 'inherit')
        })
    }
    $("div#fs-summary-results.show-more-hidden-lines").delegate('table.table-link-more-games span', 'click', function(e) {
        var $tableLinkMoreGames = $(this).closest('table.table-link-more-games');
        $tableLinkMoreGames.prev("table").find('tr.hidden').removeClass('hidden');
        $tableLinkMoreGames.addClass('hidden')
    });
    $("div#fs").delegate("table tr.league span.expand-league-link", "mouseenter", function(event) {
        $(this).parents("tr").eq(0).find("span.expand-league").eq(0).addClass("expand-league-hover");
        $(this).attr("title", cjs.Util.trans('TRANS_ASS_IFRAME_EXPAND_LEAGUE'));
        tt.show($(this).get(0), event, null, null)
    });
    $("div#fs").delegate("table tr.league span.expand-league-link", "mouseleave", function(event) {
        $(this).parents("tr").eq(0).find("span.expand-league").eq(0).removeClass("expand-league-hover");
        tt.hide($(this).get(0))
    });
    $("div#fs").delegate("table tr.league span.expand-league-link", "click", function(event) {
        var id = getLeagueIdFromClassName($($(this).parents("tr").get(0)).attr('class'));
        expand_collapse_league(id)
    });
    $("div#fs").delegate("table td.kx", "mouseenter", function(event) {
        var title = '';
        var id = $(this).parents("tr").get(0).id;
        var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
        if (us_odds_layout) {
            id = id.replace(/x_/, 'g_')
        }
        var eventItem = eventDataHolder.getEvent(id);
        var isClickable = cjs.dic.get('util_config').get('app', 'odds', 'finished_matches_clickable');
        var sportId = eventItem.getSportId();
        if ($(this).html() != '-') {
            var odds_alt = $(this).find('span').eq(0).attr("alt");
            border_element = $(this).closest('div').parent().attr('id');
            var isOddRemoved = $(this).find('span').eq(0).hasClass('not-published');
            if (odds_alt != undefined) {
                title += odds_alt
            }
            if (odds_betslip && (isClickable || eventItem.isScheduled()) && !isOddRemoved) {
                title += title ? '[br]' : '';
                title += cjs.dic.get('util_trans')('TRANS_ODDS_ADD_TO_BOOKMAKER_BETSLIP', [cjs.dic.get('Helper_Bookmaker').getName(cjs.geoIP)])
            }
            $(this).attr("title", title);
            tt.show($(this).get(0), event, null, border_element)
        } else if (sub_category == 3 && !odds_betslip) {
            $(this).attr("title", cjs.dic.get('util_trans')('TRANS_ODDS_CLICK_TO_BET_MATCH', [cjs.dic.get('Helper_Bookmaker').getName(cjs.geoIP)]))
        } else {
            if (cjs.dic.get('util_sport').hasDisabledDetail(sportId)) {
                return
            }
            var trans = sportId == cjs.constants.sport.GOLF || cjs.Util.Sport.inGroup(sportId, cjs.constants.sport.MOTORSPORT) ? 'TRANS_CLICK_FOR_DETAIL' : 'TRANS_CLICK_FOR_MATCH_DETAIL';
            $(this).attr("title", cjs.Util.trans(trans))
        }
    });
    $("div#fs").delegate("table td.kx", "mouseleave", function() {
        if ($(this).html() != '-') {
            tt.hide($(this).get(0))
        }
    });
    $("div#fs").delegate("table td.kx", "click", function() {
        var id = $(this).parents("tr").get(0).id;
        if (us_odds_layout) {
            id = id.replace(/x_/, 'g_')
        }
        var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
        var eventItem = eventDataHolder.getEvent(id);
        var ev_stage_type = eventItem.getStageType();
        var swapped = eventItem.getValue('WE');
        var sportId = eventItem.getSportId();
        var icon_type = $(this).attr("class");
        var externalProjectId = cjs.dic.get('application').getExternalProjectId();
        var isExternalProject = cjs.dic.get('application').isExternalProject();
        var urlParams = {};
        var bookmakerId = cjs.dic.get('application').getMainBookmakerId();
        var bookmakerLink = that.createBookmakerLink(urlParams, bookmakerId);
        if (isExternalProject) {
            urlParams.externalProjectId = externalProjectId
        }
        urlParams.sport = sportId;
        urlParams.from = 'iframe';
        var url = bookmakerLink;
        var is_scheduled = eventItem.isScheduled();
        if ($(this).html() != '-') {
            if (odds_betslip && is_scheduled) {
                var bettype = null;
                if (bettype_match = icon_type.match(/OU|AH|ML/)) {
                    bettype = bettype_match
                }
                var tmp = id.split(/_/);
                var matchId = tmp[2];
                var stageIdAddon = '';
                if (isNoDuelTournament(eventItem.getLeague().getId())) {
                    if (eventItem.getSportName() == 'horse-racing') {
                        stageIdAddon = eventItem.getLeague().getStageId()
                    }
                    urlParams.match = eventItem.getLeague().getEventId();
                    urlParams.participant = matchId + stageIdAddon
                } else {
                    urlParams.match = matchId
                }
                urlParams.from = 'betslip-iframe';
                urlParams.outcome = cjs.dic.get('Helper_Odds').getOutcome(icon_type, sport_id);
                urlParams.swap = swapped;
                urlParams.eventstagetype = ev_stage_type;
                if (bettype) {
                    urlParams.bettype = bettype
                }
                url += '?' + $.param(urlParams);
                bookmaker_open(url, true);
                e_t.track_click('odds-iframe-click', 'betslip-link')
            } else {
                url += '?' + $.param(urlParams);
                bookmaker_open(url, false);
                e_t.track_click('odds-iframe-click', 'bookmaker-link')
            }
        } else if (sub_category == 3 && !odds_betslip) {
            url += '?' + $.param(urlParams);
            window.open(url)
        } else {
            if (cjs.dic.get('util_sport').hasDisabledDetail(sportId)) {
                return
            }
            detail_open(id.replace(/^._/, 'g_'));
            e_t.track_click('odds-iframe-click', 'detail')
        }
    })
};
core_update.prototype.get_league_and_flag_container = function(leagueItem, flagType) {
    if (!flagType) {
        flagType = cjs.mygamesCheckboxes.getMygamesIconPosition()
    }
    var sportId = leagueItem.getSportId();
    var flag = get_flag(leagueItem.getCountryId(), flagType, leagueItem.getCountryName());
    var nameStr = leagueItem.getTitle().split(':');
    if (sportId == cjs.constants.sport.HORSE_RACING) {
        nameStr.shift()
    }
    var country = nameStr.shift().trim();
    var tournament = nameStr.join(':');
    var $name = $('<span>', {
        'class': 'name'
    });
    $name.append($('<span>', {
        'class': 'country_part',
        'html': country + ": "
    }));
    var $tournamentName = $('<span>', {
        'html': cjs.Util.String.ltrim(tournament)
    });
    var disabledSports = cjs.dic.get('util_config').get('app', 'tournament_pages', 'disabled_sports');
    if (!disabledSports[sportId]) {
        $tournamentName.addClass('tournament_part')
    }
    $name.append($tournamentName);
    var $countryContainer = $('<span>').addClass('country').addClass(cjs.mygamesCheckboxes.getMygamesIconPosition());
    $($countryContainer).append(flag).append($name);
    return $('<span>').append($countryContainer)
};
core_update.prototype.remove_event_live_status = function(event_id) {
    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    if (!eventDataHolder.hasEvent(event_id)) {
        return
    }
    var eventItem = eventDataHolder.getEvent(event_id);
    if (eventItem.getValue('live_timer') !== null) {
        clearTimeout(eventItem.getValue('live_timer'));
        eventItem.removeValue('live_timer')
    }
    var timerId = setTimeout(function(myObj, event_id) {
        return function() {
            var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
            if (!eventDataHolder.hasEvent(event_id)) {
                return
            }
            var eventItem = eventDataHolder.getEvent(event_id);
            var AI = eventItem.getValue('AI');
            var AB = eventItem.getValue('AB');
            if (AI == 'y' && AB != cjs.constants.event_stage_type.LIVE) {
                eventItem.setValue('AI', 'n');
                myObj.property_set(event_id, 'AI', 'n');
                myObj.update()
            }
            eventItem.removeValue('live_timer')
        }
    }(this, event_id), cjs.cfg.time_keep_match_live);
    eventItem.setValue('live_timer', timerId)
};
core_update.prototype.update_merged_score = function(eventItem, index, new_value) {
    if (eventItem.getValue('sport') == 'aussie-rules') {
        var resultHistory = eventItem.getValue(index) + "";
        if (resultHistory != '0') {
            var old_result = resultHistory.split(".");
            var resultNew = new_value + "";
            var updated_result = resultNew.split(".");
            for (var i in updated_result) {
                if (updated_result[i] == '') {
                    updated_result[i] = old_result[i]
                }
            }
            new_value = updated_result.join('.')
        }
    }
    return new_value
};
core_update.prototype.getRowPosition = function(table, matchId) {
    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var eventItem = eventDataHolder.getEvent(matchId);
    var leagueItem = eventItem.getLeague();
    var index = 0,
        count = 0;
    var that = this;
    var _isNoDuelTournament = isNoDuelTournament(leagueItem.getId());
    $(table).find("tbody tr[id^='g']").each(function() {
        var id = $(this).attr("id");
        var tmpEventItem = eventDataHolder.getEvent(id);
        if (_isNoDuelTournament) {
            var value1 = tmpEventItem.getRank();
            var value2 = eventItem.getRank()
        } else {
            var value1 = tmpEventItem.getValue('AD');
            var value2 = eventItem.getValue('AD')
        }
        var lablId1 = tmpEventItem.getLeague().getId();
        var lablId2 = leagueItem.getId();
        var homeParticipant1 = cjs.Util.String.replaceAccents(tmpEventItem.getValue('AE'));
        var homeParticipant2 = cjs.Util.String.replaceAccents(eventItem.getValue('AE'));
        var sport = eventItem.getValue('sport');
        var increment = that.getRowPositionIncrement(tmpEventItem.getValue('sport_id'), id);
        if (country == null || !updater.country_tournament_order_fin) {
            if ((value1 < value2) || (value1 == value2 && lablId1 < lablId2) || (value1 == value2 && lablId1 == lablId2 && homeParticipant1 < homeParticipant2)) {
                index += increment
            }
        } else {
            if ((value1 > value2) || (value1 == value2 && lablId1 < lablId2) || (value1 == value2 && lablId1 == lablId2 && homeParticipant1 < homeParticipant2)) {
                index += increment
            }
        }
        count += increment
    });
    return [index, count]
};
core_update.prototype.getRowPositionIncrement = function(sportId, matchId) {
    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var sportDefinition = cjs.template.getTemplateDefinitionForGame(sportId, eventDataHolder.getItem(matchId).getValue('original_id'));
    var rowCount = sportDefinition.getGameRowCount();
    if (rowCount > 1) {
        rowCount++
    }
    return rowCount
};
core_update.prototype.filterIsDenied = function(matchId) {
    return (typeof cjs.filter != 'undefined' && !cjs.filter.isAllowed(matchId))
};
core_update.prototype.leagueIsCollapsed = function(matchId) {
    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var leagueItem = eventDataHolder.getItem(matchId).getLeague();
    return (country == null && !leagueItem.getValue('display'))
};
core_update.prototype.matchIsInTable = function(tbody, matchId) {
    return ($(tbody).find("tr#" + matchId).length != 0)
};
core_update.prototype.markFirstRow = function(tbody) {
    $(tbody).find("tr:first").addClass("tr-first");
    $(tbody).find("tr").eq(1).removeClass("tr-first")
};
core_update.prototype.createTbody = function(tableType, matchId) {
    var tbody = this.get_tbody(tableType, matchId);
    if (typeof tbody == 'undefined') {
        if (this.add_table(tableType, matchId)) {
            tbody = this.get_tbody(tableType, matchId)
        } else {
            return false
        }
    }
    return tbody
};
core_update.prototype.anyPropertyDefined = function(elementId, properties) {
    properties = $.makeArray(properties);
    for (var i in properties) {
        var property = properties[i];
        if (this.property_defined(elementId, property)) {
            return true
        }
    }
    return false
};
core_update.prototype.label_set_property = function(labl_id, key, value) {
    if (typeof this.label_data_update[labl_id] == "undefined") {
        this.label_data_update[labl_id] = {}
    }
    this.label_data_update[labl_id][key] = value
};
core_update.prototype.label_update = function() {
    var leagueHolder = cjs.dic.get('dataLeagueHolderProxy').getHolder();
    var leagueItem, ZG, ZO;
    for (var labl_id in this.label_data_update) {
        var label = this.label_data_update[labl_id];
        for (key in label) {
            if (leagueHolder.hasItem(labl_id)) {
                leagueItem = leagueHolder.getItem(labl_id);
                leagueItem.setValue(key, label[key]);
                ZG = leagueItem.getValue('ZG');
                ZO = leagueItem.getValue('ZO');
                if (key == 'ZO' && stats_live_enable) {
                    var statsText = get_stats_link_translate(ZG == 2, ZO == 1);
                    var el = $('tr.l_' + labl_id + ' td span.stats-link span');
                    el.html(statsText).attr('title', statsText);
                    if (ZO == 1 && ZG != 2) {
                        el.addClass('live-table-txt')
                    } else {
                        el.removeClass('live-table-txt')
                    }
                }
                if (leagueItem.getSportId() == cjs.constants.sport.GOLF || cjs.Util.Sport.isRacingSport(leagueItem.getSportId())) {
                    if ($.inArray(key, ['AB', 'AC', 'AD']) !== -1) {
                        var header = getStageHeader(labl_id);
                        if (header) {
                            var $el = $('tr.l_' + labl_id + ' td .head_ae');
                            $el.html(header)
                        }
                    }
                }
            }
            delete(label[key])
        }
        delete(this.label_data_update[labl_id])
    }
};
core_update.prototype.addMatchFromTemplate = function(tableType, tbody, matchId, subCategory) {
    var tmpTable = this.findTable(tableType, matchId).eq(0);
    var position = this.getRowPosition(tmpTable, matchId);
    var trIndex = position[0];
    var trCount = position[1];
    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var eventItem = eventDataHolder.getItem(matchId);
    var gameHtml = [];
    var sportDefinition;
    gameHtml.push(cjs.templateGameDataProxy.getFilledGameRow(matchId, ''));
    sportDefinition = cjs.template.getTemplateDefinitionForGame(eventItem.getSportId(), eventItem.getValue('original_id'));
    if (sportDefinition.getGameRowCount() > 1 && trCount != 0) {
        if (project_type_name !== '_portable') {
            var blankLine = '<tr class="blank-line"><td colspan="' + sportDefinition.getGameColumnCount() + '"></td></tr>';
            if (trIndex == trCount) {
                $(tbody).append(blankLine)
            } else {
                gameHtml.push(blankLine)
            }
        }
    }
    var placeHolder = tbody.insertRow(trIndex);
    $(placeHolder).replaceWith(gameHtml.join(''));
    if (trIndex == 0) {
        this.markFirstRow(tbody)
    }
    return true
};
core_update.prototype.removeMatch = function(matchId, subCategory) {
    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var eventItem = eventDataHolder.getItem(matchId);
    var gameRow, jqElement;
    gameRow = cjs.template.getGameRow(eventItem.getSportId(), eventItem.getValue('original_id'));
    jqElement = gameRow.getJqElement();
    var nextBlankLine = jqElement.last().next('tr.blank-line');
    if (nextBlankLine.length) {
        nextBlankLine.remove()
    } else {
        jqElement.first().prev('tr.blank-line').remove()
    }
    jqElement.remove();
    return true
};
core_update.prototype.getTableType = function() {
    var tableType = 'table-main';
    if (sub_category == 2 || sub_category == 3) {
        tableType = 'odds-content'
    }
    return tableType
};
core_update.prototype.updateTemplate = function() {
    var tableType = this.getTableType();
    var leaguesChanged = {};
    var rowAdded = false;
    var rowDeleted = false;
    var updated = false;
    var gameRow;
    var matchesPositionUpdate = [];
    var matchesToFadeIn = {};
    var leaguesToUpdateHiddenState, updatedIndexes, fsDataIndexToUpdate;
    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var eventItem;
    leaguesToUpdateHiddenState = this._getNoduelLeaguesUpdate();
    if (cjs.Util.Object.keys(leaguesToUpdateHiddenState).length) {
        sort_fs_data();
        updatedIndexes = this.updateEventPositions();
        for (fsDataIndexToUpdate in updatedIndexes) {
            this.property_set(updatedIndexes[fsDataIndexToUpdate], 'visibility-changed', 1)
        }
    }
    for (var fsDataIndex in this.data_update) {
        eventItem = eventDataHolder.getItem(fsDataIndex);
        rowStatus = this.deleteOrUpdateRow(tableType, eventItem);
        if (rowStatus['leagues_changed']) {
            leaguesChanged[eventItem.getLeague().getId()] = true
        }
        if (rowStatus['added']) {
            rowAdded = true;
            matchesToFadeIn[fsDataIndex] = 1
        }
        if (rowStatus['position_changed']) {
            matchesPositionUpdate.push(fsDataIndex);
            matchesToFadeIn[fsDataIndex] = 1
        }
        if ((this.property_defined(fsDataIndex, 'AB') || this.did_property_changed(fsDataIndex, 'AI')) && eventItem.getValue('AI') == 'y' && eventItem.getValue('AB') != cjs.constants.event_stage_type.LIVE) {
            this.remove_event_live_status(fsDataIndex)
        }
        if (rowStatus['deleted']) {
            rowDeleted = true
        } else {
            if (typeof iframe_inscore === 'undefined') {
                this.setLastCorrectionSideToFsData(fsDataIndex)
            }
            updated = cjs.templateGameDataProxy.updateGame(fsDataIndex);
            if (!isNoDuelTournament(eventItem.getLeague().getId())) {
                this.playSound(eventItem)
            }
            score_highlight(fsDataIndex)
        }
        this.removeEvent(fsDataIndex);
        cjs.sound_player.gameUpdateFinished(fsDataIndex)
    }
    if (cjs.cfg && (cjs.cfg.sortByTime || category == 5 && cjs.cfg.mygamesGroups)) {
        if (rowAdded || matchesPositionUpdate.length) {
            reloadIframeContent()
        }
    } else {
        if (matchesPositionUpdate.length) {
            this.updateMatchesPosition(matchesPositionUpdate, tableType)
        }
        for (var leagueChanged in leaguesChanged) {
            this.update_table_head(leagueChanged)
        }
        if (rowAdded || rowDeleted || matchesPositionUpdate.length) {
            this.strip_regenerate();
            if_resize()
        }
    }
    this._fadeInMatches(cjs.Util.Object.keys(matchesToFadeIn));
    if (updated) {
        ++debug_update_no;
        counter_update()
    }
    this.label_update()
};
core_update.prototype.playSound = function(eventItem) {
    var AB = eventItem.getValue('AB');
    var AC = eventItem.getValue('AC');
    var AG = eventItem.getValue('AG');
    var AH = eventItem.getValue('AH');
    var id = eventItem.getId();
    if (this.property_defined(id, 'AB') && AB == 3 && (AC == 3 || AC == 8 || AC == 10 || AC == 11)) {
        cjs.sound_player.play(id, "finished")
    }
    if (eventItem.getValue('sport') == 'tennis') {
        var leagueItem = eventItem.getLeague();
        var tennisScoreParts = ['BA', 'BB', 'BC', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ'];
        if (leagueItem.getValue('ZI') == 1) {
            tennisScoreParts.splice(4, 2)
        }
        for (var partIndex in tennisScoreParts) {
            if (this.did_property_changed(id, tennisScoreParts[partIndex])) {
                cjs.sound_player.play(id, "tennis-game");
                break
            }
        }
    }
    if (this.property_defined(id, 'AG') || this.property_defined(id, 'AH')) {
        if ((this.did_property_changed(id, 'AG') && AG < this.data_history[id].AG) || (this.did_property_changed(id, 'AH') && AH < this.data_history[id].AH)) {
            cjs.sound_player.play(id, "correction")
        } else if ((this.did_property_changed(id, 'AG') && AG > this.data_history[id].AG) || (this.did_property_changed(id, 'AH') && AH > this.data_history[id].AH)) {
            cjs.sound_player.play(id, "score-incremented")
        }
    }
};
core_update.prototype.deleteOrUpdateRow = function(table_type, eventItem) {
    var row_added = false;
    var row_deleted = false;
    var leagues_changed = false;
    var position_changed = false;
    var id = eventItem.getId();
    var leagueItem = eventItem.getLeague();
    if (leagueItem.getValue('ZD') != 's' || cjs.myLeagues.isTop(leagueItem.getId()) || country != null || category == 5) {
        var elementIsOnPage = $("div#fs div." + table_type + " tbody tr#" + id).length > 0;
        if (matchMustBeOnPage(id, elementIsOnPage)) {
            this.beforeRowChangedCallback(id);
            if (cjs.cfg && (cjs.cfg.sortByTime || category == 5 && cjs.cfg.mygamesGroups)) {
                row_added = true
            } else if (this.add_match(table_type, id)) {
                row_added = true
            }
            leagues_changed = true
        } else if (matchMustNotBeOnPage(id, elementIsOnPage)) {
            this.beforeRowChangedCallback(id);
            if (this.remove_match(table_type, id)) {
                row_deleted = true
            }
            leagues_changed = true
        }
        var startTimeChanged = typeof this.data_update[id]['AD'] != 'undefined';
        var orderChanged = typeof this.data_update[id]['WS'] != 'undefined' || typeof this.data_update[id]['NI'] != 'undefined' || typeof this.data_update[id][cjs.dic.get('Helper_Parser').getStatsResultsIndex(cjs.dic.get('util_list').getStatsDataTypes().EVENT_PARTICIPANT_SORT_KEY)] != 'undefined';
        if (startTimeChanged || (isNoDuelTournament(leagueItem.getId()) && orderChanged)) {
            this.beforeRowChangedCallback(id);
            position_changed = true
        }
    }
    return {
        deleted: row_deleted,
        added: row_added,
        leagues_changed: leagues_changed,
        position_changed: position_changed
    }
};
core_update.prototype.beforeRowChangedCallback = function(matchId) {};
core_update.prototype.setLastCorrectionSideToFsData = function(fsDataIndex) {
    var scoreParts = [];
    scoreParts['Home'] = ['AG'];
    scoreParts['Away'] = ['AH'];
    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var eventItem = eventDataHolder.getEvent(fsDataIndex);
    if (eventItem.getValue('sport') == 'tennis') {
        scoreParts['Home'] = scoreParts['Home'].concat(['BA', 'BC', 'BE', 'BG', 'BI', 'WA']);
        scoreParts['Away'] = scoreParts['Away'].concat(['BB', 'BD', 'BF', 'BH', 'BJ', 'WB'])
    }
    var homeIndex = null;
    for (var side in scoreParts) {
        for (var partIndex in scoreParts[side]) {
            if (this.did_property_changed(fsDataIndex, scoreParts[side][partIndex])) {
                if (side == 'Home') {
                    eventItem.setValue('lastCorrectionSide', side);
                    homeIndex = partIndex
                } else if (side == 'Away') {
                    if (homeIndex === null || homeIndex > partIndex) {
                        eventItem.setValue('lastCorrectionSide', side)
                    }
                }
                break
            }
        }
    }
    if (this.did_property_changed(fsDataIndex, 'WR')) {
        var index = eventItem.getValue('lastCorrectionSide');
        if (index) {
            if (index == 'Home') {
                this.property_set(fsDataIndex, 'homeCorrection', 1, 0);
                eventItem.setValue('homeCorrection', 1)
            } else {
                this.property_set(fsDataIndex, 'awayCorrection', 1, 0);
                eventItem.setValue('awayCorrection', 1)
            }
        }
        setTimeout((function(index, fsDataIndex) {
            return function() {
                var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
                if (eventDataHolder.hasEvent(fsDataIndex)) {
                    var eventItem = eventDataHolder.getEvent(fsDataIndex);
                    eventItem.setValue('WR', 0);
                    if (index == 'Home') {
                        eventItem.setValue('homeCorrection', 0)
                    } else {
                        eventItem.setValue('awayCorrection', 0)
                    }
                }
            }
        })(index, fsDataIndex), 15 * 1000)
    }
};
core_update.prototype.updateMatchesPosition = function(matchIds, tableType) {
    if (matchIds.length === 0) {
        return
    }
    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var labelsToUpdate = {};
    for (var i in matchIds) {
        var eventItem = eventDataHolder.getEvent(matchIds[i]);
        var leagueItem = eventItem.getLeague();
        var leagueId = leagueItem.getId();
        if (typeof labelsToUpdate[leagueId] === 'undefined') {
            labelsToUpdate[leagueId] = []
        }
        labelsToUpdate[leagueId].push(matchIds[i])
    }
    for (labelIdToUpdate in labelsToUpdate) {
        this.updateMatchesPositionInTable(labelIdToUpdate, tableType)
    }
};
core_update.prototype.updateMatchesPositionInTable = function(labelId, tableType, table) {
    if (typeof table === 'undefined') {
        table = this.findTable(tableType, null, labelId)
    }
    if (this._prevFadeInSelecor != null) {
        $(this._prevFadeInSelecor).stop(true, true);
        this._prevFadeInSelecor = null
    }
    var tbody = table.find('tbody');
    var tbodyOffline = tbody.clone();
    var matchesData = [];
    var leagueHolder = cjs.dic.get('dataLeagueHolderProxy').getHolder();
    var leagueItem = leagueHolder.getLeague(labelId);
    var templateDefinition = cjs.template.getTemplateDefinitionForLabel(leagueItem.getValue('sport_id'), leagueItem.getValue('ZC'));
    var matchSelector, match, i, sortedMatchesData, fsDataIndex;
    var sortedMatchesDataIndexes = [];
    var dataHandler = cjs.dic.getNewInstance('dataHandler');
    dataHandler.setDataHolder(cjs.dic.get('dataEventHolderProxy').getHolder());
    tbodyOffline.find('tr').each((function(that) {
        return function(index, element) {
            var ret = that._getEventItemIdFromElement(element);
            if (ret === false) {
                return
            }
            matchesData[ret.eventItemId] = ret.parsedFrom
        }
    })(this));
    dataHandler.filter(function(index, id) {
        return typeof matchesData[id] !== 'undefined'
    });
    dataHandler.sort();
    var updatedTbody = $('<tbody>');
    dataHandler.each(function(index, id) {
        var eventItem = this.getItem(id);
        var matchSelector = templateDefinition.getGameRowSelector(eventItem.getValue('original_id'), matchesData[id] === 'class');
        updatedTbody.append(tbodyOffline.find(matchSelector));
        updatedTbody.append(tbodyOffline.find(tbodyOffline.find('tr.blank-line:eq(0)')))
    });
    tbody.replaceWith(updatedTbody)
};
core_update.prototype._fadeInMatches = function(fsDataIndexes) {
    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var eventItem, leagueItem;
    if (!ie && fsDataIndexes.length < 4) {
        var selectors = [];
        for (var i in fsDataIndexes) {
            eventItem = eventDataHolder.getItem(fsDataIndexes[i]);
            leagueItem = eventItem.getLeague();
            selectors.push(cjs.template.getTemplateDefinitionForLabel(leagueItem.getValue('sport_id'), leagueItem.getValue('ZC')).getGameRowSelector(eventItem.getValue('original_id')))
        }
        var selectorsStr = selectors.join(',');
        if (this._prevFadeInSelecor != null) {
            $(this._prevFadeInSelecor).stop(true, true)
        }
        $(selectorsStr).css('display', 'none').fadeIn(500);
        this._prevFadeInSelecor = selectorsStr
    }
};
core_update.prototype._getNoduelLeaguesUpdate = function() {
    var leaguesToUpdateHiddenState = {};
    if (tournamentPage == true || tournamentPagePassiveTable == true) {
        return leaguesToUpdateHiddenState
    }
    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var leagueItem;
    for (fsDataIndex in this.data_update) {
        if (eventDataHolder.hasEvent(fsDataIndex) === false) {
            continue
        }
        leagueItem = eventDataHolder.getEvent(fsDataIndex).getLeague();
        if (isNoDuelTournament(leagueItem.getId())) {
            leaguesToUpdateHiddenState[leagueItem.getId()] = 0
        }
    }
    return leaguesToUpdateHiddenState
};
core_update.prototype.updateEventPositions = function() {
    var eventDataHandler = cjs.dic.get('dataEventHolderProxy').getHandler();
    var lastLeagueId = '';
    var position;
    var changedEventIds = [];
    eventDataHandler.each(function(index, id) {
        var eventItem = this.getItem(id);
        var leagueId = eventItem.getValue('labl_id');
        if (!isNoDuelTournament(leagueId)) {
            return
        }
        if (leagueId !== lastLeagueId) {
            position = 1;
            lastLeagueId = leagueId
        }
        if (eventItem.getValue('pos') !== position) {
            changedEventIds.push(id);
            eventItem.setValue('pos', position)
        }
        position++
    });
    return changedEventIds
};
core_update.prototype.addAllMatchesToTableAndSort = function($table, labelId) {
    var tableType = this.getTableType();
    var tbody = $table.find('tbody');
    var elementsInTable = {};
    var elementsInTableCount = 0;
    var _tmp = labelId.split('_');
    var sportId = parseInt(_tmp[0]);
    var originalLeagueId = _tmp[1];
    var sportDefinition = cjs.template.getTemplateDefinitionForLabel(sportId, originalLeagueId);
    var gameRowCount = sportDefinition.getGameRowCount();
    var gameColCount = sportDefinition.getGameColumnCount();
    var useClassForMatchId = false;
    tbody.find('tr').each((function(that) {
        return function(index, element) {
            var ret = that._getEventItemIdFromElement(element);
            if (ret === false) {
                return
            }
            elementsInTable[ret.eventItemId] = 1;
            if (ret.parsedFrom === 'class') {
                useClassForMatchId = true
            }
            elementsInTableCount++
        }
    })(this));
    var newRows = [];
    var handler = cjs.dic.get('dataEventHolderProxy').getHandler();
    if (elementsInTableCount && gameRowCount > 1 && handler.count()) {
        newRows.push('<tr class="blank-line"><td colspan="', gameColCount, '"></td></tr>')
    }
    var group = cjs.mygamesGroups._valueToKey($table.find('thead tr span.mg_dropdown_selected').text());
    handler.each(function(index, id) {
        var eventItem = this.getItem(id);
        var leagueItem = eventItem.getLeague();
        if (leagueItem.getId() != labelId || typeof elementsInTable[id] !== 'undefined') {
            return
        }
        generateGameContentFromTemplate(id, [], newRows, group)
    });
    if (newRows.length) {
        tbody.append(newRows.join());
        this.updateMatchesPositionInTable(labelId, tableType, $table);
        this.strip_regenerate();
        if_resize()
    }
};
core_update.prototype.loadFeedForNoduelMygames = function(labelId, callback) {
    matchDay = cjs.mygames.getMatchDayForTournament(labelId);
    if (matchDay === 0 || matchDay === false) {
        callback();
        return
    }
    cjs.feedLoader.reset();
    cjs.feedLoader.beforeCallback(function() {
        updater.parse_only = true
    });
    cjs.feedLoader.afterCallback(function() {
        updater.parse_only = false;
        cjs.dic.get('dataEventHolderProxy').getHandler().resetIds();
        cjs.dic.get('dataLeagueHolderProxy').getHandler().resetIds();
        cjs.mygames.load(true);
        callback()
    });
    var sportId = parseInt(labelId.replace(/^([0-9]+)_[a-zA-Z0-9]{8}$/, '$1'), 10);
    var parentSportId = cjs.dic.get('util_sport').getParentSport(sportId);
    if (parentSportId != null) {
        sportId = parentSportId
    }
    cjs.feedLoader.addIntoQueue(cjs.feedRequest.getFeedData('full', sportId, matchDay));
    if (cjs.dic.get('utilConfig').get('app', 'project_type', 'name') === '_ass') {
        var feedRequest = cjs.feedRequest.getFeedData('odds', sportId, matchDay);
        feedRequest.completeCallback = function(r_status, r_headers, r_content, r_trigger) {
            parse(r_content, false, true)
        };
        cjs.feedLoader.addIntoQueue(feedRequest)
    }
    cjs.feedLoader.downloadAndExecuteFeeds()
};
core_update.prototype.runDisableVideoIconBlink = function(fsDataIndex) {
    var time = getVideoIconBlinkTimeout(cjs.dic.get('dataEventHolderProxy').getHolder().getEvent(fsDataIndex));
    if (project_type_name == '_portable' || cjs.dic.get('util_config').get('app', 'video_highlights_live_icon', 'enable') === false) {
        return
    }
    if (time < 1) {
        return
    }
    time = time + 1;
    if (typeof this.videoIconBlinkTimers[fsDataIndex] !== 'undefined') {
        clearTimeout(this.videoIconBlinkTimers[fsDataIndex])
    }
    this.videoIconBlinkTimers[fsDataIndex] = setTimeout((function(fsDataIndex) {
        return function() {
            var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
            if (!eventDataHolder.hasEvent(fsDataIndex)) {
                return
            }
            fs_update.property_set(fsDataIndex, 'AV', eventDataHolder.getEvent(fsDataIndex).getValue('AV'), "");
            fs_update.update()
        }
    })(fsDataIndex), time * 1000)
};
core_update.prototype._getEventItemIdFromElement = function(element) {
    var r = /g_[0-9]{1,2}_([a-zA-Z0-9]{16}|[a-zA-Z0-9]{8})/;
    var ret = r.exec(element.id);
    var type = "id";
    if (ret === null) {
        ret = r.exec(element.className);
        type = "class"
    }
    if (ret === null) {
        return false
    }
    return {
        eventItemId: ret[0],
        parsedFrom: type
    }
};
core_update.prototype.createBookmakerLink = function(urlParams, bookmakerId) {
    var utilEnviroment = cjs.dic.get('utilEnviroment');
    var utilUrl = cjs.dic.get('utilUrl');
    var bookmakerLink = utilEnviroment.getBookmakerLink() + bookmakerId;
    if (bookmakerId != '') {
        bookmakerLink += '/'
    }
    var url = utilUrl.addQueryStringParameter(bookmakerLink, urlParams);
    return url
};
core_update.prototype.removeEvent = function(id) {
    this.data_update = cjs.Util.Object.deleteKey(this.data_update, id)
};
var cjs = {
    'classes': {},
    'constants': {
        'event_stage_type': {
            "SCHEDULED": 1,
            "LIVE": 2,
            "FINISHED": 3,
            "TYPE_MAIN": "main",
            "TYPE_ALTER": "alter",
            "TYPE_MERGED": "merged"
        },
        'event_stage': {
            "TRANS_NAME_IFRAME_KEY": "trans_iframe",
            "TRANS_NAME_SHORTENED_KEY": "trans_shortened",
            "SCHEDULED": 1,
            "LIVE": 2,
            "FINISHED": 3,
            "POSTPONED": 4,
            "CANCELED": 5,
            "EXTRA_TIME": 6,
            "PENALTIES": 7,
            "RETIRED": 8,
            "WALKOVER": 9,
            "AFTER_EXTRA_TIME": 10,
            "AFTER_PENALTIES": 11,
            "FIRST_HALF": 12,
            "SECOND_HALF": 13,
            "FIRST_PERIOD": 14,
            "SECOND_PERIOD": 15,
            "THIRD_PERIOD": 16,
            "FIRST_SET": 17,
            "SECOND_SET": 18,
            "THIRD_SET": 19,
            "FOURTH_SET": 20,
            "FIFTH_SET": 21,
            "FIRST_QUARTER": 22,
            "SECOND_QUARTER": 23,
            "THIRD_QUARTER": 24,
            "FOURTH_QUARTER": 25,
            "FIRST_INNING": 26,
            "SECOND_INNING": 27,
            "THIRD_INNING": 28,
            "FOURTH_INNING": 29,
            "FIFTH_INNING": 30,
            "SIXTH_INNING": 31,
            "SEVENTH_INNING": 32,
            "EIGHTH_INNING": 33,
            "NINTH_INNING": 34,
            "EXTRA_INNING": 35,
            "INTERRUPTED": 36,
            "ABANDONED": 37,
            "HALF_TIME": 38,
            "TIME_OUT": 39,
            "FIRST_EXTRA_TIME": 40,
            "SECOND_EXTRA_TIME": 41,
            "PENDING": 42,
            "DELAYED": 43,
            "SUSPENDED": 44,
            "TO_FINISH": 45,
            "PAUSE": 46,
            "FIRST_SET_TIEBREAK": 47,
            "SECOND_SET_TIEBREAK": 48,
            "THIRD_SET_TIEBREAK": 49,
            "FOURTH_SET_TIEBREAK": 50,
            "FIFTH_SET_TIEBREAK": 51,
            "GAME": 52,
            "SECOND_PLACE": 53,
            "AWARDED": 54,
            "SIXTH_SET": 55,
            "SEVENTH_SET": 56,
            "AFTER_DAY1": 57,
            "AFTER_DAY2": 58,
            "AFTER_DAY3": 59,
            "AFTER_DAY4": 60,
            "AFTER_DAY5": 61,
            "AFTER_ROUND1": 62,
            "AFTER_ROUND2": 63,
            "AFTER_ROUND3": 64,
            "FIRST_ROUND": 65,
            "SECOND_ROUND": 66,
            "THIRD_ROUND": 67,
            "FOURTH_ROUND": 68,
            "AFTER_EXTRA_INNING": 69,
            "PRACTICE": 70,
            "QUALIFICATION": 71,
            "WARM_UP": 72,
            "RACE": 73,
            "MAIN": 74,
            "PRACTICE_1": 76,
            "PRACTICE_2": 77,
            "PRACTICE_3": 78,
            "PRACTICE_4": 79,
            "PRACTICE_5": 80,
            "PRACTICE_6": 81,
            "PRACTICE_7": 82,
            "QUALIFICATION_FIRST_STAGE": 83,
            "QUALIFICATION_SECOND_STAGE": 84,
            "QUALIFICATION_THIRD_STAGE": 85,
            "QUALIFICATION_1": 86,
            "QUALIFICATION_2": 87,
            "QUALIFICATION_3": 88,
            "RACE_1": 89,
            "RACE_2": 90,
            "TESTING": 91,
            "SPECIAL_STAGE_1": 92,
            "SPECIAL_STAGE_2": 93,
            "SPECIAL_STAGE_3": 94,
            "SPECIAL_STAGE_4": 95,
            "SPECIAL_STAGE_5": 96,
            "SPECIAL_STAGE_6": 97,
            "SPECIAL_STAGE_7": 99,
            "SPECIAL_STAGE_8": 100,
            "SPECIAL_STAGE_9": 101,
            "SPECIAL_STAGE_10": 102,
            "SPECIAL_STAGE_11": 103,
            "SPECIAL_STAGE_12": 104,
            "SPECIAL_STAGE_13": 105,
            "SPECIAL_STAGE_14": 106,
            "SPECIAL_STAGE_15": 107,
            "SPECIAL_STAGE_16": 108,
            "SPECIAL_STAGE_17": 109,
            "SPECIAL_STAGE_18": 110,
            "SPECIAL_STAGE_19": 111,
            "SPECIAL_STAGE_20": 112,
            "SPECIAL_STAGE_21": 113,
            "SPECIAL_STAGE_22": 114,
            "SPECIAL_STAGE_23": 115,
            "SPECIAL_STAGE_24": 116,
            "SPECIAL_STAGE_25": 117,
            "SPECIAL_STAGE_26": 118,
            "AFTER_STAGE_1": 149,
            "AFTER_STAGE_2": 150,
            "AFTER_STAGE_3": 151,
            "AFTER_STAGE_4": 152,
            "AFTER_STAGE_5": 153,
            "AFTER_STAGE_6": 154,
            "AFTER_STAGE_7": 155,
            "AFTER_STAGE_8": 156,
            "AFTER_STAGE_9": 157,
            "AFTER_STAGE_10": 158,
            "AFTER_STAGE_11": 159,
            "AFTER_STAGE_12": 160,
            "AFTER_STAGE_13": 161,
            "AFTER_STAGE_14": 162,
            "AFTER_STAGE_15": 163,
            "AFTER_STAGE_16": 164,
            "AFTER_STAGE_17": 165,
            "AFTER_STAGE_18": 166,
            "AFTER_STAGE_19": 167,
            "AFTER_STAGE_20": 168,
            "AFTER_STAGE_21": 169,
            "AFTER_STAGE_22": 170,
            "AFTER_STAGE_23": 171,
            "AFTER_STAGE_24": 172,
            "AFTER_STAGE_25": 173,
            "AFTER_STAGE_26": 174,
            "AFTER_STAGE_27": 175,
            "AFTER_STAGE_28": 176,
            "AFTER_STAGE_29": 177,
            "AFTER_STAGE_30": 178,
            "FIFTH_ROUND": 220,
            "SIXTH_ROUND": 221,
            "SEVENTH_ROUND": 222,
            "EIGHTH_ROUND": 223,
            "NINTH_ROUND": 224,
            "TENTH_ROUND": 225,
            "ELEVENTH_ROUND": 226,
            "TWELFTH_ROUND": 227,
            "FIRST_AND_SECOND_HALF": 9999
        },
        'event_incident_type': {
            "TRANS_GROUP_KEY": "trans_goup",
            "YELLOW_CARD": 1,
            "RED_CARD": 2,
            "GOAL": 3,
            "OWN_GOAL": 4,
            "PENALTY_KICK": 5,
            "SUBSTITUTION_OUT": 6,
            "SUBSTITUTION_IN": 7,
            "ASSISTANCE": 8,
            "SUSPENSION": 9,
            "PENALTY_SCORED": 10,
            "PENALTY_MISSED": 11,
            "BALL_POSSESSION": 12,
            "SHOTS_ON_GOAL": 13,
            "SHOTS_OFF_GOAL": 14,
            "FREE_KICKS": 15,
            "CORNER_KICKS": 16,
            "OFFSIDES": 17,
            "THROW_IN": 18,
            "GOALKEEPER_SAVES": 19,
            "GOAL_KICKS": 20,
            "FOULS": 21,
            "RED_CARDS": 22,
            "YELLOW_CARDS": 23,
            "SERVICE": 24,
            "HITS": 25,
            "ERRORS": 26,
            "TOUCH_DOWN": 27,
            "EXTRA_POINT": 28,
            "TWO_POINT_CONVERSION": 29,
            "FIELD_GOAL": 30,
            "SAFETY": 31,
            "FOUR_P_FIELD_GOAL": 32,
            "ROUGE": 33,
            "GOAL_ATTEMPTS": 34,
            "OUTS": 35,
            "OVERS": 36,
            "ACES": 37,
            "DOUBLE_FAULTS": 38,
            "BREAKS": 39,
            "BREAK_POINTS_WON": 40,
            "MAX_POINTS_IN_ROW": 41,
            "MAX_GAMES_IN_ROWS": 42,
            "SERVICE_POINTS_WON": 43,
            "SERVICE_POINTS_LOST": 44,
            "SERVICE_GAMES_WON": 45,
            "SERVICE_GAMES_LOST": 46,
            "NOT_ON_PITCH": 47,
            "ASSISTANCE_SECOND": 48,
            "SHOOTING": 49,
            "PENALTIES": 50,
            "POWERPLAY_GOALS": 51,
            "SHORTHANDED_GOALS": 52,
            "POWERPLAY": 53,
            "PENALTY_KILLING": 54,
            "FACEOFFS_WON": 55,
            "EMPTY_NET_GOALS": 56,
            "SAVES": 57,
            "PIM": 58,
            "SERVE_1ST_PCT": 59,
            "SERVE_1ST_WON": 60,
            "SERVE_2ND_WON": 61,
            "SERVICE_GAMES_PLAYED": 62,
            "RETURN_POINTS_1ST_WON": 63,
            "RETURN_POINTS_2ND_WON": 64,
            "TOTAL_POINTS_WON": 65,
            "RETURN_GAMES_PLAYED": 66,
            "BREAK_POINTS_SAVED": 67,
            "WINNERS": 68,
            "UNFORCED_ERRORS": 69,
            "SERVE_1ST_TOTAL": 70,
            "SERVE_2ND_TOTAL": 71,
            "RETURN_GAMES_WON": 72,
            "RETURN_GAMES_LOST": 73,
            "RETURN_POINTS_WON": 74,
            "RETURN_POINTS_LOST": 75,
            "TOTAL_GAMES_WON": 76,
            "TOTAL_POINTS": 77,
            "TOTAL_GAMES": 78,
            "SERVICE_POINTS_PLAYED": 79,
            "RETURN_POINTS_PLAYED": 80,
            "WICKETS_1ST_INNING": 81,
            "WICKETS_2ND_INNING": 82,
            "POWERPLAY_GOAL": 83,
            "SHORTHANDED_GOAL": 84,
            "EMPTY_NET_GOAL": 85,
            "UNCERTAINTY": 86,
            "BALLS_BOWLED": 101,
            "OVERS_BOWLED": 102,
            "BALLS_FACED": 103,
            "WICKETS_TAKEN": 104,
            "MAIDENS_BOWLED": 105,
            "BOUNDARY_FOURS": 106,
            "BOUNDARY_SIXES": 107,
            "BATSMAN_OUTED": 108,
            "RUNS_SCORED": 109,
            "RUNS_CONCEDED": 110,
            "RUNS_SCORED_PER_OVER": 111,
            "RUNS_CONCEDED_PER_OVER": 112,
            "MINUTES_BATTED": 113,
            "ASSISTS": 114,
            "BLOCKS": 115,
            "TURNOVERS": 116,
            "PERSONAL_FAULTS": 117,
            "FIELD_GOALS_MADE": 118,
            "FIELD_GOALS_ATTEMPED": 119,
            "FIELD_GOALS": 120,
            "TWO_POINTS_FIELD_GOALS_MADE": 121,
            "TWO_POINTS_FIELD_GOALS_ATTEMPED": 122,
            "TWO_POINTS_FIELD_GOALS": 123,
            "THREE_POINTS_FIELD_GOALS_MADE": 124,
            "THREE_POINTS_FIELD_GOALS_ATTEMPED": 125,
            "THREE_POINTS_FIELD_GOALS": 126,
            "FREE_THROWS_MADE": 127,
            "FREE_THROWS_ATTEMPED": 128,
            "FREE_THROWS": 129,
            "OFFENSIVE_REBOUNDS": 130,
            "DEFFENSIVE_REBOUNDS": 131,
            "BATSMAN": 134,
            "BOWLER": 137,
            "AT_BAT": 138,
            "TWO_B_DOUBLE": 139,
            "THREE_B_TRIPLE": 140,
            "HOME_RUNS": 141,
            "RUN_BATTED_IN": 142,
            "LEFT_ON_BASE": 143,
            "BASE_ON_BALLS": 144,
            "STRIKEOUTS": 145,
            "STOLEN_BASES": 146,
            "BATTING_AVERAGE": 147,
            "DOWNS_1ST": 152,
            "TOTAL_YARDS": 153,
            "PASSING_YARDS": 154,
            "RUSHING_YARDS": 155,
            "PENALTIES_YARDS": 156,
            "PUNTS": 157,
            "BLOCKED_SHOOTS": 158,
            "OUT": 159,
            "B": 160,
            "C": 161,
            "LBW": 162,
            "NO_BALLS": 163,
            "WHIDE": 164,
            "TRIES": 167,
            "TOTAL_REBOUNDS": 168,
            "BYE": 174,
            "LEG_BYE": 175,
            "EXTRAS": 176,
            "BEHIND": 179,
            "GOALS_2": 180,
            "RUN_OUT": 181,
            "KICKS": 182,
            "MARKS": 183,
            "HANDBALLS": 184,
            "DISPOSALS": 185,
            "GOALS": 186,
            "BEHINDS": 187,
            "HITOUTS": 188,
            "TACKLES": 189,
            "FREES_FOR": 190,
            "FREES_AGAINST": 191,
            "SUPER_GOALS": 197,
            "SUPER_GOAL": 199,
            "CLEARENCES": 200,
            "ST": 201,
            "CONVERSION_GOALS": 202,
            "PENALTY_GOALS": 203,
            "PENALTY_GOAL_ATTEMPTS": 204,
            "DROPPED_GOALS": 205,
            "DO_TRY": 206,
            "CONVERSION_GOAL": 207,
            "PENALTY_GOAL": 208,
            "DROP_GOAL": 209,
            "CONVERSION_GOAL_ATTEMPTS": 210,
            "GOALS_PERCENT": 211,
            "TOTAL_RUNS": 212,
            "METRES_RUN_WITH_BALL": 213,
            "RED_CARDS_2": 218,
            "YELLOW_CARDS_2": 219,
            "DROPPED_GOALS_ATTEMPTS": 226,
            "PENALTY_TRY": 265,
            "PENALTY_SHOT": 267,
            "GOLF_FINAL_RESULT": 268,
            "STEALS": 274,
            "MINOR_PENALTY": 276,
            "MAJOR_PENALTY": 277,
            "PERSONAL_FOUL": 278,
            "GAME_MISCONDUCT": 279,
            "CUT_OFF": 280,
            "DISQUALIFIED": 281,
            "DID_NOT_START": 282,
            "DID_NOT_FINISH": 283,
            "MADE_CUT_DID_NOT_FINISH": 284,
            "WITHDRAWN": 285,
            "RETIRED": 291,
            "DID_NOT_CLASSIFIED": 294,
            "BEHIND_RUSHED": 295,
            "SINGLE_POINT": 296,
            "NOT_QUALIFIED": 300,
            "OWNER_POINTS": 301,
            "ON_COURSE_TRACK": 302,
            "PASS_SUCCESS": 303,
            "TOTAL_PASSES": 304,
            "CURRENT_LAP": 306,
            "LEADER": 312,
            "GENERAL_LEADER": 314,
            "POINTS_LEADER": 315,
            "MOUNTAINS_LEADER": 316,
            "YOUTH_LEADER": 317,
            "CURRENT_WORLD_CHAMPION": 318,
            "LAST_IN_RACE": 319,
            "CURRENT_DISTANCE": 323,
            "NON_RUNNER": 326,
            "PULLED_UP": 327,
            "UNSEATED_RIDER": 328,
            "RAN_OUT": 329,
            "FALL": 330,
            "BROUGHT_DOWN": 331,
            "HIT_RAILS": 332,
            "REFUSED_TO_RACE": 333,
            "SEVEN_METER_THROW": 334,
            "SEVEN_METER_SCORED": 335,
            "SEVEN_METER_MISSED": 336,
            "KNOCKOUT": 338,
            "MARTIAL_ARTS_FINISHED": 340,
            "TECHNICAL_KNOCKOUT": 341,
            "COMPLETED_PASSES": 342,
            "DISTANCE_COVERED_METRES": 343,
            "SUBMISSION": 344,
            "NO_CONTEST": 346,
            "FIRST_SERVICE": 347,
            "MISSED_PENALTY": 348,
            "MISSED_CONVERSION": 349,
            "MISSED_DROP_GOAL": 350,
            "MISSED_FIELD_GOAL": 351,
            "MISSED_EXTRA_POINT": 352,
            "TWO_POINT_CONVERSION_FAILED": 353,
            "SLIPPED_UP": 356,
            "VIRTUAL_YELLOW_RED_CARD": -2
        },
        'event_incident_subtype': {
            "POWERPLAY_GOAL": 1,
            "SHORTHANDED_GOAL": 2,
            "EMPTY_NET_GOAL": 3,
            "SLASHING": 4,
            "BOARDING": 5,
            "BUTT_ENDING": 6,
            "CROSS_CHECKING": 7,
            "DELAY_OF_GAME": 8,
            "ELBOWING": 9,
            "FIGHTING": 10,
            "HIGH_STICKING": 11,
            "HOLDING": 12,
            "HOLDING_THE_STICK": 13,
            "HOOKING": 14,
            "ILLEGAL_EQUIPMENT": 15,
            "INSTIGATOR_PENALTY": 16,
            "INTERFERENCE": 17,
            "ROUGHING": 18,
            "KNEEING": 19,
            "TOO_MANY_MEN_ON_THE_ICE": 20,
            "TRIPPING": 21,
            "UNSPORTSMANLIKE_CONDUCT": 22,
            "CHARGING": 23,
            "CHECKING_FROM_BEHIND": 24,
            "HEAD_BUTTING": 25,
            "ILLEGAL_CHECK_TO_THE_HEAD": 26,
            "LEAVING_THE_PLAYERS_BENCH": 28,
            "SPEARING": 29,
            "ABUSE_OF_OFFICIALS": 30,
            "SERIOUS_FOUL": 66,
            "FOUL": 67,
            "HANDLING": 68,
            "DIVING": 69,
            "CLIPPING": 70,
            "THROWING_THE_STICK": 71,
            "IMPEDING": 72,
            "MATCH_PENALTY": 95,
            "LEAVING_GOAL_CREASE": 170,
            "YELLOW_JERSEY": 76,
            "GREEN_JERSEY": 77,
            "RED_POLKA_DOT_JERSEY": 78,
            "WHITE_JERSEY": 79,
            "PINK_JERSEY": 80,
            "RED_JERSEY": 81,
            "BLUE_POLKA_DOT_JERSEY": 82,
            "BLUE_JERSEY": 83,
            "BLACK_JERSEY": 84,
            "OCHRE_JERSEY": 85,
            "TURQUOISE_JERSEY": 86,
            "GOLD_JERSEY": 87,
            "SILVER_JERSEY": 88,
            "RAINBOW_JERSEY": 89,
            "KNOCKOUT": 91,
            "TECHNICAL_KNOCKOUT": 92,
            "POINTS": 93,
            "SUBMISSION": 148,
            "NO_CONTEST": 156,
            "PUNCHES": 94,
            "UNANIMOUS": 96,
            "SPLIT": 97,
            "PUNCH": 98,
            "GUILLOTINE_CHOKE": 99,
            "FLYING_KNEE": 100,
            "TRIANGLE_CHOKE": 101,
            "ARM_TRIANGLE_CHOKE": 102,
            "SUPLEX_AND_PUNCHES": 103,
            "REAR_NAKED_CHOKE": 104,
            "MAJORITY": 105,
            "ARMBAR": 106,
            "STRAIGHT_ARMBAR": 107,
            "UPKICK": 108,
            "BROKEN_EYE_SOCKET": 109,
            "CORNER_STOPPAGE": 110,
            "KNEE": 111,
            "KIMURA": 112,
            "ELBOW": 113,
            "KEYLOCK": 114,
            "ILLEGAL_DOWNWARD_ELBOWS": 115,
            "INJURY": 116,
            "BRABO_CHOKE": 117,
            "HEAD_KICK": 118,
            "KICK": 119,
            "CUT": 120,
            "DOCTOR_STOPPAGE": 121,
            "SOCCER_KICKS": 122,
            "NECK_CRANK": 123,
            "KICK_AND_PUNCHES": 124,
            "ELBOWS_AND_PUNCHES": 125,
            "HEAD_KICK_AND_PUNCHES": 126,
            "KICK_TO_THE_BODY": 127,
            "JUDGING_ERROR": 128,
            "ARMLOCK": 129,
            "LEGLOCK": 130,
            "HEEL_HOOK": 131,
            "SHOULDER_CHOKE": 132,
            "CALF_SLICER": 133,
            "OVERTURNED_BY_CSAC": 134,
            "ILLEGAL_KICK": 135,
            "KNEE_TO_THE_BODY": 136,
            "KNEE_AND_PUNCHES": 137,
            "RETIREMENT": 138,
            "NORTH_SOUTH_CHOKE": 139,
            "ACHILLES_LOCK": 140,
            "OMOPLATA": 141,
            "SPINNING_HEEL_KICK": 142,
            "FRONT_KICK_AND_PUNCHES": 143,
            "FRONT_KICK": 144,
            "KNEE_TO_THE_RIBS": 145,
            "KNEEBAR": 146,
            "STOMPS": 147,
            "PASS": 158,
            "RUN": 159,
            "TURNOVER": 160
        },
        'sport': {
            "TRANS_MENU_KEY": "trans_menu",
            "TRANS_SEARCH_PARTICIPANT_TITLE": "trans_search_participant_title",
            "DETAIL_TYPE": "detail",
            "DETAIL_TYPE_VERTICAL": "vertical",
            "DETAIL_TYPE_HORIZONTAL": "horizontal",
            "HAS_SPECIAL_INCIDENTS": "has-special-incidents",
            "CATEGORY_SPORT": "category-sport",
            "IRREPRESSIBLE_CATEGORY": "irrepressible-category",
            "COUNTRY_WITHIN_PLAYER_NAME": "country-within-player-name",
            "H2H_HOME_AWAY_SPORT": "is_home_away_sport",
            "SOUNDS": "sounds",
            "SOUND_FINISHED": "finished",
            "SOUND_CORRECTION": "correction",
            "SOUND_SCORE_INCREMENTED": "score-incremented",
            "SOUND_TENNIS_GAME": "tennis-game",
            "NO_DUEL": "no_duel",
            "PARENT": "parent",
            "SORT_PRIORITY": "sort_priority",
            "MIXED": -1,
            "SOCCER": 1,
            "TENNIS": 2,
            "BASKETBALL": 3,
            "HOCKEY": 4,
            "AMERICAN_FOOTBALL": 5,
            "BASEBALL": 6,
            "HANDBALL": 7,
            "RUGBY_UNION": 8,
            "FLOORBALL": 9,
            "BANDY": 10,
            "FUTSAL": 11,
            "VOLLEYBALL": 12,
            "CRICKET": 13,
            "DARTS": 14,
            "SNOOKER": 15,
            "BOXING": 16,
            "BEACH_VOLLEYBALL": 17,
            "AUSSIE_RULES": 18,
            "RUGBY_LEAGUE": 19,
            "BADMINTON": 21,
            "WATER_POLO": 22,
            "FIELD_HOCKEY": 24,
            "TABLE_TENNIS": 25,
            "BEACH_SOCCER": 26,
            "MMA": 28,
            "NETBALL": 29,
            "PESAPALLO": 30,
            "GOLF": 23,
            "MOTORSPORT": 31,
            "MOTORSPORT_AUTO_RACING": 32,
            "MOTORSPORT_MOTO_RACING": 33,
            "CYCLING": 34,
            "HORSE_RACING": 35,
            "ESPORTS": 36,
            "WINTER_SPORTS": 37,
            "WINTER_SPORTS_SKI_JUMPING": 38,
            "WINTER_SPORTS_ALPINE_SKIING": 39,
            "WINTER_SPORTS_CROSS_COUNTRY": 40,
            "WINTER_SPORTS_BIATHLON": 41
        },
        'tournament_stage_type': {
            "TST_QUALIFICATION": 1,
            "TST_MAIN": 2,
            "TST_SINGLES_QUALIFICATIONS": 3,
            "TST_DOUBLES_QUALIFICATIONS": 4,
            "TST_SINGLES_MAIN": 5,
            "TST_DOUBLES_MAIN": 6,
            "TST_MIXED_DOUBLES_QUALIFICATIONS": 7,
            "TST_MIXED_DOUBLES_MAIN": 8,
            "TST_TEAMS_QUALIFICATIONS": 9,
            "TST_TEAMS_MAIN": 10,
            "TST_PLAY_OFFS": 11,
            "TST_PLAY_OUT": 12,
            "TST_PROMOTION": 13,
            "TST_RELEGATION": 14,
            "TST_PRE_TO_SEASON": 15,
            "TST_QUALIFICATION_PLAY_OFFS": 16,
            "TST_ALL_STARS": 17,
            "TST_FINAL_FOUR": 18,
            "TST_PLACEMENT_GROUP": 19,
            "TST_PRELIMINARY": 20,
            "TST_COUNTRY_QUOTA": 21,
            "TST_TORNEO_DE_INVIERNO": 22,
            "TST_APERTURA": 23,
            "TST_CLAUSURA": 24,
            "TST_FIRST_ROUND": 25,
            "TST_SECOND_ROUND": 26,
            "TST_THIRD_ROUND": 27,
            "TST_SUPER_FINAL": 28,
            "TST_FIRST_STAGE": 29,
            "TST_SECOND_STAGE": 30,
            "TST_THIRD_STAGE": 31,
            "TST_ELITE_STAGE": 32,
            "TST_FINALIZACI\u00f3N": 33,
            "TST_APERTURA_PLAY_OFFS": 34,
            "TST_APERTURA_WINNERS": 35,
            "TST_APERTURA_LOSERS": 36,
            "TST_CLAUSURA_PLAY_OFFS": 37,
            "TST_COPA_SUDAMERICANA_PLAY_OFFS": 38,
            "TST_EUROPA_LEAGUE_PLAY_OFFS": 39,
            "TST_CHAMPIONSHIP_GROUP": 40,
            "TST_EUROPA_LEAGUE_GROUP": 41,
            "TST_5TH_TO_8TH_PLACES": 42,
            "TST_13TH_TO_16TH_PLACES": 43,
            "TST_9TH_TO_12TH_PLACES": 44,
            "TST_ELITE_QUALIFICATION": 45,
            "TST_9TH_TO_10TH_PLACES": 46,
            "TST_WINNERS_STAGE": 47,
            "TST_LOSERS_STAGE": 48,
            "TST_5TH_TO_12TH_PLACES": 49,
            "TST_9TH_TO_16TH_PLACES": 50,
            "TST_ADDITIONAL_QUALIFICATION": 51,
            "TST_GROUP_A": 52,
            "TST_GROUP_B": 53,
            "TST_SINGLES_PLAY_OFFS": 54,
            "TST_DOUBLES_PLAY_OFFS": 55,
            "TST_FINALIZACI\u00f3N_SEMI_TO_FINALS": 56,
            "TST_FINALIZACI\u00f3N_FINAL": 57,
            "TST_COPA_LIBERTADORES_LIGUILLA": 58,
            "TST_NORTH": 59,
            "TST_SOUTH": 60,
            "TST_1ST_TO_4TH_PLACES": 61,
            "TST_5TH_TO_10TH_PLACES": 62,
            "TST_TEAMS_PLAY_OFFS": 63,
            "TST_TORNEO_DE_INVIERNO_PLAY_OFFS": 64,
            "TST_TORNEO_DE_VERANO": 65,
            "TST_4TH_TO_7TH_PLACES": 66,
            "TST_FINAL_GROUP": 67,
            "TST_TACA_RIO": 68,
            "TST_TACA_GUANABARA": 69,
            "TST_TACA_GUANABARA_PLAY_OFFS": 70,
            "TST_TACA_RIO_PLAY_OFFS": 71,
            "TST_LIBERTADORES_PLAY_OFFS": 72,
            "TST_RELEGATION_GROUP": 73,
            "TST_RELEGATION_PLAY_TO_OFF": 74,
            "TST_CLAUSURA_GROUP_STAGE": 75,
            "TST_RELEGATION_PLAY_TO_OFFS": 76,
            "TST_CLAUSURA_FINAL": 77,
            "TST_CLAUSURA_2ND_STAGE": 78,
            "TST_ADECUACION": 79,
            "TST_QUARTER_TO_FINALS_ROUND": 80,
            "TST_SEMI_TO_FINALS_ROUND": 81,
            "TST_1ST_TO_6TH_PLACES": 82,
            "TST_7TH_TO_12TH_PLACES": 83,
            "TST_7TH_TO_10TH_PLACES": 84,
            "TST_QUALIFYING_FINALS": 85,
            "TST_PROMOTION_PLAY_OFFS": 86,
            "TST_PROMOTION_PLAYOFF_QUALIFYING": 87,
            "TST_ZONA_METROPOLITANA": 88,
            "TST_ZONA_INTERIOR": 89,
            "TST_OCEANIA_CHAMPIONS_CUP": 90,
            "TST_ASIAN_CLUB_CHAMPIONSHIP": 91,
            "TST_QUARTERFINALS": 92,
            "TST_TACA_GUANABARA_TROF\u00e9U_WR": 93,
            "TST_PROMOTION_GROUP": 94,
            "TST_CHAMPIONS_LEAGUE_PLAY_OFFS": 95,
            "TST_INTERTOTO_CUP_PLAY_OFFS": 96,
            "TST_GROUP_STAGE": 97,
            "TST_CONFERENCE_QUARTERFINALS": 98,
            "TST_CONSOLATION_TOURNAMENT": 99,
            "TST_PLACEMENT_PLAY_OFFS": 100,
            "TST_FOURTH_STAGE": 101,
            "TST_QUALIFICATION_FIRST_STAGE": 102,
            "TST_QUALIFICATION_SECOND_STAGE": 103,
            "TST_LOSERS_PLAY_OFFS": 104,
            "TST_QUALIFICATION_THIRD_STAGE": 105,
            "TST_FIRST_STAGE_MAIN": 106,
            "TST_FIRST_STAGE_PLAY_OFFS": 107,
            "TST_7TH_TO_8TH_PLACES": 108,
            "TST_PAULISTA_FINAL": 109,
            "TST_TROF\u00e9U_INTERIOR": 110,
            "TST_5TH_TO_6TH_PLACES": 111,
            "TST_TORNEO_DE_VERANO_PLAY_OFFS": 112,
            "TST_TACA_RIO_TROF\u00e9U_CAT": 113,
            "TST_WINNERS_PLAY_OFFS": 114,
            "TST_9TH_TO_24TH_PLACES": 115,
            "TST_RELEGATION_PLAY_OFFS": 116,
            "TST_9TH_TO_11TH_PLACES": 117,
            "TST_17TH_TO_22TH_PLACES": 118,
            "TST_17TH_TO_22TH_PLACES_PLAY_OFFS": 119,
            "TST_9TH_TO_18TH_PLACES": 120,
            "TST_9TH_TO_18TH_PLACES_PLAY_OFFS": 121,
            "TST_ADDITIONAL": 122,
            "TST_10TH_TO_13TH_PLACES": 123,
            "TST_APERTURA_FINAL": 124,
            "TST_APERTURA_SEMI_TO_FINALS": 125,
            "TST_QUALIFICATION_FOURTH_STAGE": 126,
            "TST_17TH_TO_20TH_PLACES": 127,
            "TST_21TH_TO_24TH_PLACES": 128,
            "TST_12TH_TO_14TH_PLACES": 129,
            "TST_9TH_TO_11TH_PLACES2": 130,
            "TST_PRACTICE": 175,
            "TST_PRACTICE_1": 176,
            "TST_PRACTICE_2": 177,
            "TST_PRACTICE_3": 178,
            "TST_GROUPED_STAGES": 236,
            "TST_TEAMS_PROMOTION": 224
        },
        'lineupPosition': {
            "STARTER": 1,
            "SUBSTITUTE": 2,
            "GOALKEEPER": 15,
            "REFEREE": 51,
            "SUBSTITUTE_GOALKEEPER": 52,
            "PITCHER": 50,
            "SUBSTITUTE_PITCHER": 53,
            "BATTER": 54
        },
        'MATCH_STATUS_TYPE_FIN': 3,
        'MATCH_STATUS_TYPE_SCHED': 1,
        'MATCH_STATUS_TYPE_LIVE': 2,
        'MATCH_STATUS_POST': 4,
        'MATCH_STATUS_ABD': 37,
        'MATCH_STATUS_CANC': 5,
        'tournamentPage': {
            "TAB_SUMMARY": "summary",
            "TAB_FIXTURES": "fixtures",
            "TAB_RESULTS": "results",
            "TAB_ARCHIVE": "archive",
            "TAB_STANDINGS": "standings",
            "TAB_STANDINGS_TABLE": "standings_table",
            "TAB_STANDINGS_DRAW": "standings_draw",
            "TAB_PARTICIPANTS": "participants",
            "TAB_PARTICIPANTS_TEAMS": "participants_teams",
            "TAB_PARTICIPANTS_PLAYERS": "participants_players",
            "PAGE_TYPE_RANKING": "ranking_page"
        },
        'participantPage': {
            "TAB_SUMMARY": "summary",
            "TAB_FIXTURES": "fixtures",
            "TAB_RESULTS": "results",
            "PAGE_TYPE_RANKING": "ranking_page"
        },
        'seriesPage': {
            "TAB_SUMMARY": "summary",
            "TAB_FIXTURES": "fixtures",
            "TAB_RESULTS": "results",
            "PAGE_TYPE_RANKING": "ranking_page"
        },
        'broadcast_channel_type': {
            "TV": 1,
            "BOOKMAKER": 2,
            "WWW": 3
        },
        'broadcast_properties': {
            "BROADCAST_BOOKMAKER_ID": "BI",
            "BROADCAST_NAME": "BN",
            "BROADCAST_URL": "BU",
            "BROADCAST_IMAGE_URL": "IU",
            "BROADCAST_IMAGE_OFFSET": "IO"
        },
        'participantTypeList': {
            "SIDE": "side",
            "TEAM": 1,
            "PLAYER": 2,
            "HOME": 3,
            "AWAY": 4,
            "PAIR_1": 5,
            "PAIR_2": 6,
            "PLAYER_1": 7,
            "PLAYER_2": 8,
            "TEAM_1": 9,
            "TEAM_2": 10,
            "GOALKEEPER": 12,
            "DEFENDER": 13,
            "MIDFIELDER": 14,
            "FORWARD": 15,
            "CLUB": 16,
            "NATIONAL": 17,
            "COACH": 27,
            "HORSE": 28,
            "DUMMY": 100,
            "HOME_SIDE": "home",
            "AWAY_SIDE": "away"
        },
        'bettingTypes': {
            "BT_1X2": 1,
            "OVER_UNDER": 2,
            "HOME_AWAY": 3,
            "DOUBLE_CHANCE": 4,
            "ASIAN_HANDICAP": 5,
            "DRAW_NO_BET": 6,
            "TO_QUALIFY": 7,
            "CORRECT_SCORE": 8,
            "HALF_TIME_FULL_TIME": 9,
            "ODD_OR_EVEN": 10,
            "WINNER": 11,
            "EUROPEAN_HANDICAP": 12,
            "BOTH_TEAMS_TO_SCORE": 13,
            "BT_TW": 14,
            "BT_TP": 15,
            "BT_WEW": 16,
            "BT_TWP": 101
        },
        'winnerSides': {
            "UNKNOWN": -1,
            "DRAW": 0,
            "HOME": 1,
            "AWAY": 2
        },
        'statsDataType': {
            "RANK": 1,
            "POINTS": 2,
            "JUMP_ROUND_1": 3,
            "JUMP_ROUND_2": 4,
            "TIME": 5,
            "GAP": 6,
            "EVENT_PARTICIPANT_SORT_KEY": 7,
            "STOP_REASON": 8,
            "PENALTY_LAP": 9,
            "MISSED_SHOT": 10,
            "STOP_EVENT_STAGE": 11,
            "POINTS_ROUND_1": 12,
            "POINTS_ROUND_2": 13,
            "TIME_ROUND_1": 14,
            "TIME_ROUND_2": 15,
            "STOP_REASON_ROUND_1": 16,
            "STOP_REASON_ROUND_2": 17,
            "ON_TRACK": 18,
            "STOP_REASON_TEXT": 19,
            "LAPS_DISTANCE": 20,
            "JUMP_COUNT": 21
        }
    },
    'cfg': {
        'deprecatedBrowsers': {
            'webkit': 20,
            'gecko': 17,
            'ie': 9,
            'safari': 4,
            'opera': 11
        },
        'deprecatedBrowsersPremiumContent': {
            'webkit': 10,
            'gecko': 5,
            'ie': 9,
            'safari': 4,
            'opera': 11
        },
        'sortByTime': false,
        'topLeaguesFirst': false,
        'time_keep_match_live': 180000,
        'mygames_past_days': 1,
        'mygames_future_days': 7,
        'noDuelSports': [23, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41],
        'parentSports': {
            "32": 31,
            "33": 31,
            "38": 37,
            "39": 37,
            "40": 37,
            "41": 37
        },
        'categorySports': [2, 16, 17, 21, 25, 28, 23, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41],
        'projectId': 2
    },
    eventId: null,
    'Util': {},
    '_list': {},
    'bookmakersData': {
        "default": {
            "main_bookmaker_id": "16",
            "project_id": "2",
            "geo_ip": "default",
            "name": "bet365"
        },
        "GB": {
            "main_bookmaker_id": "16",
            "project_id": "2",
            "geo_ip": "GB",
            "name": "bet365"
        },
        "ES": {
            "main_bookmaker_id": "16",
            "project_id": "2",
            "geo_ip": "ES",
            "name": "bet365"
        },
        "IT": {
            "main_bookmaker_id": "419",
            "project_id": "2",
            "geo_ip": "IT",
            "name": "bet365.it"
        },
        "FR": {
            "main_bookmaker_id": "129",
            "project_id": "2",
            "geo_ip": "FR",
            "name": "bwin.fr"
        },
        "AU": {
            "main_bookmaker_id": "16",
            "project_id": "2",
            "geo_ip": "AU",
            "name": "bet365"
        },
        "RU": {
            "main_bookmaker_id": "453",
            "project_id": "2",
            "geo_ip": "RU",
            "name": "1xStavka"
        }
    },
    'availableBookmakers': {
        "default": ["16", "15", "14", "5", "2", "3", "60", "76", "429"],
        "GB": ["16", "15", "14", "5", "429", "76", "60"],
        "ES": ["16", "406", "15", "392"],
        "IT": ["419", "394", "140", "384", "157", "372", "379"],
        "FR": ["129", "141", "139", "398", "160"],
        "AU": ["16", "124", "158"],
        "RU": ["453", "454", "455"]
    },
    'portable': {},
    'tournamentTemplateCategoryList': {
        "7771": "DAKAR",
        "6578": "SPEEDWAY",
        "6576": "WRC"
    }
};
cjs._list.broadcastExpectedPositions = [2, 3, 1];
cjs.search = {
    'participantsTitles': {
        "1": {
            "teams": "Teams",
            "players": "Players"
        },
        "2": "Players",
        "3": "Teams",
        "4": {
            "teams": "Teams",
            "players": "Players"
        },
        "5": "Teams",
        "6": "Teams",
        "7": "Teams",
        "8": "Teams",
        "9": "Teams",
        "10": "Teams",
        "11": "Teams",
        "12": "Teams",
        "18": "Teams",
        "19": "Teams",
        "13": "Teams",
        "14": "Players",
        "15": "Players",
        "16": "Players",
        "17": "Players",
        "21": "Players",
        "22": "Teams",
        "24": "Teams",
        "25": "Players",
        "26": "Teams",
        "28": "Players",
        "29": "Teams",
        "30": "Teams",
        "23": "Players",
        "31": "Teams",
        "32": "Teams",
        "33": "Teams",
        "34": "Teams",
        "35": "Teams",
        "36": "Teams",
        "37": "Teams",
        "38": "Teams",
        "39": "Teams",
        "40": "Teams",
        "41": "Teams"
    },
    'sortedSports': {
        "1": 0,
        "2": 1,
        "3": 2,
        "4": 3,
        "8": 4,
        "6": 5,
        "5": 6,
        "13": 7,
        "23": 8,
        "18": 9,
        "21": 10,
        "10": 11,
        "26": 12,
        "17": 13,
        "16": 14,
        "34": 15,
        "14": 16,
        "36": 17,
        "24": 18,
        "9": 19,
        "11": 20,
        "7": 21,
        "35": 22,
        "28": 23,
        "31": 24,
        "29": 25,
        "30": 26,
        "19": 27,
        "15": 28,
        "25": 29,
        "12": 30,
        "22": 31,
        "37": 32
    },
    'jsonpCallback': function(data) {
        cjs.dic.get('SearchWindow').onResponse(data)
    }
};
cjs.superTemplateDefinition = {
    "5724": {
        "flag": "3473162",
        "sport_id": "2",
        "category_id": 9011
    },
    "5725": {
        "flag": "3473164",
        "sport_id": "2",
        "category_id": 9012
    },
    "5726": {
        "flag": "3473163",
        "sport_id": "2",
        "category_id": 9021
    },
    "5727": {
        "flag": "3473165",
        "sport_id": "2",
        "category_id": 9022
    },
    "5728": {
        "flag": "3473167",
        "sport_id": "2",
        "category_id": 9030
    },
    "5729": {
        "flag": "3473162",
        "sport_id": "2",
        "category_id": 9001
    },
    "5730": {
        "flag": "3473164",
        "sport_id": "2",
        "category_id": 9010
    },
    "5731": {
        "flag": "3473163",
        "sport_id": "2",
        "category_id": 9003
    },
    "5732": {
        "flag": "3473165",
        "sport_id": "2",
        "category_id": 9013
    },
    "5733": {
        "flag": "3473162",
        "sport_id": "2",
        "category_id": 9002
    },
    "5734": {
        "flag": "3473164",
        "sport_id": "2",
        "category_id": 9006
    },
    "5735": {
        "flag": "3473163",
        "sport_id": "2",
        "category_id": 9004
    },
    "5736": {
        "flag": "3473165",
        "sport_id": "2",
        "category_id": 9007
    },
    "5737": {
        "flag": "3473162",
        "sport_id": "2",
        "category_id": 9008
    },
    "5738": {
        "flag": "3473164",
        "sport_id": "2",
        "category_id": 9009
    },
    "5739": {
        "flag": "3473163",
        "sport_id": "2",
        "category_id": 9014
    },
    "5740": {
        "flag": "3473165",
        "sport_id": "2",
        "category_id": 9015
    },
    "5741": {
        "flag": "3473163",
        "sport_id": "2",
        "category_id": 9992
    },
    "5743": {
        "flag": "3473167",
        "sport_id": "2",
        "category_id": 9994
    },
    "6393": {
        "flag": "3473165",
        "sport_id": "2",
        "category_id": 9993
    },
    "7897": {
        "flag": "3473162",
        "sport_id": "2",
        "category_id": 9016
    },
    "7898": {
        "flag": "3473163",
        "sport_id": "2",
        "category_id": 9018
    },
    "7899": {
        "flag": "3473164",
        "sport_id": "2",
        "category_id": 9017
    },
    "7900": {
        "flag": "3473165",
        "sport_id": "2",
        "category_id": 9019
    },
    "8430": {
        "flag": "3473166",
        "sport_id": "2",
        "category_id": null
    },
    "5744": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9050
    },
    "5745": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": null
    },
    "5746": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9052
    },
    "5747": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": null
    },
    "5748": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9054
    },
    "5749": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9055
    },
    "5750": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9056
    },
    "5751": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9057
    },
    "5752": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9058
    },
    "5753": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9059
    },
    "5754": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9060
    },
    "5755": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9061
    },
    "5756": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9062
    },
    "5757": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9063
    },
    "5758": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9064
    },
    "5759": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9065
    },
    "5760": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9066
    },
    "5761": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9067
    },
    "5762": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9068
    },
    "5763": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9069
    },
    "5764": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9070
    },
    "5765": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9071
    },
    "5766": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9072
    },
    "5767": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9073
    },
    "5768": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9074
    },
    "5769": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9075
    },
    "5770": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9076
    },
    "5771": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9077
    },
    "5772": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9078
    },
    "5773": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9079
    },
    "5774": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9080
    },
    "5775": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9081
    },
    "5776": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9082
    },
    "5777": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9083
    },
    "5778": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9084
    },
    "5779": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9085
    },
    "5780": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9086
    },
    "5781": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9089
    },
    "5782": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9088
    },
    "5783": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9087
    },
    "5784": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9090
    },
    "5785": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9091
    },
    "5788": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8050
    },
    "5789": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8051
    },
    "5790": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8052
    },
    "5791": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8053
    },
    "5792": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8054
    },
    "5793": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8055
    },
    "5794": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8056
    },
    "5795": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8057
    },
    "5796": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8058
    },
    "5797": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8059
    },
    "5798": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8060
    },
    "5799": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8061
    },
    "5800": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8062
    },
    "5801": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8063
    },
    "5802": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8066
    },
    "5803": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8067
    },
    "5804": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8064
    },
    "5805": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8065
    },
    "7103": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8068
    },
    "7104": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8069
    },
    "5806": {
        "flag": "3473162",
        "sport_id": "21",
        "category_id": 8001
    },
    "5807": {
        "flag": "3473164",
        "sport_id": "21",
        "category_id": 8002
    },
    "5808": {
        "flag": "3473163",
        "sport_id": "21",
        "category_id": 8003
    },
    "5809": {
        "flag": "3473165",
        "sport_id": "21",
        "category_id": 8004
    },
    "5810": {
        "flag": "3473167",
        "sport_id": "21",
        "category_id": 8005
    },
    "5811": {
        "flag": "3473162",
        "sport_id": "21",
        "category_id": 8006
    },
    "5812": {
        "flag": "3473164",
        "sport_id": "21",
        "category_id": 8007
    },
    "5813": {
        "flag": "3473163",
        "sport_id": "21",
        "category_id": 8008
    },
    "5814": {
        "flag": "3473165",
        "sport_id": "21",
        "category_id": 8009
    },
    "5815": {
        "flag": "3473167",
        "sport_id": "21",
        "category_id": 8010
    },
    "5816": {
        "flag": "3473162",
        "sport_id": "21",
        "category_id": 8011
    },
    "5817": {
        "flag": "3473164",
        "sport_id": "21",
        "category_id": 8012
    },
    "5818": {
        "flag": "3473163",
        "sport_id": "21",
        "category_id": 8013
    },
    "5819": {
        "flag": "3473165",
        "sport_id": "21",
        "category_id": 8014
    },
    "5820": {
        "flag": "3473167",
        "sport_id": "21",
        "category_id": 8015
    },
    "5821": {
        "flag": "3473163",
        "sport_id": "21",
        "category_id": 9992
    },
    "5823": {
        "flag": "3473167",
        "sport_id": "21",
        "category_id": 9994
    },
    "5824": {
        "flag": "3473162",
        "sport_id": "21",
        "category_id": 9995
    },
    "5826": {
        "flag": "3473163",
        "sport_id": "21",
        "category_id": 9997
    },
    "5828": {
        "flag": "3473167",
        "sport_id": "21",
        "category_id": 9999
    },
    "5951": {
        "flag": "3473165",
        "sport_id": "21",
        "category_id": 9993
    },
    "5954": {
        "flag": "3473164",
        "sport_id": "21",
        "category_id": 9996
    },
    "5956": {
        "flag": "3473165",
        "sport_id": "21",
        "category_id": 9998
    },
    "5829": {
        "flag": "3473162",
        "sport_id": "25",
        "category_id": 8100
    },
    "5830": {
        "flag": "3473164",
        "sport_id": "25",
        "category_id": 8101
    },
    "5831": {
        "flag": "3473163",
        "sport_id": "25",
        "category_id": 8102
    },
    "5832": {
        "flag": "3473165",
        "sport_id": "25",
        "category_id": 8103
    },
    "5833": {
        "flag": "3473167",
        "sport_id": "25",
        "category_id": 8104
    },
    "5834": {
        "flag": "3473163",
        "sport_id": "25",
        "category_id": 9992
    },
    "5836": {
        "flag": "3473167",
        "sport_id": "25",
        "category_id": 9994
    },
    "5837": {
        "flag": "3473162",
        "sport_id": "25",
        "category_id": 9995
    },
    "5839": {
        "flag": "3473163",
        "sport_id": "25",
        "category_id": 9997
    },
    "5841": {
        "flag": "3473167",
        "sport_id": "25",
        "category_id": 9999
    },
    "6376": {
        "flag": "3473165",
        "sport_id": "25",
        "category_id": 9993
    },
    "6379": {
        "flag": "3473164",
        "sport_id": "25",
        "category_id": 9996
    },
    "6381": {
        "flag": "3473165",
        "sport_id": "25",
        "category_id": 9998
    },
    "5842": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9054
    },
    "5843": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9058
    },
    "5844": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9062
    },
    "5845": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9066
    },
    "5846": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9072
    },
    "5847": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9078
    },
    "5848": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9090
    },
    "5849": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9084
    },
    "5850": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9086
    },
    "8011": {
        "flag": "3473164",
        "sport_id": "28",
        "category_id": 9059
    },
    "8012": {
        "flag": "3473164",
        "sport_id": "28",
        "category_id": 9092
    },
    "8108": {
        "flag": "3473164",
        "sport_id": "28",
        "category_id": null
    },
    "8110": {
        "flag": "3473164",
        "sport_id": "28",
        "category_id": null
    },
    "8122": {
        "flag": "3473164",
        "sport_id": "28",
        "category_id": null
    },
    "5852": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8150
    },
    "5853": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8151
    },
    "5854": {
        "flag": "3473164",
        "sport_id": "23",
        "category_id": 8161
    },
    "5855": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8153
    },
    "5856": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8154
    },
    "5857": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8156
    },
    "5858": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8157
    },
    "5859": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8158
    },
    "6157": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": null
    },
    "7059": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": null
    },
    "7326": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8159
    },
    "7693": {
        "flag": "3473164",
        "sport_id": "23",
        "category_id": 8152
    },
    "8424": {
        "flag": "3473166",
        "sport_id": "23",
        "category_id": null
    },
    "5860": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7100
    },
    "6575": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7102
    },
    "6576": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7204
    },
    "6577": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7101
    },
    "6653": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7103
    },
    "6654": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7104
    },
    "7771": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7207
    },
    "7977": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7209
    },
    "7978": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7210
    },
    "7979": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7211
    },
    "7980": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7212
    },
    "7981": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7213
    },
    "8390": {
        "flag": null,
        "sport_id": "32",
        "category_id": null
    },
    "5861": {
        "flag": null,
        "sport_id": "33",
        "category_id": 7200
    },
    "6495": {
        "flag": null,
        "sport_id": "33",
        "category_id": 7201
    },
    "6496": {
        "flag": null,
        "sport_id": "33",
        "category_id": 7202
    },
    "6578": {
        "flag": null,
        "sport_id": "33",
        "category_id": 7203
    },
    "7862": {
        "flag": null,
        "sport_id": "33",
        "category_id": 7208
    },
    "7205": {
        "flag": null,
        "sport_id": "34",
        "category_id": 7300
    },
    "7206": {
        "flag": null,
        "sport_id": "34",
        "category_id": 7301
    },
    "7310": {
        "flag": 7400,
        "sport_id": "36",
        "category_id": 7400
    },
    "7311": {
        "flag": 7401,
        "sport_id": "36",
        "category_id": 7401
    },
    "7360": {
        "flag": 7402,
        "sport_id": "36",
        "category_id": 7402
    },
    "7361": {
        "flag": 7403,
        "sport_id": "36",
        "category_id": 7403
    },
    "7362": {
        "flag": 7404,
        "sport_id": "36",
        "category_id": 7404
    },
    "8401": {
        "flag": "3473162",
        "sport_id": "39",
        "category_id": null
    },
    "8402": {
        "flag": "3473164",
        "sport_id": "39",
        "category_id": null
    },
    "8403": {
        "flag": "3473162",
        "sport_id": "39",
        "category_id": null
    },
    "8404": {
        "flag": "3473164",
        "sport_id": "39",
        "category_id": null
    },
    "8405": {
        "flag": "3473162",
        "sport_id": "39",
        "category_id": null
    },
    "8406": {
        "flag": "3473164",
        "sport_id": "39",
        "category_id": null
    },
    "8407": {
        "flag": "3473162",
        "sport_id": "39",
        "category_id": null
    },
    "8408": {
        "flag": "3473164",
        "sport_id": "39",
        "category_id": null
    },
    "8409": {
        "flag": "3473162",
        "sport_id": "39",
        "category_id": null
    },
    "8410": {
        "flag": "3473164",
        "sport_id": "39",
        "category_id": null
    },
    "8645": {
        "flag": "3473162",
        "sport_id": "39",
        "category_id": null
    },
    "8653": {
        "flag": "3473164",
        "sport_id": "39",
        "category_id": null
    },
    "8416": {
        "flag": "3473162",
        "sport_id": "38",
        "category_id": null
    },
    "8417": {
        "flag": "3473164",
        "sport_id": "38",
        "category_id": null
    },
    "8418": {
        "flag": "3473162",
        "sport_id": "38",
        "category_id": null
    },
    "8419": {
        "flag": "3473164",
        "sport_id": "38",
        "category_id": null
    },
    "8420": {
        "flag": "3473162",
        "sport_id": "38",
        "category_id": null
    },
    "8491": {
        "flag": "3473163",
        "sport_id": "38",
        "category_id": null
    },
    "8544": {
        "flag": "3473163",
        "sport_id": "38",
        "category_id": null
    },
    "8646": {
        "flag": "3473162",
        "sport_id": "38",
        "category_id": null
    },
    "8648": {
        "flag": "3473164",
        "sport_id": "38",
        "category_id": null
    },
    "8446": {
        "flag": "3473162",
        "sport_id": "41",
        "category_id": null
    },
    "8447": {
        "flag": "3473164",
        "sport_id": "41",
        "category_id": null
    },
    "8448": {
        "flag": "3473162",
        "sport_id": "41",
        "category_id": null
    },
    "8449": {
        "flag": "3473164",
        "sport_id": "41",
        "category_id": null
    },
    "8450": {
        "flag": "3473162",
        "sport_id": "41",
        "category_id": null
    },
    "8451": {
        "flag": "3473164",
        "sport_id": "41",
        "category_id": null
    },
    "8452": {
        "flag": "3473162",
        "sport_id": "41",
        "category_id": null
    },
    "8453": {
        "flag": "3473164",
        "sport_id": "41",
        "category_id": null
    },
    "8454": {
        "flag": "3473163",
        "sport_id": "41",
        "category_id": null
    },
    "8455": {
        "flag": "3473165",
        "sport_id": "41",
        "category_id": null
    },
    "8456": {
        "flag": "3473167",
        "sport_id": "41",
        "category_id": null
    },
    "8457": {
        "flag": "3473166",
        "sport_id": "41",
        "category_id": null
    },
    "8641": {
        "flag": "3473162",
        "sport_id": "41",
        "category_id": null
    },
    "8642": {
        "flag": "3473164",
        "sport_id": "41",
        "category_id": null
    },
    "8460": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8461": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8462": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8463": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8464": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8465": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8466": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8467": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8468": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8469": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8472": {
        "flag": "3473163",
        "sport_id": "40",
        "category_id": null
    },
    "8473": {
        "flag": "3473165",
        "sport_id": "40",
        "category_id": null
    },
    "8474": {
        "flag": "3473163",
        "sport_id": "40",
        "category_id": null
    },
    "8475": {
        "flag": "3473165",
        "sport_id": "40",
        "category_id": null
    },
    "8527": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8528": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8529": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8530": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8531": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8532": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8535": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8536": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8537": {
        "flag": "3473163",
        "sport_id": "40",
        "category_id": null
    },
    "8538": {
        "flag": "3473165",
        "sport_id": "40",
        "category_id": null
    },
    "8643": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8652": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8827": {
        "flag": "3473162",
        "sport_id": "15",
        "category_id": null
    },
    "8841": {
        "flag": null,
        "sport_id": "14",
        "category_id": null
    }
};
cjs.isBrowserDeprecated = function(checkForPremiumContent) {
    return cjs.dic.get('util_browser').isDeprecated(checkForPremiumContent)
};
cjs.full_loaded = false;
cjs.repair_loaded = false;
cjs.parseCustomHeadersCallbacks = [];
cjs.hourFormat = 'H:i';
cjs.dateTimeFormat = 'd.m. H:i';
cjs.dateTimeFormatTwoLines = 'd.m.<br/>H:i';
cjs.fullDateTimeFormat = 'd.m.Y H:i';
cjs.fullDateFormat = 'd.m.Y';
cjs.fullDateShortFormat = 'd.m.Y';
cjs.dateFormat = 'd.m.';
cjs.geoIP = null;
cjs.prepareGeoIP = function() {
    if (this.geoIP) {
        return
    }
    load_geoIP_clientIP()
};
cjs.clientIP = null;
cjs.getOriginalLabelId = function(labelId) {
    return labelId.replace(/(.*)-.*/, '$1')
};
var feed_sign = 'SW9D1eZo';
var pom_array = new Array();
var fs_counter;
var fs_update;
var fs_fade;
var fsEventsUpdatedStartTime = {};
reset_env();
var fs_detail = {};
var ajax = new Array();
var iframe_stop_generating = false;
var iframe_part_generator = null;
var iframe_height = 0;
var prefered_sport_id;
var matches;
var iframe_external = false;
var mid_s;
var hover_color;
var url_check;
var referrer_url;
var verify_status;
var css_ident;
var config_hash_id = 0;
var lsin_status = false;
var sport = null;
var sport_id = null;
var SPORTS_WITH_LIVECENTRE = [1, 2, 4, 6, 5, 3, 13, 18, 19, 8];
var country = null;
var tournament = null;
var participant = null;
cjs.participantPage = null;
var series = null;
cjs.seriesPage = null;
var updater = null;
var category_default = 0;
var category = category_default;
var navigation_category = category;
var sub_category = null;
var fullfeed_trigger = null;
var regenerate = false;
var disable_update = false;
var page_is_initialized = false;
var g2utime = 0;
var sudate = 0;
var tudate;
var refresh_utime = 0;
var ums_timeoutId = null;
var default_tz = null;
var interval_live = null;
var bookmaker_link = '/bookmaker/';
var odds_type = null;
var odds_betslip = false;
var has_more_formats = true;
var ODDS_FORMAT_LIST = new Array();
ODDS_FORMAT_LIST['eu'] = new Array();
ODDS_FORMAT_LIST['eu']['name_iframe'] = 'EU';
ODDS_FORMAT_LIST['eu']['name_title'] = 'EU Odds (1.50)';
ODDS_FORMAT_LIST['uk'] = new Array();
ODDS_FORMAT_LIST['uk']['name_iframe'] = 'UK';
ODDS_FORMAT_LIST['uk']['name_title'] = 'UK Odds (1/2)';
ODDS_FORMAT_LIST['us'] = new Array();
ODDS_FORMAT_LIST['us']['name_iframe'] = 'US';
ODDS_FORMAT_LIST['us']['name_title'] = 'US Odds (-200)';
ODDS_FORMAT_LIST['hk'] = new Array();
ODDS_FORMAT_LIST['hk']['name_iframe'] = 'HK';
ODDS_FORMAT_LIST['hk']['name_title'] = 'Hong Kong (0.50)';
ODDS_FORMAT_LIST['ma'] = new Array();
ODDS_FORMAT_LIST['ma']['name_iframe'] = 'MA';
ODDS_FORMAT_LIST['ma']['name_title'] = 'Malay (0.50)';
ODDS_FORMAT_LIST['in'] = new Array();
ODDS_FORMAT_LIST['in']['name_iframe'] = 'IN';
ODDS_FORMAT_LIST['in']['name_title'] = 'Indonesian (-2.00)';
var goal_duration_time = 60;
var correction_duration_time = 15;
var penalty_duration_time = 60;
var counter_duration_time = 60;
var click_detail = true;
var project_type_id = 1;
var project_type_name = '_fs';
var project_layout = 'flashscore';
var base_url = location.host;
var base_feed_x_url = 'http://' + base_url.replace('www.', 'd.') + '/x/feed/';
var feedProxyUrl = 'http://' + base_url.replace('www.', 'd.') + "\/x\/feed\/proxy";
var u_304 = 'd41d8cd98f00b204e9800998ecf8427e';
var default_odds_format = 'eu';
var pdiff = 0;
var service_status = 0;
var scrollbar_width = 0;
var ajax_updater = '';
var mpr = 0;
var custom_enable = false;
var stats_enable = false;
var swap = {};
var parsed_sports = {};
var sport_sort = {};
var odds_enable = false;
var ff_data = '';
var sys_interval_checker = null;
var counter_update_interval = null;
var mixed_feed = false;
var calendar = {
    "buttons": {
        "prev_day": true,
        "next_day": true
    },
    "range": 7
};
var odds_layout = 'default';
var us_odds_layout = (odds_layout == 'us' ? true : false);
var home_score_part = ['BA', 'BC', 'BE', 'BG', 'BI', 'BK', 'BM', 'BO', 'BQ', 'BS', 'BU', 'FA'];
var away_score_part = ['BB', 'BD', 'BF', 'BH', 'BJ', 'BL', 'BN', 'BP', 'BR', 'BT', 'BV', 'FB'];
var JS_ROW_END = '~';
var JS_CELL_END = '¬';
var JS_INDEX = '÷';
var refresh_in_progress = null;
var refresh_serial = null;
var stats_behaviour = 'global';
var stats_force_icon = false;
var body_width;
var body_height;
var freescore_serverside = false;
var debug_sync_no = 0;
var debug_update_no = 0;
var debug_generate_no = 0;
var tt = null;
var ttb = null;
var e_t = null;
var mpe_delivery = 'a';
cjs._translates = {
    "TRANS_DC_INCIDENT_SUBTYPE_31": "ERS",
    "TRANS_DC_INCIDENT_SUBTYPE_32": "Fuel system",
    "TRANS_DC_INCIDENT_SUBTYPE_33": "Accident",
    "TRANS_DC_INCIDENT_SUBTYPE_34": "Engine",
    "TRANS_DC_INCIDENT_SUBTYPE_35": "Oil pressure",
    "TRANS_DC_INCIDENT_SUBTYPE_36": "Power unit",
    "TRANS_DC_INCIDENT_SUBTYPE_37": "Gearbox",
    "TRANS_DC_INCIDENT_SUBTYPE_38": "Retired",
    "TRANS_DC_INCIDENT_SUBTYPE_39": "Turbo",
    "TRANS_DC_INCIDENT_SUBTYPE_40": "Clutch",
    "TRANS_DC_INCIDENT_SUBTYPE_41": "Oil leak",
    "TRANS_DC_INCIDENT_SUBTYPE_42": "Brakes",
    "TRANS_DC_INCIDENT_SUBTYPE_43": "Exhaust",
    "TRANS_DC_INCIDENT_SUBTYPE_44": "Fuel pump",
    "TRANS_DC_INCIDENT_SUBTYPE_45": "Rear wing",
    "TRANS_DC_INCIDENT_SUBTYPE_46": "Suspension",
    "TRANS_DC_INCIDENT_SUBTYPE_47": "Drive train",
    "TRANS_DC_INCIDENT_SUBTYPE_48": "Ignition",
    "TRANS_DC_INCIDENT_SUBTYPE_49": "Cooling",
    "TRANS_DC_INCIDENT_SUBTYPE_50": "Electrical",
    "TRANS_DC_INCIDENT_SUBTYPE_51": "Wheel",
    "TRANS_DC_INCIDENT_SUBTYPE_52": "KERS",
    "TRANS_DC_INCIDENT_SUBTYPE_53": "Front wing",
    "TRANS_DC_INCIDENT_SUBTYPE_54": "Tyre",
    "TRANS_DC_INCIDENT_SUBTYPE_55": "Hydraulics",
    "TRANS_DC_INCIDENT_SUBTYPE_56": "Mechanical",
    "TRANS_DC_INCIDENT_SUBTYPE_57": "Alternator",
    "TRANS_DC_INCIDENT_SUBTYPE_58": "Steering",
    "TRANS_DC_INCIDENT_SUBTYPE_59": "Differential",
    "TRANS_DC_INCIDENT_SUBTYPE_60": "Throttle",
    "TRANS_DC_INCIDENT_SUBTYPE_61": "Not enough laps completed",
    "TRANS_DC_INCIDENT_SUBTYPE_62": "Airbox",
    "TRANS_DC_INCIDENT_SUBTYPE_63": "Injury",
    "TRANS_DC_INCIDENT_SUBTYPE_64": "Technical problem",
    "TRANS_DC_INCIDENT_SUBTYPE_65": "Team decision",
    "TRANS_DC_INCIDENT_SUBTYPE_158": "Pass",
    "TRANS_DC_INCIDENT_SUBTYPE_159": "Run",
    "TRANS_DC_INCIDENT_SUBTYPE_160": "Turnover",
    "TRANS_DC_CUT_OFF": "Cut-Off",
    "TRANS_DC_SHORT_CUT_OFF": "CUT",
    "TRANS_DC_DISQUALIFIED": "Disqualified",
    "TRANS_DC_SHORT_DISQUALIFIED": "DSQ",
    "TRANS_DC_DID_NOT_START": "Did Not Start",
    "TRANS_DC_SHORT_DID_NOT_START": "DNS",
    "TRANS_DC_DID_NOT_FINISH": "Did Not Finish",
    "TRANS_DC_SHORT_DID_NOT_FINISH": "DNF",
    "TRANS_DC_MADE_CUT_DID_NOT_FINISH": "Made Cut, Did Not Finish",
    "TRANS_DC_SHORT_MADE_CUT_DID_NOT_FINISH": "MDF",
    "TRANS_DC_WITHDRAWN": "Withdrawn",
    "TRANS_DC_SHORT_WITHDRAWN": "WD",
    "TRANS_DC_RETIRED": "Retired",
    "TRANS_DC_SHORT_RETIRED": "RET",
    "TRANS_DC_DID_NOT_CLASSIFIED": "Not Classified",
    "TRANS_DC_SHORT_DID_NOT_CLASSIFIED": "NC",
    "TRANS_DC_NOT_QUALIFIED": "Not Qualified",
    "TRANS_DC_SHORT_NOT_QUALIFIED": "DNQ",
    "TRANS_DC_OWNER_POINTS": "Owner Points",
    "TRANS_DC_SHORT_OWNER_POINTS": "OP",
    "TRANS_DC_NON_RUNNER": "Non Runner",
    "TRANS_DC_SHORT_NON_RUNNER": "NR",
    "TRANS_DC_PULLED_UP": "Pulled Up",
    "TRANS_DC_SHORT_PULLED_UP": "PU",
    "TRANS_DC_UNSEATED_RIDER": "Unseated Rider",
    "TRANS_DC_SHORT_UNSEATED_RIDER": "UR",
    "TRANS_DC_RAN_OUT": "Ran Out",
    "TRANS_DC_SHORT_RAN_OUT": "RO",
    "TRANS_DC_FALL": "Fell",
    "TRANS_DC_SHORT_FALL": "F",
    "TRANS_DC_BROUGHT_DOWN": "Brought Down",
    "TRANS_DC_SHORT_BROUGHT_DOWN": "BD",
    "TRANS_DC_HIT_RAILS": "Hit Rails",
    "TRANS_DC_SHORT_HIT_RAILS": "HR",
    "TRANS_DC_REFUSED_TO_RACE": "Refused To Race",
    "TRANS_DC_SHORT_REFUSED_TO_RACE": "RTR",
    "TRANS_DC_SLIPPED_UP": "Slipped Up",
    "TRANS_DC_SHORT_SLIPPED_UP": "SU",
    "TRANS_ADVERTISEMENT": "advertisement",
    "TRANS_AMERICAN_FOOTBALL_TEAM_ON_BALL": "Ball possesion",
    "TRANS_AUSSIE_RULES_BEHINDS": "Behinds",
    "TRANS_AUSSIE_RULES_GOALS": "Goals",
    "TRANS_AUSSIE_RULES_POINTS": "Points",
    "TRANS_AUSSIE_RULES_SUPER_GOALS": "Super Goals",
    "TRANS_BADMINTON_SERVING_PLAYER": "Serving player",
    "TRANS_VOLLEYBALL_SERVING_TEAM": "Serving team",
    "TRANS_BEACH_VOLLEYBALL_SERVING_TEAM": "Serving team",
    "TRANS_BASEBALL_BATTING_TEAM": "Batting team",
    "TRANS_BASEBALL_ERRORS": "Errors",
    "TRANS_BASEBALL_HITS": "Hits",
    "TRANS_BASEBALL_MATCH_STATUS_": null,
    "TRANS_LOST_SHORT": "L",
    "TRANS_BASEBALL_PITCHERS": "Pitchers",
    "TRANS_WIN_SHORT": "W",
    "TRANS_BASEBALL_PITCHING_TEAM": "Pitching team",
    "TRANS_BASEBALL_RUNS": "Runs",
    "TRANS_BASEBALL_SHORT_ERRORS": "E",
    "TRANS_BASEBALL_SHORT_HITS": "H",
    "TRANS_BASEBALL_SHORT_RUNS": "R",
    "TRANS_PESAPALLO_SHORT_1HF": "H1",
    "TRANS_PESAPALLO_SHORT_2HF": "H2",
    "TRANS_PESAPALLO_BATTING_TEAM": "Batting team",
    "TRANS_PESAPALLO_PITCHING_TEAM": "Pitching team",
    "TRANS_PESAPALLO_MATCH_STATUS_EINN": "Extra Inning",
    "TRANS_PESAPALLO_SHORT_EINN": "EI",
    "TRANS_PESAPALLO_MATCH_STATUS_PEN": "Penalties",
    "TRANS_PESAPALLO_SHORT_PEN": "P",
    "TRANS_BLOCK_LABEL_PARTNERS": "Partners",
    "TRANS_BOOKMARK_ALL": "All Games",
    "TRANS_BOOKMARK_CUSTOMIZE": "My Games",
    "TRANS_BOOKMARK_FIN": "Finished",
    "TRANS_BOOKMARK_LATEST_SCORES": "Latest Scores",
    "TRANS_BOOKMARK_LIVE": "LIVE Games",
    "TRANS_BOOKMARK_ODDS": "%s Odds",
    "TRANS_BOOKMARK_SCHED": "Scheduled",
    "TRANS_BOXING_DRAW": "Draw",
    "TRANS_BOXING_RESULT_KO": "KO",
    "TRANS_BOXING_RESULT_POINTS": "Points",
    "TRANS_BOXING_RESULT_TKO": "Technical KO",
    "TRANS_BOXING_RESULT_SUBMISSION": "Submission",
    "TRANS_BOXING_RESULT_NO_CONTEST": "No Contest",
    "TRANS_BOXING_RESULT_SHORT_KO": "KO",
    "TRANS_BOXING_RESULT_SHORT_POINTS": "PTS",
    "TRANS_BOXING_RESULT_SHORT_TKO": "TKO",
    "TRANS_BOXING_RESULT_SHORT_SUBMISSION": "SUBM",
    "TRANS_BOXING_RESULT_SHORT_NO_CONTEST": "NC",
    "TRANS_BOXING_ROUND": "Round %s",
    "TRANS_CLICK_FOR_MATCH_DETAIL": "Click for match detail!",
    "TRANS_CLICK_FOR_DETAIL": "Click for details!",
    "TRANS_CLICK_FOR_PLAYER_CARD": "Click for player card!",
    "TRANS_CLICK_FOR_MORE_SPORT_GAMES": "More games from category [sport]",
    "TRANS_CLICK_FOR_ODDS_COMPARISON": "Click for odds comparison!",
    "TRANS_CLICK_TO_SEE_LINEUPS": "Click to see lineups!",
    "TRANS_CLICK_TO_WATCH_VIDEO_HIGHLIGHTS": "Click to watch video highlights!",
    "TRANS_CLOSE_WINDOW": "close window",
    "TRANS_CRICKET_2_DAY_MATCH": "2-day match.",
    "TRANS_CRICKET_3_DAY_MATCH": "3-day match.",
    "TRANS_CRICKET_4_DAY_MATCH": "4-day match.",
    "TRANS_CRICKET_5_DAY_MATCH": "5-day match.",
    "TRANS_CRICKET_BATSMAN": "Batsman",
    "TRANS_CRICKET_BATTING_TEAM": "Batting team",
    "TRANS_CRICKET_BOWLER": "Bowler",
    "TRANS_CRICKET_BOWLING_TEAM": "Bowling team",
    "TRANS_CRICKET_DAY_1": "Day 1.",
    "TRANS_CRICKET_DAY_2": "Day 2.",
    "TRANS_CRICKET_DAY_3": "Day 3.",
    "TRANS_CRICKET_DAY_4": "Day 4.",
    "TRANS_CRICKET_DAY_5": "Day 5.",
    "TRANS_CRICKET_LAST_SIX_BALLS": "Last six balls",
    "TRANS_CRICKET_OVERS": "Overs",
    "TRANS_CRICKET_RUNS": "Runs",
    "TRANS_CRICKET_SHORT_RUNS": "R",
    "TRANS_CRICKET_WICKETS": "Wickets",
    "TRANS_CRICKET_WICKET": "Wicket",
    "TRANS_CYCLING_BOOKMARK_ALL": "All Races",
    "TRANS_CYCLING_BOOKMARK_LIVE": "LIVE",
    "TRANS_CYCLING_BOOKMARK_FIN": "Finished",
    "TRANS_CYCLING_BOOKMARK_SCHED": "Scheduled",
    "TRANS_CYCLING_STAGE_TYPE_FLAT": "flat stage",
    "TRANS_CYCLING_STAGE_TYPE_MEDIUM_MOUNTAIN": "medium-mountain stage",
    "TRANS_CYCLING_STAGE_TYPE_MOUNTAIN": "mountain stage",
    "TRANS_CYCLING_STAGE_TYPE_INDIVIDUAL_TIME_TRIAL": "individual time trial",
    "TRANS_CYCLING_STAGE_TYPE_TEAM_TIME_TRIAL": "team time trial",
    "TRANS_DARTS_BEGINNING_PLAYER": "Beginning player",
    "TRANS_DARTS_BEST_OF_LEGS": "Best of %s legs",
    "TRANS_DARTS_BEST_OF_LEGS_IFRAME": "%s L",
    "TRANS_DARTS_BEST_OF_SETS": "Best of %s sets",
    "TRANS_DARTS_BEST_OF_SETS_IFRAME": "%s S",
    "TRANS_DARTS_LEG_NUMBER": "Leg %s",
    "TRANS_DARTS_SET_NUMBER": "Set %s",
    "TRANS_DAY_FRI": "Friday",
    "TRANS_DAY_MON": "Monday",
    "TRANS_DAY_NEXT": "Next day",
    "TRANS_DAY_PREVIOUS": "Previous day",
    "TRANS_DAY_SAT": "Saturday",
    "TRANS_DAY_SHORT_FRI": "Fr",
    "TRANS_DAY_SHORT_MON": "Mo",
    "TRANS_DAY_SHORT_SAT": "Sa",
    "TRANS_DAY_SHORT_SUN": "Su",
    "TRANS_DAY_SHORT_THU": "Th",
    "TRANS_DAY_SHORT_TUE": "Tu",
    "TRANS_DAY_SHORT_WED": "We",
    "TRANS_DAY_SUN": "Sunday",
    "TRANS_DAY_THU": "Thursday",
    "TRANS_DAY_TODAY": "Today",
    "TRANS_DAY_TUE": "Tuesday",
    "TRANS_DAY_WED": "Wednesday",
    "TRANS_MOTORSPORT_LEADER": "LEADER",
    "TRANS_MOTORSPORT_WINNER": "Winner",
    "TRANS_DEFAULT_MATCH_STATUS_1INN": "1st Inning",
    "TRANS_DEFAULT_MATCH_STATUS_2INN": "2nd Inning",
    "TRANS_DEFAULT_MATCH_STATUS_3INN": "3rd Inning",
    "TRANS_DEFAULT_MATCH_STATUS_4INN": "4th Inning",
    "TRANS_DEFAULT_MATCH_STATUS_5INN": "5th Inning",
    "TRANS_DEFAULT_MATCH_STATUS_6INN": "6th Inning",
    "TRANS_DEFAULT_MATCH_STATUS_7INN": "7th Inning",
    "TRANS_DEFAULT_MATCH_STATUS_8INN": "8th Inning",
    "TRANS_DEFAULT_MATCH_STATUS_9INN": "9th Inning",
    "TRANS_DEFAULT_MATCH_STATUS_EINN": "Extra Inning",
    "TRANS_DEFAULT_MATCH_STATUS_ROUND1": "Round 1",
    "TRANS_DEFAULT_MATCH_STATUS_ROUND2": "Round 2",
    "TRANS_DEFAULT_MATCH_STATUS_ROUND3": "Round 3",
    "TRANS_DEFAULT_MATCH_STATUS_ROUND4": "Round 4",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_ROUND1": "After round 1",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_ROUND2": "After round 2",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_ROUND3": "After round 3",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY1": "After day 1",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY2": "After day 2",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY3": "After day 3",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY4": "After day 4",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY5": "After day 5",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_STAGE": "After Stage %s",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_SS": "After SS %s",
    "TRANS_DEFAULT_MATCH_STATUS_SHORT_EINN": "EI",
    "TRANS_DEFAULT_MATCH_STATUS_FIN": "Finished",
    "TRANS_DEFAULT_MATCH_STATUS_INT": "Interrupted",
    "TRANS_DEFAULT_MATCH_STATUS_DEL": "Delayed",
    "TRANS_DEFAULT_MATCH_STATUS_POST": "Postponed",
    "TRANS_DEFAULT_MATCH_STATUS_ABD": "Abandoned",
    "TRANS_DEFAULT_MATCH_STATUS_PAUSE": "Break Time",
    "TRANS_DEFAULT_MATCH_STATUS_AWARD": "Awarded",
    "TRANS_DEFAULT_MATCH_STATUS_PENDING": "Awaiting updates",
    "TRANS_DEFAULT_MATCH_STATUS_TOFINISH": "To finish",
    "TRANS_DEFAULT_MATCH_STATUS_LIVE": "Live",
    "TRANS_DEFAULT_MATCH_STATUS_1HF": "1st Half",
    "TRANS_DEFAULT_MATCH_STATUS_2HF": "2nd Half",
    "TRANS_DEFAULT_MATCH_STATUS_CANC": "Cancelled",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_LINEUPS": "lineups",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_ODDS_COMPARISON": "odds-comparison",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_STATISTICS": "match-statistics",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_SUMMARY": "match-summary",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_TV": "tv",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_VIDEO_HIGHLIGHTS": "video",
    "TRANS_DETAIL_WATCH_VIDEO": "Watch video!",
    "TRANS_DETAIL_BOOKMARK_BONUS_OFFERS": "Bonus offers",
    "TRANS_DETAIL_BOOKMARK_H2H": "H2H",
    "TRANS_DETAIL_BOOKMARK_LINEUPS": "Lineups",
    "TRANS_DETAIL_BOOKMARK_LIVE_CENTRE": "Live Centre",
    "TRANS_DETAIL_BOOKMARK_LIVE_COMMENTARY": "LIVE Commentary",
    "TRANS_DETAIL_BOOKMARK_LIVE_TABLE": "LIVE Table",
    "TRANS_DETAIL_BOOKMARK_MATCH": "Match",
    "TRANS_DETAIL_BOOKMARK_MATCH_HISTORY": "Match History",
    "TRANS_DETAIL_BOOKMARK_MATCH_HISTORY_DARTS": "Match History",
    "TRANS_DETAIL_BOOKMARK_MATCH_HISTORY_TENNIS": "Point by Point",
    "TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY": "Match Summary",
    "TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2": "Match Summary",
    "TRANS_DETAIL_BOOKMARK_ODDS_COMPARISON": "Odds Comparison",
    "TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS": "Player Statistics",
    "TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS_CRICKET": "Scorecard",
    "TRANS_DETAIL_BOOKMARK_PLAYER_CARD": "Player Card",
    "TRANS_DETAIL_BOOKMARK_PRE_MATCH_ODDS": "Pre-match odds",
    "TRANS_DETAIL_BOOKMARK_ROUND_RESULTS": "Round Results",
    "TRANS_DETAIL_BOOKMARK_STATISTICS": "Statistics",
    "TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS_GOLF": "Statistics",
    "TRANS_DETAIL_BOOKMARK_TV_SCHEDULE": "TV",
    "TRANS_DETAIL_BOOKMARK_TV_LIVE_STREAMING": "TV \/ Live Streaming",
    "TRANS_DETAIL_BOOKMARK_VIDEO_HIGHLIGHTS": "Video",
    "TRANS_DETAIL_BOOKMARK_PLAYER_RESULTS": "Results",
    "TRANS_DETAIL_BOOKMARK_ODDS": "Odds",
    "TRANS_DETAIL_MATCH_SUMMARY_NO_DATA_SCHED": "No live score information available now, the match has not started yet.",
    "TRANS_DETAIL_RACE_SUMMARY_NO_DATA_SCHED": "No live score information available.",
    "TRANS_DETAIL_TOURNAMENT_SUMMARY_NO_DATA_SCHED": "No live score information available, the tournament has not started yet.",
    "TRANS_STANDINGS_DRAW": "Draw",
    "TRANS_STANDINGS_TABLE": "Standings",
    "TRANS_DETAIL_BOOKMARK_STANDINGS_TABLE": "Standings",
    "TRANS_DETAIL_BOOKMARK_STANDINGS_DRAW": "Draw",
    "TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER": "You must be logged in to use this feature.",
    "TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER_LOGIN_LINK": "You must be logged in to use this feature. <a href=\"#\">You can log in here!<\/a>",
    "TRANS_FINAL_RESULT_ONLY": "Final result only.",
    "TRANS_FINAL_RESULT_ONLY_SHORT": "FRO",
    "TRANS_FOOTER_TOP_ARROW": "Top",
    "TRANS_GOLF_MATCH_STATUS_": null,
    "TRANS_GOLF_PAR": "Par",
    "TRANS_GOLF_HOLE": "Hole",
    "TRANS_GOLF_HOLE_COL": "Thru",
    "TRANS_GOLF_RANK": "Rank",
    "TRANS_GOLF_SHORT_PAR": "Par",
    "TRANS_GOLF_SHORT_TOTAL": "Total",
    "TRANS_GOLF_TOTAL": "Total",
    "TRANS_GOLF_BOOKMARK_ALL": "All Tournaments",
    "TRANS_GOLF_BOOKMARK_LIVE": "LIVE",
    "TRANS_GOLF_BOOKMARK_FIN": "Finished",
    "TRANS_GOLF_BOOKMARK_SCHED": "Scheduled",
    "TRANS_HOCKEY_CORRECTION_VIDEO_REFEREE": "Video referee",
    "TRANS_HOCKEY_GOAL": "GOAL",
    "TRANS_LINK_TO_PARENT_PROJECT_STANDINGS": "More info on %s",
    "TRANS_LIVE_BETTING_ICON_TITLE_SCHEDULED": "This match will be available for LIVE betting!",
    "TRANS_LIVE_BETTING_ICON_TITLE_LIVE": "Bet on this match now LIVE!",
    "TRANS_LIVE_CENTRE_ICON_TITLE": "Click to see a detailed match info in our Live Centre!",
    "TRANS_LIVE_CENTRE_ICON_TITLE_FUTURE": "Detailed match info will be available after start of the match.",
    "TRANS_LSIN_UNAUTHORIZED_WEBSITE": null,
    "TRANS_LSIN_URL_FREE_FAQ": null,
    "TRANS_MATCH_LIST_NOT_FOUND": "No match found.",
    "TRANS_MATCH_LIST_NOT_FOUND_LIVE": "No match is being played right now.",
    "TRANS_MATCH_LIST_NOT_FOUND_PLAN_NEXT_GAME": "Next match will be played on [time].",
    "TRANS_MATCH_LIST_NOT_FOUND_PLAN_NO_NEXT_GAME": "There is no match scheduled for the next %s days.",
    "TRANS_MATCH_LIST_NOT_FOUND_PLAN_NO_PAST_GAME": "There was no match played in the last %s days.",
    "TRANS_MATCH_LIST_NOT_FOUND_PLAN_PAST_GAME": "Last match was played on [time].",
    "TRANS_MATCH_LIST_NOT_FOUND_TODAY": "There are no [sport] matches taking place today.",
    "TRANS_MATCH_LIST_NOT_FOUND_TODAY_INFO_1": "You can follow scores from other sports. The most visited sections on [project_name] are <a href=\"[soccer_url]\" target=\"_top\">SOCCER<\/a> and <a href=\"[tennis_url]\" target=\"_top\">TENNIS<\/a>.",
    "TRANS_MATCH_LIST_NOT_FOUND_TODAY_INFO_2": "We offer live scores, final results, standings and match details from [sport_count] sports.",
    "TRANS_MATCH_LIST_NOT_FOUND_TODAY_INFO_3": "",
    "TRANS_RACE_LIST_NOT_FOUND": "No race found.",
    "TRANS_RACE_LIST_NOT_FOUND_LIVE": "No race is being held right now.",
    "TRANS_RACE_LIST_NOT_FOUND_PLAN_NEXT_GAME": "Next race will be held on [time].",
    "TRANS_RACE_LIST_NOT_FOUND_PLAN_NO_NEXT_GAME": "There is no race scheduled for the next %s days.",
    "TRANS_RACE_LIST_NOT_FOUND_PLAN_NO_PAST_GAME": "There was no race held in the last %s days.",
    "TRANS_RACE_LIST_NOT_FOUND_PLAN_PAST_GAME": "Last race was held on [time].",
    "TRANS_RACE_LIST_NOT_FOUND_TODAY": "There are no races taking place today.",
    "TRANS_HORSE_RACE_LIST_NOT_FOUND": "No race found.",
    "TRANS_HORSE_RACE_LIST_NOT_FOUND_LIVE": "No race is being held right now.",
    "TRANS_HORSE_RACE_LIST_NOT_FOUND_PLAN_NEXT_GAME": "Next race will be held on [time].",
    "TRANS_HORSE_RACE_LIST_NOT_FOUND_PLAN_NO_NEXT_GAME": "There is no race scheduled for the next %s days.",
    "TRANS_HORSE_RACE_LIST_NOT_FOUND_PLAN_NO_PAST_GAME": "There was no race held in the last %s days.",
    "TRANS_HORSE_RACE_LIST_NOT_FOUND_PLAN_PAST_GAME": "Last race was held on [time].",
    "TRANS_HORSE_RACE_LIST_NOT_FOUND_TODAY": "There are no races taking place today.",
    "TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND": "No race found.",
    "TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND_LIVE": "No race is being held right now.",
    "TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND_PLAN_NEXT_GAME": "Next race will be held on [time].",
    "TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND_PLAN_NO_NEXT_GAME": "There is no race scheduled for the next %s days.",
    "TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND_PLAN_NO_PAST_GAME": "There was no race held in the last %s days.",
    "TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND_PLAN_PAST_GAME": "Last race was held on [time].",
    "TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND_TODAY": "There are no races taking place today.",
    "TRANS_TOURNAMENT_LIST_NOT_FOUND": "No tournament found.",
    "TRANS_TOURNAMENT_LIST_NOT_FOUND_LIVE": "No tournament is being played right now.",
    "TRANS_TOURNAMENT_LIST_NOT_FOUND_PLAN_NEXT_GAME": "Next tournament will be played on [time].",
    "TRANS_TOURNAMENT_LIST_NOT_FOUND_PLAN_NO_NEXT_GAME": "There is no tournament scheduled for the next %s days.",
    "TRANS_TOURNAMENT_LIST_NOT_FOUND_PLAN_NO_PAST_GAME": "There was no tournament played in the last %s days.",
    "TRANS_TOURNAMENT_LIST_NOT_FOUND_PLAN_PAST_GAME": "Last tournament was played on [time].",
    "TRANS_TOURNAMENT_LIST_NOT_FOUND_TODAY": "There are no tournaments taking place today.",
    "TRANS_MOTORSPORT_AUTO_RACING_RANK": "Rank",
    "TRANS_MOTORSPORT_AUTO_RACING_NUMBER": "No",
    "TRANS_MOTORSPORT_AUTO_RACING_SHORT_NUMBER": "No",
    "TRANS_MOTORSPORT_AUTO_RACING_PLAYER": "Driver",
    "TRANS_MOTORSPORT_AUTO_RACING_SHORT_PLAYER": "Driver",
    "TRANS_MOTORSPORT_AUTO_RACING_TEAM": "Team",
    "TRANS_MOTORSPORT_AUTO_RACING_SHORT_TEAM": "Team",
    "TRANS_MOTORSPORT_AUTO_RACING_LAPS": "Laps",
    "TRANS_MOTORSPORT_AUTO_RACING_SHORT_LAPS": "Laps",
    "TRANS_MOTORSPORT_AUTO_RACING_TIME": "Time",
    "TRANS_MOTORSPORT_AUTO_RACING_SHORT_TIME": "Time",
    "TRANS_MOTORSPORT_AUTO_RACING_GRID": "Grid",
    "TRANS_MOTORSPORT_AUTO_RACING_SHORT_GRID": "Grid",
    "TRANS_MOTORSPORT_MOTO_RACING_RANK": "Rank",
    "TRANS_MOTORSPORT_MOTO_RACING_NUMBER": "No",
    "TRANS_MOTORSPORT_MOTO_RACING_SHORT_NUMBER": "No",
    "TRANS_MOTORSPORT_MOTO_RACING_PLAYER": "Driver",
    "TRANS_MOTORSPORT_MOTO_RACING_SHORT_PLAYER": "Driver",
    "TRANS_MOTORSPORT_MOTO_RACING_TEAM": "Team",
    "TRANS_MOTORSPORT_MOTO_RACING_SHORT_TEAM": "Team",
    "TRANS_MOTORSPORT_MOTO_RACING_LAPS": "Laps",
    "TRANS_MOTORSPORT_MOTO_RACING_SHORT_LAPS": "Laps",
    "TRANS_MOTORSPORT_MOTO_RACING_TIME": "Time",
    "TRANS_MOTORSPORT_MOTO_RACING_SHORT_TIME": "Time",
    "TRANS_MOTORSPORT_MOTO_RACING_GRID": "Grid",
    "TRANS_MOTORSPORT_MOTO_RACING_SHORT_GRID": "Grid",
    "TRANS_MOTORSPORT_AUTO_RACING_PITSTOPS": "Pitstops",
    "TRANS_MOTORSPORT_AUTO_RACING_SHORT_PITSTOPS": "Pit",
    "TRANS_MOTORSPORT_AUTO_RACING_ONE_LAP": null,
    "TRANS_MOTORSPORT_ONE_LAP": "lap",
    "TRANS_MOTORSPORT_LAP_SHORT": "l.",
    "TRANS_MOTORSPORT_LAPS_TOTAL": "laps",
    "TRANS_MOTORSPORT_KM": "km",
    "TRANS_MOTORSPORT_NO_TIME": "No time",
    "TRANS_MOTORSPORT_BOOKMARK_ALL": "All Races",
    "TRANS_MOTORSPORT_BOOKMARK_LIVE": "LIVE",
    "TRANS_MOTORSPORT_BOOKMARK_FIN": "Finished",
    "TRANS_MOTORSPORT_BOOKMARK_SCHED": "Scheduled",
    "TRANS_MOTORSPORT_TIME_SECOND_SHORT": "s",
    "TRANS_MOTORSPORT_AUTO_RACING_SURFACE_TARMAC": "tarmac",
    "TRANS_MOTORSPORT_AUTO_RACING_SURFACE_SNOW": "snow",
    "TRANS_MOTORSPORT_AUTO_RACING_SURFACE_GRAVEL": "gravel",
    "TRANS_MOTORSPORT_AUTO_RACING_SURFACE_SNOW_AND_TARMAC": "snow and tarmac",
    "TRANS_MOTORSPORT_AUTO_RACING_SURFACE_TARMAC_AND_GRAVEL": "tarmac and gravel",
    "TRANS_MOTORSPORT_AUTO_RACING_SURFACE_GRAVEL_AND_SNOW": "gravel and snow",
    "TRANS_MMA_DRAW": "Draw",
    "TRANS_MMA_RESULT_KO": "KO",
    "TRANS_MMA_RESULT_POINTS": "Points",
    "TRANS_MMA_RESULT_TKO": "Technical KO",
    "TRANS_MMA_RESULT_SUBMISSION": "Submission",
    "TRANS_MMA_RESULT_NO_CONTEST": "No Contest",
    "TRANS_MMA_RESULT_SHORT_KO": "KO",
    "TRANS_MMA_RESULT_SHORT_POINTS": "PTS",
    "TRANS_MMA_RESULT_SHORT_TKO": "TKO",
    "TRANS_MMA_RESULT_SHORT_SUBMISSION": "SUBM",
    "TRANS_MMA_RESULT_SHORT_NO_CONTEST": "NC",
    "TRANS_MMA_ROUND": "Round %s",
    "TRANS_MOD_REWRITE_STANDINGS_TABLE": "standings",
    "TRANS_MY_GAMES_ADD": "Add this game to My Games!",
    "TRANS_MY_GAMES_ADD_DEFAULT": "Add to My Games!",
    "TRANS_MY_GAMES_ADD_ALL": "Add all games of this competition to My Games!",
    "TRANS_MY_GAMES_MATCH_LIST_NOT_FOUND": "You haven't selected any game yet.<br \/>To select your games just click the [+] icon located next to games across [project_name].",
    "TRANS_MY_GAMES_REMOVE": "Remove this game from My Games!",
    "TRANS_MY_GAMES_REMOVE_DEFAULT": "Remove from My Games!",
    "TRANS_MY_GAMES_REMOVE_ALL": "Remove all games of this competition from My Games!",
    "TRANS_MY_GAMES_ADD_EVENT": "Add this event to My Games!",
    "TRANS_MY_GAMES_REMOVE_EVENT": "Remove this event from My Games!",
    "TRANS_MY_GAMES_SELECT_GROUP": "Select the group!",
    "TRANS_MY_GAMES_GROUP": "Group %s",
    "TRANS_MY_GAMES_GROUP_INFO_PART1": "Have you placed multiple bets? Now you can sort your games into groups.",
    "TRANS_MY_GAMES_GROUP_INFO_PART2": " Switch this feature on in your settings!",
    "TRANS_MY_LEAGUES_ADD": "Add this league to My Leagues!",
    "TRANS_MY_LEAGUES_LEFT_MENU_TEXT": "To select your leagues just click the [*] icon located next to league names.",
    "TRANS_MY_LEAGUES_REMOVE": "Remove this league from My Leagues!",
    "TRANS_MY_TEAMS_ADD": "Add to My Teams!",
    "TRANS_MY_TEAMS_REMOVE": "Remove from My Teams!",
    "TRANS_MY_TEAMS_LEFT_MENU_TEXT": "To select your teams, just click the [*] icon located next to the name of the team.",
    "TRANS_MY_TEAMS_MATCH_LIST_NOT_FOUND": "You haven't selected any team yet.<br \/>To select your teams, just click the [*] icon located next to the name of the team.",
    "TRANS_MY_TEAMS_LIMIT_REACHED": "You have reached the maximum number of My Teams.",
    "TRANS_MY_GAMES_MOVE_TO": "Move to:",
    "TRANS_MY_GAMES_COPY_TO": "Copy to:",
    "TRANS_ODDS_ADD_TO_BOOKMAKER_BETSLIP": "Add this match to bet slip on %s!",
    "TRANS_ODDS_BET_AND_WIN_AMOUNT_FORMAT": "€%s",
    "TRANS_ODDS_BET_AND_WIN_AMOUNT_SEPARATOR": " ",
    "TRANS_ODDS_BONUS_TITLE": "Click to claim your bonus!",
    "TRANS_ODDS_BOOKMAKER": "bet365",
    "TRANS_ODDS_COMPARISON_ASIAN_HANDICAP": "Asian handicap",
    "TRANS_ODDS_COMPARISON_ASIAN_HANDICAP_IFRAME_SHORT": "AH",
    "TRANS_ODDS_COMPARISON_NO": "No",
    "TRANS_ODDS_COMPARISON_YES": "Yes",
    "TRANS_ODDS_CLICK_TO_BET_MATCH": "Click to bet this match with %s!",
    "TRANS_ODDS_FORMAT_SWITCH": "Switch odds format:",
    "TRANS_ODDS_REMOVED_BY_BOOKMAKER": "Odds removed by bookmaker.",
    "TRANS_ODDS_TYPE_0": "X",
    "TRANS_ODDS_TYPE_HOME_AWAY": "Home\/Away",
    "TRANS_ODDS_TYPE_OVER_UNDER": "Over\/Under",
    "TRANS_PLAYER": "Player",
    "TRANS_POINTS": "Points",
    "TRANS_POWERED_BY": "Live scores powered by <a href=\"http:\/\/www.flashscore.com\/\" title=\"FlashScore.com\" target=\"_blank\">FlashScore.com<\/a><br \/>Get your own free livescore now - register at <a href=\"http:\/\/www.livescore.in\/free-livescore\/\" title=\"LIVESCORE.in\" target=\"_blank\">LIVESCORE.in<\/a>",
    "TRANS_POWERED_BY_FREE": null,
    "TRANS_PROJECT_NAME": "FlashScore.com",
    "TRANS_SCOREBOARD_HOME_NO_MATCH_SPORT_NAME": null,
    "TRANS_ODDS_COMPARISON_BASEBALL_SPREAD": "",
    "TRANS_ODDS_COMPARISON_BASEBALL_SPREAD_IFRAME_SHORT": "",
    "TRANS_ODDS_COMPARISON_HOCKEY_SPREAD": "",
    "TRANS_ODDS_COMPARISON_HOCKEY_SPREAD_IFRAME_SHORT": "",
    "TRANS_ODDS_EVEN_SHORT": "",
    "TRANS_SWAP_TEAM_AT_IFRAME": "",
    "TRANS_SEARCH_ACTION": "Search",
    "TRANS_SEARCH_CANCEL": "Cancel",
    "TRANS_SEARCH_NOUN": "Search",
    "TRANS_SEARCH_TITLE": "Search",
    "TRANS_SEARCH_INSERT_TEXT": "Type your search here",
    "TRANS_SEARCH_COMPETITIONS": "Competitions",
    "TRANS_SEARCH_TEAMS": "Teams",
    "TRANS_SEARCH_SPORT": "Sport",
    "TRANS_SEARCH_ALL_SPORTS": "All sports",
    "TRANS_SEARCH_DEFAULT_TEXT_EMPTY_QUERY": "Please type at least %s characters. The results will start displaying here immediately.",
    "TRANS_SEARCH_NO_RESULTS": "No result found.",
    "TRANS_SEARCH_MORE_RESULTS_AVAILABLE_TEXT": "Your search term was too broad. We recommend that you make your search more specific.",
    "TRANS_SEARCH_LAST_SEARCH": "Your last searches:",
    "TRANS_SEARCH_MOST_POPULAR_SEARCHES": "Most popular searches:",
    "TRANS_SETTINGS": "Settings",
    "TRANS_SETTINGS_LIVESCORE": "Settings",
    "TRANS_SETTINGS_LIVESCORE_ORDER_BY_LEAGUE_NAME": "league name",
    "TRANS_SETTINGS_LIVESCORE_ORDER_BY_MATCH_START_TIME": "match start time",
    "TRANS_SETTINGS_LIVESCORE_ORDER_MATCHES_BY": "Order matches by",
    "TRANS_SETTINGS_LIVESCORE_RESTORE_DEFAULT": "Restore all settings",
    "TRANS_SETTINGS_LIVESCORE_RESTORE_DEFAULT_CONFIRM": "Really want to restore all settings?",
    "TRANS_SETTINGS_LIVESCORE_SHOW_MY_LEAGUES_ON_TOP": "Show My Leagues on top",
    "TRANS_SETTINGS_LIVESCORE_MYGAMES_DISPLAY_GROUPS": "Enable sorting into groups:",
    "TRANS_SETTINGS_LIVESCORE_DISPLAY_NOTIFICATIONS_BOTTOM_LEFT": "Display notifications in the bottom left corner of the screen:",
    "TRANS_SETTINGS_LIVESCORE_NOTIFICATIONS_SOUND_EFFECT_ON": "Yes, with sound effects",
    "TRANS_SETTINGS_LIVESCORE_NOTIFICATIONS_SOUND_EFFECT_OFF": "Yes, without sound effects",
    "TRANS_SETTINGS_LIVESCORE_GENERAL_SETTINGS": "General Settings",
    "TRANS_NOTIFICATION_SETTINGS_MY_GAMES": "My Games",
    "TRANS_SNOOKER_BEST_OF_FRAMES": "Best of %s frames",
    "TRANS_SNOOKER_BEST_OF_FRAMES_IFRAME": "%s F",
    "TRANS_SNOOKER_FRAME_NUMBER": "Frame %s",
    "TRANS_SOCCER_CORRECTION_OFFSIDE": "Offside",
    "TRANS_SOCCER_GOAL": "GOAL",
    "TRANS_SOUND_OFF": "Turn off sound",
    "TRANS_SOUND_ON": "Turn on sound",
    "TRANS_START_TIME": "Start time",
    "TRANS_STANDINGS_LIVE_TABLE": "Live Standings",
    "TRANS_SUB_BOOKMARK_LIVE_ODDS": "LIVE Odds",
    "TRANS_SUB_BOOKMARK_MAIN": "Results",
    "TRANS_SUB_BOOKMARK_ODDS": "bet365 Odds",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_H2H_PART_1": "The H2H feature is currently unavailable.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_H2H_PART_2": "We are working hard to correct this. Thank you for understanding.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_LC_PART_1": "The Live Centre feature is currently unavailable.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_LC_PART_2": "We are working hard to correct this. Thank you for understanding.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_LIVE_CENTRE_PART_1": "Detailed Live Centre information may be delayed or unavailable due to technical reasons.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_LIVE_CENTRE_PART_2": "We should fix this problem within 10 minutes. Thank you for understanding.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_MY_GAMES_PART_1": "The My Games feature is currently unavailable.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_MY_GAMES_PART_2": "We are working hard to correct this. Thank you for understanding.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_STANDINGS_PART_1": "Standings are currently unavailable.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_STANDINGS_PART_2": "We are working hard to correct this. Thank you for understanding.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_UPDATES_PART_1": "A technical error is currently causing delays to some updates.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_UPDATES_PART_2": "We are working hard to fix the problem as soon as possible. Thank you for understanding.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_ODDS_PART_1": "Betting odds are currently unavailable.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_ODDS_PART_2": "We are working hard to correct this. Thank you for understanding.",
    "TRANS_SYSTEM_ERROR_UNSUPPORTED_BROWSER_PART_1": "Your browser is too old. Some parts of the website may not work well.",
    "TRANS_SYSTEM_ERROR_UNSUPPORTED_BROWSER_PART_2": "Please upgrade your browser to make sure the website is displayed correctly.",
    "TRANS_SYSTEM_ERROR_UNSUPPORTED_BROWSER_PART_3": "Your browser is too old. To display the premium content please install a browser supporting HTML5.",
    "TRANS_SYSTEM_ERROR_UNSUPPORTED_BROWSER_PART_4": "We recommend: Chrome | Firefox | Explorer | Opera | Safari",
    "TRANS_TENNIS_CORRECTION_HAWK_EYE": "Hawk-Eye",
    "TRANS_TENNIS_SERVING_PLAYER": "Serving player",
    "TRANS_TENNIS_SET": "SET",
    "TRANS_TERMS_AND_CONDITIONS_APPLY": "T&Cs apply.",
    "TRANS_TOURNAMENT_PAGE_TODAYS_MATCHES": "Today's Matches",
    "TRANS_UNAUTHORIZED_WEBSITE": "This website is unauthorized.<br \/>Create your own customized free livescore at <a href=\"#\">LIVESCORE.in<\/a>!",
    "TRANS_UNAUTHORIZED_WEBSITE_URL": "http:\/\/livescore.in\/free-livescore\/",
    "TRANS_UNVERIFIED_SOURCE_INFO_NOTE": "Updates for this match can be delayed.",
    "TRANS_URL_BOOKMAKER_LINK": "\/bookmaker\/",
    "TRANS_URL_IDENT_TOURNAMENT_ARCHIVE": "archive",
    "TRANS_URL_IDENT_TOURNAMENT_FIXTURES": "fixtures",
    "TRANS_URL_IDENT_TOURNAMENT_RESULTS": "results",
    "TRANS_URL_MATCH_DETAIL": "\/match\/",
    "TRANS_URL_PRIVACY_POLICY": "\/terms\/",
    "TRANS_URL_SOCCER": "\/soccer\/",
    "TRANS_URL_STANDINGS_DRAW": "\/draw\/",
    "TRANS_URL_TENNIS": "\/tennis\/",
    "TRANS_USER_ACTIVATION_SUCCESSFUL": "Your account was activated successfully. Now you can log in.",
    "TRANS_USER_CAPTCHA_TYPE_TEXT_AGAIN": "Type two words from the picture again, please.",
    "TRANS_USER_CHANGE_PASSWORD": "Change password",
    "TRANS_USER_CHANGE_PASSWORD_SUCCESSFUL": "Your password was changed successfully.",
    "TRANS_USER_ERROR_ACCOUNT_NOT_VERIFIED": "Your account has not been verified.<br \/>You need to verify your account by following instructions in message that we sent to your e-mail address.",
    "TRANS_USER_ERROR_CAPTCHA_NOT_SAME": "Text from the picture was not entered correctly.",
    "TRANS_USER_ERROR_EMAIL_NOT_VALID": "E-mail should be in valid form (e.g. name@example.com)",
    "TRANS_USER_ERROR_EMAIL_USED": "Your chosen e-mail address is already registered by other user.",
    "TRANS_USER_ERROR_I_AGREE_WITH_TERMS": "You must confirm your consent to terms of use.",
    "TRANS_USER_ERROR_LOGIN_FAILED": "This username or password does not exist.",
    "TRANS_USER_ERROR_PASSWORD_INVALID": "You entered an invalid password.",
    "TRANS_USER_ERROR_PASSWORD_MIN_5_CHARACTERS": "Password must be at least 5 characters long.",
    "TRANS_USER_ERROR_PASSWORDS_NOT_SAME": "Password and its verification do not match.",
    "TRANS_USER_ERROR_VERIFICATION_CODE_INVALID": "Your activation code is not valid.",
    "TRANS_USER_FORGOTTEN_PASSWORD_ERROR_NOT_VALID_VERIFICATION_CODE": "Activation code for changing the password is not valid. The password cannot be changed.",
    "TRANS_USER_FORGOTTEN_PASSWORD_SEND_INSTRUCTIONS_SUCCESSFUL": "Instructions regarding change of the password were sent to your e-mail address.",
    "TRANS_USER_LOGIN": "Login",
    "TRANS_USER_LOGIN_FACEBOOK": "Connect with Facebook",
    "TRANS_USER_LOGIN_SUCCESSFUL": "You have logged in successfully.",
    "TRANS_USER_LOGOUT": "Logout",
    "TRANS_USER_LOGOUT_CONFIRMATION": "Are you sure you want to log out?",
    "TRANS_USER_LOGOUT_SUCCESSFUL": "You were logged out successfully.",
    "TRANS_USER_REGISTRATION": "Registration",
    "TRANS_USER_REGISTRATION_SUCCESSFUL": "You have registered successfully.",
    "TRANS_USER_REGISTRATION_SUCCESSFUL_ADDITIONAL_TEXT": "ATTENTION: We have sent you an activation e-mail! Please check your mailbox and click the activation link included in the message.<br \/><br \/>If you don't receive our activation e-mail within 20 minutes, you might find our message in the SPAM folder of your mailbox.<br \/><br \/>If you fail to find our e-mail anyway, please contact us at [user_support_email].",
    "TRANS_USER_SERVER_ERROR": "We are sorry, the requested action cannot be completed due to technical reasons. Please try again later.",
    "TRANS_USER_SERVER_LOGOUT": "You were logged out for security reasons. You must log in to complete the action.",
    "TRANS_USER_SETTINGS": "Settings",
    "TRANS_USER_USER": "User",
    "TRANS_USER_DIALOG_REGISTRATION_NOT_ROBOT_CONFIRMATION": "Please confirm you are not a robot.",
    "TRANS_USER_DIALOG_REGISTRATION_ALMOST_DONE": "Registration almost done",
    "TRANS_USER_DIALOG_REGISTRATION_EMAIL_SENT_TO": "We've just sent you an email to %s.",
    "TRANS_USER_DIALOG_REGISTRATION_CONFIRMATION_INFO": "Please check your mailbox and confirm your registration.",
    "TRANS_WINNER": "Winner",
    "TRANS_WINNER_TOOLTIP": "Advancing to next round",
    "TRANS_SHOW_MORE": "Show more",
    "TRANS_SHOW_MORE_MATCHES": "Show more matches",
    "TRANS_SOCCER_MATCH_SCORER_TYPE_PEN": "Penalty",
    "TRANS_SOCCER_MATCH_SCORER_TYPE_PEN_MISS": "Penalty missed",
    "TRANS_HOCKEY_MATCH_SCORER_TYPE_PEN": "Penalty",
    "TRANS_HOCKEY_MATCH_SCORER_TYPE_PEN_MISSED": "Penalty missed",
    "TRANS_MY_GAMES_ADD_PLAYER": "Add this player to My Games!",
    "TRANS_MY_GAMES_REMOVE_PLAYER": "Remove this player from My Games!",
    "TRANS_MY_GAMES_CANNOT_REMOVE": "You can add either the whole event or selected participants to My Games. If the whole event is added to My Games, you cannot remove any participants.",
    "TRANS_GOLF_NODUEL_SCHEDULED_INFO": "This list is for informational purposes only. Field is subject to change.",
    "TRANS_ANDROID_APPLICATION": "Android application",
    "TRANS_SMART_BANNER_FREE": "FREE",
    "TRANS_SMART_BANNER_DOWNLOAD_BUTTON": "DOWNLOAD HERE",
    "TRANS_NEW_FEATURE": "NEW",
    "TRANS_GOLF_HOLES_PLAYED": "Holes played: %s",
    "TRANS_GOLF_TODAY": "Today",
    "TRANS_ODDS_COMPARISON_WINNER": "Winner",
    "TRANS_ODDS_COMPARISON_WINNER_SHORT": "Winner",
    "TRANS_ODDS_COMPARISON_TOP_3": "Top 3",
    "TRANS_ODDS_COMPARISON_TOP_3_SHORT": "Top 3",
    "TRANS_ODDS_COMPARISON_TOP_5": "Top 5",
    "TRANS_ODDS_COMPARISON_TOP_5_SHORT": "Top 5",
    "TRANS_ODDS_COMPARISON_TOP_6": "Top 6",
    "TRANS_ODDS_COMPARISON_TOP_6_SHORT": "Top 6",
    "TRANS_ODDS_COMPARISON_TOP_10": "Top 10",
    "TRANS_ODDS_COMPARISON_TOP_10_SHORT": "Top 10",
    "TRANS_ODDS_COMPARISON_TOP_20": "Top 20",
    "TRANS_ODDS_COMPARISON_TOP_20_SHORT": "Top 20",
    "TRANS_ODDS_COMPARISON_EACH_WAY": "Each Way",
    "TRANS_ODDS_COMPARISON_EACH_WAY_SHORT": "Each Way",
    "TRANS_HOLE_RESULT_DOUBLE_EAGLE": "Double-Eagle",
    "TRANS_HOLE_RESULT_EAGLE": "Eagle",
    "TRANS_HOLE_RESULT_BIRDIE": "Birdie",
    "TRANS_HOLE_RESULT_PAR": "Par",
    "TRANS_HOLE_RESULT_BOGEY": "Bogey",
    "TRANS_HOLE_RESULT_DOUBLE_BOGEY": "Double-Bogey",
    "TRANS_HOLE_RESULT_TRIPLE_PLUS_BOGEY": "3+ Bogey",
    "TRANS_GOLF_RESULT_BETTER_SCORE": "Better score on the hole",
    "TRANS_GOLF_INFO_PRIZE_MONEY": "Prize money",
    "TRANS_GOLF_INFO_PAR": "Par",
    "TRANS_GOLF_INFO_DATE": "Dates",
    "TRANS_TOURNAMENT_PAGE_PLAYER_RESULTS": "Results",
    "TRANS_LIVE_STREAMING": "Live Streaming",
    "TRANS_TV_CHANNEL": "TV channel",
    "TRANS_MATCH_ROUND": "Round %d",
    "TRANS_DRAW": "Draw",
    "TRANS_WIN": "Win",
    "TRANS_LOST": "Loss",
    "TRANS_NOTIFICATION_MESSAGE_GOAL": "Goal!",
    "TRANS_NOTIFICATION_MESSAGE_MATCH_FINISHED": "Finished.",
    "TRANS_LOADING": "Loading ...",
    "TRANS_CYCLING_KM": "km",
    "TRANS_NAME": "Name",
    "TRANS_CYCLING_RANK": "Rank",
    "TRANS_CYCLING_TEAM": "Team",
    "TRANS_CYCLING_SHORT_TEAM": "Team",
    "TRANS_CYCLING_LAPS": "Laps",
    "TRANS_CYCLING_SHORT_LAPS": "Laps",
    "TRANS_CYCLING_TIME": "Time",
    "TRANS_CYCLING_SHORT_TIME": "Time",
    "TRANS_CYCLING_GAP": "Gap",
    "TRANS_CYCLING_SHORT_GAP": "Gap",
    "TRANS_CYCLING_GENERAL_LEADER": "General leader",
    "TRANS_CYCLING_POINTS_LEADER": "Points leader",
    "TRANS_CYCLING_MOUNTAINS_LEADER": "Mountains leader",
    "TRANS_CYCLING_YOUTH_LEADER": "Youth leader",
    "TRANS_CYCLING_LAST_IN_RACE": "Last in race",
    "TRANS_CYCLING_CURRENT_WORLD_CHAMPION": "Current world champion",
    "TRANS_HORSE_RACING_HORSE": "Horse",
    "TRANS_HORSE_RACING_JOCKEY": "Jockey",
    "TRANS_HORSE_RACING_TRAINER": "Trainer",
    "TRANS_HORSE_RACING_AGE": "Age",
    "TRANS_HORSE_RACING_AGE_OF_HORSE": "Age of horse",
    "TRANS_HORSE_RACING_WEIGHT": "Weight",
    "TRANS_HORSE_RACING_WEIGHT_CARRYING_IN_STONES_AND_LBS": "Weight carrying in stones and lbs",
    "TRANS_HORSE_RACING_DIST": "Dist.",
    "TRANS_HORSE_RACING_DISTANCE_BEHIND_HORSE_AHEAD": "Distance behind horse ahead",
    "TRANS_HORSE_RACING_SP": "SP",
    "TRANS_HORSE_RACING_STARTING_PRICE": "Starting price",
    "TRANS_HORSE_RACING_NR": "NR",
    "TRANS_HORSE_RACING_NON_RUNNER": "Non-runner",
    "TRANS_HORSE_RACING_CLASS": "Class",
    "TRANS_HORSE_RACING_WINNER": "Winner",
    "TRANS_HORSE_RACING_GOING": "Going",
    "TRANS_HORSE_RACING_MILES": "Miles",
    "TRANS_HORSE_RACING_FURLONGS": "Furlongs",
    "TRANS_HORSE_RACING_YARDS": "Yards",
    "TRANS_HORSE_RACING_BOOKMARK_ALL": "All Races",
    "TRANS_HORSE_RACING_BOOKMARK_LIVE": "LIVE",
    "TRANS_HORSE_RACING_BOOKMARK_FIN": "Finished",
    "TRANS_HORSE_RACING_BOOKMARK_SCHED": "Scheduled",
    "TRANS_RANK": "Rank",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_LENGTH_1": "Jump 1",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_LENGTH_2": "Jump 2",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_1": "Points 1",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_2": "Points 2",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_TOTAL": "Total",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_RUN_1": "Round 1",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_RUN_2": "Round 2",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_TOTAL": "Total",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_DIFF": "Diff.",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_DIFFERENCE": "Difference",
    "TRANS_WINTER_SPORTS_CROSS_COUNTRY_TIME": "Time",
    "TRANS_WINTER_SPORTS_CROSS_COUNTRY_DIFF": "Diff.",
    "TRANS_WINTER_SPORTS_CROSS_COUNTRY_DIFFERENCE": "Difference",
    "TRANS_WINTER_SPORTS_BIATHLON_SHOOTING": "Shooting",
    "TRANS_WINTER_SPORTS_BIATHLON_DIFF": "Diff.",
    "TRANS_WINTER_SPORTS_BIATHLON_DIFFERENCE": "Difference",
    "TRANS_WINTER_SPORTS_BIATHLON_TIME": "Time",
    "TRANS_WINTER_SPORTS_BOOKMARK_ALL": "All Races",
    "TRANS_WINTER_SPORTS_BOOKMARK_LIVE": "LIVE",
    "TRANS_WINTER_SPORTS_BOOKMARK_FIN": "Finished",
    "TRANS_WINTER_SPORTS_BOOKMARK_SCHED": "Scheduled",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_BOOKMARK_ALL": "All Races",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_BOOKMARK_LIVE": "LIVE",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_BOOKMARK_FIN": "Finished",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_BOOKMARK_SCHED": "Scheduled",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_HILL_SIZE": "HS",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_COUNT": "Jumps",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_BOOKMARK_ALL": "All Races",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_BOOKMARK_LIVE": "LIVE",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_BOOKMARK_FIN": "Finished",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_BOOKMARK_SCHED": "Scheduled",
    "TRANS_WINTER_SPORTS_BIATHLON_BOOKMARK_ALL": "All Races",
    "TRANS_WINTER_SPORTS_BIATHLON_BOOKMARK_LIVE": "LIVE",
    "TRANS_WINTER_SPORTS_BIATHLON_BOOKMARK_FIN": "Finished",
    "TRANS_WINTER_SPORTS_BIATHLON_BOOKMARK_SCHED": "Scheduled",
    "TRANS_WINTER_SPORTS_CROSS_COUNTRY_BOOKMARK_ALL": "All Races",
    "TRANS_WINTER_SPORTS_CROSS_COUNTRY_BOOKMARK_LIVE": "LIVE",
    "TRANS_WINTER_SPORTS_CROSS_COUNTRY_BOOKMARK_FIN": "Finished",
    "TRANS_WINTER_SPORTS_CROSS_COUNTRY_BOOKMARK_SCHED": "Scheduled",
    "TRANS_WINTER_SPORTS_KM": "km",
    "TRANS_WINTER_SPORTS_LAP_SHORT": "l.",
    "TRANS_WINTER_SPORTS_DISTANCE": "Distance",
    "TRANS_PLAYER_CAREER_SHOW_DETAILS": "Show details",
    "TRANS_PLAYER_CAREER_HIDE_DETAILS": "Hide details"
};
cjs._config = {
    "js_serial": "1221000000",
    "js_framework_serial": 26,
    "app": {
        "lang": {
            "charset": "en_US",
            "web": "en",
            "dc": 1
        },
        "lang_combo": {
            "js_redirect": false,
            "project_list": {
                "--": 2,
                "pl": 800,
                "hu": 801,
                "ru": 802,
                "de": 803,
                "el": 804,
                "tr": 805,
                "fr": 806
            }
        },
        "noduel_events": {
            "mygames": 10,
            "main": {
                "default": 40,
                "golf": 30,
                "motorsport-auto-racing": 40,
                "motorsport-moto-racing": 40,
                "cycling": 10,
                "winter-sports-ski-jumping": 10,
                "winter-sports-alpine-skiing": 10,
                "winter-sports-cross-country": 10,
                "winter-sports-biathlon": 10
            },
            "tournament_page": {
                "winter-sports-ski-jumping": 1000,
                "winter-sports-alpine-skiing": 1000,
                "winter-sports-cross-country": 1000,
                "winter-sports-biathlon": 1000
            },
            "categories": {
                "6576": 10,
                "7771": 10
            }
        },
        "mygames": {
            "enable": true,
            "position": "left",
            "groups": {
                "enable": true
            },
            "past_days": 1,
            "future_days": 7
        },
        "detail": {
            "version": 1
        },
        "calendar_range": 7,
        "facebook_pixel_campaign_id": "",
        "google_analytics": {
            "event_tracking": true
        },
        "video_highlights_live_icon": {
            "enable": true
        },
        "US_time_format": false,
        "project_type": {
            "name": "_fs"
        },
        "popup": [],
        "js_redirect": false,
        "myteams": {
            "enable": true,
            "maximum_count": 100
        },
        "has_category_page": [2, 23],
        "banner": {
            "zone_list": {
                "background": {
                    "id": 1050,
                    "width_max": 1980,
                    "height_max": 1600,
                    "dynamic_background": true,
                    "element_notice_selector": "#footer-copyright"
                },
                "background_fixed": {
                    "id": 2704,
                    "width_max": 1980,
                    "height_max": 1600,
                    "dynamic_background": true,
                    "element_notice_selector": "#footer-copyright"
                },
                "background_tennis": {
                    "id": 1620,
                    "width_max": 1980,
                    "height_max": 1600,
                    "dynamic_background": true,
                    "element_notice_selector": "#footer-copyright"
                },
                "left_menu_1": {
                    "id": 72,
                    "width_max": 140,
                    "height_max": 400
                },
                "left_menu_1_basketball": {
                    "id": 453,
                    "width_max": 140,
                    "height_max": 400
                },
                "left_menu_1_handball": {
                    "id": 455,
                    "width_max": 140,
                    "height_max": 400
                },
                "left_menu_1_hockey": {
                    "id": 454,
                    "width_max": 140,
                    "height_max": 400
                },
                "left_menu_1_tennis": {
                    "id": 452,
                    "width_max": 140,
                    "height_max": 400
                },
                "left_menu_1_horse-racing": {
                    "id": 2467,
                    "width_max": 140,
                    "height_max": 400
                },
                "left_menu_2": {
                    "id": 73,
                    "width_max": 140,
                    "height_max": 400
                },
                "left_menu_3": {
                    "id": 74,
                    "width_max": 140,
                    "height_max": 400
                },
                "right_top": {
                    "id": 213,
                    "width_max": 160,
                    "height_max": 141
                },
                "right_zone_1": {
                    "id": 70,
                    "width_max": 200,
                    "height_max": 1000
                },
                "right_zone_1_exclude_home": {
                    "id": 1017,
                    "width_max": 200,
                    "height_max": 1000
                },
                "right_zone_2": {
                    "id": 396,
                    "width_max": 200,
                    "height_max": 1000,
                    "criteo_id": 480675
                },
                "right_zone_2_tennis": {
                    "id": 773,
                    "width_max": 200,
                    "height_max": 1000,
                    "criteo_id": 480675
                },
                "right_zone_2_hockey": {
                    "id": 774,
                    "width_max": 200,
                    "height_max": 1000,
                    "criteo_id": 480675
                },
                "right_zone_2_basketball": {
                    "id": 775,
                    "width_max": 200,
                    "height_max": 1000,
                    "criteo_id": 480675
                },
                "right_zone_2_horse-racing": {
                    "id": 2468,
                    "width_max": 200,
                    "height_max": 1000,
                    "criteo_id": 480675
                },
                "right_zone_3": {
                    "id": 397,
                    "width_max": 200,
                    "height_max": 1000
                },
                "top": {
                    "id": 68,
                    "width_max": 990,
                    "height_max": 300,
                    "vertical": true
                },
                "top_basketball": {
                    "id": 663,
                    "width_max": 990,
                    "height_max": 300,
                    "vertical": true
                },
                "top_handball": {
                    "id": 664,
                    "width_max": 990,
                    "height_max": 300,
                    "vertical": true
                },
                "top_hockey": {
                    "id": 662,
                    "width_max": 990,
                    "height_max": 300,
                    "vertical": true
                },
                "top_tennis": {
                    "id": 661,
                    "width_max": 990,
                    "height_max": 300,
                    "vertical": true
                },
                "top_volleyball": {
                    "id": 665,
                    "width_max": 990,
                    "height_max": 300,
                    "vertical": true
                },
                "top_horse-racing": {
                    "id": 2469,
                    "width_max": 990,
                    "height_max": 300,
                    "vertical": true
                },
                "content_top": {
                    "id": 2568,
                    "width_max": 970,
                    "height_max": 150,
                    "vertical": true
                },
                "content_bottom": {
                    "id": 256,
                    "width_max": 660,
                    "height_max": 400,
                    "criteo_id": 478804
                },
                "content_bottom_tennis": {
                    "id": 456,
                    "width_max": 660,
                    "height_max": 400,
                    "criteo_id": 478804
                },
                "content_bottom_basketball": {
                    "id": 457,
                    "width_max": 660,
                    "height_max": 400,
                    "criteo_id": 478804
                },
                "content_bottom_hockey": {
                    "id": 458,
                    "width_max": 660,
                    "height_max": 400,
                    "criteo_id": 478804
                },
                "content_bottom_handball": {
                    "id": 459,
                    "width_max": 660,
                    "height_max": 400,
                    "criteo_id": 478804
                },
                "content_bottom_horse-racing": {
                    "id": 2470,
                    "width_max": 660,
                    "height_max": 400,
                    "criteo_id": 478804
                },
                "detail": {
                    "id": 69,
                    "width_max": 550,
                    "height_max": 500,
                    "criteo_id": 522845
                },
                "detail_tennis": {
                    "id": 1270,
                    "width_max": 550,
                    "height_max": 500,
                    "criteo_id": 522845
                },
                "detail_basketball": {
                    "id": 1271,
                    "width_max": 550,
                    "height_max": 500,
                    "criteo_id": 522845
                },
                "detail_hockey": {
                    "id": 1272,
                    "width_max": 550,
                    "height_max": 500,
                    "criteo_id": 522845
                },
                "standings_top": {
                    "id": 549,
                    "width_max": 500,
                    "height_max": 60
                },
                "online_betting_bottom": {
                    "id": 893,
                    "width_max": 600,
                    "height_max": 400
                }
            }
        },
        "project": {
            "id": 2
        },
        "odds": {
            "format": "eu",
            "ah_override": false,
            "us_handicap": false,
            "enable": true,
            "bet_and_win": {
                "amount": 25
            },
            "finished_matches_clickable": false,
            "betslip_detail_window": false
        },
        "redirector": {
            "types": {
                "event": 1,
                "tournament_template": 2,
                "participant": 3,
                "player": 4
            }
        },
        "fs_stats": {
            "enable": true,
            "url": {
                "mygames": "http:\/\/remote-stats.flashscore.com\/mg",
                "inscore": "http:\/\/remote-stats.flashscore.com\/in",
                "adblocked": "",
                "search_stats": "http:\/\/remote-stats.flashscore.com\/ss"
            }
        },
        "empty_logo_small_path": {
            "logo_team": "image\/empty-logo-team-small.png"
        },
        "game_notification_push": {
            "enable": true
        },
        "registration": {
            "version": 2,
            "pop_up_visit_threshold": 5
        },
        "european_union_states": {
            "codes": ["BE", "BG", "CZ", "DK", "EE", "FI", "FR", "HR", "IE", "IT", "CY", "LT", "LV", "LU", "HU", "MT", "DE", "NL", "PL", "PT", "AT", "RO", "GR", "SK", "SI", "GB", "ES", "SE"]
        },
        "url_prefix": "",
        "project_moved": [],
        "sports_without_detail": [35],
        "selected_tab_time_before_race_start": 900,
        "tournament_pages": {
            "disabled_sports": [],
            "block_summary_match_limit": 10,
            "data_part_match_limit": 100
        },
        "new_mobile_page": {
            "enable": true
        },
        "box-over-content": {
            "scrolling-enable": true
        },
        "detail_live_betting_strip": {
            "version": 9,
            "rotation_time": 30000
        },
        "count_stage_tabs_for_horse_racing": 12,
        "sphinxsearch": {
            "client_server": "http:\/\/s.flashscore.com\/search\/",
            "enable": true
        }
    },
    "portable_apps": {
        "android": {
            "enable": true,
            "app-id": "eu.livesport.FlashScore_com",
            "url": "\/mobile\/#android",
            "smart-banner-url": "\/android\/",
            "header-url": "\/mobile\/#android",
            "footer-url": "\/mobile\/#android",
            "context-box-url": "\/mobile\/#android"
        },
        "info": {
            "name": "FlashScore",
            "developer": "FlashScore"
        }
    },
    "ajax": {
        "sync_time": {
            "default": 10,
            "update": 5,
            "game": 5,
            "live_tables": 10
        }
    },
    "live_centre": {
        "sub_tabs": []
    }
};
(function() {
    var Dic, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Dic = (function() {
        Dic.prototype.SERVICE_TYPE_CLASS = 1;
        Dic.prototype.SERVICE_TYPE_SINGLETON = 2;
        Dic.prototype.SERVICE_TYPE_GETTER = 3;
        Dic.prototype.resetContainer = function() {
            this._mapAliasToService = {};
            return this._services = {}
        };

        function Dic() {
            this.resetContainer()
        }
        Dic.prototype.setAutoModuleLoaderCallback = function(_autoModuleLoaderCallback) {
            this._autoModuleLoaderCallback = _autoModuleLoaderCallback
        };
        Dic.prototype.registerClass = function(serviceName, classFunction, serviceAliases, allowOverride) {
            if (serviceAliases == null) {
                serviceAliases = []
            }
            if (allowOverride == null) {
                allowOverride = false
            }
            return this._registerService(Dic.prototype.SERVICE_TYPE_CLASS, serviceName, classFunction, serviceAliases, allowOverride)
        };
        Dic.prototype.registerSingleton = function(serviceName, singletonFunction, serviceAliases, allowOverride) {
            if (serviceAliases == null) {
                serviceAliases = []
            }
            if (allowOverride == null) {
                allowOverride = false
            }
            return this._registerService(Dic.prototype.SERVICE_TYPE_SINGLETON, serviceName, singletonFunction, serviceAliases, allowOverride)
        };
        Dic.prototype.registerGetter = function(serviceName, object, serviceAliases, allowOverride) {
            if (serviceAliases == null) {
                serviceAliases = []
            }
            if (allowOverride == null) {
                allowOverride = false
            }
            return this._registerService(Dic.prototype.SERVICE_TYPE_GETTER, serviceName, object, serviceAliases, allowOverride)
        };
        Dic.prototype.get = function(serviceName) {
            this._loadServiceModule(serviceName);
            serviceName = this._getRealServiceName(serviceName);
            if (!this._services[serviceName].instance) {
                this._services[serviceName].instance = this._createInstance(serviceName)
            }
            return this._services[serviceName].instance
        };
        Dic.prototype.getNewInstance = function(serviceName, overrideOld) {
            if (overrideOld == null) {
                overrideOld = false
            }
            this._loadServiceModule(serviceName);
            serviceName = this._getRealServiceName(serviceName);
            if (overrideOld) {
                this._services[serviceName].instance = null;
                return this.get(serviceName)
            }
            return this._createInstance(serviceName)
        };
        Dic.prototype.getClass = function(serviceName) {
            var service;
            this._loadServiceModule(serviceName);
            serviceName = this._getRealServiceName(serviceName);
            service = this._services[serviceName];
            if (service.type !== Dic.prototype.SERVICE_TYPE_CLASS) {
                throw "Service is not defined as class"
            }
            return this._getDependencyInjectedClass(service)
        };
        Dic.prototype.getRegisteredServiceNames = function() {
            return this._mapAliasToService
        };
        Dic.prototype.exists = function(serviceName) {
            return this._mapAliasToService[serviceName] != null
        };
        Dic.prototype._loadServiceModule = function(serviceName) {
            if (this._mapAliasToService[serviceName] != null) {
                return
            }
            return typeof this._autoModuleLoaderCallback === "function" ? this._autoModuleLoaderCallback(serviceName) : void 0
        };
        Dic.prototype._registerService = function(type, name, invoke, aliases, allowOverride) {
            var alias, err, i, len, parsedFunction;
            if (aliases == null) {
                aliases = []
            }
            this._services[name] = {
                type: type,
                name: name,
                invoke: invoke,
                "arguments": [],
                funcName: ""
            };
            if (type === Dic.prototype.SERVICE_TYPE_CLASS || type === Dic.prototype.SERVICE_TYPE_SINGLETON) {
                parsedFunction = this._parseFunctionArguments(invoke);
                this._services[name].funcName = parsedFunction.funcName;
                this._services[name]["arguments"] = parsedFunction.funcArgs
            }
            this._checkServiceOverride(name, allowOverride);
            this._mapAliasToService[name] = name;
            for (i = 0, len = aliases.length; i < len; i++) {
                alias = aliases[i];
                this._checkServiceOverride(alias, allowOverride);
                this._mapAliasToService[alias] = name
            }
            if (type === Dic.prototype.SERVICE_TYPE_CLASS || type === Dic.prototype.SERVICE_TYPE_SINGLETON) {
                err = this._checkCyclicDependencies(name, this._services[name]["arguments"]);
                if (err) {
                    err = this._getDependencyInfo(name) + " => " + err;
                    throw 'Cyclic dependencies found: ' + err
                }
            }
            return true
        };
        Dic.prototype._parseFunctionArguments = function(func) {
            var firstBracket, funcArgs, funcAsString, funcNoComments, ret;
            ret = {
                funcName: "",
                funcArgs: []
            };
            funcAsString = func.toString();
            funcNoComments = funcAsString.replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg, '');
            firstBracket = funcNoComments.indexOf('(');
            ret.funcName = funcNoComments.substring(9, firstBracket);
            funcArgs = funcNoComments.slice(firstBracket + 1, funcNoComments.indexOf(')')).match(/([^\s,]+)/g);
            if (funcArgs) {
                ret.funcArgs = funcArgs
            }
            return ret
        };
        Dic.prototype._createInstance = function(serviceName) {
            var service;
            service = this._services[serviceName];
            switch (service.type) {
                case Dic.prototype.SERVICE_TYPE_GETTER:
                    return service.invoke;
                case Dic.prototype.SERVICE_TYPE_SINGLETON:
                    return this._invokeSingleton(serviceName);
                case Dic.prototype.SERVICE_TYPE_CLASS:
                    return this._createNewObject(serviceName)
            }
        };
        Dic.prototype._invokeSingleton = function(serviceName) {
            var dependencies, ref, service;
            service = this._services[serviceName];
            if ((service != null ? (ref = service.invoke) != null ? ref.apply : void 0 : void 0) == null) {
                throw "Can`t invoke singleton function"
            }
            dependencies = this._resolveDependencies(serviceName);
            return service.invoke.apply(null, dependencies)
        };
        Dic.prototype._createNewObject = function(serviceName) {
            var service;
            service = this._services[serviceName];
            if ((service != null ? service.invoke : void 0) == null) {
                throw "Can`t create new object"
            }
            return new(this._getDependencyInjectedClass(service))()
        };
        Dic.prototype._getDependencyInjectedClass = function(service) {
            var Wrap, dependenciesGetter;
            if (service.dependencyInjectedClass == null) {
                dependenciesGetter = (function(that) {
                    return function(serviceName) {
                        return that._resolveDependencies(serviceName)
                    }
                })(this);
                Wrap = (function(superClass) {
                    extend(Wrap, superClass);

                    function Wrap() {
                        this._className = service.funcName;
                        Wrap.__super__.constructor.apply(this, dependenciesGetter(service.name))
                    }
                    return Wrap
                })(service.invoke);
                service.dependencyInjectedClass = Wrap
            }
            return service.dependencyInjectedClass
        };
        Dic.prototype._resolveDependencies = function(serviceName) {
            var argument, i, len, ref, results, service;
            service = this._services[serviceName];
            if (service["arguments"] == null) {
                return []
            }
            ref = service["arguments"];
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                argument = ref[i];
                results.push(this.get(argument))
            }
            return results
        };
        Dic.prototype._getRealServiceName = function(serviceName) {
            if (this._mapAliasToService[serviceName] == null) {
                throw "Service (" + serviceName + ") not found"
            }
            return this._mapAliasToService[serviceName]
        };
        Dic.prototype._getDependencyInfo = function(serviceName) {
            var info, ref, service;
            info = serviceName;
            if (!this._mapAliasToService[serviceName]) {
                return
            }
            serviceName = this._getRealServiceName(serviceName);
            service = this._services[serviceName];
            info += "(@" + serviceName;
            if (((ref = service.type) === Dic.prototype.SERVICE_TYPE_CLASS || ref === Dic.prototype.SERVICE_TYPE_SINGLETON) && service.funcName) {
                info += "[func: " + service.funcName + "]"
            }
            info += ")";
            return info
        };
        Dic.prototype._checkCyclicDependencies = function(serviceName, dependencies) {
            var _dependencyServiceName, dependencyService, dependencyServiceName, err, i, len;
            serviceName = this._getRealServiceName(serviceName);
            for (i = 0, len = dependencies.length; i < len; i++) {
                _dependencyServiceName = dependencies[i];
                if (!this._mapAliasToService[_dependencyServiceName]) {
                    return ""
                }
                dependencyServiceName = this._getRealServiceName(_dependencyServiceName);
                if (dependencyServiceName === serviceName) {
                    return this._getDependencyInfo(_dependencyServiceName)
                }
                dependencyService = this._services[dependencyServiceName];
                err = this._checkCyclicDependencies(serviceName, dependencyService["arguments"]);
                if (err) {
                    return this._getDependencyInfo(_dependencyServiceName) + " => " + err
                }
            }
            return ""
        };
        Dic.prototype._checkServiceOverride = function(serviceName, allowOverride) {
            if (allowOverride) {
                return
            }
            if (this._mapAliasToService[serviceName]) {
                throw 'Trying to override service: ' + serviceName
            }
        };
        return Dic
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic = new Dic()
}).call(this);
cjs.dic.registerGetter('$', $, ['_$', '_jQuery', 'jQuery', '$1']);
cjs.dic.registerGetter('Handlebars', Handlebars);
(function() {
    var init;
    init = function() {
        var Array;
        return Array = {
            moveItem: function(array, fromIndex, toIndex) {
                var element;
                if (array[fromIndex] == null) {
                    return
                }
                element = array[fromIndex];
                array.splice(fromIndex, 1);
                return array.splice(toIndex, 0, element)
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('util_array', init, ['utilArray'])
}).call(this);
(function() {
    var initBrowser;
    initBrowser = function($, util_enviroment) {
        var Browser, navigator;
        navigator = util_enviroment.getNavigator();
        return Browser = {
            IE: 'MSIE',
            IE6: 'MSIE 6',
            IE7: 'MSIE 7',
            FF: 'Gecko',
            WEBKIT: 'WebKit',
            is: function(version) {
                return navigator.userAgent.match(new RegExp(version)) !== null
            },
            version: function() {
                var userAgent;
                if (util_enviroment.hasChromeObject()) {
                    userAgent = navigator.userAgent.toLowerCase();
                    userAgent = userAgent.substring(userAgent.indexOf('chrome/') + 7)
                } else {
                    userAgent = $.browser.version
                }
                return userAgent.substring(0, userAgent.indexOf('.'))
            },
            trident: function() {
                var trident;
                trident = navigator.userAgent.match(/Trident\/([0-9]+)/);
                if ((trident != null ? trident[1] : void 0) != null) {
                    return trident[1]
                } else {
                    return null
                }
            },
            mobile: function() {
                return $.browser.mobile || Browser.android() || Browser.ios() || util_enviroment.hasWindowOrientation()
            },
            windows: function() {
                return /windows/.test(navigator.userAgent.toLowerCase())
            },
            ios: function() {
                return /ipad|iphone|ipod/i.test(navigator.userAgent) && !this.windows()
            },
            android: function() {
                return /android/i.test(navigator.userAgent) && !this.windows()
            },
            firefox: function() {
                return /firefox/i.test(navigator.userAgent)
            },
            isDeprecated: function(checkForPremiumContent) {
                var browser, cfg, depBrowsers, depVersion, version;
                cfg = util_enviroment.getCfg();
                depBrowsers = checkForPremiumContent ? cfg.deprecatedBrowsersPremiumContent : cfg.deprecatedBrowsers;
                browser = this.getBrowserType().toLowerCase();
                version = $.browser != null ? parseInt($.browser.version) : 0;
                depVersion = 0;
                if (navigator.platform.toLocaleLowerCase().match(/(linux|win|mac)/) && typeof depBrowsers[browser] !== 'undefined') {
                    depVersion = depBrowsers[browser]
                }
                return depVersion && version <= depVersion
            },
            getBrowserType: function() {
                if (navigator.userAgent != null) {
                    if (navigator.userAgent.indexOf('iPhone') !== -1) {
                        return 'WebKit iPhone'
                    } else if (navigator.userAgent.indexOf('iPad') !== -1) {
                        return 'WebKit iPad'
                    } else if (navigator.userAgent.indexOf('WebKit') !== -1) {
                        return 'WebKit'
                    } else if (navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.indexOf('Trident') !== -1) {
                        return 'IE'
                    } else if (navigator.userAgent.indexOf('KHTML') !== -1) {
                        return 'KHTML'
                    } else if (navigator.userAgent.indexOf('Gecko') !== -1) {
                        return 'Gecko'
                    } else if (navigator.userAgent.indexOf('Opera Mobi') !== -1) {
                        return 'Opera Mobile'
                    } else if (navigator.userAgent.indexOf('Opera') !== -1) {
                        return 'Opera'
                    }
                } else if (window.opera) {
                    return 'Opera'
                } else {
                    return 'unknown'
                }
            },
            ieScrollWorkaround: function() {
                if (this.trident() === '7') {
                    $('body').on("mousewheel", function() {
                        var currentScrollPosition, wheelDelta;
                        event.preventDefault();
                        wheelDelta = event.wheelDelta;
                        currentScrollPosition = window.pageYOffset;
                        window.scrollTo(0, currentScrollPosition - wheelDelta)
                    });
                    $('body').keydown(function(e) {
                        var currentScrollPosition, deltaScroll, isShift;
                        currentScrollPosition = window.pageYOffset;
                        deltaScroll = 0;
                        switch (e.which) {
                            case 32:
                                isShift = !!e.shiftKey;
                                deltaScroll = 814;
                                if (isShift) {
                                    deltaScroll = -814
                                }
                                break;
                            case 33:
                                deltaScroll = -365;
                                break;
                            case 34:
                                deltaScroll = 365;
                                break;
                            case 36:
                                deltaScroll = -currentScrollPosition;
                                break;
                            case 35:
                                deltaScroll = document.body.scrollHeight - currentScrollPosition;
                                break;
                            case 38:
                                deltaScroll = -120;
                                break;
                            case 40:
                                deltaScroll = 120;
                                break;
                            default:
                                return true
                        }
                        if (deltaScroll !== 0) {
                            e.preventDefault();
                            window.scrollTo(0, currentScrollPosition + deltaScroll)
                        }
                    })
                }
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('util_browser', initBrowser, ['utilBrowser'])
}).call(this);
(function() {
    var init;
    init = function(util_enviroment) {
        var Config;
        return Config = {
            get: function() {
                var config, i, item, len;
                config = util_enviroment.getConfig();
                if ((config == null) || arguments.length === 0) {
                    return null
                }
                for (i = 0, len = arguments.length; i < len; i++) {
                    item = arguments[i];
                    if (config[item] == null) {
                        return null
                    }
                    config = config[item]
                }
                return config
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('util_config', init, ['utilConfig'])
}).call(this);
(function() {
    var accentData, accentKey, accentVal, accents, lang, ref;
    accents = {};
    accents["default"] = {
        'À': 'A',
        'Á': 'A',
        'Â': 'A',
        'Ã': 'A',
        'Ä': 'A',
        'Å': 'A',
        'Æ': 'AE',
        'Ç': 'C',
        'È': 'E',
        'É': 'E',
        'Ê': 'E',
        'Ë': 'E',
        'Ì': 'I',
        'Í': 'I',
        'Î': 'I',
        'Ï': 'I',
        'Ð': 'D',
        'Ñ': 'N',
        'Ò': 'O',
        'Ó': 'O',
        'Ô': 'O',
        'Õ': 'O',
        'Ö': 'O',
        'Ø': 'O',
        'Ù': 'U',
        'Ú': 'U',
        'Û': 'U',
        'Ü': 'U',
        'Ý': 'Y',
        'ß': 's',
        'à': 'a',
        'á': 'a',
        'â': 'a',
        'ã': 'a',
        'ä': 'a',
        'å': 'a',
        'æ': 'ae',
        'ç': 'c',
        'è': 'e',
        'é': 'e',
        'ê': 'e',
        'ë': 'e',
        'ì': 'i',
        'í': 'i',
        'î': 'i',
        'ï': 'i',
        'ñ': 'n',
        'ò': 'o',
        'ó': 'o',
        'ô': 'o',
        'õ': 'o',
        'ö': 'o',
        'ø': 'o',
        'ù': 'u',
        'ú': 'u',
        'û': 'u',
        'ü': 'u',
        'ý': 'y',
        'ÿ': 'y',
        'Ā': 'A',
        'ā': 'a',
        'Ă': 'A',
        'ă': 'a',
        'Ą': 'A',
        'ą': 'a',
        'Ć': 'C',
        'ć': 'c',
        'Ĉ': 'C',
        'ĉ': 'c',
        'Ċ': 'C',
        'ċ': 'c',
        'Č': 'C',
        'č': 'c',
        'Ď': 'D',
        'ď': 'd',
        'Đ': 'D',
        'đ': 'd',
        'Ē': 'E',
        'ē': 'e',
        'Ĕ': 'E',
        'ĕ': 'e',
        'Ė': 'E',
        'ė': 'e',
        'Ę': 'E',
        'ę': 'e',
        'Ě': 'E',
        'ě': 'e',
        'Ĝ': 'G',
        'ĝ': 'g',
        'Ğ': 'G',
        'ğ': 'g',
        'Ġ': 'G',
        'ġ': 'g',
        'Ģ': 'G',
        'ģ': 'g',
        'Ĥ': 'H',
        'ĥ': 'h',
        'Ħ': 'H',
        'ħ': 'h',
        'Ĩ': 'I',
        'ĩ': 'i',
        'Ī': 'I',
        'ī': 'i',
        'Ĭ': 'I',
        'ĭ': 'i',
        'Į': 'I',
        'į': 'i',
        'ı': 'i',
        'Ĳ': 'IJ',
        'ĳ': 'ij',
        'Ĵ': 'J',
        'ĵ': 'j',
        'Ķ': 'K',
        'ķ': 'k',
        'Ĺ': 'L',
        'ĺ': 'l',
        'Ļ': 'L',
        'ļ': 'l',
        'Ľ': 'L',
        'ľ': 'l',
        'Ŀ': 'L',
        'ŀ': 'l',
        'Ł': 'L',
        'ł': 'l',
        'Ń': 'N',
        'ń': 'n',
        'Ņ': 'N',
        'ņ': 'n',
        'Ň': 'N',
        'ň': 'n',
        'ŉ': 'n',
        'Ō': 'O',
        'ō': 'o',
        'Ŏ': 'O',
        'ŏ': 'o',
        'Ő': 'O',
        'ő': 'o',
        'Œ': 'OE',
        'œ': 'oe',
        'Ŕ': 'R',
        'ŕ': 'r',
        'Ŗ': 'R',
        'ŗ': 'r',
        'Ř': 'R',
        'ř': 'r',
        'Ś': 'S',
        'ś': 's',
        'Ŝ': 'S',
        'ŝ': 's',
        'Ş': 'S',
        'ş': 's',
        'Š': 'S',
        'š': 's',
        'Ţ': 'T',
        'ţ': 't',
        'Ť': 'T',
        'ť': 't',
        'Ŧ': 'T',
        'ŧ': 't',
        'Ũ': 'U',
        'ũ': 'u',
        'Ū': 'U',
        'ū': 'u',
        'Ŭ': 'U',
        'ŭ': 'u',
        'Ů': 'U',
        'ů': 'u',
        'Ű': 'U',
        'ű': 'u',
        'Ų': 'U',
        'ų': 'u',
        'Ŵ': 'W',
        'ŵ': 'w',
        'Ŷ': 'Y',
        'ŷ': 'y',
        'Ÿ': 'Y',
        'Ź': 'Z',
        'ź': 'z',
        'Ż': 'Z',
        'ż': 'z',
        'Ž': 'Z',
        'ž': 'z',
        'ſ': 's',
        'ƒ': 'f',
        'Ơ': 'O',
        'ơ': 'o',
        'Ư': 'U',
        'ư': 'u',
        'Ǎ': 'A',
        'ǎ': 'a',
        'Ǐ': 'I',
        'ǐ': 'i',
        'Ǒ': 'O',
        'ǒ': 'o',
        'Ǔ': 'U',
        'ǔ': 'u',
        'Ǖ': 'U',
        'ǖ': 'u',
        'Ǘ': 'U',
        'ǘ': 'u',
        'Ǚ': 'U',
        'ǚ': 'u',
        'Ǜ': 'U',
        'ǜ': 'u',
        'Ǻ': 'A',
        'ǻ': 'a',
        'Ǽ': 'AE',
        'ǽ': 'ae',
        'Ǿ': 'O',
        'ǿ': 'o'
    };
    accents.cs = {
        'Á': 'A\xFF',
        'Č': 'C\xFF',
        'Ď': 'D\xFF',
        'É': 'E\xFE',
        'Ě': 'E\xFF',
        'CH': 'H\xFE',
        'Ch': 'H\xFF',
        'Í': 'I\xFF',
        'Ň': 'N\xFF',
        'Ó': 'O\xFF',
        'Ř': 'R\xFF',
        'Š': 'S\xFF',
        'Ť': 'T\xFF',
        'Ú': 'U\xFE',
        'Ů': 'U\xFF',
        'Ý': 'Y\xFF',
        'Ž': 'Z\xFF',
        'á': 'a\xFF',
        'č': 'c\xFF',
        'ch': 'h\xFF',
        'ď': 'd\xFF',
        'é': 'e\xEF',
        'ě': 'e\xFF',
        'í': 'i\xFF',
        'ň': 'n\xFF',
        'ó': 'o\xFF',
        'ř': 'r\xFF',
        'š': 's\xFF',
        'ť': 't\xFF',
        'ú': 'u\xEF',
        'ů': 'u\xFF',
        'ý': 'y\xFF',
        'ž': 'z\xFF'
    };
    accents.da = {
        'Æ': 'Z\xFD',
        'Ø': 'Z\xFE',
        'Å': 'Z\xFF',
        'æ': 'z\xFD',
        'ø': 'z\xFE',
        'å': 'z\xFF'
    };
    accents.de = {
        'Ä': 'A\xFF',
        'Ö': 'O\xFF',
        'Ü': 'U\xFF',
        'ä': 'a\xFF',
        'ö': 'o\xFF',
        'ü': 'u\xFF'
    };
    accents['de-at'] = accents.de;
    accents.en = {};
    accents["en-africa"] = {};
    accents["en-asia"] = {};
    accents["en-au"] = {};
    accents["en-ca"] = {};
    accents["en-india"] = {};
    accents["en-uk"] = {};
    accents["en-usa"] = {};
    accents.el = {
        'Α': 'A\xFF',
        'Β': 'B\xFF',
        'Γ': 'C\xFF',
        'Δ': 'DxFF',
        'Ε': 'E\xFF',
        'Ζ': 'F\xFF',
        'Η': 'H\xFF',
        'Θ': 'I\xFE',
        'Ι': 'I\xFF',
        'Κ': 'K\xFF',
        'Λ': 'L\xFF',
        'Μ': 'M\xFF',
        'Ν': 'N\xFF',
        'Ξ': 'O\xFE',
        'Ο': 'O\xFF',
        'Π': 'P\xFE',
        'Ρ': 'P\xFF',
        'Σ': 'R\xFF',
        'Τ': 'T\xFF',
        'Υ': 'Y\xFE',
        'Φ': 'Y\xFF',
        'Χ': 'Z\xFD',
        'Ψ': 'Z\xFE',
        'Ω': 'Z\xFF',
        'ά': 'a\xFE',
        'α': 'a\xFF',
        'β': 'b\xFF',
        'γ': 'c\xFF',
        'δ': 'd\xFF',
        'έ': 'e\xFE',
        'ε': 'e\xFF',
        'ζ': 'f\xFF',
        'η': 'g\xFF',
        'ή': 'h\xFE',
        'θ': 'h\xFF',
        'ι': 'i\xFE',
        'ί': 'i\xFF',
        'κ': 'k\xFF',
        'λ': 'l\xFF',
        'μ': 'm\xFF',
        'ν': 'n\xFF',
        'ξ': 'o\xFD',
        'ό': 'o\xFE',
        'ο': 'o\xFF',
        'π': 'p\xFF',
        'ρ': 'r\xFF',
        'σ': 's\xFF',
        'τ': 't\xFF',
        'υ': 'u\xFF',
        'ύ': 'v\xEF',
        'φ': 'v\xFF',
        'χ': 'x\xFF',
        'ψ': 'y\xFF',
        'ω': 'z\xEF',
        'ώ': 'z\xFF'
    };
    accents.es = {
        'Ñ': 'N\xFF',
        'ñ': 'n\xFF'
    };
    accents.fi = {
        'Å': 'Z\xFD',
        'Ä': 'Z\xFE',
        'Ö': 'Z\xFF',
        'å': 'z\xFD',
        'ä': 'z\xFE',
        'ö': 'z\xFF'
    };
    accents.fr = {
        'É': 'E\xFD',
        'È': 'E\xFE',
        'Ê': 'E\xFF',
        'à': 'a\xFF',
        'ç': 'c\xFF',
        'é': 'e\xFD',
        'è': 'e\xFE',
        'ê': 'e\xFF'
    };
    accents.hr = {
        'Č': 'C\xFE',
        'Ć': 'C\xFF',
        'DŽ': 'D\xFE',
        'Dž': 'D\xFE',
        'Đ': 'D\xFF',
        'LJ': 'L\xFF',
        'Lj': 'L\xFF',
        'NJ': 'N\xFF',
        'Nj': 'N\xFF',
        'Š': 'S\xFF',
        'Ž': 'Z\xFF',
        'č': 'c\xFE',
        'ć': 'c\xFF',
        'dž': 'd\xFE',
        'đ': 'd\xFF',
        'lj': 'l\xFF',
        'nj': 'n\xFF',
        'š': 's\xFF',
        'ž': 'z\xFF'
    };
    accents.hu = {
        'Á': 'A\xFE',
        'Ã': 'A\xFE',
        'CS': 'C\xFF',
        'Cs': 'C\xFF',
        'Dz': 'D\xFE',
        'DZ': 'D\xFE',
        'Dzs': 'D\xFF',
        'É': 'E\xFF',
        'Gy': 'G\xFF',
        'GY': 'G\xFF',
        'Í': 'I\xFF',
        'Ly': 'L\xFF',
        'LY': 'L\xFF',
        'Ny': 'N\xFF',
        'NY': 'N\xFF',
        'Ó': 'O\xFD',
        'Ö': 'O\xFE',
        'Ő': 'O\xFF',
        'Sz': 'S\xFF',
        'SZ': 'S\xFF',
        'Ty': 'T\xFF',
        'TY': 'T\xFF',
        'Ú': 'U\xFD',
        'Ü': 'U\xFE',
        'Ű': 'U\xFF',
        'Zs': 'Z\xFF',
        'ZS': 'Z\xFF',
        'Zs': 'Z\xFF',
        'á': 'a\xFF',
        'cs': 'c\xFF',
        'dz': 'd\xFE',
        'dzs': 'd\FF',
        'é': 'e\xFF',
        'gy': 'g\xFF',
        'í': 'i\xFF',
        'ly': 'l\xFF',
        'ny': 'n\xFF',
        'ó': 'o\xFD',
        'ö': 'o\xFE',
        'ő': 'o\xFF',
        'sz': 's\xFF',
        'ty': 't\xFF',
        'ú': 'u\xFD',
        'ü': 'u\xFE',
        'ű': 'u\xFF',
        'zs': 'z\xFF'
    };
    accents["in"] = accents.en;
    accents.it = {
        'Á': 'A\xFF',
        'É': 'E\xFF',
        'Í': 'I\xFF',
        'Ó': 'O\xFF',
        'Ú': 'U\xFF',
        'á': 'a\xFF',
        'é': 'e\xFF',
        'í': 'i\xFF',
        'ó': 'o\xFF',
        'ú': 'u\xFF'
    };
    accents.lt = {
        'Ą': 'A\xFF',
        'Č': 'C\xFF',
        'Ę': 'E\xFE',
        'Ė': 'E\xFF',
        'Į': 'I\xFE',
        'Y': 'I\xFF',
        'Š': 'S\xFF',
        'Ų': 'U\xFE',
        'Ū': 'U\xFF',
        'Ž': 'Z\xFF',
        'ą': 'a\xFF',
        'č': 'c\xFF',
        'ę': 'e\xFE',
        'ė': 'e\xFF',
        'į': 'i\xFE',
        'y': 'i\xFF',
        'š': 's\xFF',
        'ų': 'u\xFE',
        'ū': 'u\xFF',
        'ž': 'z\xFF'
    };
    accents.ms = accents.en;
    accents.nl = {
        'Á': 'A\xFE',
        'Ä': 'A\xFF',
        'É': 'E\xFE',
        'Ë': 'E\xFF',
        'Ï': 'I\xFF',
        'Ó': 'O\xFE',
        'Ö': 'O\xFF',
        'Ú': 'U\xFE',
        'Ü': 'U\xFF',
        'á': 'a\xFE',
        'ä': 'a\xFF',
        'é': 'e\xFE',
        'ë': 'e\xFF',
        'ï': 'i\xFF',
        'ó': 'o\xFE',
        'ö': 'o\xFF',
        'ú': 'u\xFE',
        'ü': 'u\xFF'
    };
    accents.no = {
        'Æ': 'Z\xFD',
        'Ø': 'Z\xFE',
        'Å': 'Z\xFF',
        'æ': 'z\xFD',
        'ø': 'z\xFE',
        'å': 'z\xFF'
    };
    accents.pl = {
        'Ą': 'A\xFF',
        'Ć': 'C\xFF',
        'Ę': 'E\xFF',
        'Ł': 'L\xFF',
        'Ń': 'N\xFF',
        'Ó': 'O\xFF',
        'Ś': 'S\xFF',
        'Ź': 'Z\xFE',
        'Ż': 'Z\xFF',
        'ą': 'a\xFF',
        'ć': 'c\xFF',
        'ę': 'e\xFF',
        'ł': 'l\xFF',
        'ń': 'n\xFF',
        'ó': 'o\xFF',
        'ś': 's\xFF',
        'ź': 'z\xFE',
        'ż': 'z\xFF'
    };
    accents.pt = {
        'Á': 'A\xFF',
        'É': 'E\xFF',
        'Í': 'I\xFF',
        'Ó': 'O\xFF',
        'Ú': 'U\xFF',
        'á': 'a\xFF',
        'é': 'e\xFF',
        'í': 'i\xFF',
        'ó': 'o\xFF',
        'ú': 'u\xFF'
    };
    accents['pt-br'] = {
        'À': 'A\xFC',
        'Á': 'A\xFD',
        'Â': 'A\xFE',
        'Ã': 'A\xFF',
        'Ç': 'C\xFF',
        'É': 'E\xFE',
        'Ê': 'E\xFF',
        'Í': 'I\xFF',
        'Ó': 'O\xFD',
        'Ô': 'O\xFE',
        'Õ': 'O\xFF',
        'Ú': 'U\xFE',
        'Ü': 'U\xFF',
        'à': 'a\xFC',
        'á': 'a\xFD',
        'â': 'a\xFE',
        'ã': 'a\xFF',
        'ç': 'c\xFF',
        'é': 'e\xFE',
        'ê': 'e\xFF',
        'í': 'i\xFF',
        'ó': 'o\xFD',
        'ô': 'o\xFE',
        'õ': 'o\xFF',
        'ú': 'u\xFE',
        'ü': 'u\xFF'
    };
    accents.ro = {
        'Ă': 'A\xFE',
        'Â': 'A\xFF',
        'Î': 'I\xFF',
        'Ș': 'S\xFF',
        'Ț': 'T\xFE',
        'Ţ': 'T\xFF',
        'ă': 'a\xFE',
        'â': 'a\xFF',
        'ș': 's\xFF',
        'ț': 't\xFF'
    };
    accents.ru = {
        'А': 'A\xFA',
        'Б': 'A\xFB',
        'В': 'A\xFC',
        'Г': 'A\xFD',
        'Д': 'A\xFE',
        'Е': 'A\xFF',
        'Ё': 'B\xFA',
        'Ж': 'B\xFB',
        'З': 'B\xFC',
        'И': 'B\xFD',
        'Й': 'B\xFE',
        'К': 'B\xFF',
        'Л': 'C\xFA',
        'М': 'C\xFB',
        'Н': 'C\xFC',
        'О': 'C\xFD',
        'П': 'C\xFE',
        'Р': 'C\xFF',
        'С': 'D\xFA',
        'Т': 'D\xFB',
        'У': 'D\xFC',
        'Ф': 'D\xFD',
        'Х': 'D\xFE',
        'Ц': 'D\xFF',
        'Ч': 'E\xFA',
        'Ш': 'E\xFB',
        'Щ': 'E\xFC',
        'Ъ': 'E\xFD',
        'Ы': 'E\xFE',
        'Ь': 'E\xFF',
        'Э': 'F\xFD',
        'Ю': 'F\xFE',
        'Я': 'F\xFF',
        'а': 'a\xFA',
        'б': 'a\xFB',
        'в': 'a\xFC',
        'г': 'a\xFD',
        'д': 'a\xFE',
        'е': 'a\xFF',
        'ё': 'b\xFA',
        'ж': 'b\xFB',
        'з': 'b\xFC',
        'и': 'b\xFD',
        'й': 'b\xFE',
        'к': 'b\xFF',
        'л': 'c\xFA',
        'м': 'c\xFB',
        'н': 'c\xFC',
        'о': 'c\xFD',
        'п': 'c\xFE',
        'р': 'c\xFF',
        'с': 'd\xFA',
        'т': 'd\xFB',
        'у': 'd\xFC',
        'ф': 'd\xFD',
        'х': 'd\xFE',
        'ц': 'd\xFF',
        'ч': 'e\xFA',
        'ш': 'e\xFB',
        'щ': 'e\xFC',
        'ъ': 'e\xFD',
        'ы': 'e\xFE',
        'ь': 'e\xFF',
        'э': 'f\xFD',
        'ю': 'f\xFE',
        'я': 'f\xFF'
    };
    accents.sk = {
        'Á': 'A\xFE',
        'Ä': 'A\xFF',
        'Č': 'C\xFF',
        'Ď': 'D\xFD',
        'DZ': 'D\xFE',
        'DŽ': 'D\xFF',
        'Dz': 'D\xFE',
        'Dž': 'D\xFF',
        'É': 'E\xFF',
        'CH': 'H\xFE',
        'Ch': 'H\xFF',
        'Í': 'I\xFF',
        'Ĺ': 'L\xFE',
        'Ľ': 'L\xFF',
        'Ň': 'N\xFF',
        'Ó': 'O\xFE',
        'Ô': 'O\xFF',
        'Ŕ': 'R\xFF',
        'Š': 'S\xFF',
        'Ť': 'T\xFF',
        'Ú': 'U\xFF',
        'Ý': 'Y\xFF',
        'Ž': 'Z\xFF',
        'á': 'a\xFE',
        'ä': 'a\xFF',
        'č': 'c\xFF',
        'ď': 'd\xFD',
        'dz': 'd\xFE',
        'dž': 'd\xFF',
        'é': 'e\xFF',
        'ch': 'h\xFF',
        'í': 'i\xFF',
        'ĺ': 'l\xFE',
        'ľ': 'l\xFF',
        'ň': 'n\xFF',
        'ó': 'o\xFE',
        'ô': 'o\xFF',
        'ŕ': 'r\xFF',
        'š': 's\xFF',
        'ť': 't\xFF',
        'ú': 'u\xFF',
        'ý': 'y\xFF',
        'ž': 'z\xFF'
    };
    accents.sl = {
        'Č': 'C\xFF',
        'Š': 'S\xFF',
        'Ž': 'Z\xFF',
        'č': 'c\xFF',
        'š': 's\xFF',
        'ž': 'z\xFF'
    };
    accents.sr = {
        'Č': 'C\xFE',
        'Ć': 'C\xFF',
        'DŽ': 'D\xFE',
        'Đ': 'D\xFF',
        'LJ': 'L\xFF',
        'NJ': 'N\xFF',
        'Lj': 'L\xFF',
        'Nj': 'N\xFF',
        'Š': 'S\xFF',
        'Ž': 'Z\xFF',
        'č': 'c\xFE',
        'ć': 'c\xFF',
        'dž': 'd\xFE',
        'đ': 'd\xFF',
        'lj': 'l\xFF',
        'nj': 'n\xFF',
        'š': 's\xFF',
        'ž': 'z\xFF'
    };
    accents.sv = {
        'Å': 'Z\xFD',
        'Ä': 'Z\xFE',
        'Ö': 'Z\xFF',
        'å': 'z\xFD',
        'ä': 'z\xFE',
        'ö': 'z\xFF'
    };
    accents.tr = {
        'Ç': 'C\xFF',
        'Ğ': 'G\xFF',
        'İ': 'I\xFF',
        'Ö': 'O\xFF',
        'Ş': 'S\xFF',
        'Ü': 'U\xFF',
        'ç': 'c\xFF',
        'ğ': 'g\xFF',
        'ı': 'h\xFF',
        'ö': 'o\xFF',
        'ş': 's\xFF',
        'ü': 'u\xFF'
    };
    accents.vi = {
        'Ă': 'A\xFE',
        'Â': 'A\xFF',
        'Đ': 'D\xFF',
        'Ê': 'E\xFF',
        'Ô': 'O\xFE',
        'Ơ': 'O\xFF',
        'Ư': 'U\xFF',
        'ă': 'a\xFE',
        'â': 'a\xFF',
        'đ': 'd\xFF',
        'ê': 'e\xFF',
        'ô': 'o\xFE',
        'ơ': 'o\xFF',
        'ư': 'u\xFF'
    };
    for (lang in accents) {
        accentData = accents[lang];
        if (lang === 'default') {
            continue
        }
        ref = accents["default"];
        for (accentKey in ref) {
            accentVal = ref[accentKey];
            if (accentData[accentKey] == null) {
                accentData[accentKey] = accentVal
            }
        }
    }(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerGetter('dataCountryAccents', accents)
}).call(this);
(function() {
    var UtilDate, create;
    create = function(util_config, util_enviroment) {
        return new UtilDate(util_config, (typeof window !== "undefined" && window !== null ? window : global).get_gmt_offset, (typeof window !== "undefined" && window !== null ? window : global).get_gmt_offset_diff, function() {
            return cjs.dic.get('Helper_CurrentTime').getTimestamp()
        }, function() {
            return TXT_CAL_FULL
        }, function() {
            return cjs.status.isActive()
        }, function() {
            return cjs.timezone
        }, util_enviroment)
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('util_date', create, ['utilDate']);
    UtilDate = (function() {
        function UtilDate(cfg, gmtOffsetGetter, gmtOffsetDiffGetter, currentTimestampGetter, txtCalFullGetter, statusGetter, timezoneGetter, util_enviroment1) {
            this.cfg = cfg;
            this.gmtOffsetGetter = gmtOffsetGetter;
            this.gmtOffsetDiffGetter = gmtOffsetDiffGetter;
            this.currentTimestampGetter = currentTimestampGetter;
            this.txtCalFullGetter = txtCalFullGetter;
            this.statusGetter = statusGetter;
            this.timezoneGetter = timezoneGetter;
            this.util_enviroment = util_enviroment1
        }
        UtilDate.prototype.getTranslatedTextFromIndex = function(index) {
            var date, day, format, timestamp;
            index = parseInt(index);
            date = this.createCalendarDate(index);
            format = this.cfg.get('app', 'US_time_format') ? 'm.d.Y, ' : 'd.m.Y, ';
            timestamp = Math.round(date.getTime() / 1000);
            day = this.txtCalFullGetter()[date.getUTCDay()];
            return this.timestamp2date(format, timestamp) + (" " + day)
        };
        UtilDate.prototype.createCalendarDate = function(index) {
            var date, utime;
            date = new Date();
            utime = this.currentTimestampGetter() || (date.getTime() / 1000);
            date.setTime(((index * 86400) + utime - (date.getTimezoneOffset() * 60) - this.gmtOffsetDiffGetter()) * 1000);
            return date
        };
        UtilDate.prototype.fromUnixtimeToDatetime = function(yearFormat, titleOrText, className) {
            var local_gmt_offset, us_time_format;
            local_gmt_offset = this.gmtOffsetGetter();
            us_time_format = this.cfg.get('app', 'US_time_format');
            return $(className).each((function(_this) {
                return function(i, elem) {
                    var $elem, data, dataMax, dataTmp, format, startDateTimeStr, timestamp, title;
                    $elem = $(elem);
                    if (titleOrText === 'title') {
                        title = $elem.attr('title');
                        if (typeof title !== 'undefined') {
                            data = title.split("\n");
                            dataMax = data.length - 1;
                            timestamp = data[dataMax]
                        }
                    } else {
                        timestamp = $elem.text()
                    }
                    if (typeof timestamp !== 'undefined') {
                        format = us_time_format ? 'M d' : 'd.m.';
                        switch (yearFormat) {
                            case 'tv':
                                format += us_time_format ? ', g:i A' : ' G:i';
                                break;
                            case 'short':
                                format += (us_time_format ? ', ' : '') + 'y';
                                break;
                            case 'kickoff':
                                format = us_time_format ? 'h:i A' : 'H:i';
                                break;
                            case 'event':
                                format += us_time_format ? ', h:i A' : ' H:i'
                        }
                        startDateTimeStr = _this.timestamp2date(format, timestamp, local_gmt_offset);
                        if (titleOrText === 'title') {
                            dataTmp = data[0] + "\n";
                            if (dataMax === 2) {
                                dataTmp += data[1] + "\n"
                            }
                            return $elem.attr('title', dataTmp + startDateTimeStr)
                        } else {
                            return $elem.text(startDateTimeStr)
                        }
                    }
                }
            })(this))
        };
        UtilDate.prototype.getLocalUTime = function() {
            return Math.round(new Date().getTime() / 1000)
        };
        UtilDate.prototype.isLocalTimeMoved = function(sysTimeDiff, localTimeDiff) {
            var timeDiff;
            timeDiff = this.statusGetter() ? 2 : 20;
            return Math.abs(sysTimeDiff - localTimeDiff) > timeDiff
        };
        UtilDate.prototype.timestamp2date = function(format, timestamp, offset) {
            var H, d, dateParts, formatedTime, i, m, monthName, monthNameShort, s, time, y, zerosPrepend;
            if (typeof format !== "string") {
                format = "d. m. Y H:i"
            }
            if (typeof timestamp === "string") {
                timestamp = parseInt(timestamp)
            }
            if (typeof timestamp !== "number") {
                timestamp = Math.round((new Date()).getTime() / 1000)
            }
            if (typeof offset !== "number") {
                offset = 0
            }
            monthName = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            monthNameShort = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            time = new Date();
            time.setTime((timestamp + (time.getTimezoneOffset() * 60) - offset) * 1000);
            zerosPrepend = function(val, len) {
                var _len;
                if (typeof val !== "string") {
                    val = String(val)
                }
                if (typeof len !== "number") {
                    len = 2
                }
                _len = val.length;
                while (_len < len) {
                    val = "0" + val;
                    _len = val.length
                }
                return val
            };
            d = time.getDate();
            m = time.getMonth() + 1;
            y = time.getFullYear();
            H = time.getHours();
            i = time.getMinutes();
            s = time.getSeconds();
            dateParts = {
                d: zerosPrepend(d),
                j: d,
                F: monthName[m - 1],
                m: zerosPrepend(m),
                M: monthNameShort[m - 1],
                n: m,
                y: String(y).slice(2),
                Y: y,
                g: H % 12 || 12,
                G: H,
                h: zerosPrepend(H % 12 || 12),
                H: zerosPrepend(H),
                i: zerosPrepend(i),
                s: zerosPrepend(s),
                a: (H > 11 ? "pm" : "am"),
                A: (H > 11 ? "PM" : "AM")
            };
            formatedTime = format.replace(/[djFmMnyYgGhHisaA]|"[^"]*"|'[^']*'/g, function($0) {
                if ($0 in dateParts) {
                    return dateParts[$0]
                } else {
                    return $0.slice(1, $0.length - 1)
                }
            });
            return formatedTime
        };
        UtilDate.prototype.getMidnight = function(time) {
            var localTimezoneOffsetSeconds, midnight, now;
            if (time) {
                now = new Date(time * 1000)
            } else {
                now = new Date()
            }
            localTimezoneOffsetSeconds = now.getTimezoneOffset() * 60;
            now.setTime((this.currentTimestampGetter() + localTimezoneOffsetSeconds - this.gmtOffsetGetter()) * 1000);
            midnight = Date.UTC(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0) / 1000 + this.gmtOffsetGetter();
            return midnight
        };
        UtilDate.prototype.getAge = function(birthday) {
            var age, birthDate, m, today;
            today = new Date();
            birthDate = new Date(birthday * 1000);
            age = today.getFullYear() - birthDate.getFullYear();
            m = today.getMonth() - birthDate.getMonth();
            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                age--
            }
            return age
        };
        UtilDate.prototype.isToday = function() {
            return this.util_enviroment.getSudate() === 0
        };
        UtilDate.prototype.isDaylightSavingTime = function(date) {
            var currentOffset, offsetInJanuary, offsetInJuly;
            currentOffset = date.getTimezoneOffset();
            offsetInJanuary = (new Date(date.getFullYear(), 0, 1)).getTimezoneOffset();
            offsetInJuly = (new Date(date.getFullYear(), 6, 1)).getTimezoneOffset();
            return Math.min(offsetInJanuary, offsetInJuly) === currentOffset
        };
        return UtilDate
    })()
}).call(this);
(function() {
    var initDevice;
    initDevice = function(util_enviroment, util_browser) {
        var Device, navigator;
        navigator = util_enviroment.getNavigator();
        return Device = {
            isVendor: function(name) {
                var re;
                re = new RegExp(name, 'gi');
                return re.test(navigator.userAgent)
            },
            isHTC: function() {
                return Device.isVendor('HTC') || Device.isVendor('Desire')
            },
            isAndroidVersion: function(version) {
                if (!util_browser.android()) {
                    return false
                }
                return this.testVersion(version, 'android')
            },
            testVersion: function(version, platform, operator) {
                var deviceVersion, ref;
                if (operator == null) {
                    operator = '='
                }
                platform = platform.toLowerCase();
                if (platform === 'android') {
                    deviceVersion = (ref = navigator.userAgent.match(/Android ([0-9\.]*)/i)) != null ? ref[1] : void 0;
                    if (deviceVersion) {
                        deviceVersion = deviceVersion.substring(0, version.length)
                    }
                    switch (operator) {
                        case '=':
                            return deviceVersion === version;
                        case '>':
                            return deviceVersion > version;
                        case '<':
                            return deviceVersion < version;
                        case '>=':
                            return deviceVersion >= version;
                        case '<=':
                            return deviceVersion <= version;
                        default:
                            throw Error("Unknown operator '" + operator + "'.")
                    }
                } else {
                    throw Error("Not implemented for platform '" + platform + "'.")
                }
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('util_device', initDevice, ['utilDevice'])
}).call(this);
(function() {
    var Element, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    Element = (function() {
        function Element($, utilConfig, util_object) {
            this.$ = $;
            this.utilConfig = utilConfig;
            this.util_object = util_object
        }
        Element.prototype.findIntersections = function(element, elements) {
            var dimensions, i, intersections, len;
            intersections = [];
            dimensions = this.getElementDimensions(element);
            for (i = 0, len = elements.length; i < len; i++) {
                element = elements[i];
                if (this.isElementsIntersects(dimensions, this.getElementDimensions(element))) {
                    intersections.push(element)
                }
            }
            return intersections
        };
        Element.prototype.getElementDimensions = function(element) {
            var dimensions;
            dimensions = this.$(element).offset();
            dimensions.bottom = dimensions.top + this.$(element).height();
            dimensions.right = dimensions.left + this.$(element).width();
            return dimensions
        };
        Element.prototype.isElementsIntersects = function(dim1, dim2) {
            if (dim1.right < dim2.left) {
                return false
            }
            if (dim1.left > dim2.right) {
                return false
            }
            if (dim1.bottom < dim2.top) {
                return false
            }
            if (dim1.top > dim2.bottom) {
                return false
            }
            return true
        };
        Element.prototype.hideIntersectingBanners = function(element, elements) {
            var i, iframes, iframesToHide, len, safeContent, zoneContent, zoneIframe, zoneIframeDocument;
            iframes = this.findIntersections(element, elements);
            iframesToHide = [];
            for (i = 0, len = iframes.length; i < len; i++) {
                zoneIframe = iframes[i];
                zoneIframeDocument = this.getIframeContentDocument(zoneIframe);
                if (!zoneIframeDocument) {
                    continue
                }
                zoneContent = zoneIframeDocument.document.body.innerHTML;
                if (zoneContent.indexOf('<object ') !== -1 || zoneContent.indexOf('<embed ') !== -1) {
                    zoneContent = zoneContent.replace(/<param(([ ]+)|([^>]*[ ]+))name="wmode"[^>]*>/i, '');
                    zoneContent = zoneContent.replace(/<embed(([ ]+)|([^>]*[ ]+))wmode="[^"]*"([^>]*)>/i, '<embed $1 $4>');
                    zoneContent = zoneContent.replace(/<param /i, '<param name="wmode" value="transparent"><param ');
                    zoneContent = zoneContent.replace(/<embed ([^>]*)>/i, '<embed $1 wmode="transparent">');
                    zoneIframeDocument.document.body.innerHTML = zoneContent
                } else {
                    safeContent = true;
                    this.$('iframe', zoneIframeDocument.document).each((function(_this) {
                        return function(index, element) {
                            if (_this.$(element).attr('src').indexOf('livesportmedia.eu/block/right') === -1) {
                                safeContent = false;
                                return false
                            }
                        }
                    })(this));
                    if (!safeContent) {
                        iframesToHide.push(zoneIframe)
                    }
                }
            }
            return this.$(iframesToHide).hide()
        };
        Element.prototype.getIframeContentDocument = function(iframe) {
            if (iframe) {
                if (iframe.contentWindow) {
                    return iframe.contentWindow
                } else if (iframe.contentDocument) {
                    if (iframe.contentDocument.document) {
                        return iframe.contentDocument.document
                    }
                    return iframe.contentDocument
                }
            }
            return null
        };
        Element.prototype.getPageContentElement = function() {
            switch (this.utilConfig.get('app', 'project_type', 'name')) {
                case '_fs':
                    return this.$('#mc');
                case '_scoreboard':
                case '_in':
                    return this.$('.col-center');
                case '_diretta-2':
                    return this.$('.diretta-content');
                case '_ass':
                    return this.$('.col-right');
                default:
                    return null
            }
        };
        Element.prototype.findHighestZindex = function(selector, exceptedSelector) {
            var highestZIndex;
            if (selector == null) {
                selector = '*'
            }
            if (exceptedSelector == null) {
                exceptedSelector = '.preload'
            }
            highestZIndex = 0;
            this.$(selector).not(exceptedSelector).each((function(_this) {
                return function(index, element) {
                    var newZIndex;
                    newZIndex = parseInt(_this.$(element).css('z-index'));
                    if (!isNaN(newZIndex)) {
                        return highestZIndex = Math.max(highestZIndex, newZIndex)
                    }
                }
            })(this));
            return highestZIndex
        };
        Element.prototype.createSelectorFromEvent = function(event, skippedClasses) {
            var createPathFromTarget, element, elementClass, elementClasses, elementId, elementName, elementSelector, elements, i, index, j, len, len1, path, ref, ref1;
            if (skippedClasses == null) {
                skippedClasses = []
            }
            if (!((event != null) && this.util_object.keys(event).length)) {
                return ''
            }
            createPathFromTarget = function() {
                var node, path;
                path = [];
                node = event.target;
                while (true) {
                    path.push(node);
                    node = node.parentNode;
                    if (node.nodeName.toLowerCase() === "body") {
                        path.push(node);
                        break
                    }
                }
                return path
            };
            path = (ref = event.path) != null ? ref : createPathFromTarget();
            elements = [];
            for (index = i = 0, len = path.length; i < len; index = ++i) {
                element = path[index];
                elementName = element.nodeName.toLowerCase();
                elementSelector = "" + elementName;
                elementId = element.id;
                if (elementId) {
                    elementSelector += "#" + elementId
                }
                elementClasses = [];
                ref1 = element.classList;
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                    elementClass = ref1[j];
                    if (indexOf.call(skippedClasses, elementClass) < 0) {
                        elementClasses.push(elementClass)
                    }
                }
                if (elementClasses.length) {
                    elementSelector += "." + (elementClasses.join('.'))
                }
                if (elementSelector) {
                    elements.unshift(elementSelector)
                }
                if (elementName === "body") {
                    break
                }
            }
            return elements.join(' ')
        };
        Element.prototype.getIndexFromSelectorAndEvent = function(selector, event) {
            var $element, i, index, nodesAreEqual, ref;
            if (!(selector && event)) {
                return 0
            }
            index = 0;
            $element = this.$(selector);
            for (index = i = 0, ref = Math.max(0, $element.length - 1); 0 <= ref ? i <= ref : i >= ref; index = 0 <= ref ? ++i : --i) {
                nodesAreEqual = $element.get(index) === event.currentTarget;
                if (nodesAreEqual) {
                    break
                }
            }
            return index
        };
        return Element
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('util_element', Element, ['utilElement'])
}).call(this);
(function() {
    var Enviroment;
    Enviroment = {
        detailOpen: function(id, tab, team1, team2, season, checkHolder) {
            return window.detail_open(id, tab, team1, team2, season, checkHolder)
        },
        getGmtOffset: function() {
            return get_gmt_offset
        },
        getOddsFormat: function() {
            return get_odds_format
        },
        getOddsContent: function() {
            return get_odds_content
        },
        getDetailSetOddsWinner: function() {
            return detail_set_odds_winner
        },
        dateFormat: function() {
            return cjs.dateFormat
        },
        getNavigator: function() {
            return navigator
        },
        getLocation: function() {
            return location
        },
        getOpener: function() {
            return opener
        },
        hasWindowOrientation: function() {
            return window.orientation != null
        },
        hasChromeObject: function() {
            return window.chrome != null
        },
        getConfig: function() {
            return cjs._config
        },
        getTranslates: function() {
            return cjs._translates
        },
        getList: function() {
            return cjs._list
        },
        getConstants: function() {
            return cjs.constants
        },
        getSport: function() {
            return window.sport
        },
        getSportId: function() {
            return window.sport_id
        },
        getSportUrl: function() {
            return window.sport_url
        },
        getParticipantEncodedIds: function() {
            return window.participantEncodedIds
        },
        getParticipantId: function() {
            return window.participant_id
        },
        getTournamentStageEncodedId: function() {
            return window.tournamentStageEncodedId
        },
        getTournamentEncodedId: function() {
            return window.tournamentEncodedId
        },
        getFsDetail: function() {
            return window.fs_detail
        },
        getFsUpdate: function() {
            return window.fs_update
        },
        getSportUrlsById: function() {
            return window.SPORT_URL_BY_ID
        },
        getSportListById: function() {
            return window.SPORT_LIST_BY_ID
        },
        getSportList: function() {
            return window.SPORT_LIST
        },
        getSoundPlayer: function() {
            return cjs.sound_player
        },
        getTournamentTemplateCategoryList: function() {
            return cjs.tournamentTemplateCategoryList
        },
        getParentSports: function() {
            var ref;
            if (((ref = cjs.cfg) != null ? ref.parentSports : void 0) != null) {
                return cjs.cfg.parentSports
            } else {
                return {}
            }
        },
        getGeoIp: function(callback, waitOnHeaders) {
            return load_geoIP_clientIP(callback, waitOnHeaders)
        },
        getGlobalGeoIp: function() {
            return cjs.geoIP
        },
        getMixedFeed: function() {
            return window.mixed_feed
        },
        getBaseImageUrl: function() {
            return window.base_image_url
        },
        getBaseImageDataUrl: function() {
            return window.base_image_data_url
        },
        getBaseProjectImageUrl: function() {
            return window.base_project_image_url
        },
        getFeedProxyUrl: function() {
            return window.feedProxyUrl
        },
        getSearchInfo: function() {
            return cjs.search
        },
        getSuperTemplateDefinition: function() {
            return cjs.superTemplateDefinition
        },
        isFullPage: function() {
            return (cjs.isFullPage != null) && cjs.isFullPage
        },
        isTournamentPage: function() {
            return (cjs.isTournamentPage != null) && cjs.isTournamentPage
        },
        isTournamentSubPage: function() {
            return (window.tournamentSubPage != null) && window.tournamentSubPage
        },
        isTournamentPagePassiveTable: function() {
            return (window.tournamentPagePassiveTable != null) && window.tournamentPagePassiveTable
        },
        getTournamentPageTab: function() {
            return window.tournamentPageTab
        },
        getParticipantPage: function() {
            return cjs.participantPage
        },
        getSeriesPage: function() {
            return cjs.seriesPage
        },
        isDetailPage: function() {
            return (cjs.isDetailPage != null) && cjs.isDetailPage
        },
        isDetailParticipantPage: function() {
            return (window.isParticipantDetail != null) && window.isParticipantDetail === 1
        },
        isNoDuelTournament: function() {
            return isNoDuelTournament
        },
        getCompleteSportTranslations: function() {
            return window.TXT_SPORT
        },
        getSudate: function() {
            return window.sudate
        },
        getUpdater: function() {
            return window.updater
        },
        getCategory: function() {
            return window.category
        },
        getNavigationCategory: function() {
            return window.navigation_category
        },
        getSubCategory: function() {
            return window.sub_category
        },
        getPreloadShow: function() {
            return window.preload_show
        },
        getPreloadHide: function() {
            return window.preload_hide
        },
        getPageScrollTop: function() {
            return window.pageYOffset || document.documentElement.scrollTop
        },
        getFeedRequestObject: function() {
            window.initFeedRequest();
            return cjs.feedRequest
        },
        getMyTeamsObject: function(beforeCallback) {
            if (typeof beforeCallback === "function") {
                beforeCallback()
            }
            return cjs.myTeams
        },
        getMyLeaguesObject: function(beforeCallback) {
            if (typeof beforeCallback === "function") {
                beforeCallback()
            }
            return cjs.myLeagues
        },
        getLoginClientObject: function() {
            return typeof ls !== "undefined" && ls !== null ? ls.loginClient : void 0
        },
        getTooltipObject: function(beforeCallback) {
            if (typeof beforeCallback === "function") {
                beforeCallback()
            }
            return window.tt
        },
        getFormater: function() {
            return formater
        },
        getHtmlTemplate: function() {
            return cjs.HtmlTemplate
        },
        getProjectTypeId: function() {
            return project_type_id
        },
        getExternalProjectId: function() {
            var ref;
            return (ref = window.externalProjectId) != null ? ref : 0
        },
        getProjectTypeName: function() {
            return project_type_name
        },
        getOddsBettingTypes: function() {
            return window.odds_betting_types
        },
        getOddsSportScopes: function() {
            return window.odds_sport_scope_list
        },
        getSearchSportOrder: function(sportId) {
            var ref, ref1;
            if (((ref = cjs.search) != null ? (ref1 = ref.sortedSports) != null ? ref1[sportId] : void 0 : void 0) == null) {
                return 99
            }
            return cjs.search.sortedSports[sportId]
        },
        getTemplate: function() {
            return cjs.template
        },
        getSearchParticipantTitle: function(sportId, isPlayer) {
            var ref, ref1;
            if (((ref = cjs.search) != null ? (ref1 = ref.participantsTitles) != null ? ref1[sportId] : void 0 : void 0) == null) {
                return ''
            }
            if (isPlayer && (cjs.search.participantsTitles[sportId]['players'] != null)) {
                return cjs.search.participantsTitles[sportId]['players']
            } else if (cjs.search.participantsTitles[sportId]['teams'] != null) {
                return cjs.search.participantsTitles[sportId]['teams']
            } else {
                return cjs.search.participantsTitles[sportId]
            }
        },
        getSportsCountObject: function() {
            var ref;
            return (ref = window.l.sports_count) != null ? ref : {}
        },
        getRequestUrl: function(urlPart) {
            return req_url + urlPart
        },
        getFeedUrl: function(urlPart) {
            return base_feed_x_url + urlPart
        },
        getParse: function() {
            return window.parse
        },
        createAjaxFeedObject: function(url, completeCallback, action) {
            return new cjs.AjaxJqObject(url, cjs.feedProxy, completeCallback, action, void 0, function() {
                return u_304
            }, ie6, webkit, feed_sign)
        },
        getParserConfig: function() {
            return {
                JS_ROW_END: JS_ROW_END,
                JS_CELL_END: JS_CELL_END,
                JS_INDEX: JS_INDEX
            }
        },
        geoIpIsEu: function(doneCallback) {
            return this.getGeoIp((function(_this) {
                return function() {
                    var codes;
                    codes = _this.getConfig().app.european_union_states.codes;
                    if (codes.indexOf(_this.getGlobalGeoIp()) !== -1) {
                        return doneCallback(true)
                    } else {
                        return doneCallback(false)
                    }
                }
            })(this), true)
        },
        getEventTrackingObject: function() {
            if (!window.e_t && typeof window.event_tracking === 'function') {
                window.e_t = new window.event_tracking()
            }
            return window.e_t
        },
        getCfg: function() {
            return cjs.cfg
        },
        getConfigHashId: function() {
            return window.config_hash_id
        },
        getBookmakerLink: function() {
            return window.bookmaker_link
        },
        getWaypoint: function() {
            return window.Waypoint
        },
        getCountryId: function() {
            return window.country_id
        },
        getBookmakersData: function() {
            return cjs.bookmakersData
        },
        getAvailableBookmakers: function() {
            return cjs.availableBookmakers
        },
        prepareFeedProxy: function(cb) {
            return cjs.feedProxy = new cjs.AjaxProxy(this.getFeedProxyUrl(), cb)
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerGetter('util_enviroment', Enviroment, ['utilEnviroment'])
}).call(this);
(function() {
    var initList;
    initList = function(util_enviroment, list_navigation, util_object) {
        var List, _constants, _list, _participantTypes, _sports, _statsDataTypes, _tournamentTemplateCategories, _tournamentTemplateCategoriesFlipped;
        _list = util_enviroment.getList();
        _constants = util_enviroment.getConstants();
        _sports = util_enviroment.getConstants().sport;
        _tournamentTemplateCategories = util_enviroment.getTournamentTemplateCategoryList();
        _tournamentTemplateCategoriesFlipped = util_object.flip(_tournamentTemplateCategories);
        _participantTypes = util_enviroment.getConstants().participantTypeList;
        _statsDataTypes = util_enviroment.getConstants().statsDataType;
        return List = {
            getEventStageTypeAsString: function(type) {
                var types;
                types = _constants.event_stage_type;
                switch (type) {
                    case types.LIVE:
                        return 'live';
                    case types.FINISHED:
                        return 'finished';
                    case types.SCHEDULED:
                        return 'scheduled'
                }
            },
            getEventStageAsString: function(type) {
                var types;
                types = _constants.event_stage;
                switch (type) {
                    case types.INTERRUPTED:
                        return 'interrupted';
                    case types.AFTER_DAY1:
                        return 'interrupted';
                    case types.AFTER_DAY2:
                        return 'interrupted';
                    case types.AFTER_DAY3:
                        return 'interrupted';
                    case types.AFTER_DAY4:
                        return 'interrupted';
                    case types.AFTER_DAY5:
                        return 'interrupted';
                    case types.FINISHED:
                        return 'finished'
                }
            },
            getAfterEventStages: function() {
                return [_constants.event_stage.AFTER_DAY1, _constants.event_stage.AFTER_DAY2, _constants.event_stage.AFTER_DAY3, _constants.event_stage.AFTER_DAY4, _constants.event_stage.AFTER_DAY5]
            },
            getEventStage: function(stageId, sportId) {
                var ref;
                if ((_list != null ? (ref = _list.eventStages[sportId]) != null ? ref[stageId] : void 0 : void 0) != null) {
                    return _list.eventStages[sportId][stageId]
                }
                return ''
            },
            getSports: function() {
                return _sports
            },
            getStatsDataTypes: function() {
                return _statsDataTypes
            },
            getEventStages: function() {
                return _constants.event_stage
            },
            getEventStageTypes: function() {
                return _constants.event_stage_type
            },
            getBroadcastChannelType: function(channel_type) {
                if (_constants.broadcast_channel_type[channel_type] != null) {
                    return _constants.broadcast_channel_type[channel_type]
                }
                return ''
            },
            getBroadcastProperties: function() {
                return _constants.broadcast_properties
            },
            getBroadcastExpectedPositions: function() {
                var ref;
                return (ref = _list.broadcastExpectedPositions) != null ? ref : []
            },
            getTournamentTemplateCategories: function() {
                return _tournamentTemplateCategories
            },
            getTournamentTemplateCategoriesFlipped: function() {
                return _tournamentTemplateCategoriesFlipped
            },
            getParticipantTypes: function() {
                return _participantTypes
            },
            getEventIncidentType: function() {
                return _constants.event_incident_type
            },
            getNavigation: function() {
                return list_navigation
            },
            getBettingTypes: function() {
                return _constants.bettingTypes
            },
            getWinnerSides: function() {
                return _constants.winnerSides
            },
            getStatsDataTypes: function() {
                return _constants.statsDataType
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('util_list', initList, ['utilList'])
}).call(this);
(function() {
    var Number;
    Number = {
        toNumber: function(value) {
            var pom;
            pom = value - 0;
            if (isNaN(pom)) {
                return value
            } else {
                return pom
            }
        },
        format: function(value, thousandsSeparator) {
            var formattedMain, formattedRest, main, rest;
            if (thousandsSeparator == null) {
                thousandsSeparator = ' '
            }
            if (isNaN(value) || typeof value !== 'number') {
                return ""
            }
            value = parseInt(value);
            if (value < 1000) {
                return "" + value
            }
            main = parseInt(value / 1000);
            rest = value % 1000;
            formattedMain = this.format(main, thousandsSeparator);
            if (rest === 0) {
                formattedRest = "000"
            } else if (rest < 10) {
                formattedRest = "00" + rest
            } else if (rest < 100) {
                formattedRest = "0" + rest
            } else {
                formattedRest = this.format(rest, thousandsSeparator)
            }
            return "" + formattedMain + thousandsSeparator + formattedRest
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerGetter('util_number', Number)
}).call(this);
(function() {
    var Obj;
    Obj = {
        keys: function(obj) {
            var key, keys;
            keys = [];
            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    keys.push(key)
                }
            }
            return keys
        },
        findKeyByVal: function(obj, searchVal) {
            var key, val;
            for (key in obj) {
                val = obj[key];
                if (!obj.hasOwnProperty(key)) {
                    continue
                }
                if (searchVal === val) {
                    return key
                }
            }
            return null
        },
        deleteKey: function(sa, key) {
            var i, k, tmp_sa;
            tmp_sa = [];
            for (k in sa) {
                i = sa[k];
                if (k !== key) {
                    tmp_sa[k] = i
                }
            }
            return tmp_sa
        },
        flip: function(obj) {
            var key, newObj, value;
            newObj = {};
            for (key in obj) {
                value = obj[key];
                newObj[value] = key
            }
            return newObj
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerGetter('util_object', Obj, ['utilObject'])
}).call(this);
(function() {
    var initOdds;
    initOdds = function(util_enviroment, util_trans, util_config, util_sport) {
        var Odds;
        return Odds = {
            getSingleOddsInNewFormat: function(format, odds) {
                var formater, numFormat;
                switch (format) {
                    case "eu":
                        numFormat = 1;
                        break;
                    case "us":
                        numFormat = 3;
                        break;
                    case "hk":
                        numFormat = 4;
                        break;
                    case "ma":
                        numFormat = 5;
                        break;
                    case "in":
                        numFormat = 6;
                        break;
                    case "uk":
                        numFormat = 10;
                        break;
                    default:
                        numFormat = null
                }
                if (odds === util_trans('TRANS_ODDS_EVEN_SHORT') || isNaN(odds)) {
                    return odds
                }
                formater = util_enviroment.getFormater();
                formater.setOddsFormat(numFormat);
                return formater.formatOdd(odds, true)
            },
            isAhOverrideActive: function(sportId) {
                var isActive;
                isActive = util_config.get('app', 'odds', 'ah_override') && !this._overrideBySport(sportId);
                return isActive
            },
            hasUsHandicap: function(sportId) {
                var hasUsHandicap;
                hasUsHandicap = util_config.get('app', 'odds', 'us_handicap') && !this._overrideBySport(sportId);
                return hasUsHandicap
            },
            _overrideBySport: function(sportId) {
                var isGolf, isRacingSport, override;
                isRacingSport = util_sport.isRacingSport(sportId);
                isGolf = util_sport.isGolf(sportId);
                override = isRacingSport || isGolf;
                return override
            },
            getHandicapFormat: function(sportId) {
                var handicapFormat;
                handicapFormat = (this.hasUsHandicap(sportId) ? 'us' : 'ha');
                return handicapFormat
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('util_odds', initOdds)
}).call(this);
(function() {
    var initPage;
    initPage = function(util_enviroment) {
        return {
            isMixed: function() {
                var mixedFeed;
                mixedFeed = util_enviroment.getMixedFeed();
                return mixedFeed && typeof mixedFeed === 'boolean'
            },
            isParent: function() {
                var mixedFeed;
                mixedFeed = util_enviroment.getMixedFeed();
                return mixedFeed && typeof mixedFeed !== 'boolean'
            },
            isFullPage: function() {
                return util_enviroment.isFullPage()
            },
            isDetailPage: function() {
                return util_enviroment.isDetailPage()
            },
            isDetailParticipantPage: function() {
                return util_enviroment.isDetailParticipantPage()
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('util_page', initPage)
}).call(this);
(function() {
    var initSport, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    initSport = function(util_string, util_enviroment, util_trans, util_list, util_config) {
        var Sport;
        return Sport = {
            getId: function() {
                var id, sportName, sportUrl, translatedSportName;
                id = util_enviroment.getSportId();
                if (id) {
                    return id
                }
                sportName = util_enviroment.getSport();
                id = this.getIdFromName(sportName);
                if (id) {
                    return id
                }
                sportUrl = util_enviroment.getSportUrl();
                if (sportUrl) {
                    translatedSportName = util_string.trim(sportUrl, '/');
                    id = this.getIdFromTranslatedName(translatedSportName);
                    if (id) {
                        return id
                    }
                }
                return null
            },
            getTranslatedName: function(id, originalName) {
                var ref, ref1, translations;
                if (originalName == null) {
                    originalName = null
                }
                translations = util_enviroment.getCompleteSportTranslations();
                if (!originalName) {
                    originalName = this.getOriginalNameFromId(id)
                }
                return (ref = (ref1 = translations[originalName]) != null ? ref1['name'] : void 0) != null ? ref : ''
            },
            getTranslatedMenuName: function(id, originalName) {
                var sportNameUpper;
                if (originalName == null) {
                    originalName = null
                }
                if (!originalName) {
                    originalName = this.getOriginalNameFromId(id)
                }
                sportNameUpper = originalName.replace('-', '_').toUpperCase();
                return util_trans("TRANS_MENU_" + sportNameUpper)
            },
            getTranslatedUrlName: function(id) {
                var urls;
                urls = util_enviroment.getSportUrlsById();
                if (urls[id] == null) {
                    return ''
                }
                return util_string.trim(urls[id], '/')
            },
            getAllTranslatedSports: function() {
                var all, id, name, sport, sports;
                sports = util_list.getSports();
                all = {};
                for (sport in sports) {
                    id = sports[sport];
                    name = this.getTranslatedName(id);
                    if (name) {
                        all[id] = name
                    }
                }
                return all
            },
            getIdFromTranslatedName: function(name) {
                var id, url, urls;
                urls = util_enviroment.getSportUrlsById();
                for (id in urls) {
                    url = urls[id];
                    if (url === ("/" + name + "/")) {
                        return parseInt(id)
                    }
                }
                return 0
            },
            getOriginalNameFromId: function(id) {
                var list;
                list = util_enviroment.getSportListById();
                if (list[id] == null) {
                    return ''
                }
                return list[id]
            },
            getIdFromName: function(name) {
                var sports;
                sports = util_enviroment.getSportList();
                if (sports[name] != null) {
                    return parseInt(sports[name])
                }
                return 0
            },
            exists: function(sportId, sportName) {
                if (sportId == null) {
                    sportId = null
                }
                if (sportName == null) {
                    sportName = null
                }
                if (sportId) {
                    return this.getOriginalNameFromId(sportId) !== ''
                }
                if (sportName) {
                    return this.getIdFromName(sportName) !== 0
                }
                return false
            },
            translatedNameExists: function(name) {
                return this.getIdFromTranslatedName(name) > 0
            },
            getParentSport: function(id) {
                var parentSports;
                parentSports = util_enviroment.getParentSports();
                if (parentSports[id] != null) {
                    return parentSports[id]
                } else {
                    return null
                }
            },
            inGroup: function(id, parentId) {
                return id === parentId || this.getParentSport(id) === parentId
            },
            isGroupSport: function(id) {
                var _, ref, sportId;
                ref = util_enviroment.getParentSports();
                for (_ in ref) {
                    sportId = ref[_];
                    if (id === sportId) {
                        return true
                    }
                }
                return false
            },
            isMeetingSport: function(id) {
                var sports;
                sports = util_list.getSports();
                return id === sports.HORSE_RACING
            },
            isStageSport: function(id) {
                var sports;
                sports = util_list.getSports();
                if (id === sports.CYCLING) {
                    return true
                }
                return this.isMeetingSport(id) || this.inGroup(id, sports.MOTORSPORT) || this.inGroup(id, sports.WINTER_SPORTS)
            },
            isRacingSport: function(id) {
                var sports;
                sports = util_list.getSports();
                if (id === sports.CYCLING || id === sports.HORSE_RACING) {
                    return true
                }
                return this.inGroup(id, sports.MOTORSPORT) || this.inGroup(id, sports.WINTER_SPORTS)
            },
            isServingSport: function(id) {
                var sports;
                sports = util_list.getSports();
                if (id === sports.AMERICAN_FOOTBALL || id === sports.TENNIS || id === sports.BADMINTON || id === sports.CRICKET || id === sports.BASEBALL || id === sports.PESAPALLO || id === sports.DARTS) {
                    return true
                }
                return false
            },
            isCategorySport: function(id) {
                var cfg;
                cfg = util_enviroment.getCfg();
                return (cfg.categorySports != null) && indexOf.call(cfg.categorySports, id) >= 0
            },
            getMainSport: function(id) {
                var parentSports;
                id = parseInt(id);
                parentSports = util_enviroment.getParentSports();
                if ((parentSports != null ? parentSports[id] : void 0) == null) {
                    return id
                }
                return this.getParentSport(id)
            },
            getSportIdsInParentSport: function(id) {
                var parentSportId, ref, retSportIds, sportId;
                retSportIds = [];
                ref = util_enviroment.getParentSports();
                for (sportId in ref) {
                    parentSportId = ref[sportId];
                    if (id === parentSportId) {
                        retSportIds.push(sportId)
                    }
                }
                return retSportIds
            },
            getRacingSportShortLapsLabel: function(sportId) {
                var label, sports;
                sports = util_list.getSports();
                label = '';
                if (this.inGroup(sportId, sports.MOTORSPORT)) {
                    label = util_trans('TRANS_MOTORSPORT_LAP_SHORT')
                } else if (this.inGroup(sportId, sports.WINTER_SPORTS)) {
                    label = util_trans('TRANS_WINTER_SPORTS_LAP_SHORT')
                }
                return label
            },
            hasCategoryPage: function(id) {
                return indexOf.call(util_config.get('app', 'has_category_page'), id) >= 0
            },
            getCategoryId: function(eventItem, leagueItem) {
                var sports;
                sports = util_list.getSports();
                if (this.inGroup(eventItem.getSportId(), sports.MOTORSPORT)) {
                    return leagueItem.getSortKey().substr(2, leagueItem.getSortKey().indexOf('.') - 2)
                }
                return 0
            },
            isGolf: function(sportId) {
                var sports;
                sports = util_list.getSports();
                return sportId === sports.GOLF
            },
            hasDisabledDetail: function(sportId) {
                var sportsWithoutDetail;
                sportsWithoutDetail = util_config.get("app", "sports_without_detail");
                return indexOf.call(sportsWithoutDetail, sportId) >= 0
            },
            getBettingTypeId: function(sportId) {
                var ref;
                if (sportId == null) {
                    sportId = null
                }
                if (!sportId) {
                    sportId = this.getId()
                }
                return (ref = util_enviroment.getOddsBettingTypes()[sportId]) != null ? ref : null
            },
            getOddsScope: function(sportId) {
                var ref;
                if (sportId == null) {
                    sportId = null
                }
                if (!sportId) {
                    sportId = this.getId()
                }
                return (ref = util_enviroment.getOddsSportScopes()[sportId]) != null ? ref : null
            },
            getConstant: function(id) {
                var originalName, sportConstant;
                originalName = this.getOriginalNameFromId(id);
                if (originalName === '') {
                    return ''
                }
                sportConstant = '_' + originalName.replace(/-/g, '_');
                return sportConstant.toUpperCase()
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('util_sport', initSport, ['utilSport'])
}).call(this);
(function() {
    var Str;
    Str = (function() {
        function Str(utilConfig, dataCountryAccents, $) {
            this.utilConfig = utilConfig;
            this.dataCountryAccents = dataCountryAccents;
            this.$ = $;
            this.letters = [];
            this.lettersUpper = [];
            this.letters['tr'] = ['i'];
            this.lettersUpper['tr'] = ['İ'];
            this.letters['el'] = ['ά', 'έ', 'ή', 'ί', 'ό', 'ύ', 'ώ', 'ϊ', 'ϋ', 'ς'];
            this.lettersUpper['el'] = ['Α', 'Ε', 'Η', 'Ι', 'Ο', 'Υ', 'Ω', 'Ι', 'Υ', 'Σ'];
            this.localeCompareSupported = null;
            this._setLocaleAndLanguage()
        }
        Str.prototype.toUpperFirstChar = function(string) {
            return string.charAt(0).toUpperCase() + string.slice(1)
        };
        Str.prototype.toUpper = function(string) {
            var i, j, k, l, len, parts, re, ref, ref1, string1, string2;
            if ((ref = this.language) === 'de' || ref === 'de-at') {
                parts = string.split('ß');
                for (i = k = 0, len = parts.length; k < len; i = ++k) {
                    j = parts[i];
                    parts[i] = parts[i].toUpperCase()
                }
                return parts.join('ß')
            }
            if (this.language === 'el') {
                string1 = string.charAt(0).toUpperCase();
                string2 = string.slice(1)
            } else {
                string1 = '';
                string2 = string
            }
            if (this.letters[this.language] != null) {
                for (i = l = 0, ref1 = this.letters[this.language].length - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; i = 0 <= ref1 ? ++l : --l) {
                    re = new RegExp(this.letters[this.language][i], 'g');
                    string2 = string2.replace(re, this.lettersUpper[this.language][i])
                }
            }
            return string1 + string2.toUpperCase()
        };
        Str.prototype.ltrim = function(string, char) {
            if (char == null) {
                char = "\\s"
            }
            return string.replace(new RegExp("^" + char + "+", 'g'), '')
        };
        Str.prototype.rtrim = function(string, char) {
            if (char == null) {
                char = "\\s"
            }
            return string.replace(new RegExp(char + "+$", 'g'), '')
        };
        Str.prototype.trim = function(string, char) {
            if (char == null) {
                char = "\\s"
            }
            return string.replace(new RegExp("^" + char + "+|" + char + "+$", 'g'), '')
        };
        Str.prototype.rPad = function(str, maxStrLength, fillWithChar) {
            if (fillWithChar == null) {
                fillWithChar = " "
            }
            return this.pad(str, maxStrLength, fillWithChar)
        };
        Str.prototype.lPad = function(str, maxStrLength, fillWithChar) {
            if (fillWithChar == null) {
                fillWithChar = " "
            }
            return this.pad(str, maxStrLength, fillWithChar, "left")
        };
        Str.prototype.pad = function(str, maxStrLength, fillWithChar, side) {
            var i, k, ref, strDiff, tmp;
            if (fillWithChar == null) {
                fillWithChar = " "
            }
            if (side == null) {
                side = "right"
            }
            str = str + "";
            strDiff = maxStrLength - str.length;
            if (strDiff === 0) {
                return str
            }
            if (strDiff < 0) {
                return str.substr(0, maxStrLength)
            }
            tmp = '';
            for (i = k = 1, ref = strDiff; 1 <= ref ? k <= ref : k >= ref; i = 1 <= ref ? ++k : --k) {
                tmp += fillWithChar
            }
            if (side === "right") {
                return str + tmp
            } else {
                return tmp + str
            }
        };
        Str.prototype.compare = function(a, b) {
            a += '';
            b += '';
            if (this.isLocaleCompareSupported()) {
                try {
                    return a.localeCompare(b, this.locale)
                } catch (undefined) {}
            }
            return this.fastCompare(a, b)
        };
        Str.prototype.fastCompare = function(a, b) {
            if (a === b) {
                return 0
            } else if (a < b) {
                return -1
            } else {
                return 1
            }
        };
        Str.prototype.isLocaleCompareSupported = function() {
            if (this.localeCompareSupported === null) {
                this.localeCompareSupported = false;
                if (this.utilConfig.get('app', 'project_type', 'name') !== '_portable' && this.locale && typeof ''.localeCompare === 'function') {
                    try {
                        ''.localeCompare('', this.locale);
                        this.localeCompareSupported = true
                    } catch (undefined) {}
                }
            }
            return this.localeCompareSupported
        };
        Str.prototype.sportToTransIndex = function(sportName) {
            return sportName.replace(/-/, '_').toUpperCase()
        };
        Str.prototype.globalReplace = function(str, replacePairs) {
            var key, keys, regexp;
            keys = [];
            for (key in replacePairs) {
                keys.push(key)
            }
            if (!keys.length) {
                return str
            }
            regexp = new RegExp(keys.join("|"), "g");
            return str.replace(regexp, function(key) {
                return replacePairs[key]
            })
        };
        Str.prototype.replaceAccents = function(str, language) {
            var type;
            if (language == null) {
                language = this.language
            }
            type = this.hasAccentsForLanguage(language) ? language : "default";
            return this.globalReplace(str, this.dataCountryAccents[type])
        };
        Str.prototype.hasAccentsForLanguage = function(language) {
            if (language == null) {
                language = this.language
            }
            if (this.utilConfig.get('app', 'project_type', 'name') === '_portable') {
                return false
            }
            return this.dataCountryAccents[language] != null
        };
        Str.prototype._setLocaleAndLanguage = function() {
            this.locale = this.utilConfig.get('app', 'lang', 'charset') + "";
            this.locale = this.locale.replace('_', '-');
            return this.language = this.utilConfig.get('app', 'lang', 'web')
        };
        Str.prototype.shorterText = function(text, maxLength, appendText) {
            var appendTextLength, maxTextLength, textLength;
            if (appendText == null) {
                appendText = '...'
            }
            if (typeof text !== 'string') {
                return text
            }
            text = this.trim(text);
            textLength = text.length;
            appendTextLength = appendText.length;
            maxTextLength = maxLength - appendTextLength;
            if (textLength <= maxLength) {
                return text
            }
            text = text.substr(0, maxTextLength);
            text += "" + appendText;
            return text
        };
        return Str
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('util_string', Str, ['utilString'])
}).call(this);
(function() {
    var translate;
    translate = function(util_enviroment) {
        var _translates;
        _translates = util_enviroment.getTranslates();
        return function(key, args) {
            var arg, i, len, text;
            if (args == null) {
                args = []
            }
            if (_translates[key] != null) {
                text = _translates[key];
                if (args.length) {
                    for (i = 0, len = args.length; i < len; i++) {
                        arg = args[i];
                        text = text.replace(/%s/, arg)
                    }
                }
                return text
            }
            return key
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('util_trans', translate, ['utilTrans'])
}).call(this);
(function() {
    var initUrl;
    initUrl = function(utilEnviroment, utilConfig, utilObject, _$) {
        var Url, location;
        location = utilEnviroment.getLocation();
        return Url = {
            isAbsolute: function(url) {
                var pattern;
                pattern = /^(https?:\/\/|www)/i;
                return pattern.test(url)
            },
            getLocationOrigin: function() {
                if (location.origin) {
                    return location.origin
                }
                return location.protocol + "//" + location.host
            },
            replaceQueryString: function(url, param, value) {
                var re;
                re = new RegExp("([?|&])" + param + "=.*?(&|#|$)", "i");
                if (url.match(re)) {
                    return url.replace(re, "$1" + param + "=" + value + "$2")
                }
                param = (url.indexOf("?") === -1 ? "?" : "&") + param + "=" + value;
                re = new RegExp("(.+)#(.+)");
                if (url.match(re)) {
                    return url.replace(re, "$1" + param + "#$2")
                } else {
                    return url + param
                }
            },
            getLanguagePart: function() {
                var lang, projectId, projectList, ref;
                projectList = utilConfig.get('app', 'lang_combo', 'project_list');
                if (!projectList) {
                    return ''
                }
                projectId = utilConfig.get('app', 'project', 'id');
                lang = (ref = utilObject.findKeyByVal(projectList, projectId)) != null ? ref : '';
                if (lang === '--') {
                    return ''
                } else {
                    return lang
                }
            },
            getPathname: function() {
                if (location.pathname) {
                    return location.pathname
                }
                return false
            },
            addQueryStringParameter: function(url, params) {
                var addQueryPart, baseUrl, explodedUrlForQuery, explodedUrlForResource, queryPart, returnUrl, urlResource, urlWithQuery;
                urlWithQuery = url;
                urlResource = '';
                queryPart = '';
                addQueryPart = '';
                explodedUrlForResource = url.split('#');
                if (explodedUrlForResource[1]) {
                    urlWithQuery = explodedUrlForResource[0];
                    urlResource = explodedUrlForResource[1]
                }
                explodedUrlForQuery = urlWithQuery.split('?');
                if (explodedUrlForQuery[1]) {
                    baseUrl = explodedUrlForQuery[0];
                    queryPart = explodedUrlForQuery[1]
                } else {
                    baseUrl = urlWithQuery
                }
                if (Object.keys(params).length > 0) {
                    addQueryPart = _$.param(params)
                }
                if (queryPart) {
                    queryPart = queryPart + '&' + addQueryPart
                } else {
                    queryPart = addQueryPart
                }
                returnUrl = baseUrl;
                if (queryPart) {
                    returnUrl += '?' + queryPart
                }
                if (urlResource) {
                    returnUrl += '#' + urlResource
                }
                return returnUrl
            },
            getBaseImageData: function(withLocationOrigin) {
                var baseImageDataUrl;
                if (withLocationOrigin == null) {
                    withLocationOrigin = false
                }
                baseImageDataUrl = utilEnviroment.getBaseImageDataUrl();
                if (!withLocationOrigin) {
                    baseImageDataUrl = baseImageDataUrl.replace(this.getLocationOrigin(), '')
                }
                return baseImageDataUrl
            },
            getEmptyTeamLogo: function() {
                var baseImageDataUrl;
                baseImageDataUrl = this.getBaseImageData();
                return baseImageDataUrl.replace('/image/data', '') + utilConfig.get('app', 'empty_logo_small_path', 'logo_team')
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('util_url', initUrl, ['utilUrl'])
}).call(this);
(function() {
    var Util;
    Util = (function() {
        function Util(util_enviroment, util_browser, util_config, util_date, util_device, util_list, util_object, util_sport, util_string, util_trans, util_url, util_element, util_number, util_page, util_odds) {
            this.Enviroment = arguments[0], this.Browser = arguments[1], this.Config = arguments[2], this.Date = arguments[3], this.Device = arguments[4], this.List = arguments[5], this.Object = arguments[6], this.Sport = arguments[7], this.String = arguments[8], this.trans = arguments[9], this.Url = arguments[10], this.Element = arguments[11], this.Number = arguments[12], this.Page = arguments[13], this.Odds = arguments[14]
        }
        return Util
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('util', Util, ['Util'])
}).call(this);
(function() {
    var AjaxSyncTime;
    AjaxSyncTime = (function() {
        AjaxSyncTime.prototype.defaultMultiplier = 1;
        AjaxSyncTime.prototype.defaultSyncTime = 10;
        AjaxSyncTime.prototype.updateAction = 'update';
        AjaxSyncTime.prototype.gameAction = 'game';

        function AjaxSyncTime(util_config) {
            this.util_config = util_config;
            this.ast = this.util_config.get('ajax', 'sync_time');
            this.multiplier = AjaxSyncTime.prototype.defaultMultiplier
        }
        AjaxSyncTime.prototype.setMultiplier = function(multiplier) {
            multiplier = parseFloat(multiplier);
            if (multiplier < 0.1 || multiplier > 10) {
                multiplier = AjaxSyncTime.prototype.defaultMultiplier
            }
            if (multiplier !== this.multiplier) {
                this.multiplier = multiplier
            }
            return this.multiplier
        };
        AjaxSyncTime.prototype.getMultiplier = function() {
            return this.multiplier
        };
        AjaxSyncTime.prototype.getTime = function(action) {
            var syncTime;
            syncTime = this.ast[action] || this.ast['default'] || AjaxSyncTime.prototype.defaultSyncTime;
            return Math.round(Math.min(Math.max(syncTime * this.multiplier, 1), 300))
        };
        AjaxSyncTime.prototype.setTime = function(action, val) {
            val = parseInt(val, 10);
            if (this.ast[action] && this.ast[action] !== val && val >= 1 && val <= 20) {
                this.ast[action] = val;
                return true
            } else {
                return false
            }
        };
        AjaxSyncTime.prototype.getGameTime = function() {
            return this.getTime(AjaxSyncTime.prototype.gameAction)
        };
        AjaxSyncTime.prototype.getUpdateTime = function() {
            return this.getTime(AjaxSyncTime.prototype.updateAction)
        };
        return AjaxSyncTime
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_AjaxSyncTime', AjaxSyncTime)
}).call(this);
(function() {
    var AutoRedirect;
    AutoRedirect = (function() {
        AutoRedirect.prototype.GEOIP_STORAGE_KEY = 'geoip_autoredirect';
        AutoRedirect.prototype.LANG_COMBO_STORAGE_KEY = 'lang_combo_autoredirect';

        function AutoRedirect(util_config, util_enviroment, util_string, clientStorage) {
            this.util_config = util_config;
            this.util_enviroment = util_enviroment;
            this.util_string = util_string;
            this.clientStorage = clientStorage
        }
        AutoRedirect.prototype.redirect = function() {
            this._geoipRedirect();
            return this._langComboRedirect()
        };
        AutoRedirect.prototype._langComboRedirect = function() {
            var lang, lastLang, pathname;
            if (!this.util_config.get('app', 'lang_combo', 'js_redirect')) {
                return
            }
            pathname = this.util_enviroment.getLocation().pathname;
            lastLang = this.clientStorage.get(AutoRedirect.prototype.LANG_COMBO_STORAGE_KEY);
            lang = this._getLangFromPath(pathname);
            if (lang && lang !== lastLang) {
                return this.langComboSelect(lang)
            } else if (pathname === '/') {
                lastLang = this.clientStorage.get(AutoRedirect.prototype.LANG_COMBO_STORAGE_KEY);
                if ((lastLang != null) && pathname !== '/' + lastLang + '/') {
                    return this._redirectToUrlPart(lastLang)
                }
            }
        };
        AutoRedirect.prototype.langComboSelect = function(lang) {
            if (lang !== '') {
                return this.clientStorage.store(AutoRedirect.prototype.LANG_COMBO_STORAGE_KEY, lang)
            } else {
                return this.clientStorage.drop(AutoRedirect.prototype.LANG_COMBO_STORAGE_KEY)
            }
        };
        AutoRedirect.prototype._getLangFromPath = function(path) {
            var parts, projectList;
            if (!this.util_config.get('app', 'lang_combo', 'project_list')) {
                return false
            }
            projectList = this.util_config.get('app', 'lang_combo', 'project_list');
            parts = this.util_string.trim(path + "", "/").split('/');
            if (parts.length !== 1 || parts[0] === '--' || ((projectList != null ? projectList[parts[0]] : void 0) == null)) {
                return false
            }
            return parts[0]
        };
        AutoRedirect.prototype._geoipRedirect = function() {
            var pathName, ref;
            if (!this._geoipCanRedirect()) {
                return
            }
            pathName = (ref = this.util_enviroment.getLocation().pathname) != null ? ref : "";
            pathName = this.util_string.ltrim(pathName, '/');
            this.clientStorage.store(AutoRedirect.prototype.GEOIP_STORAGE_KEY, "1");
            if (pathName !== "") {
                return
            }
            return this.util_enviroment.getGeoIp((function(_this) {
                return function(geoIp) {
                    var defaultUrlPart, geoIpToUrlPart, urlPart;
                    urlPart = '';
                    geoIpToUrlPart = _this.util_config.get('app', 'js_redirect', 'geoip_to_urlpart');
                    defaultUrlPart = _this.util_config.get('app', 'js_redirect', 'urlpart');
                    if (geoIpToUrlPart !== false && geoIpToUrlPart[geoIp]) {
                        urlPart = geoIpToUrlPart[geoIp]
                    } else if (defaultUrlPart !== false) {
                        urlPart = defaultUrlPart
                    }
                    if (urlPart) {
                        return _this._redirectToUrlPart(urlPart)
                    }
                }
            })(this))
        };
        AutoRedirect.prototype._redirectToUrlPart = function(urlPart) {
            this.clientStorage.store_in_session('LS_refresh_count', 0, 60);
            return this.util_enviroment.getLocation().pathname = '/' + urlPart + '/'
        };
        AutoRedirect.prototype._geoipCanRedirect = function() {
            if (this.util_config.get('app', 'js_redirect') === false) {
                return false
            }
            if (this.clientStorage.get(AutoRedirect.prototype.GEOIP_STORAGE_KEY) === "1") {
                return false
            }
            if (!(this.clientStorage.isDriverAvailable('locStorage') || this.clientStorage.isDriverAvailable('ieUserData') || this.clientStorage.isDriverAvailable('localCookie'))) {
                return false
            }
            return true
        };
        return AutoRedirect
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_AutoRedirect', AutoRedirect)
}).call(this);
(function() {
    var Bookmaker;
    Bookmaker = (function() {
        function Bookmaker(_$, utilTrans) {
            this._$ = _$;
            this.utilTrans = utilTrans;
            this._bookmakersData = {};
            this._availableBookmakers = {};
            this._defaultKey = "default"
        }
        Bookmaker.prototype.setData = function(_bookmakersData) {
            this._bookmakersData = _bookmakersData
        };
        Bookmaker.prototype.setAvailableBookmakersData = function(_availableBookmakers) {
            this._availableBookmakers = _availableBookmakers
        };
        Bookmaker.prototype.getText = function(geoIp) {
            return this._replaceByBookmaker(this._getItem(geoIp, 'name'))
        };
        Bookmaker.prototype.getName = function(geoIp) {
            return this._getItem(geoIp, 'name')
        };
        Bookmaker.prototype.getId = function(geoIp) {
            if (this._getItem(geoIp, 'main_bookmaker_id')) {
                return parseInt(this._getItem(geoIp, 'main_bookmaker_id'))
            } else {
                return ''
            }
        };
        Bookmaker.prototype.getAvailableBookmakerListByGeoIp = function(geoIp) {
            var data, ids;
            if (geoIp == null) {
                geoIp = null
            }
            data = this._getAvailableItem(geoIp);
            if (data) {
                ids = data.map(function(a) {
                    return parseInt(a)
                });
                return ids
            }
            return []
        };
        Bookmaker.prototype._getAvailableItem = function(geoIp) {
            if (this._availableBookmakers[geoIp] != null) {
                return this._availableBookmakers[geoIp]
            } else {
                if (this._availableBookmakers[this._defaultKey] != null) {
                    return this._availableBookmakers[this._defaultKey]
                }
            }
            return false
        };
        Bookmaker.prototype._getItem = function(geoIp, attribute) {
            var ref, ref1;
            if (((ref = this._bookmakersData[geoIp]) != null ? ref[attribute] : void 0) != null) {
                return this._bookmakersData[geoIp][attribute]
            } else {
                if (((ref1 = this._bookmakersData[this._defaultKey]) != null ? ref1[attribute] : void 0) != null) {
                    return this._bookmakersData[this._defaultKey][attribute]
                }
            }
            return ''
        };
        Bookmaker.prototype._replaceByBookmaker = function(bookmakerName) {
            var text;
            if (bookmakerName == null) {
                bookmakerName = ''
            }
            text = this.utilTrans('TRANS_BOOKMARK_ODDS');
            text = text.replace('%s', bookmakerName);
            return text
        };
        return Bookmaker
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_Bookmaker', Bookmaker)
}).call(this);
(function() {
    var Boxing;
    Boxing = (function() {
        Boxing.prototype.KNOCKOUT = 91;
        Boxing.prototype.TECHNICAL_KNOCKOUT = 92;
        Boxing.prototype.POINTS = 93;
        Boxing.prototype.SUBMISSION = 148;
        Boxing.prototype.NO_CONTEST = 156;
        Boxing.prototype.TRANS_RESULT_KO = 'TRANS_BOXING_RESULT_KO';
        Boxing.prototype.TRANS_RESULT_TKO = 'TRANS_BOXING_RESULT_TKO';
        Boxing.prototype.TRANS_RESULT_POINTS = 'TRANS_BOXING_RESULT_POINTS';
        Boxing.prototype.TRANS_RESULT_SUBMISSION = 'TRANS_BOXING_RESULT_SUBMISSION';
        Boxing.prototype.TRANS_RESULT_NO_CONTEST = 'TRANS_BOXING_RESULT_NO_CONTEST';
        Boxing.prototype.TRANS_RESULT_SHORT_KO = 'TRANS_BOXING_RESULT_SHORT_KO';
        Boxing.prototype.TRANS_RESULT_SHORT_TKO = 'TRANS_BOXING_RESULT_SHORT_TKO';
        Boxing.prototype.TRANS_RESULT_SHORT_POINTS = 'TRANS_BOXING_RESULT_SHORT_POINTS';
        Boxing.prototype.TRANS_RESULT_SHORT_SUBMISSION = 'TRANS_BOXING_RESULT_SHORT_SUBMISSION';
        Boxing.prototype.TRANS_RESULT_SHORT_NO_CONTEST = 'TRANS_BOXING_RESULT_SHORT_NO_CONTEST';
        Boxing.prototype.TRANS_ROUND = 'TRANS_BOXING_ROUND';
        Boxing.prototype.TRANS_DRAW = 'TRANS_BOXING_DRAW';
        Boxing.prototype._incidentTrans = {};
        Boxing.prototype._incidentShortTrans = {};

        function Boxing(util_trans) {
            this.util_trans = util_trans;
            this._incidentTrans[this.KNOCKOUT] = this.TRANS_RESULT_KO;
            this._incidentTrans[this.TECHNICAL_KNOCKOUT] = this.TRANS_RESULT_TKO;
            this._incidentTrans[this.POINTS] = this.TRANS_RESULT_POINTS;
            this._incidentTrans[this.SUBMISSION] = this.TRANS_RESULT_SUBMISSION;
            this._incidentTrans[this.NO_CONTEST] = this.TRANS_RESULT_NO_CONTEST;
            this._incidentShortTrans[this.KNOCKOUT] = this.TRANS_RESULT_SHORT_KO;
            this._incidentShortTrans[this.TECHNICAL_KNOCKOUT] = this.TRANS_RESULT_SHORT_TKO;
            this._incidentShortTrans[this.POINTS] = this.TRANS_RESULT_SHORT_POINTS;
            this._incidentShortTrans[this.SUBMISSION] = this.TRANS_RESULT_SHORT_SUBMISSION;
            this._incidentShortTrans[this.NO_CONTEST] = this.TRANS_RESULT_SHORT_NO_CONTEST
        }
        Boxing.prototype.getTransDraw = function() {
            return this.util_trans(this.TRANS_DRAW)
        };
        Boxing.prototype.getResult = function(incidentSubtypeId, round) {
            if ((this._incidentTrans[incidentSubtypeId] != null)) {
                return this.formatResult(this.util_trans(this._incidentTrans[incidentSubtypeId]), round)
            } else {
                return ''
            }
        };
        Boxing.prototype.getResultShort = function(incidentSubtypeId, round) {
            if ((this._incidentShortTrans[incidentSubtypeId] != null)) {
                return this.formatResultShort(this.util_trans(this._incidentShortTrans[incidentSubtypeId]), round)
            } else {
                return ''
            }
        };
        Boxing.prototype.formatResult = function(result, round) {
            var out;
            out = '';
            if (result) {
                out += result
            }
            if (result && round) {
                out += ' - '
            }
            if (round) {
                out += this.util_trans(this.TRANS_ROUND).replace('%s', round)
            }
            return out
        };
        Boxing.prototype.formatResultShort = function(result, round) {
            var out;
            out = '';
            if (result) {
                out += result
            }
            if (result && round) {
                out += '/'
            }
            if (round) {
                out += round
            }
            return out
        };
        return Boxing
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_Boxing', Boxing)
}).call(this);
(function() {
    var Broadcast, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    Broadcast = (function() {
        function Broadcast(utilList, utilTrans, utilObject) {
            this.utilList = utilList;
            this.utilTrans = utilTrans;
            this.utilObject = utilObject;
            this._bookmakerIds = [];
            this._tvTypeId = this.utilList.getBroadcastChannelType("TV");
            this._liveStreamingTypeId = this.utilList.getBroadcastChannelType("BOOKMAKER");
            this._wwwTypeId = this.utilList.getBroadcastChannelType("WWW")
        }
        Broadcast.prototype.getFilteredJsonData = function(jsonData, allowedBookmakerIds) {
            this._bookmakerIds = this._validateBookmakerIds(allowedBookmakerIds);
            return this._filterLiveStreaming(jsonData)
        };
        Broadcast.prototype._validateBookmakerIds = function(bookmakerIds) {
            var ids;
            if (typeof bookmakerIds === 'string') {
                ids = bookmakerIds.split('|').map(function(a) {
                    return parseInt(a)
                });
                return ids
            } else if (Array.isArray(bookmakerIds)) {
                return bookmakerIds
            } else {
                return [bookmakerIds]
            }
        };
        Broadcast.prototype._filterLiveStreaming = function(jsonData) {
            var bookmakerId, broadcastTypeId, broadcastTypeList, filteredData, itemIndex, liveStreamingItem, parsedData;
            parsedData = JSON.parse(jsonData);
            filteredData = this._getFilteredData(parsedData);
            for (broadcastTypeId in parsedData) {
                broadcastTypeList = parsedData[broadcastTypeId];
                if (parseInt(broadcastTypeId) === this._liveStreamingTypeId) {
                    for (itemIndex in broadcastTypeList) {
                        liveStreamingItem = broadcastTypeList[itemIndex];
                        bookmakerId = liveStreamingItem.BI;
                        if (indexOf.call(this._bookmakerIds, bookmakerId) >= 0) {
                            if (filteredData[this._liveStreamingTypeId] == null) {
                                filteredData[this._liveStreamingTypeId] = []
                            }
                            filteredData[this._liveStreamingTypeId].push(liveStreamingItem)
                        }
                    }
                }
            }
            return JSON.stringify(filteredData)
        };
        Broadcast.prototype._getFilteredData = function(data) {
            var filteredData, i, type, types;
            filteredData = {};
            types = [this._tvTypeId, this._wwwTypeId];
            for (i in types) {
                type = types[i];
                if ((data != null ? data[type] : void 0) != null) {
                    filteredData[type] = data[type]
                }
            }
            return filteredData
        };
        return Broadcast
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_Broadcast', Broadcast)
}).call(this);
(function() {
    var Calendar, create;
    create = function(util_config, util_date, util_element, Helper_Window, Helper_CurrentTime) {
        return new Calendar(util_config, util_date, util_element, Helper_Window, function() {
            return TXT_CAL
        }, function() {
            return TXT_TODAY
        }, (typeof window !== "undefined" && window !== null ? window : global).get_gmt_offset_diff, function() {
            return tudate
        }, function() {
            return Helper_CurrentTime.getTimestamp()
        })
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Helper_Calendar', create);
    Calendar = (function() {
        function Calendar(cfg, date1, element, helperWindow, txtCalGetter, todayTextGetter, gmtOffsetDiffGetter, tuDateGetter, currentTimestampGetter) {
            this.cfg = cfg;
            this.date = date1;
            this.element = element;
            this.helperWindow = helperWindow;
            this.txtCalGetter = txtCalGetter;
            this.todayTextGetter = todayTextGetter;
            this.gmtOffsetDiffGetter = gmtOffsetDiffGetter;
            this.tuDateGetter = tuDateGetter;
            this.currentTimestampGetter = currentTimestampGetter
        }
        Calendar.prototype.toggle = function(id) {
            var $element, $iframes, $menu;
            $element = $("#" + id);
            $iframes = this.element.getPageContentElement().find('.adscontent iframe');
            if ($element.length) {
                $element.remove();
                $iframes.show()
            } else {
                $menu = $(this.generate());
                $('#ifmenu-calendar > span.today').append($menu);
                cjs.Util.Element.hideIntersectingBanners($menu, $iframes)
            }
            return this.helperWindow.closePopup('day')
        };
        Calendar.prototype.generate = function(onlyValues) {
            var classes, dayLightSavingsHours, dayString, html, i, j, localDate, localUtime, range, ref, ref1, roundUtime, timeZone, tuDate, values;
            if (onlyValues == null) {
                onlyValues = false
            }
            html = '';
            values = [];
            localDate = new Date();
            tuDate = this.tuDateGetter();
            range = this.cfg.get('app', 'calendar_range');
            roundUtime = tuDate - range * 86400;
            localUtime = this.currentTimestampGetter() - range * 86400 - localDate.getTimezoneOffset() * 60 - this.gmtOffsetDiffGetter();
            for (i = j = ref = -range, ref1 = range; ref <= ref1 ? j <= ref1 : j >= ref1; i = ref <= ref1 ? ++j : --j) {
                localDate.setTime(localUtime * 1000);
                if ((timeZone && timeZone !== localDate.getTimezoneOffset()) || dayLightSavingsHours) {
                    if (!dayLightSavingsHours) {
                        dayLightSavingsHours = (timeZone - localDate.getTimezoneOffset()) / 60
                    }
                    localDate.setHours(localDate.getHours() - dayLightSavingsHours)
                }
                if (onlyValues) {
                    values[i] = new Date(localDate)
                } else {
                    classes = [];
                    dayString = this.formatDate(localDate);
                    if (i === sudate) {
                        classes.push('ifmenu-active')
                    }
                    if (roundUtime === tuDate) {
                        classes.push('ifmenu-today');
                        dayString = this.todayTextGetter()
                    }
                    html += '<li';
                    if (i % 2) {
                        html += ' class="even"'
                    }
                    html += '><a href="#"';
                    if (classes.length) {
                        html += " class=\"" + (classes.join(' ')) + "\""
                    }
                    html += " onclick=\"set_calendar_date('" + i + "'); return false;\">";
                    html += "<span>" + dayString + "</span>";
                    html += '</a>';
                    html += '</li>'
                }
                roundUtime += 86400;
                localUtime += 86400;
                timeZone = localDate.getTimezoneOffset()
            }
            if (onlyValues) {
                return values
            }
            return "<ul id=\"ifmenu-calendar-content\">" + html + "</ul>"
        };
        Calendar.prototype.getSelectedDateHtml = function() {
            var dayString, onClick;
            dayString = this.formatDate();
            onClick = "cjs.dic.get('Helper_Calendar').toggle('ifmenu-calendar-content');";
            if (this.cfg.get('app', 'google_analytics', 'event_tracking')) {
                onClick += "e_t.track_click('iframe-bookmark-click', 'calendar');"
            }
            onClick += 'return false;';
            return "<span class=\"h2\"><a href=\"#\" onclick=\"" + onClick + "\"><i></i>" + dayString + "</a></span>"
        };
        Calendar.prototype.getSelectedDateDay = function(date) {
            date = this._getCheckedDate(date);
            return date.getUTCDate()
        };
        Calendar.prototype.formatDate = function(date) {
            var format, txtCal;
            date = this._getCheckedDate(date);
            txtCal = this.txtCalGetter();
            format = this.cfg.get('app', 'US_time_format') ? 'M d,' : 'd/m';
            return this.date.timestamp2date(format, Math.round(date.getTime() / 1000)) + ' ' + txtCal[date.getUTCDay()]
        };
        Calendar.prototype._getCheckedDate = function(date) {
            if ((date == null) || !date.getUTCDate || !date.getUTCMonth || !date.getUTCDay || !date.getTime) {
                date = this.date.createCalendarDate(sudate)
            }
            return date
        };
        Calendar.prototype.stdTimezoneOffset = function(localDate) {
            var jan, jul;
            jan = new Date(localDate.getFullYear(), 0, 1);
            jul = new Date(localDate.getFullYear(), 6, 1);
            return Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset())
        };
        return Calendar
    })()
}).call(this);
(function() {
    var CaptionBox, create;
    create = function(ClientStorage) {
        return new CaptionBox(ClientStorage)
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Helper_CaptionBox', create);
    CaptionBox = (function() {
        function CaptionBox(clientStorage) {
            this.clientStorage = clientStorage
        }
        CaptionBox.prototype.open = function(id, cookie) {
            var $elems;
            $elems = $("#" + id);
            if (this.clientStorage.get(cookie) !== null) {
                return
            }
            return $elems.show()
        };
        CaptionBox.prototype.close = function(id, cookie, expireDays, forceCookie) {
            var $elems;
            if (forceCookie == null) {
                forceCookie = true
            }
            $elems = $("#" + id);
            if (!$elems.length) {
                return
            }
            $elems.hide(100);
            if (forceCookie) {
                return setTimeout((function(captionBox, cookie, expireDays) {
                    return captionBox.clientStorage.store_cookie(cookie, 0, expireDays * 86400, 'self', '/')
                })(this, cookie, expireDays), 100)
            } else {
                return this.clientStorage.store(cookie, 0, expireDays * 86400)
            }
        };
        CaptionBox.prototype.setExpire = function(boxTimeIdent, expireDays) {
            if (this.clientStorage.get(boxTimeIdent)) {
                return
            }
            return this.clientStorage.store(boxTimeIdent, new Date().getTime() + 24 * 60 * 60 * 1000 * parseInt(expireDays), 30 * 24 * 60 * 60)
        };
        return CaptionBox
    })()
}).call(this);
(function() {
    var CookieLaw;
    CookieLaw = (function() {
        CookieLaw.prototype.KEY = 'cookie_law_accepted';
        CookieLaw.prototype.HIDE_TIMEOUT = 500;
        CookieLaw.prototype.INFO_BOX_HTML_ID = '#cookie-law';
        CookieLaw.prototype.DISABLED_PATHNAMES_CONSTANTS = ['TRANS_URL_PRIVACY_POLICY'];

        function CookieLaw($, utilEnviroment, utilUrl, utilTrans, clientStorage, utilConfig) {
            this.$ = $;
            this.utilEnviroment = utilEnviroment;
            this.utilUrl = utilUrl;
            this.utilTrans = utilTrans;
            this.clientStorage = clientStorage;
            this.utilConfig = utilConfig
        }
        CookieLaw.prototype.accept = function() {
            this.clientStorage.store(this.KEY, Date.now());
            this.$(this.INFO_BOX_HTML_ID).fadeOut(this.HIDE_TIMEOUT);
            return true
        };
        CookieLaw.prototype.isAccepted = function() {
            if (!this.clientStorage.get(this.KEY)) {
                return false
            }
            return true
        };
        CookieLaw.prototype._canBeShow = function() {
            var disabledPathnameConstant, disabledUrls, i, len, ref, urlLangPrefix;
            disabledUrls = [];
            urlLangPrefix = this.utilConfig.get('app', 'url_prefix');
            ref = this.DISABLED_PATHNAMES_CONSTANTS;
            for (i = 0, len = ref.length; i < len; i++) {
                disabledPathnameConstant = ref[i];
                disabledUrls.push(urlLangPrefix + this.utilTrans(disabledPathnameConstant))
            }
            if (disabledUrls.indexOf(this.utilUrl.getPathname()) !== -1) {
                return false
            }
            return true
        };
        CookieLaw.prototype.showIfNeeded = function(acceptAutomatically) {
            if (acceptAutomatically) {
                return this.accept()
            }
            return this.utilEnviroment.geoIpIsEu((function(_this) {
                return function(isEuByGeoIp) {
                    if (isEuByGeoIp && _this._canBeShow() && !_this.isAccepted()) {
                        return _this.$(_this.INFO_BOX_HTML_ID).show()
                    }
                }
            })(this))
        };
        return CookieLaw
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_CookieLaw', CookieLaw, ['cookieLaw'])
}).call(this);
(function() {
    var CurrentTime;
    CurrentTime = (function() {
        function CurrentTime(util_date) {
            this.util_date = util_date;
            this._delta = 0
        }
        CurrentTime.prototype.setServerTimestamp = function(ts) {
            return this._delta = this.util_date.getLocalUTime() - parseInt(ts)
        };
        CurrentTime.prototype.getTimestamp = function() {
            return this.util_date.getLocalUTime() - this._delta
        };
        CurrentTime.prototype.getDelta = function() {
            return this._delta
        };
        return CurrentTime
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_CurrentTime', CurrentTime)
}).call(this);
(function() {
    var CyclingJersey, create;
    create = function(util_trans, util_enviroment, $) {
        return new CyclingJersey(util_trans, util_enviroment, $)
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Helper_CyclingJersey', create);
    CyclingJersey = (function() {
        CyclingJersey.prototype.GENERAL_LEADER = 314;
        CyclingJersey.prototype.POINTS_LEADER = 315;
        CyclingJersey.prototype.MOUNTAINS_LEADER = 316;
        CyclingJersey.prototype.YOUTH_LEADER = 317;
        CyclingJersey.prototype.CURRENT_WORLD_CHAMPION = 318;
        CyclingJersey.prototype.LAST_IN_RACE = 319;
        CyclingJersey.prototype.YELLOW_JERSEY = 76;
        CyclingJersey.prototype.GREEN_JERSEY = 77;
        CyclingJersey.prototype.RED_POLKA_DOT_JERSEY = 78;
        CyclingJersey.prototype.WHITE_JERSEY = 79;
        CyclingJersey.prototype.PINK_JERSEY = 80;
        CyclingJersey.prototype.RED_JERSEY = 81;
        CyclingJersey.prototype.BLUE_POLKA_DOT_JERSEY = 82;
        CyclingJersey.prototype.BLUE_JERSEY = 83;
        CyclingJersey.prototype.BLACK_JERSEY = 84;
        CyclingJersey.prototype.OCHRE_JERSEY = 85;
        CyclingJersey.prototype.TURQUOISE_JERSEY = 86;
        CyclingJersey.prototype.GOLD_JERSEY = 87;
        CyclingJersey.prototype.SILVER_JERSEY = 88;
        CyclingJersey.prototype.RAINBOW_JERSEY = 89;
        CyclingJersey.prototype._translates = {};
        CyclingJersey.prototype._cssClasses = {};

        function CyclingJersey(_trans, _utilEnviroment, _$) {
            this._trans = _trans;
            this._utilEnviroment = _utilEnviroment;
            this._$ = _$;
            this._translates[this.GENERAL_LEADER] = 'TRANS_CYCLING_GENERAL_LEADER';
            this._translates[this.POINTS_LEADER] = 'TRANS_CYCLING_POINTS_LEADER';
            this._translates[this.MOUNTAINS_LEADER] = 'TRANS_CYCLING_MOUNTAINS_LEADER';
            this._translates[this.YOUTH_LEADER] = 'TRANS_CYCLING_YOUTH_LEADER';
            this._translates[this.CURRENT_WORLD_CHAMPION] = 'TRANS_CYCLING_CURRENT_WORLD_CHAMPION';
            this._translates[this.LAST_IN_RACE] = 'TRANS_CYCLING_LAST_IN_RACE';
            this._cssClasses[this.YELLOW_JERSEY] = 'yellow';
            this._cssClasses[this.GREEN_JERSEY] = 'green';
            this._cssClasses[this.RED_POLKA_DOT_JERSEY] = 'red-polka-dot';
            this._cssClasses[this.WHITE_JERSEY] = 'white';
            this._cssClasses[this.PINK_JERSEY] = 'pink';
            this._cssClasses[this.RED_JERSEY] = 'red';
            this._cssClasses[this.BLUE_POLKA_DOT_JERSEY] = 'blue-polka-dot';
            this._cssClasses[this.BLUE_JERSEY] = 'blue';
            this._cssClasses[this.BLACK_JERSEY] = 'black';
            this._cssClasses[this.OCHRE_JERSEY] = 'ochre';
            this._cssClasses[this.TURQUOISE_JERSEY] = 'turquoise';
            this._cssClasses[this.GOLD_JERSEY] = 'gold';
            this._cssClasses[this.SILVER_JERSEY] = 'silver';
            this._cssClasses[this.RAINBOW_JERSEY] = 'rainbow'
        }
        CyclingJersey.prototype.getHtml = function(feedValue) {
            var cssClass, html, i, jersey, jerseyParts, jerseys, len, translate;
            jerseys = feedValue.split(';');
            if (jerseys.length) {
                html = [];
                html.push('<span class="icon-cycling-jersey-group">');
                for (i = 0, len = jerseys.length; i < len; i++) {
                    jersey = jerseys[i];
                    jerseyParts = jersey.split(',');
                    translate = (jerseyParts[0] != null) && (this._translates[jerseyParts[0]] != null) ? this._translates[jerseyParts[0]] : null;
                    cssClass = (jerseyParts[1] != null) && (this._cssClasses[jerseyParts[1]] != null) ? this._cssClasses[jerseyParts[1]] : null;
                    if (translate && cssClass) {
                        html.push('<span class="icon icon-cycling-jersey icon-cycling-jersey-' + cssClass + '" title="' + this._trans(translate) + '"></span>')
                    }
                }
                html.push('</span>');
                return html.join('')
            }
            return null
        };
        CyclingJersey.prototype.delegateTooltips = function() {
            var mouseenter, mouseleave, ttGetter;
            ttGetter = this._utilEnviroment.getTooltipObject;
            mouseenter = function(event) {
                return ttGetter().show(this, event)
            };
            mouseleave = function() {
                return ttGetter().hide(this)
            };
            this._$('.fs-table, #detail').delegate(".icon-cycling-jersey", 'mouseenter', mouseenter);
            return this._$('.fs-table, #detail').delegate(".icon-cycling-jersey", 'mouseleave', mouseleave)
        };
        return CyclingJersey
    })()
}).call(this);
(function() {
    var Formatter;
    Formatter = (function() {
        function Formatter(utilList, utilTrans, utilUrl, application) {
            this.utilList = utilList;
            this.utilTrans = utilTrans;
            this.utilUrl = utilUrl;
            this.application = application
        }
        Formatter.prototype.getParsedMultiScoreWithTitle = function(score, pointsDelimiter, withoutPoints, useTitle) {
            var ref, ref1, ref2, ref3, scoreParts, title;
            if (pointsDelimiter == null) {
                pointsDelimiter = '&nbsp;'
            }
            if (withoutPoints == null) {
                withoutPoints = false
            }
            if (useTitle == null) {
                useTitle = true
            }
            if (score === 0) {
                return ''
            }
            if (score === '-') {
                return score
            }
            scoreParts = score.split('.');
            scoreParts[0] = (ref = scoreParts[0]) != null ? ref : 0;
            scoreParts[1] = (ref1 = scoreParts[1]) != null ? ref1 : 0;
            scoreParts[2] = (ref2 = scoreParts[2]) != null ? ref2 : 0;
            scoreParts[3] = (ref3 = scoreParts[3]) != null ? ref3 : 0;
            score = scoreParts[0] !== '' ? scoreParts[0] + "." : '';
            score += scoreParts[1] + "." + scoreParts[2] + pointsDelimiter;
            if (!withoutPoints) {
                score += "(" + scoreParts[3] + ")"
            }
            if (useTitle) {
                title = scoreParts[0] !== '' ? this.utilTrans('TRANS_AUSSIE_RULES_SUPER_GOALS') + ': ' + scoreParts[0] + '. ' : '';
                title += this.utilTrans('TRANS_AUSSIE_RULES_GOALS') + ': ' + scoreParts[1];
                title += '. ' + this.utilTrans('TRANS_AUSSIE_RULES_BEHINDS') + ': ' + scoreParts[2];
                title += ' (' + this.utilTrans('TRANS_AUSSIE_RULES_POINTS') + ': ' + scoreParts[3] + ')';
                score = '<span title="' + title + '">' + score + '</span>'
            }
            return score
        };
        Formatter.prototype.getParsedBroadcast = function(broadcastJson) {
            var broadcast, broadcastName, broadcasts, html, i, imageOffset, imageUrl, j, len, len1, liveStreaming, prop, title, type, typeTmp, types, url;
            prop = this.utilList.getBroadcastProperties();
            html = [];
            types = this._sortBroadcast(broadcastJson);
            liveStreaming = this.utilTrans('TRANS_LIVE_STREAMING');
            for (i = 0, len = types.length; i < len; i++) {
                typeTmp = types[i];
                type = typeTmp['channelType'];
                broadcasts = typeTmp['data'];
                if (html.length) {
                    html.push('<span class="tooltip-broadcast">----------</span>')
                }
                for (j = 0, len1 = broadcasts.length; j < len1; j++) {
                    broadcast = broadcasts[j];
                    if (html.length) {
                        html.push('</span>')
                    }
                    title = broadcast[prop["BROADCAST_NAME"]];
                    url = broadcast[prop["BROADCAST_URL"]];
                    if (this.application.isExternalProject()) {
                        url = this.utilUrl.addQueryStringParameter(url, {
                            'externalProjectId': this.application.getExternalProjectId()
                        })
                    }
                    imageUrl = broadcast[prop["BROADCAST_IMAGE_URL"]];
                    imageOffset = broadcast[prop["BROADCAST_IMAGE_OFFSET"]];
                    if (type === this.utilList.getBroadcastChannelType("TV")) {
                        broadcastName = title
                    } else if (type === this.utilList.getBroadcastChannelType("BOOKMAKER")) {
                        broadcastName = liveStreaming
                    } else if (type === this.utilList.getBroadcastChannelType("WWW")) {
                        broadcastName = title + ' ' + liveStreaming
                    }
                    if (imageUrl) {
                        html.push('<span class="tooltip-logo">');
                        html.push('<a href="' + url + '" onclick="return !window.open(this.href)" title="' + title + '"><span style="background: transparent url(' + imageUrl + ') 0 -' + imageOffset + 'px no-repeat" class="detail-blogos"></span></a>')
                    } else {
                        html.push('<span class="tooltip-broadcast">')
                    }
                    if (url) {
                        html.push('<a href="' + url + '" onclick="return !window.open(this.href)" title="' + title + '">' + broadcastName + '</a>')
                    } else {
                        html.push(title)
                    }
                }
                html.push('</span>')
            }
            return html.join('')
        };
        Formatter.prototype._sortBroadcast = function(broadcastJson) {
            var broadcast, channelType, expectedPositions, indexes, types;
            types = JSON.parse(broadcastJson);
            expectedPositions = this.utilList.getBroadcastExpectedPositions();
            indexes = [];
            for (channelType in types) {
                broadcast = types[channelType];
                channelType = parseInt(channelType);
                indexes.push({
                    'channelType': channelType,
                    'data': broadcast,
                    'expectedPosition': expectedPositions.indexOf(channelType)
                })
            }
            indexes.sort(function(a, b) {
                return a['expectedPosition'] - b['expectedPosition']
            });
            return indexes
        };
        return Formatter
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_Formatter', Formatter)
}).call(this);
(function() {
    var GameTime, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    GameTime = (function() {
        function GameTime(util_list) {
            this.util_list = util_list;
            this.stagesWithGameTime = [this.util_list.getEventStages().FIRST_HALF, this.util_list.getEventStages().SECOND_HALF, this.util_list.getEventStages().FIRST_PERIOD, this.util_list.getEventStages().SECOND_PERIOD, this.util_list.getEventStages().THIRD_PERIOD, this.util_list.getEventStages().FIRST_QUARTER, this.util_list.getEventStages().SECOND_QUARTER, this.util_list.getEventStages().THIRD_QUARTER, this.util_list.getEventStages().FOURTH_QUARTER, this.util_list.getEventStages().EXTRA_TIME, this.util_list.getEventStages().FIRST_EXTRA_TIME, this.util_list.getEventStages().SECOND_EXTRA_TIME];
            this.stagesExtraTimes = [this.util_list.getEventStages().EXTRA_TIME, this.util_list.getEventStages().FIRST_EXTRA_TIME, this.util_list.getEventStages().SECOND_EXTRA_TIME];
            this.sportsWithCountedGameTime = [this.util_list.getSports().SOCCER, this.util_list.getSports().BANDY, this.util_list.getSports().RUGBY_LEAGUE, this.util_list.getSports().RUGBY_UNION];
            this.liveMatchStagesHalves = [this.util_list.getEventStages().FIRST_HALF, this.util_list.getEventStages().SECOND_HALF];
            this.liveMatchStagesQuarters = [this.util_list.getEventStages().FIRST_QUARTER, this.util_list.getEventStages().SECOND_QUARTER, this.util_list.getEventStages().THIRD_QUARTER, this.util_list.getEventStages().FOURTH_QUARTER, this.util_list.getEventStages().EXTRA_TIME];
            this.sportsWithContinuousMinutes = [this.util_list.getSports().HANDBALL]
        }
        GameTime.prototype.showStageInfo = function(eventItem) {
            var hasStageWithTime;
            hasStageWithTime = this.hasStageWithTime(eventItem.getStage());
            return hasStageWithTime && eventItem.getGameTime() > 0
        };
        GameTime.prototype.isSportWithContinuousMinutes = function(sportId) {
            return indexOf.call(this.sportsWithContinuousMinutes, sportId) >= 0
        };
        GameTime.prototype.getBlink = function(eventItem) {
            var blink, blinkCountedGameTime, blinkInsertedGameTime, counter, hasSportGameTime, hasStageWithTime;
            blink = '';
            hasSportGameTime = (eventItem.getGameTime() != null) && eventItem.getGameTime() > 0;
            hasStageWithTime = this.hasStageWithTime(eventItem.getStage());
            counter = eventItem.getCounter;
            if (counter == null) {
                counter = '&nbsp;'
            }
            blinkInsertedGameTime = hasSportGameTime && (counter != null) && hasStageWithTime;
            blinkCountedGameTime = this._blinkCountedGameTime(eventItem.getSportId(), eventItem.getStage());
            if (blinkInsertedGameTime || blinkCountedGameTime) {
                blink = '<span class="blink">&nbsp;</span>'
            }
            return blink
        };
        GameTime.prototype.hasStageWithTime = function(eventStage) {
            var hasStageWithTime;
            hasStageWithTime = indexOf.call(this.stagesWithGameTime, eventStage) >= 0;
            return hasStageWithTime
        };
        GameTime.prototype.isLiveStageHalves = function(eventStage) {
            var isLive;
            isLive = indexOf.call(this.liveMatchStagesHalves, eventStage) >= 0;
            return isLive
        };
        GameTime.prototype.isLiveStageQuarters = function(eventStage) {
            var isLive;
            isLive = indexOf.call(this.liveMatchStagesQuarters, eventStage) >= 0;
            return isLive
        };
        GameTime.prototype.isLive = function(eventStage) {
            var isLive;
            isLive = this.hasStageWithTime(eventStage) || this.isLiveStageHalves(eventStage);
            return isLive
        };
        GameTime.prototype.isExtraTime = function(eventStage) {
            var isExtraTime;
            isExtraTime = indexOf.call(this.stagesExtraTimes, eventStage) >= 0;
            return isExtraTime
        };
        GameTime.prototype._blinkCountedGameTime = function(sportId, eventStage) {
            return this._isSportWithCountedGameTime(sportId) && this.isLiveStageHalves(eventStage)
        };
        GameTime.prototype._isSportWithCountedGameTime = function(sportId) {
            var isSportWithCountedGameTime;
            isSportWithCountedGameTime = indexOf.call(this.sportsWithCountedGameTime, sportId) >= 0;
            return isSportWithCountedGameTime
        };
        GameTime.prototype.getTopPart = function(sportId, stage) {
            var topPartIndex;
            if (indexOf.call(this.sportsWithCountedGameTime, sportId) < 0) {
                return ''
            }
            topPartIndex = '';
            if (stage === this.util_list.getEventStages().FIRST_HALF) {
                topPartIndex = '1'
            }
            if (stage === this.util_list.getEventStages().SECOND_HALF) {
                topPartIndex = '2'
            }
            return ' - </span><span class="r" id="atomclock"><span id="part-top' + topPartIndex + '">'
        };
        GameTime.prototype.getBlinkingTime = function(gameTime) {
            return ' - </span><span class="r">' + gameTime + '<span class="blink">&nbsp;</span>'
        };
        return GameTime
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_GameTime', GameTime)
}).call(this);
(function() {
    var Golf, create;
    create = function() {
        return new Golf((typeof window !== "undefined" && window !== null ? window : global).get_gmt_offset, cjs.hourFormat, $)
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Helper_Golf', create);
    Golf = (function() {
        function Golf(gmtOffsetGetter, hourFormat, _$) {
            this.gmtOffsetGetter = gmtOffsetGetter;
            this.hourFormat = hourFormat;
            this._$ = _$
        }
        Golf.prototype.isTeeTimeDayEqualToFeedDay = function(participantHoleInfo) {
            var feedDay, isEqual, teeTimeDay;
            teeTimeDay = cjs.Util.Date.timestamp2date('j', participantHoleInfo - this.gmtOffsetGetter());
            feedDay = cjs.dic.get('Helper_Calendar').getSelectedDateDay();
            isEqual = parseInt(teeTimeDay) === parseInt(feedDay);
            return isEqual
        };
        Golf.prototype.setGolfStartTimes = function() {
            this._setGolfStartTime(false);
            return this._setGolfStartTime(true)
        };
        Golf.prototype._setGolfStartTime = function(isScheduled) {
            var $holesPlayedData, $td, startTime;
            $holesPlayedData = $(this._getStartTimeHtmlElName(isScheduled));
            $td = $holesPlayedData.closest('td');
            startTime = $holesPlayedData.text();
            if (startTime && startTime.length) {
                $td.append(cjs.Util.Date.timestamp2date(this.hourFormat, startTime, this.gmtOffsetGetter()));
                $td.addClass('hole-start-time');
                $('.parToday').html('')
            }
            return $holesPlayedData.remove()
        };
        Golf.prototype._getStartTimeHtmlElName = function(isScheduled) {
            if (isScheduled) {
                return '#golf_holes_not_played'
            } else {
                return '#golf_holes_played'
            }
        };
        return Golf
    })()
}).call(this);
(function() {
    var create, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    create = function() {
        var _getTsAndRestrictionFromHighlight, checkHighlightRestriction, getLastHighlightTs, hasHighlight;
        _getTsAndRestrictionFromHighlight = function(highlightData) {
            var ret;
            highlightData += "";
            if (highlightData * 1 === 1) {
                return [1, 1]
            }
            if (!highlightData.match(/^[0-9]*\|.*$/)) {
                return []
            }
            ret = highlightData.split('|');
            if (!ret[1]) {
                ret[1] = 1
            }
            return ret
        };
        getLastHighlightTs = function(highlightsData, countryCode) {
            var highlightData, i, len, maxTs, ref, ref1, restrictionData, ts;
            highlightsData += "";
            maxTs = 0;
            ref = highlightsData.split(';');
            for (i = 0, len = ref.length; i < len; i++) {
                highlightData = ref[i];
                ref1 = _getTsAndRestrictionFromHighlight(highlightData), ts = ref1[0], restrictionData = ref1[1];
                if ((ts != null) && checkHighlightRestriction(restrictionData, countryCode)) {
                    ts = ts * 1;
                    if (maxTs < ts) {
                        maxTs = ts
                    }
                }
            }
            if (maxTs === 0) {
                return false
            }
            return maxTs
        };
        hasHighlight = function(highlightsData, countryCode) {
            var highlightData, i, len, ref, ref1, restrictionData, ts;
            highlightsData += "";
            ref = highlightsData.split(';');
            for (i = 0, len = ref.length; i < len; i++) {
                highlightData = ref[i];
                ref1 = _getTsAndRestrictionFromHighlight(highlightData), ts = ref1[0], restrictionData = ref1[1];
                if ((ts != null) && checkHighlightRestriction(restrictionData, countryCode)) {
                    return true
                }
            }
            return false
        };
        checkHighlightRestriction = function(restrictionData, countryCode) {
            var allow, country, countryRule, deny, i, len, ref, ref1, rule;
            if (restrictionData == null) {
                restrictionData = ""
            }
            if (countryCode == null) {
                countryCode = ""
            }
            restrictionData += "";
            countryCode += "";
            allow = [];
            deny = [];
            if (restrictionData === "") {
                restrictionData = 0
            }
            if (restrictionData * 1 === 1) {
                return true
            }
            if ((restrictionData == null) || restrictionData === 0 || !countryCode) {
                return false
            }
            ref = restrictionData.split(',');
            for (i = 0, len = ref.length; i < len; i++) {
                countryRule = ref[i];
                ref1 = countryRule.split(':'), country = ref1[0], rule = ref1[1];
                if (rule === 'a') {
                    allow.push(country)
                } else {
                    deny.push(country)
                }
            }
            if (allow.length) {
                if (indexOf.call(allow, countryCode) >= 0) {
                    return true
                }
                return false
            }
            if (deny.length) {
                if (indexOf.call(deny, countryCode) >= 0) {
                    return false
                }
                return true
            }
            return true
        };
        return {
            hasHighlight: hasHighlight,
            getLastHighlightTs: getLastHighlightTs,
            checkHighlightRestriction: checkHighlightRestriction
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Helper_HighlightRestriction', create)
}).call(this);
(function() {
    var LiveSentence;
    LiveSentence = (function() {
        function LiveSentence() {}
        LiveSentence.prototype.getHtml = function(value) {
            if (!value) {
                return ''
            }
            return '<span class="extra-info-left">' + value + '</span>'
        };
        return LiveSentence
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_LiveSentence', LiveSentence)
}).call(this);
(function() {
    var LiveStreaming, create;
    create = function(util_date) {
        return new LiveStreaming(util_date, (typeof window !== "undefined" && window !== null ? window : global).get_gmt_offset, function() {
            return TXT_CAL_FULL
        })
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Helper_LiveStreaming', create);
    LiveStreaming = (function() {
        function LiveStreaming(utilDate, gmtOffsetGetter, txtCalFullGetter) {
            this.utilDate = utilDate;
            this.gmtOffsetGetter = gmtOffsetGetter;
            this.txtCalFullGetter = txtCalFullGetter;
            this.kickoffs = [];
            this.events = []
        }
        LiveStreaming.prototype.addLiveStreamingDayLabels = function() {
            var dayBefore, firstLabel, local_gmt_offset, user_gmt_offset;
            user_gmt_offset = (new Date()).getTimezoneOffset() * 60;
            local_gmt_offset = this.gmtOffsetGetter();
            dayBefore = '';
            firstLabel = true;
            return $('#block-live-streaming-kickoff td.time').each((function(_this) {
                return function(_, td) {
                    var $td, date, day, dayLabel, labelElement, translatedDay;
                    $td = $(td);
                    date = new Date((parseInt($td.text()) - local_gmt_offset + user_gmt_offset) * 1000);
                    day = date.getDay();
                    translatedDay = _this.txtCalFullGetter()[day];
                    if (day !== dayBefore) {
                        dayLabel = "<tr class=\"date" + (firstLabel ? " first-date" : "") + "\"><td colspan=\"3\">" + translatedDay + " " + _this.utilDate.timestamp2date("d.m.Y", $td.text(), local_gmt_offset) + "</td></tr>";
                        if ($td.closest('tr').prev().hasClass('label')) {
                            $td.closest('tr').prev().before(dayLabel)
                        } else {
                            labelElement = $td.closest('tr').prevAll('tr.label:first');
                            $td.closest('tr').before(dayLabel);
                            $(labelElement).clone().addClass('cloned').insertBefore($td.closest('tr'));
                            $td.closest('tr').addClass('tr-first')
                        }
                        firstLabel = false
                    }
                    return dayBefore = day
                }
            })(this))
        };
        LiveStreaming.prototype.makeTemporaryEventObjects = function() {
            $('#block-live-streaming-kickoff td.time').each((function(_this) {
                return function(_, td) {
                    return _this.kickoffs.push($(td).text())
                }
            })(this));
            return $('#block-live-streaming-event td.time').each((function(_this) {
                return function(_, td) {
                    return _this.events.push($(td).text())
                }
            })(this))
        };
        LiveStreaming.prototype.regenerateLiveStreamingContent = function(className) {
            var $element, selector;
            if (className === 'kickoff') {
                $('#block-live-streaming-kickoff tr.date').remove();
                $('#block-live-streaming-kickoff tr.cloned').remove()
            }
            selector = "#block-live-streaming-" + className + " td.time";
            $element = $(selector);
            $element.each((function(_this) {
                return function(i, elem) {
                    return $(elem).text(className === 'kickoff' ? _this.kickoffs[i] : _this.events[i])
                }
            })(this));
            if (className === 'kickoff') {
                this.addLiveStreamingDayLabels();
                $element.each(function(_, elem) {
                    var $elem;
                    $elem = $(elem);
                    if ($elem.closest('tr').prev().hasClass('tr-first')) {
                        return $elem.closest('tr').removeClass('tr-first')
                    }
                })
            }
            return this.utilDate.fromUnixtimeToDatetime(className, 'text', selector)
        };
        return LiveStreaming
    })()
}).call(this);
(function() {
    var Menu;
    Menu = (function() {
        function Menu($1) {
            this.$ = $1;
            this.tlist = {}
        }
        Menu.prototype.lmenuShow = function(c_id) {
            var elm, getToggleButton, i, lmenu, str, tclass, that, tmp_link, tmp_submenu, ul, x, x_length, y;
            getToggleButton = function(leagueKey) {
                if (typeof cjs !== "undefined" && cjs.hasOwnProperty("myLeagues") && cjs.myLeagues.isEditable()) {
                    return cjs.myLeagues.getToggleIcon(null, leagueKey)
                }
                return ""
            };
            lmenu = this.$("#lmenu_" + c_id);
            this.$(".lmenu_" + c_id + " span.more-arrow").toggleClass('less');
            if (lmenu.find(".submenu[data-ajax=\"false\"]").length && !lmenu.hasClass("active")) {
                if (lmenu.data("prepared-for-nonajax") !== true) {
                    that = this;
                    lmenu.find(".submenu li").each(function() {
                        that.$(this).prepend(getToggleButton(that.$(this).data("mt")))
                    });
                    lmenu.find(".submenu li:last").addClass("last")
                }
                lmenu.prepend(this.$("<span class=\"active-top\"></span>"));
                lmenu.append(this.$("<span class=\"active-bottom\"></span>"));
                lmenu.addClass("active").data("prepared-for-nonajax", true);
                lmenu.find(".submenu").hide().removeClass("hidden").slideDown(100, (function(_this) {
                    return function() {
                        _this.refreshWaypoints()
                    }
                })(this));
                this.tlist["vars_" + c_id] = [];
                return
            }
            this.tlist["vars_" + c_id]["loading"] = false;
            elm = this.$("#lmenu_" + c_id).get(0);
            str = elm.innerHTML;
            tmp_link = str.match(/<a(.|\n|\s)+?<\/a>/gi);
            if (tmp_link.length > 1) {
                tmp_link = tmp_link[0]
            } else {
                tmp_link = tmp_link
            }
            if (str.match(/<span class=(")?active-top(")?>/gi)) {
                str = elm.innerHTML.toString();
                tmp_submenu = str.match(/<ul(.|\n|\s)+?<\/ul>/gi);
                elm.innerHTML = tmp_link + tmp_submenu;
                ul = elm.getElementsByTagName("ul");
                if (typeof ul !== "undefined") {
                    that = this;
                    this.$(ul[0]).slideUp(100, "linear", function() {
                        that.$(this).parent().removeClass("active");
                        that.refreshWaypoints()
                    })
                } else {
                    this.$(elm).removeClass("active")
                }
            } else {
                x = this.tlist["c_" + c_id];
                x_length = x.length - 1;
                y = "<ul class=\"submenu hidden\">";
                for (i in x) {
                    tclass = " class=\"";
                    if (parseInt(i) === x_length) {
                        tclass += "last"
                    }
                    tclass += "\"";
                    y += "<li" + tclass + ">" + getToggleButton(x[i].leagueKey) + "<a href=\"" + (x[i].short_url !== undefined ? "/" + x[i].short_url : sport_url + x[i].url) + "/" + "\">" + x[i].name + "</a></li>"
                }
                y += "</ul>";
                elm.innerHTML = "<span class=\"active-top\"></span>" + tmp_link + y + "<span class=\"active-bottom\"></span>";
                this.$(elm).addClass("active");
                this.$(elm).find(".submenu").hide().removeClass("hidden").slideDown(100, (function(_this) {
                    return function() {
                        _this.refreshWaypoints()
                    }
                })(this))
            }
            return false
        };
        Menu.prototype.lmenu = function(c_id, url, s_id) {
            var menu_ajax;
            if (typeof this.tlist["c_" + c_id] !== "undefined" || this.$("#lmenu_" + c_id + " .submenu[data-ajax=\"false\"]").length) {
                this.lmenuShow(c_id);
                return false
            }
            this.tlist["vars_" + c_id] = Array();
            this.tlist["vars_" + c_id]["loading"] = true;
            setTimeout((function(_this) {
                return function() {
                    return _this.lmenuShowLoading(c_id)
                }
            })(this), 500);
            url += "m_" + s_id + "_" + c_id;
            menu_ajax = $.ajax({
                url: url,
                success: (function(_this) {
                    return function(content) {
                        return _this.lmenuResponse(content)
                    }
                })(this)
            });
            return false
        };
        Menu.prototype.lmenuResponse = function(r_content) {
            var c_id, c_url, data, i, j, key, row, text, val;
            data = r_content.split(JS_ROW_END);
            c_id = null;
            c_url = null;
            for (i in data) {
                row = data[i].split(JS_CELL_END);
                for (j in row) {
                    text = row[j];
                    if (!text) {
                        continue
                    }
                    key = text.substring(0, 2);
                    val = text.substring(3);
                    if (key === "MC") {
                        c_id = val;
                        continue
                    }
                    if (key === "ML") {
                        c_url = val;
                        continue
                    }
                    if ((c_id == null) || (c_url == null)) {
                        continue
                    }
                    if (typeof this.tlist["c_" + c_id] === "undefined") {
                        this.tlist["c_" + c_id] = Array()
                    }
                    if (typeof this.tlist["c_" + c_id][i] === "undefined") {
                        this.tlist["c_" + c_id][i] = Array()
                    }
                    switch (key) {
                        case "MN":
                            this.tlist["c_" + c_id][i]["name"] = val;
                            break;
                        case "MU":
                            this.tlist["c_" + c_id][i]["url"] = c_url + "/" + val;
                            break;
                        case "MT":
                            this.tlist["c_" + c_id][i]["leagueKey"] = val;
                            break;
                        case "MV":
                            this.tlist["c_" + c_id][i]["short_url"] = val
                    }
                }
            }
            if ((c_id != null) && typeof this.tlist["c_" + c_id] !== "undefined") {
                this.lmenu(c_id)
            }
        };
        Menu.prototype.lmenuShowLoading = function(c_id) {
            var elm, str, tmp_link;
            elm = this.$("#lmenu_" + c_id).get(0);
            str = elm.innerHTML;
            tmp_link = str.match(/<a(.|\n|\s)+?<\/a>/gi);
            if (tmp_link.length > 1) {
                tmp_link = tmp_link[0]
            } else {
                tmp_link = tmp_link
            }
            if (this.tlist["vars_" + c_id]["loading"]) {
                if (this.tlist["vars_" + c_id]["loading"]) {
                    this.$(elm).addClass('active');
                    elm.innerHTML = "<span class=\"active-top fake\"></span>" + tmp_link + "<ul class=\"submenu\"><li class=\"last\"><a class=\"no-underline\"><div class=\"menu_loading\">&nbsp;</div></a></li></ul><span class=\"active-bottom\"></span>"
                }
            }
        };
        Menu.prototype.refreshWaypoints = function() {
            var ref;
            return (ref = cjs.bannerScrollManager) != null ? typeof ref.refreshWaypoints === "function" ? ref.refreshWaypoints() : void 0 : void 0
        };
        return Menu
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_Menu', Menu)
}).call(this);
(function() {
    var Mma, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Mma = (function(superClass) {
        extend(Mma, superClass);

        function Mma() {
            return Mma.__super__.constructor.apply(this, arguments)
        }
        Mma.prototype.TRANS_RESULT_KO = 'TRANS_MMA_RESULT_KO';
        Mma.prototype.TRANS_RESULT_TKO = 'TRANS_MMA_RESULT_TKO';
        Mma.prototype.TRANS_RESULT_POINTS = 'TRANS_MMA_RESULT_POINTS';
        Mma.prototype.TRANS_RESULT_SUBMISSION = 'TRANS_MMA_RESULT_SUBMISSION';
        Mma.prototype.TRANS_RESULT_NO_CONTEST = 'TRANS_MMA_RESULT_NO_CONTEST';
        Mma.prototype.TRANS_RESULT_SHORT_KO = 'TRANS_MMA_RESULT_SHORT_KO';
        Mma.prototype.TRANS_RESULT_SHORT_TKO = 'TRANS_MMA_RESULT_SHORT_TKO';
        Mma.prototype.TRANS_RESULT_SHORT_POINTS = 'TRANS_MMA_RESULT_SHORT_POINTS';
        Mma.prototype.TRANS_RESULT_SHORT_SUBMISSION = 'TRANS_MMA_RESULT_SHORT_SUBMISSION';
        Mma.prototype.TRANS_RESULT_SHORT_NO_CONTEST = 'TRANS_MMA_RESULT_SHORT_NO_CONTEST';
        Mma.prototype.TRANS_ROUND = 'TRANS_MMA_ROUND';
        Mma.prototype.TRANS_DRAW = 'TRANS_MMA_DRAW';
        return Mma
    })(cjs.dic.getClass('Helper_Boxing'));
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_Mma', Mma)
}).call(this);
(function() {
    var Odds;
    Odds = (function() {
        function Odds(util_list) {
            this.util_list = util_list;
            this._sportList = this.util_list.getSports()
        }
        Odds.prototype.getOutcome = function(iconType, sportId) {
            var outcome;
            outcome = null;
            if (iconType.match(/o_1|o_winner|o_each_way/)) {
                outcome = '1'
            } else if (iconType.match(/o_0/)) {
                outcome = 'x'
            } else if (iconType.match(/o_2|o_top_3|o_top_5/)) {
                outcome = '2'
            } else if (iconType.match(/o_top_6/)) {
                outcome = '3'
            } else if (iconType.match(/o_top_10/)) {
                if (sportId === this._sportList.GOLF) {
                    outcome = '3'
                } else {
                    outcome = '4'
                }
            } else if (iconType.match(/o_top_20/)) {
                outcome = '4'
            }
            return outcome
        };
        return Odds
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_Odds', Odds)
}).call(this);
(function() {
    var Parser;
    Parser = (function() {
        function Parser() {}
        Parser.prototype.getStatsResultsIndex = function(typeId) {
            if ((typeId != null) && typeId !== '') {
                return 'statsResults.' + typeId
            } else {
                return null
            }
        };
        return Parser
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_Parser', Parser)
}).call(this);
(function() {
    var PlayerProfile;
    PlayerProfile = (function() {
        function PlayerProfile(util_trans, _$, util_enviroment) {
            this.util_trans = util_trans;
            this._$ = _$;
            this.util_enviroment = util_enviroment
        }
        PlayerProfile.prototype.delegateEvents = function() {
            var firstTableId;
            $('.career-table').first().show();
            firstTableId = $('.career-table').first().attr('id');
            this._updateTable(firstTableId);
            this._fsUpdate = this.util_enviroment.getFsUpdate();
            this._fsUpdate.strip_regenerate();
            this._$('#player-profile').on('click', 'ul.ifmenu li span a', (function(_this) {
                return function(e) {
                    var tableId;
                    tableId = _this._getCurrentCareerTableId(_this._$(e.target));
                    _this._updateTable(tableId);
                    return _this._fsUpdate.strip_regenerate()
                }
            })(this));
            return this._$('#player-profile').on('click', 'tr.all-tournament > td.tournament-name:not(".hide-arrow")', (function(_this) {
                return function(e) {
                    var $this;
                    $this = _this._$(e.target);
                    if (_this._$(e.target).is('a')) {
                        return
                    }
                    return _this._toggleArrow($this)
                }
            })(this))
        };
        PlayerProfile.prototype._toggleArrow = function(element) {
            var arrow, key;
            key = element.closest('tr').attr('data-key');
            if (element.hasClass('arrow')) {
                arrow = element;
                element = element.closest('td')
            } else {
                arrow = element.children('span.arrow')
            }
            if (arrow.hasClass('open')) {
                element.closest('tr').siblings('.key' + key).hide();
                arrow.removeClass('open');
                arrow.addClass('yet-closed');
                return element.attr('title', this.util_trans('TRANS_PLAYER_CAREER_SHOW_DETAILS'))
            } else {
                element.closest('tr').siblings('.key' + key).show();
                arrow.addClass('open');
                return element.attr('title', this.util_trans('TRANS_PLAYER_CAREER_HIDE_DETAILS'))
            }
        };
        PlayerProfile.prototype._getCurrentCareerTableId = function(tab) {
            var className;
            tab.closest('li').siblings('li').removeClass('selected');
            tab.closest('li').addClass('selected');
            this._$('.career-table').hide();
            className = tab.attr('class');
            this._$('table#' + className + '-table').show();
            return this._$('table#' + className + '-table').attr('id')
        };
        PlayerProfile.prototype._updateTable = function(tableId) {
            this._setTotalClass(tableId);
            this._openFirstTournament(tableId);
            return this._hideTitle()
        };
        PlayerProfile.prototype._setTotalClass = function(tableId) {
            var isPrevElementEven;
            isPrevElementEven = this._$('#' + tableId + ' tr.total').prev().hasClass('even');
            if (!isPrevElementEven) {
                return this._$('#' + tableId + ' tr.total').addClass('even')
            }
        };
        PlayerProfile.prototype._openFirstTournament = function(tableId) {
            var firstLine;
            firstLine = this._$('#' + tableId + ' tr.all-tournament').first();
            if (!firstLine.find('span.arrow').hasClass('yet-closed')) {
                this._$('#' + tableId + ' tr').siblings('.key' + firstLine.attr('data-key')).show();
                firstLine.find('span.arrow').addClass('open');
                return firstLine.children('td.tournament-name').attr('title', this.util_trans('TRANS_PLAYER_CAREER_HIDE_DETAILS'))
            }
        };
        PlayerProfile.prototype._hideTitle = function() {
            this._$('.hide-arrow').removeAttr('title');
            return this._$('tr.tournament-stage td.tournament-name').removeAttr('title')
        };
        return PlayerProfile
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_PlayerProfile', PlayerProfile)
}).call(this);
(function() {
    var PopUpRegistration;
    PopUpRegistration = (function() {
        PopUpRegistration.prototype.COUNTER_INTERVAL = 1800;
        PopUpRegistration.prototype.DIALOG_INTERVAL = 86400;
        PopUpRegistration.prototype.COUNTER_STORAGE_KEY = 'PopUpRegistration_counter';
        PopUpRegistration.prototype.LAST_VISIT_STORAGE_KEY = 'PopUpRegistration_lastVisit';
        PopUpRegistration.prototype.LAST_DIALOG_STORAGE_KEY = 'PopUpRegistration_lastDialog';
        PopUpRegistration.prototype.GA_EVENT_TRACKING_CATEGORY = 'registration-form';

        function PopUpRegistration(util_enviroment, clientStorage, utilConfig, _$) {
            this.util_enviroment = util_enviroment;
            this.clientStorage = clientStorage;
            this.utilConfig = utilConfig;
            this._$ = _$;
            this.counterInitCount = this.utilConfig.get('app', 'registration', 'pop_up_visit_threshold');
            this._loginClient = this.util_enviroment.getLoginClientObject();
            if (this._loginClient.isEventTrackingEnabled()) {
                this._eventTracking = this.util_enviroment.getEventTrackingObject()
            }
        }
        PopUpRegistration.prototype.showDialog = function() {
            var base, count, lastDialog, lastVisit, now;
            if (this._userIsRegistered()) {
                return
            }
            now = Math.floor((new Date()).getTime() / 1000);
            lastVisit = this.clientStorage.get(this.LAST_VISIT_STORAGE_KEY);
            lastDialog = this.clientStorage.get(this.LAST_DIALOG_STORAGE_KEY);
            count = this.clientStorage.get(this.COUNTER_STORAGE_KEY);
            if (count == null) {
                count = this.counterInitCount
            }
            if ((lastVisit == null) || now - lastVisit > this.COUNTER_INTERVAL) {
                count--;
                if (count <= 0 && ((lastDialog == null) || now - lastDialog > this.DIALOG_INTERVAL)) {
                    this._loginClient.showDialog('registration');
                    if (this._loginClient.isEventTrackingEnabled()) {
                        if (typeof(base = this._eventTracking).track_click === "function") {
                            base.track_click(this.GA_EVENT_TRACKING_CATEGORY, 'auto-reg-open-form')
                        }
                        this._setEventTrackAttributes()
                    }
                    this.clientStorage.store(this.LAST_DIALOG_STORAGE_KEY, now)
                }
                this.clientStorage.store(this.COUNTER_STORAGE_KEY, count);
                return this.clientStorage.store(this.LAST_VISIT_STORAGE_KEY, now)
            }
        };
        PopUpRegistration.prototype._successRegistrationCallback = function() {
            var base;
            if (this._loginClient.isEventTrackingEnabled()) {
                return typeof(base = this._eventTracking).track_click === "function" ? base.track_click(this.GA_EVENT_TRACKING_CATEGORY, 'auto-reg-signup-no-errors') : void 0
            }
        };
        PopUpRegistration.prototype._setEventTrackAttributes = function() {
            if (!this._callbackRegistred) {
                this._callbackRegistred = true;
                this._loginClient.unregisterCallback('registration');
                this._loginClient.registerCallback('registration', this._successRegistrationCallback);
                this._loginClient.unregisterCallback('hideDialog');
                this._loginClient.registerCallback('hideDialog', (function(_this) {
                    return function(param) {
                        var base, eventMethod;
                        eventMethod = '';
                        if (param.method) {
                            eventMethod = '-' + param.method
                        }
                        if (param.dialogName === 'registration') {
                            return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(PopUpRegistration.prototype.GA_EVENT_TRACKING_CATEGORY, 'auto-reg-close-form' + eventMethod) : void 0
                        }
                    }
                })(this))
            }
            $('#registration-log-in-link a, #login-log-in-link a').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(PopUpRegistration.prototype.GA_EVENT_TRACKING_CATEGORY, 'auto-reg-login-click') : void 0
                }
            })(this));
            $('#benefits-link a').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(PopUpRegistration.prototype.GA_EVENT_TRACKING_CATEGORY, 'auto-reg-discover-more') : void 0
                }
            })(this));
            $('#terms-link a').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(PopUpRegistration.prototype.GA_EVENT_TRACKING_CATEGORY, 'auto-reg-terms') : void 0
                }
            })(this));
            $('#lsid-window #registration').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(PopUpRegistration.prototype.GA_EVENT_TRACKING_CATEGORY, 'auto-reg-signup-click') : void 0
                }
            })(this));
            $('#registration-fb, #login-fb').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(PopUpRegistration.prototype.GA_EVENT_TRACKING_CATEGORY, 'auto-reg-facebook-login') : void 0
                }
            })(this));
            $('#registration-google, #login-google').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(PopUpRegistration.prototype.GA_EVENT_TRACKING_CATEGORY, 'auto-reg-google-login') : void 0
                }
            })(this));
            return $('#registration-twitter, #login-twitter').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(PopUpRegistration.prototype.GA_EVENT_TRACKING_CATEGORY, 'auto-reg-twitter-login') : void 0
                }
            })(this))
        };
        PopUpRegistration.prototype._userIsRegistered = function() {
            var key;
            key = this._loginClient._dataStorePrefix + "persistent";
            return this._loginClient.loggedIn() || (this._loginClient._storage.get(key) != null)
        };
        return PopUpRegistration
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_PopUpRegistration', PopUpRegistration)
}).call(this);
(function() {
    var ProjectMoved, hasProp = {}.hasOwnProperty;
    ProjectMoved = (function() {
        ProjectMoved.prototype.INFO_BOX_HTML_ID_SKELETON = '#modal-dialog-project-moved-';

        function ProjectMoved($, utilEnviroment, utilUrl, utilTrans, clientStorage, utilConfig, Geo_GeoIp) {
            this.$ = $;
            this.utilEnviroment = utilEnviroment;
            this.utilUrl = utilUrl;
            this.utilTrans = utilTrans;
            this.clientStorage = clientStorage;
            this.utilConfig = utilConfig;
            this.Geo_GeoIp = Geo_GeoIp
        }
        ProjectMoved.prototype.showIfNeeded = function() {
            var key, projectMovedConfig, results, value;
            projectMovedConfig = this.utilConfig.get('app', 'project_moved');
            results = [];
            for (key in projectMovedConfig) {
                if (!hasProp.call(projectMovedConfig, key)) continue;
                value = projectMovedConfig[key];
                results.push(this.Geo_GeoIp.equalGeoIp(key, (function(_this) {
                    return function(isEqual) {
                        var images, infoBoxHtmlId;
                        if (isEqual) {
                            infoBoxHtmlId = _this.INFO_BOX_HTML_ID_SKELETON + key;
                            images = _this.$(infoBoxHtmlId).find("img[data-lazyloadimage]");
                            _this.$.each(images, function(im, data) {
                                return _this.$(images[im]).attr("src", _this.$(images[im]).data("lazyloadimage"))
                            });
                            return _this.$(infoBoxHtmlId).show()
                        }
                    }
                })(this)))
            }
            return results
        };
        return ProjectMoved
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_ProjectMoved', ProjectMoved, ['projectMoved'])
}).call(this);
(function() {
    var Rankings, create;
    create = function(util_enviroment, $) {
        return new Rankings(util_enviroment, $)
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Helper_Rankings', create);
    Rankings = (function() {
        function Rankings(_utilEnviroment, _$) {
            this._utilEnviroment = _utilEnviroment;
            this._$ = _$
        }
        Rankings.prototype.delegateTooltips = function() {
            var mouseenter, mouseleave, tt;
            tt = this._utilEnviroment.getTooltipObject((function() {
                return window.tt = new tooltip()
            }));
            mouseenter = function(event) {
                return tt.show(this, event)
            };
            mouseleave = function() {
                return tt.hide(this)
            };
            this._$('#ranking-table table tbody').delegate(".rank-column-rank", 'mouseenter', mouseenter);
            return this._$('#ranking-table table tbody').delegate(".rank-column-rank", 'mouseleave', mouseleave)
        };
        return Rankings
    })()
}).call(this);
(function() {
    var ScrollingBanner;
    ScrollingBanner = (function() {
        function ScrollingBanner(_$, util_enviroment) {
            this._$ = _$;
            this.util_enviroment = util_enviroment
        }
        ScrollingBanner.prototype.setBoxOverContent = function() {
            var $colRight, $element, Waypoint, sticky;
            $colRight = this._$('.col-right.right');
            $element = this._$('.scrolling-box-over-content');
            if ($element.length) {
                Waypoint = this.util_enviroment.getWaypoint();
                return sticky = new Waypoint.Sticky({
                    element: $element,
                    handler: function(direction) {
                        if ($colRight.length) {
                            if (direction === 'down') {
                                return $colRight.css('-webkit-transform', 'initial')
                            } else {
                                return $colRight.css('-webkit-transform', 'translateZ(0)')
                            }
                        }
                    }
                })
            }
        };
        return ScrollingBanner
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_ScrollingBanner', ScrollingBanner)
}).call(this);
(function() {
    var ServiceStatusBox;
    ServiceStatusBox = (function() {
        ServiceStatusBox.prototype.DETAIL_DIV_NAME = 'div#content-all';
        ServiceStatusBox.prototype.SHORT_PAGE_DIV_NAME = 'div#fscon';
        ServiceStatusBox.prototype.types = [ServiceStatusBox.prototype.DETAIL_DIV_NAME, ServiceStatusBox.prototype.SHORT_PAGE_DIV_NAME];

        function ServiceStatusBox(utilEnviroment, utilTrans, $) {
            this.utilEnviroment = utilEnviroment;
            this.utilTrans = utilTrans;
            this.$ = $
        }
        ServiceStatusBox.prototype.showBox = function(serviceStatusId, callback) {
            var $el, i, item, j, k, len, len1, len2, ref, ref1, ref2, transKey;
            if (serviceStatusId == null) {
                serviceStatusId = this.getServiceStatusId()
            }
            if (callback == null) {
                callback = function() {}
            }
            serviceStatusId = serviceStatusId * 1;
            if (serviceStatusId === 1) {
                if (this.getServiceStatusId() !== serviceStatusId) {
                    ref = ServiceStatusBox.prototype.types;
                    for (i = 0, len = ref.length; i < len; i++) {
                        item = ref[i];
                        this.$(item + " div#fscon-service-status").fadeOut(500, (function(that, callback) {
                            return function() {
                                that.$(this).remove();
                                return typeof callback === "function" ? callback() : void 0
                            }
                        })(this, callback))
                    }
                }
                this.setServiceStatusId(serviceStatusId);
                return
            }
            transKey = this._getTranslateKey(serviceStatusId);
            if (this.getServiceStatusId() !== serviceStatusId && transKey !== false) {
                ref1 = ServiceStatusBox.prototype.types;
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                    item = ref1[j];
                    $el = this.$(item);
                    $el.find('div#fscon-service-status').remove()
                }
                ref2 = transKey.divName.split("|");
                for (k = 0, len2 = ref2.length; k < len2; k++) {
                    item = ref2[k];
                    this._showStatusBox(transKey.key, item, callback)
                }
            }
            return this.setServiceStatusId(serviceStatusId)
        };
        ServiceStatusBox.prototype.setServiceStatusId = function(serviceStatusId1) {
            this.serviceStatusId = serviceStatusId1
        };
        ServiceStatusBox.prototype.getServiceStatusId = function() {
            return this.serviceStatusId
        };
        ServiceStatusBox.prototype._showStatusBox = function(transKey, divName, callback) {
            var $el;
            $el = this.$(divName);
            $el.prepend(this.$('<div>', {
                id: 'fscon-service-status',
                style: 'display: none',
                html: this._getBoxContent(transKey)
            }));
            return $el.find('div#fscon-service-status').fadeIn(500, function() {
                return typeof callback === "function" ? callback() : void 0
            })
        };
        ServiceStatusBox.prototype._getBoxContent = function(transKey) {
            return "<div id=\"service-status\"><div class=\"caption-box\"><div class=\"content\">\n	" + (this.utilTrans(transKey + '_PART_1')) + "\n	<br />\n	" + (this.utilTrans(transKey + '_PART_2')) + "\n</div></div></div>"
        };
        ServiceStatusBox.prototype._getTranslateKey = function(serviceStatusId) {
            switch (serviceStatusId) {
                case 2:
                    return {
                        'key': 'TRANS_SYSTEM_ERROR_UNAVAILABLE_UPDATES',
                        'divName': ServiceStatusBox.prototype.SHORT_PAGE_DIV_NAME
                    };
                case 3:
                    return {
                        'key': 'TRANS_SYSTEM_ERROR_UNAVAILABLE_LIVE_CENTRE',
                        'divName': ServiceStatusBox.prototype.SHORT_PAGE_DIV_NAME
                    };
                case 4:
                    return {
                        'key': 'TRANS_SYSTEM_ERROR_UNAVAILABLE_STANDINGS',
                        'divName': ServiceStatusBox.prototype.SHORT_PAGE_DIV_NAME
                    };
                case 6:
                    return {
                        'key': 'TRANS_SYSTEM_ERROR_UNAVAILABLE_LC',
                        'divName': ServiceStatusBox.prototype.SHORT_PAGE_DIV_NAME
                    };
                case 7:
                    return {
                        'key': 'TRANS_SYSTEM_ERROR_UNAVAILABLE_H2H',
                        'divName': ServiceStatusBox.prototype.SHORT_PAGE_DIV_NAME
                    };
                case 8:
                    return {
                        'key': 'TRANS_SYSTEM_ERROR_UNAVAILABLE_MY_GAMES',
                        'divName': ServiceStatusBox.prototype.SHORT_PAGE_DIV_NAME
                    };
                case 9:
                    return {
                        'key': 'TRANS_SYSTEM_ERROR_UNAVAILABLE_ODDS',
                        'divName': ServiceStatusBox.prototype.SHORT_PAGE_DIV_NAME
                    };
                case 10:
                    return {
                        'key': 'TRANS_SYSTEM_ERROR_UNAVAILABLE_UPDATES',
                        'divName': ServiceStatusBox.prototype.DETAIL_DIV_NAME
                    };
                case 11:
                    return {
                        'key': 'TRANS_SYSTEM_ERROR_UNAVAILABLE_UPDATES',
                        'divName': ServiceStatusBox.prototype.DETAIL_DIV_NAME + '|' + ServiceStatusBox.prototype.SHORT_PAGE_DIV_NAME
                    };
                default:
                    return false
            }
        };
        return ServiceStatusBox
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_ServiceStatusBox', ServiceStatusBox)
}).call(this);
(function() {
    var ShowMore;
    ShowMore = (function() {
        function ShowMore(_$, utilBrowser, utilTrans) {
            this._$ = _$;
            this.utilBrowser = utilBrowser;
            this.utilTrans = utilTrans
        }
        ShowMore.prototype.createLink = function(sportName) {
            var $span, $table, $tbody, $td, $tr, html;
            $table = this._$('<table>').addClass('table-link-more-games').addClass('noduel-link').addClass(sportName);
            $tbody = this._$('<tbody>');
            $tr = this._$('<tr>');
            $td = this._$('<td>');
            $span = this._$('<span>').addClass('tournament-pages-link').text(this.utilTrans('TRANS_SHOW_MORE'));
            $td.append($span);
            $tr.append($td);
            $tbody.append($tr);
            $table.append($tbody);
            html = $table.wrapAll('<div>').parent().html();
            return html
        };
        return ShowMore
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_ShowMore', ShowMore)
}).call(this);
(function() {
    var Smartbanner;
    Smartbanner = (function() {
        function Smartbanner(util_config, utilTrans, _$, util_enviroment) {
            this.util_config = util_config;
            this.utilTrans = utilTrans;
            this._$ = _$;
            this.util_enviroment = util_enviroment
        }
        Smartbanner.prototype.show = function() {
            var name, url, urlSmartBanner;
            if (!this.util_config.get('portable_apps', 'android', 'enable')) {
                return
            }
            name = this.util_config.get('portable_apps', 'info', 'name');
            urlSmartBanner = this.util_config.get('portable_apps', 'android', 'smart-banner-url');
            url = this.util_config.get('portable_apps', 'android', 'url');
            return this._$.smartbanner({
                title: name,
                author: this.utilTrans('TRANS_ANDROID_APPLICATION'),
                price: this.utilTrans('TRANS_SMART_BANNER_FREE'),
                button: this.utilTrans('TRANS_SMART_BANNER_DOWNLOAD_BUTTON'),
                inGooglePlay: '',
                force: 'android',
                daysHidden: 7,
                daysReminder: 0,
                icon: this._createIconUrl(),
                scale: this._createScale(),
                url: urlSmartBanner != null ? urlSmartBanner : url
            })
        };
        Smartbanner.prototype._createIconUrl = function() {
            var appName, baseImageUrl, iconName;
            appName = this.util_config.get('portable_apps', 'info', 'name');
            if (!appName) {
                return ''
            }
            baseImageUrl = this.util_enviroment.getBaseImageUrl();
            switch (this.util_config.get('app', 'project_type', 'name')) {
                case '_fs':
                    if (this.util_config.get('app', 'new_mobile_page', 'enable')) {
                        iconName = 'flashscore'
                    } else {
                        iconName = 'android'
                    }
                    break;
                case '_ass':
                    iconName = appName.toLowerCase().replace('.', '_');
                    break;
                default:
                    return ''
            }
            return baseImageUrl + "smartbanner/" + iconName + "_app_icon.png"
        };
        Smartbanner.prototype._createScale = function() {
            var ref;
            if (this.util_config.get('app', 'new_mobile_page', 'enable')) {
                return 'auto'
            }
            if ((ref = this.util_config.get('app', 'project_type', 'name')) === '_ass') {
                return 'auto'
            }
            return 2
        };
        return Smartbanner
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_Smartbanner', Smartbanner)
}).call(this);
(function() {
    var StageTabs, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    StageTabs = (function() {
        function StageTabs(util_date, util_sport, util_config, Helper_CurrentTime, util_enviroment, HtmlTemplate, _$, list_navigation, dataEventHolderProxy) {
            this.util_date = util_date;
            this.util_sport = util_sport;
            this.util_config = util_config;
            this.Helper_CurrentTime = Helper_CurrentTime;
            this.util_enviroment = util_enviroment;
            this.HtmlTemplate = HtmlTemplate;
            this._$ = _$;
            this.list_navigation = list_navigation;
            this.dataEventHolderProxy = dataEventHolderProxy;
            this._lastActiveTab = {};
            this._countryId = null;
            this._countryName = null;
            this._dataEventHolder = this.dataEventHolderProxy.getHolder();
            this._stageTabs = {};
            this._countTabsInRow = this.util_config.get('app', 'count_stage_tabs_for_horse_racing');
            this._selectedTabTimeBeforeRaceStart = this.util_config.get('app', 'selected_tab_time_before_race_start');
            this._$('#fs').on('click', '#tabs li[data-stage-id]', (function(_this) {
                return function(e) {
                    var $this, stageId;
                    $this = _this._$(e.currentTarget);
                    stageId = $this.attr('data-stage-id');
                    $this.closest('.submenu').children('ul').children('li').removeClass('selected');
                    $this.addClass('selected');
                    _this.toggleTables(stageId);
                    _this.toggleShowMoreLinks(stageId);
                    return _this._currentStageId = stageId
                }
            })(this))
        }
        StageTabs.prototype.toggleTables = function(stageId) {
            var $stageTable, groupKey;
            $stageTable = this._$("#fs table[data-stage-id=" + stageId + "]");
            groupKey = $stageTable.attr('data-group-key');
            this._$("#fs table[data-group-key=" + groupKey + "]").addClass('hidden');
            $stageTable.removeClass('hidden');
            return this._setLastActiveTab(groupKey, stageId)
        };
        StageTabs.prototype.toggleShowMoreLinks = function(stageId) {
            var nextTable;
            this._$("#fs table.table-link-more-games").addClass('hidden');
            nextTable = this._$("#fs table[data-stage-id=" + stageId + "]").next();
            if (nextTable.hasClass('table-link-more-games')) {
                return nextTable.removeClass('hidden')
            }
        };
        StageTabs.prototype.prepareData = function(leagueItem) {
            var currentCategory, gmtOffsetGetter, groupId, groupKey, i, isNavigationOdds, isTournamentPage, len, ref, selectedTab, selectedTabIndex, sportName, stageDate, stageId, stageStartUtime, stageTab, stageTabsArray, tabs, tabsIndex, useDefaultSelecting;
            tabs = [];
            gmtOffsetGetter = this.util_enviroment.getGmtOffset();
            stageDate = this.util_date.timestamp2date('d.m.Y', leagueItem.getRaceInfoText().split('|')[0], gmtOffsetGetter());
            this._setTournamentTitle(stageDate, leagueItem);
            groupId = leagueItem.getMeetingId();
            groupKey = null;
            stageTabsArray = this._getStageTabsArray(leagueItem);
            selectedTabIndex = 0;
            sportName = this.util_sport.getOriginalNameFromId(leagueItem.getSportId());
            isNavigationOdds = this.list_navigation.isOdds();
            currentCategory = this._getCurrentCategory();
            isTournamentPage = this.util_enviroment.isTournamentPage();
            if (this._stageTabs) {
                tabsIndex = 0;
                for (i = 0, len = stageTabsArray.length; i < len; i++) {
                    stageTab = stageTabsArray[i];
                    ref = stageTab.split('_'), stageStartUtime = ref[0], stageId = ref[1];
                    useDefaultSelecting = !isTournamentPage && !this._getLastActiveTab(groupKey, currentCategory);
                    if (useDefaultSelecting && this._hasToBeSelectedAsDefault(stageStartUtime)) {
                        selectedTabIndex = tabsIndex
                    }
                    groupKey = groupId + this.util_date.timestamp2date('dmY', stageStartUtime, gmtOffsetGetter());
                    if (stageDate === this.util_date.timestamp2date('d.m.Y', stageStartUtime, gmtOffsetGetter())) {
                        selectedTab = false;
                        if (isNavigationOdds && this._currentStageId === stageId && !this._getLastActiveTab(groupKey, currentCategory)) {
                            selectedTab = true;
                            selectedTabIndex = tabsIndex
                        }
                        if (this._getLastActiveTab(groupKey, currentCategory) === stageId) {
                            selectedTab = true;
                            selectedTabIndex = tabsIndex
                        }
                        tabs.push({
                            stage_id: stageId,
                            selected: selectedTab,
                            tab_title: this.util_date.timestamp2date('H:i', stageStartUtime, gmtOffsetGetter()),
                            tab_class: this._getTabClass(tabsIndex),
                            next_row: this._isNextRow(tabsIndex)
                        });
                        tabsIndex += 1
                    }
                }
                tabs[selectedTabIndex].selected = true;
                this._currentStageId = tabs[selectedTabIndex].stage_id
            }
            return this._data = {
                'tabs_class': 'tabs ' + sportName,
                'tabs': tabs,
                'groupKey': groupKey
            }
        };
        StageTabs.prototype.getHtml = function() {
            var flag, htmlTemplates, tabsHtml;
            htmlTemplates = this.util_enviroment.getHtmlTemplate();
            tabsHtml = this.HtmlTemplate.render(htmlTemplates.TPL_TABS_TABS, this._data);
            flag = !this.util_enviroment.isTournamentPage() ? "<span class=\"flag fl_" + this._countryId + "\" title=\"" + this._countryName + "\"></span>" : '';
            return "<div class=\"tab-header\" data-group-key=\"" + this._data.groupKey + ("\">\n	<div class=\"label\">\n		" + flag + this._tournamentTemplateTitle + "\n	</div>\n	" + tabsHtml + "\n</div>")
        };
        StageTabs.prototype._getTabClass = function(tabsIndex) {
            if ((tabsIndex + 1) % this._countTabsInRow === 0 && tabsIndex !== 0) {
                return 'last'
            } else {
                return ''
            }
        };
        StageTabs.prototype._isNextRow = function(tabsIndex) {
            return tabsIndex % this._countTabsInRow === 0 && tabsIndex !== 0
        };
        StageTabs.prototype.setCurrentStageId = function(_currentStageId) {
            this._currentStageId = _currentStageId
        };
        StageTabs.prototype.getCurrentStageId = function() {
            return this._currentStageId
        };
        StageTabs.prototype._getCurrentCategory = function() {
            return this.util_enviroment.getCategory()
        };
        StageTabs.prototype._setLastActiveTab = function(groupKey, stageId, category) {
            if (!category) {
                category = this._getCurrentCategory()
            }
            if (this._lastActiveTab[category] == null) {
                this._lastActiveTab[category] = {}
            }
            return this._lastActiveTab[category][groupKey] = stageId
        };
        StageTabs.prototype._getLastActiveTab = function(groupKey, category) {
            var ref;
            if (!category) {
                category = this._getCurrentCategory()
            }
            if (((ref = this._lastActiveTab[category]) != null ? ref[groupKey] : void 0) != null) {
                return this._lastActiveTab[category][groupKey]
            }
            return false
        };
        StageTabs.prototype.isEventInCurrentCategory = function(eventId) {
            var categoryIsFinished, categoryIsScheduled, eventItem;
            categoryIsFinished = this.list_navigation.isFinished();
            categoryIsScheduled = this.list_navigation.isScheduled();
            if (!(categoryIsFinished || categoryIsScheduled)) {
                return true
            }
            eventItem = this._dataEventHolder.getEvent(eventId);
            if (categoryIsFinished && eventItem.isFinished()) {
                return true
            }
            if (categoryIsScheduled && eventItem.isScheduled()) {
                return true
            }
            return false
        };
        StageTabs.prototype._filterEventsByCategory = function(eventIds) {
            return eventIds.filter((function(_this) {
                return function(value) {
                    return _this.isEventInCurrentCategory(value)
                }
            })(this))
        };
        StageTabs.prototype.prepareStages = function(eventIds) {
            var eventId, eventItem, i, leagueItem, len, meetingId, results, stageDataVal;
            this._stageTabs = {};
            eventIds = this._filterEventsByCategory(eventIds);
            results = [];
            for (i = 0, len = eventIds.length; i < len; i++) {
                eventId = eventIds[i];
                eventItem = this._dataEventHolder.getEvent(eventId);
                leagueItem = eventItem.getLeague();
                meetingId = leagueItem.getMeetingId();
                if (leagueItem.getStageTabs()) {
                    if (!this._stageTabs[meetingId]) {
                        this._stageTabs[meetingId] = []
                    }
                    stageDataVal = eventItem.getStartUTime() + '_' + leagueItem.getStageId();
                    if (indexOf.call(this._stageTabs[meetingId], stageDataVal) < 0) {
                        results.push(this._stageTabs[meetingId].push(stageDataVal))
                    } else {
                        results.push(void 0)
                    }
                } else {
                    results.push(void 0)
                }
            }
            return results
        };
        StageTabs.prototype._hasToBeSelectedAsDefault = function(stageStartUtime) {
            var currentTimestamp, isTimeForDefaultSelect, timeDiff;
            currentTimestamp = this.Helper_CurrentTime.getTimestamp();
            timeDiff = currentTimestamp - stageStartUtime;
            isTimeForDefaultSelect = Math.abs(timeDiff) <= this._selectedTabTimeBeforeRaceStart || timeDiff > 0;
            if (isTimeForDefaultSelect && this.util_date.isToday()) {
                return true
            }
            return false
        };
        StageTabs.prototype._setTournamentTitle = function(stageDate, leagueItem) {
            var ref, title;
            if (this.util_enviroment.isTournamentPage()) {
                return this._tournamentTemplateTitle = stageDate
            } else {
                title = leagueItem.getTitle().split(':');
                this._tournamentTemplateTitle = title[0] + ': ' + ((ref = title[1]) != null ? ref.trim() : void 0);
                this._countryId = leagueItem.getCountryId();
                return this._countryName = leagueItem.getCountryName()
            }
        };
        StageTabs.prototype._getStageTabsArray = function(leagueItem) {
            var meetingId, stageTabsArray;
            meetingId = leagueItem.getMeetingId();
            if ((this._stageTabs != null) && (this._stageTabs[meetingId] != null)) {
                stageTabsArray = this._stageTabs[meetingId];
                stageTabsArray.sort()
            } else {
                this._stageTabs = leagueItem.getStageTabs();
                stageTabsArray = this._stageTabs.split('|')
            }
            return stageTabsArray
        };
        return StageTabs
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_StageTabs', StageTabs)
}).call(this);
(function() {
    var Tab;
    Tab = (function() {
        Tab.FILTER_INPUT = 'input';
        Tab.FILTER_SELECT = 'select';
        Tab.FILTER_SELECT_TEAM = 'select-team';

        function Tab(utilList, utilTrans, $) {
            this.utilList = utilList;
            this.utilTrans = utilTrans;
            this.$ = $
        }
        Tab.prototype.showMore = function(counterId, tableId, buttonId) {
            this.count = this.$(counterId).val();
            this.i = 1;
            this.isRoundFinish = false;
            this.$(tableId + ' tr').each((function(that) {
                return function() {
                    if (that.$(this).css('display') === 'none') {
                        that.i++;
                        that.$(this).css('display', '');
                        if (that.i > that.count) {
                            that.isRoundFinish = true;
                            return false
                        }
                    }
                }
            })(this));
            if (!this.isRoundFinish) {
                return this.$(buttonId).hide()
            }
        };
        Tab.prototype.showMoreMenu = function(menuId) {
            this.$(menuId + ' li').each((function(that) {
                return function() {
                    if (that.$(this).css('display') === 'none') {
                        return that.$(this).css('display', '')
                    }
                }
            })(this));
            return this.$(menuId + ' .show-more').hide()
        };
        Tab.prototype.registerFilterItem = function(filterName, rowName) {
            if (this._filters == null) {
                this._filters = []
            }
            return this._filters[filterName] = rowName
        };
        Tab.prototype.setFromHash = function() {
            var hash, hashValue, item, key, ref;
            hash = location.hash.replace('#!', '');
            if (this.locationHash !== '!' + hash) {
                ref = this._filters;
                for (key in ref) {
                    item = ref[key];
                    hashValue = '';
                    if ((hash.split(';')[item['hashPosition']] != null) && hash.split(';')[item['hashPosition']] !== '') {
                        hashValue = hash.split(';')[item['hashPosition']]
                    }
                    this.valueSetter(item, key, hashValue);
                    this.$(item['input']).blur()
                }
                return this.filter()
            }
        };
        Tab.prototype.valueSetter = function(item, type, value) {
            var $optionItem, hashValue;
            switch (type) {
                case Tab.FILTER_INPUT:
                    hashValue = item['defaultValue'];
                    if (value !== '') {
                        hashValue = value
                    }
                    return this.$(item['input']).val(hashValue);
                case Tab.FILTER_SELECT:
                case Tab.FILTER_SELECT_TEAM:
                    this.$(item['listItem']).removeClass('selected-item');
                    $optionItem = this.$("#" + type + "-option-" + value);
                    $optionItem.addClass('selected-item');
                    hashValue = item['defaultValue'];
                    if (value !== '') {
                        hashValue = $optionItem.html()
                    }
                    return this.$(item['input']).html(hashValue)
            }
        };
        Tab.prototype.filterEvents = function(rowClass, showMoreClass, noCompliance, arrow) {
            var item, key, ref;
            this.rowClass = rowClass;
            this.showMoreClass = showMoreClass;
            this.noCompliance = noCompliance;
            this.arrow = arrow;
            this.$(window).on('hashchange', (function(that) {
                return function() {
                    return that.setFromHash()
                }
            })(this));
            ref = this._filters;
            for (key in ref) {
                item = ref[key];
                switch (key) {
                    case Tab.FILTER_INPUT:
                        this._filters[key]['valueGetter'] = (function(_this) {
                            return function(item) {
                                return _this.$(item).val()
                            }
                        })(this);
                        this._filters[key]['defaultValueFunction'] = (function(_this) {
                            return function(item) {
                                return _this.$(item['input']).val() === item['defaultValue']
                            }
                        })(this);
                        this._filters[key]['defaultCompareFunction'] = (function(_this) {
                            return function(currentClass, item) {
                                var ret;
                                ret = false;
                                _this.$(currentClass).children(item['columnClass']).children('a').each((function(that) {
                                    return function() {
                                        var i, inputItem, len, ref1, subret;
                                        subret = true;
                                        ref1 = that.$(item['input']).val().split(" ");
                                        for (i = 0, len = ref1.length; i < len; i++) {
                                            inputItem = ref1[i];
                                            if (that.$(this).html().toLowerCase().indexOf(inputItem.toLowerCase()) < 0) {
                                                subret = false
                                            }
                                        }
                                        if (subret) {
                                            return ret = true
                                        }
                                    }
                                })(_this));
                                return ret
                            }
                        })(this);
                        this.$(item['input']).on('focus', (function(that, item) {
                            return function() {
                                if (that.$(item['input']).val() === item['defaultValue']) {
                                    return that.$(item['input']).val('')
                                }
                            }
                        })(this, item));
                        this.$(item['input']).on('keyup', (function(that, item) {
                            return function() {
                                if (that.$(item['input']).val() === item['defaultValue']) {
                                    that.$(item['input']).val('')
                                }
                                return that.filter()
                            }
                        })(this, item));
                        this.$(item['input']).on('focusout', (function(that, item) {
                            return function() {
                                if (that.$(item['input']).val() === '') {
                                    return that.$(item['input']).val(item['defaultValue'])
                                }
                            }
                        })(this, item));
                        break;
                    case Tab.FILTER_SELECT:
                    case Tab.FILTER_SELECT_TEAM:
                        this._filters[key]['valueGetter'] = (function(_this) {
                            return function(item) {
                                if (_this.$(item).children().length > 1) {
                                    return _this.$(item).children('span:nth-child(2)').html()
                                } else {
                                    return _this.$(item).html()
                                }
                            }
                        })(this);
                        this._filters[key]['valueHashGetter'] = (function(that, key) {
                            return function(item) {
                                var selItem;
                                if (that._valueHashGetters[key] != null) {
                                    return that._valueHashGetters[key]
                                }
                                if ((that.$(item['listItem'] + '.selected-item').children('span:nth-child(1)') != null)) {
                                    selItem = that.$(item['listItem'] + '.selected-item').children('span:nth-child(1)');
                                    if ((selItem.attr("class") != null) && (selItem.attr("class").split('fl_')[1] != null)) {
                                        return that._valueHashGetters[key] = selItem.attr("class").split('fl_')[1]
                                    }
                                }
                            }
                        })(this, key);
                        this._filters[key]['defaultValueFunction'] = (function(_this) {
                            return function(item) {
                                return item['valueGetter'](item['input']) === item['defaultValue']
                            }
                        })(this);
                        this._filters[key]['defaultCompareFunction'] = (function(_this) {
                            return function(currentClass, item) {
                                var ref1, subItem, subKey;
                                ref1 = _this.$(currentClass).children(item['columnClass']).attr('class').split('filter-');
                                for (subKey in ref1) {
                                    subItem = ref1[subKey];
                                    if (subKey > 0 && subItem.replace(/\s/g, '') === item['valueHashGetter'](item, key)) {
                                        return true
                                    }
                                }
                                return false
                            }
                        })(this);
                        this.$(item['input'] + ', ' + item['wrap'] + ' ' + this.arrow).on('click', (function(that, item) {
                            return function(event) {
                                event.stopPropagation();
                                that.showToggle(item['input'], item['list'], item['wrap'], false);
                                that.$(item['input']).html(item['defaultValue']);
                                if (!that.$(item['list']).is(':visible')) {
                                    that.filter();
                                    return that.$(item['listItem']).removeClass('selected-item')
                                }
                            }
                        })(this, item));
                        this.$('body').on('click', (function(that, item) {
                            return function() {
                                that._setSelectedValueInItemInput(item);
                                return that.showToggle(item['input'], item['list'], item['wrap'], true, false)
                            }
                        })(this, item));
                        this.$(item['listItem']).on('click', (function(that, item) {
                            return function() {
                                that.$(item['listItem']).removeClass('selected-item');
                                that.$(this).addClass('selected-item');
                                that.showToggle(item['input'], item['list'], item['wrap'], false, false);
                                that.$(item['input']).html(that.$(this).html());
                                return that.filter()
                            }
                        })(this, item))
                }
            }
            if (location.hash.replace('#!', '') !== '') {
                this.setFromHash()
            }
            this.$('#ranking-table').show();
            return this._showHideCompliance()
        };
        Tab.prototype.showToggle = function(input, list, wrap, onlyHide, hideAll) {
            var item, key, ref;
            if (hideAll == null) {
                hideAll = true
            }
            if (hideAll) {
                ref = this._filters;
                for (key in ref) {
                    item = ref[key];
                    if ((item['list'] != null) && item['list'] !== list) {
                        this._setSelectedValueInItemInput(item);
                        this.showToggle(item['input'], item['list'], item['wrap'], true, false)
                    }
                }
            }
            if (!onlyHide || this.$(list).is(':visible')) {
                this.$(list).toggle()
            }
            if (this.$(list).is(':visible')) {
                this.$(input).addClass('open');
                this.$(wrap + ' ' + this.arrow).css('visibility', 'hidden');
                this.widthBackup = this.$(wrap).width();
                this.borders = parseInt(this.$(input).css('padding-left')) + parseInt(this.$(input).css('padding-right'));
                this.listWidth = this.$(list).width() - this.borders;
                if (this.listWidth > this.widthBackup) {
                    return this.$(wrap).width(this.listWidth)
                } else {
                    return this.$(list).width(this.widthBackup + this.borders)
                }
            } else {
                this.$(input).removeClass('open');
                this.$(wrap + ' ' + this.arrow).css('visibility', 'visible');
                return this.$(wrap).width(this.widthBackup)
            }
        };
        Tab.prototype.setLocationHash = function() {
            var blankHash, hashValue, i, item, key, len, ref;
            hashValue = '';
            blankHash = '';
            ref = this.hashValues;
            for (key = i = 0, len = ref.length; i < len; key = ++i) {
                item = ref[key];
                if (key !== 0) {
                    hashValue += ';';
                    blankHash += ';'
                }
                if (item != null) {
                    hashValue += item
                }
            }
            if (hashValue === blankHash) {
                this.locationHash = '';
                if ((location.hash != null) && location.hash !== '') {
                    return location.hash = this.locationHash
                }
            } else {
                if (hashValue.slice(-1) === ';') {
                    hashValue = hashValue.substring(0, hashValue.length - 1)
                }
                if (hashValue !== '') {
                    this.locationHash = '!' + hashValue
                }
                return location.hash = this.locationHash
            }
        };
        Tab.prototype.initFilters = function() {
            var item, key, ref, results;
            this.hashValues = [];
            ref = this._filters;
            results = [];
            for (key in ref) {
                item = ref[key];
                if (item['defaultValueFunction'] != null) {
                    this._filters[key]['hasDefault'] = item['defaultValueFunction'](item)
                }
                if ((item['hashPosition'] != null) && (item['valueHashGetter'] != null)) {
                    if (this._filters[key]['hasDefault']) {
                        results.push(this.hashValues[item['hashPosition']] = '')
                    } else {
                        results.push(this.hashValues[item['hashPosition']] = item['valueHashGetter'](item, key))
                    }
                } else {
                    results.push(void 0)
                }
            }
            return results
        };
        Tab.prototype.filter = function() {
            this._valueHashGetters = {};
            this.$(this.showMoreClass).hide();
            this.initFilters();
            this.setLocationHash();
            this._count = 0;
            this.$(this.rowClass).each((function(that) {
                return function() {
                    var item, key, ref;
                    that._show = true;
                    ref = that._filters;
                    for (key in ref) {
                        item = ref[key];
                        if (item['defaultCompareFunction'] != null) {
                            if (!(that._filters[key]['hasDefault'] || that._filters[key]['defaultCompareFunction'](that.$(this), item))) {
                                that._show = false
                            }
                        }
                    }
                    if (that._show) {
                        that.$(this).css('display', '');
                        if (that._count++ % 2) {
                            return that.$(this).removeClass('odd').addClass('even')
                        } else {
                            return that.$(this).removeClass('even').addClass('odd')
                        }
                    } else {
                        return that.$(this).css('display', 'none')
                    }
                }
            })(this));
            return this._showHideCompliance()
        };
        Tab.prototype.setTablesIds = function(_tablesIds) {
            this._tablesIds = _tablesIds
        };
        Tab.prototype._showHideCompliance = function() {
            var $row, i, item, len, ref, results;
            ref = this._tablesIds;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                item = ref[i];
                $row = this.$("#" + item.no_compliance + " " + this.noCompliance);
                if (this.$("#" + item.results + " " + this.rowClass + ":visible").length === 0) {
                    results.push($row.show())
                } else {
                    results.push($row.hide())
                }
            }
            return results
        };
        Tab.prototype._setSelectedValueInItemInput = function(item) {
            var $selectedItem;
            $selectedItem = this.$(item['listItem'] + '.selected-item');
            if ($selectedItem.length) {
                return this.$(item['input']).html($selectedItem.html())
            }
        };
        return Tab
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_Tab', Tab)
}).call(this);
(function() {
    var TournamentInfoText;
    TournamentInfoText = (function() {
        function TournamentInfoText(utilList, utilEnviroment, utilTrans, utilDate, utilString, util_sport, dataEvent, dataLeague) {
            this.utilList = utilList;
            this.utilEnviroment = utilEnviroment;
            this.utilTrans = utilTrans;
            this.utilDate = utilDate;
            this.utilString = utilString;
            this.util_sport = util_sport;
            this.dataEvent = dataEvent;
            this.dataLeague = dataLeague
        }
        TournamentInfoText.prototype.getInfoText = function(leagueId) {
            var headerClass, text;
            this._leagueId = leagueId;
            this._leagueItem = this.dataLeague.getHolder().getLeague(this._leagueId);
            this._gmtOffset = this.utilEnviroment.getGmtOffset();
            this._sportId = this._leagueItem.getSportId();
            this._categoryId = this._leagueItem.getCategoryId();
            this._sports = this.utilList.getSports();
            this._categories = this.utilList.getTournamentTemplateCategories();
            text = '';
            headerClass = '';
            if (this._sportId === this._sports.GOLF) {
                text = this._getGolfText()
            } else if (this.util_sport.isStageSport(this._sportId)) {
                text = this._getStageSportText()
            }
            if (!text) {
                headerClass = 'hidden'
            }
            return [text, '', headerClass]
        };
        TournamentInfoText.prototype._getGolfText = function() {
            var dataEventHandler, date, dateStartEnd, endUtime, eventItem, par, prizeMoney, startUtime, text, that;
            text = '';
            dataEventHandler = this.dataEvent.getHandler();
            eventItem = null;
            that = this;
            dataEventHandler.each(function(index, id) {
                var _eventItem;
                _eventItem = this.getItem(id);
                if (that._leagueId === _eventItem.getLeagueId()) {
                    eventItem = _eventItem;
                    return false
                }
            });
            if (eventItem) {
                date = [];
                startUtime = eventItem.getStartUTime();
                endUtime = eventItem.getEndUTime();
                if (endUtime || this.utilEnviroment.isNoDuelTournament(eventItem.getLeagueId())) {
                    if (!endUtime) {
                        endUtime = startUtime
                    }
                    date[0] = startUtime;
                    date[1] = endUtime;
                    dateStartEnd = this._getDate(date);
                    text += '<span>' + this.utilTrans('TRANS_GOLF_INFO_DATE') + ': ' + dateStartEnd + '</span>'
                }
            }
            par = this._leagueItem.getPar();
            if (par) {
                text += '<span>' + this.utilTrans('TRANS_GOLF_INFO_PAR') + ': ' + par + '</span>'
            }
            prizeMoney = this._leagueItem.getPrizeMoney();
            if (prizeMoney) {
                text += '<span>' + this.utilTrans('TRANS_GOLF_INFO_PRIZE_MONEY') + ': ' + prizeMoney + '</span>'
            }
            return text
        };
        TournamentInfoText.prototype._getStageSportText = function() {
            var ref, translations;
            translations = {};
            if (this._sportId === this._sports.CYCLING || ((ref = this._categories[this._categoryId]) === 'WRC' || ref === 'DAKAR')) {
                return this._createCyclingText()
            } else if (this.util_sport.inGroup(this._sportId, this._sports.MOTORSPORT)) {
                return this._createMotorsportText()
            } else if (this.util_sport.inGroup(this._sportId, this._sports.WINTER_SPORTS)) {
                return this._createWinterSportsText()
            } else if (this._sportId === this._sports.HORSE_RACING) {
                translations = this._getHorseRacingTranslations();
                return this._createHorseRacingSportText(translations)
            }
        };
        TournamentInfoText.prototype._createWinterSportsText = function() {
            var date, parts, rit, text;
            rit = this._leagueItem.getRaceInfoText();
            text = '';
            if (rit) {
                parts = rit.split('|');
                date = this._getDate(parts);
                if (date) {
                    text += "<span>" + date + "</span>"
                }
                if (parts[2]) {
                    if (this._sportId === this._sports.WINTER_SPORTS_SKI_JUMPING) {
                        text += "<span>" + (this.utilTrans('TRANS_WINTER_SPORTS_SKI_JUMPING_HILL_SIZE')) + parts[2] + "</span>"
                    } else {
                        text += "<span>" + (this.utilTrans('TRANS_WINTER_SPORTS_DISTANCE')) + ": " + parts[2] + "</span>"
                    }
                }
            }
            return text
        };
        TournamentInfoText.prototype._createMotorsportText = function() {
            var date, distanceInfo, lapDistance, out, parts, rit, text;
            rit = this._leagueItem.getRaceInfoText();
            text = '';
            if (rit) {
                parts = rit.split('|');
                out = [];
                date = this._getDate(parts);
                if (date) {
                    out.push(date)
                }
                if (parts[2]) {
                    out.push(parts[2])
                }
                if (parts[3]) {
                    out.push(parts[3])
                }
                distanceInfo = '';
                if (parts[4]) {
                    distanceInfo += "" + parts[4]
                }
                if (parts[5]) {
                    lapDistance = "" + parts[5];
                    if (distanceInfo) {
                        distanceInfo += " (" + lapDistance + ")"
                    } else {
                        distanceInfo += lapDistance
                    }
                }
                if (distanceInfo) {
                    out.push(distanceInfo)
                }
                text = out.join(', ')
            }
            return text
        };
        TournamentInfoText.prototype._createCyclingText = function() {
            var date, parts, rit, stage, stageInfoString, text;
            rit = this._leagueItem.getRaceInfoText();
            text = '';
            if (rit) {
                parts = rit.split('|');
                date = this._getDate(parts);
                if (date) {
                    text += date
                }
                if (parts[2]) {
                    text += ", " + parts[2]
                }
                stage = [];
                if (parts[3]) {
                    stage.push(parts[3])
                }
                if (parts[4]) {
                    stage.push(parts[4])
                }
                if (parts[5]) {
                    stage.push(parts[5])
                }
                stageInfoString = stage.join(', ');
                if (stage.length > 0) {
                    text += " (" + stageInfoString + ")"
                }
            }
            return text
        };
        TournamentInfoText.prototype._createHorseRacingSportText = function(translations) {
            var out, parts, rit, text;
            rit = this._leagueItem.getRaceInfoText();
            text = '';
            if (rit) {
                parts = rit.split('|');
                out = [];
                if (parts[7]) {
                    out.push("<span>" + parts[7] + "</span>")
                }
                if (parts[2]) {
                    if (parts[3]) {
                        out.push("<span title='" + parts[3] + "'>" + parts[2] + "</span>")
                    } else {
                        out.push("<span>" + parts[2] + "</span>")
                    }
                }
                if (parts[4]) {
                    out.push("<span>" + translations['class'] + ": " + parts[4] + "</span>")
                }
                if (parts[5]) {
                    out.push("<span>" + translations['winner'] + ": " + parts[5] + "</span>")
                }
                if (parts[6]) {
                    out.push("<span>" + translations['going'] + ": " + parts[6] + "</span>")
                }
                text = out.join('')
            }
            return text
        };
        TournamentInfoText.prototype._getDate = function(parts) {
            var date, endDate, startDate;
            if (parts[0]) {
                if (parts[1]) {
                    startDate = this.utilDate.timestamp2date('d.m.', parts[0], this._gmtOffset());
                    endDate = this.utilDate.timestamp2date('d.m.', parts[1], this._gmtOffset());
                    if (startDate === endDate) {
                        date = "" + (this.utilDate.timestamp2date('d.m.Y H:i', parts[0], this._gmtOffset()))
                    } else {
                        endDate = this.utilDate.timestamp2date('d.m.Y', parts[1], this._gmtOffset());
                        date = startDate + "-" + endDate
                    }
                } else {
                    startDate = this.utilDate.timestamp2date('d.m.Y H:i', parts[0], this._gmtOffset());
                    date = "" + startDate
                }
            }
            return date != null ? date : ""
        };
        TournamentInfoText.prototype._getHorseRacingTranslations = function() {
            var translations;
            translations = {
                'class': this.utilTrans('TRANS_HORSE_RACING_CLASS'),
                'winner': this.utilTrans('TRANS_HORSE_RACING_WINNER'),
                'going': this.utilTrans('TRANS_HORSE_RACING_GOING')
            };
            return translations
        };
        return TournamentInfoText
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_TournamentInfoText', TournamentInfoText)
}).call(this);
(function() {
    var Helper_TranslateItem;
    Helper_TranslateItem = (function() {
        function Helper_TranslateItem() {
            this._feedTranslator = null;
            this._dataItem = null;
            this._oldDataItem = null;
            this._failedTranslateIndexes = {}
        }
        Helper_TranslateItem.prototype._translateByDictionary = function() {
            var data, index, ref, translate, translateResult, value;
            if (typeof((ref = this._feedTranslator) != null ? ref.translate : void 0) !== 'function') {
                return false
            }
            translateResult = true;
            data = this._dataItem.getData();
            for (index in data) {
                value = data[index];
                translate = this._feedTranslator.translate(value);
                if (translate !== false) {
                    this._dataItem.setValue(index, translate)
                } else {
                    this._failedTranslateIndexes[index] = value;
                    translateResult = false
                }
            }
            return translateResult
        };
        Helper_TranslateItem.prototype._translateByDataItem = function() {
            var index, oldValue, ref, translateResult, value;
            if (typeof this._oldDataItem.getValue !== 'function') {
                return false
            }
            translateResult = true;
            ref = this._failedTranslateIndexes;
            for (index in ref) {
                value = ref[index];
                oldValue = this._oldDataItem.getValue(index);
                if (oldValue) {
                    this._dataItem.setValue(index, oldValue)
                } else {
                    translateResult = false
                }
            }
            this._failedTranslateIndexes = {};
            return translateResult
        };
        Helper_TranslateItem.prototype.translate = function(dataItem, feedTranslator, oldDataItem) {
            var translateResult;
            if (oldDataItem == null) {
                oldDataItem = null
            }
            if (typeof(dataItem != null ? dataItem.getValue : void 0) !== 'function') {
                return dataItem
            }
            if (oldDataItem && typeof oldDataItem.getValue !== 'function') {
                oldDataItem = null
            }
            this._dataItem = dataItem;
            this._feedTranslator = feedTranslator;
            this._oldDataItem = oldDataItem;
            translateResult = this._translateByDictionary();
            if (!translateResult && oldDataItem && oldDataItem !== {}) {
                translateResult = this._translateByDataItem()
            }
            if (!translateResult) {
                this._dataItem.invalidate()
            }
            return this._dataItem
        };
        return Helper_TranslateItem
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_TranslateItem', Helper_TranslateItem, ['helperTranslateItem'])
}).call(this);
(function() {
    var Helper_TranslateParticipantStatus;
    Helper_TranslateParticipantStatus = (function() {
        function Helper_TranslateParticipantStatus(utilTrans) {
            this.utilTrans = utilTrans
        }
        Helper_TranslateParticipantStatus.prototype.translateShort = function(participantStatusId) {
            var transKey;
            transKey = (function() {
                switch (parseInt(participantStatusId)) {
                    case 280:
                        return 'TRANS_DC_SHORT_CUT_OFF';
                    case 281:
                        return 'TRANS_DC_SHORT_DISQUALIFIED';
                    case 282:
                        return 'TRANS_DC_SHORT_DID_NOT_START';
                    case 283:
                        return 'TRANS_DC_SHORT_DID_NOT_FINISH';
                    case 284:
                        return 'TRANS_DC_SHORT_MADE_CUT_DID_NOT_FINISH';
                    case 285:
                        return 'TRANS_DC_SHORT_WITHDRAWN';
                    case 291:
                        return 'TRANS_DC_SHORT_RETIRED';
                    case 294:
                        return 'TRANS_DC_SHORT_DID_NOT_CLASSIFIED';
                    case 300:
                        return 'TRANS_DC_SHORT_NOT_QUALIFIED';
                    case 301:
                        return 'TRANS_DC_SHORT_OWNER_POINTS';
                    case 326:
                        return 'TRANS_DC_SHORT_NON_RUNNER';
                    case 327:
                        return 'TRANS_DC_SHORT_PULLED_UP';
                    case 328:
                        return 'TRANS_DC_SHORT_UNSEATED_RIDER';
                    case 329:
                        return 'TRANS_DC_SHORT_RAN_OUT';
                    case 330:
                        return 'TRANS_DC_SHORT_FALL';
                    case 331:
                        return 'TRANS_DC_SHORT_BROUGHT_DOWN';
                    case 332:
                        return 'TRANS_DC_SHORT_HIT_RAILS';
                    case 333:
                        return 'TRANS_DC_SHORT_REFUSED_TO_RACE';
                    case 356:
                        return 'TRANS_DC_SHORT_SLIPPED_UP'
                }
            })();
            if (transKey != null) {
                return this.utilTrans(transKey)
            } else {
                return ''
            }
        };
        Helper_TranslateParticipantStatus.prototype.translate = function(participantStatusId) {
            var transKey;
            transKey = (function() {
                switch (parseInt(participantStatusId)) {
                    case 280:
                        return 'TRANS_DC_CUT_OFF';
                    case 281:
                        return 'TRANS_DC_DISQUALIFIED';
                    case 282:
                        return 'TRANS_DC_DID_NOT_START';
                    case 283:
                        return 'TRANS_DC_DID_NOT_FINISH';
                    case 284:
                        return 'TRANS_DC_MADE_CUT_DID_NOT_FINISH';
                    case 285:
                        return 'TRANS_DC_WITHDRAWN';
                    case 291:
                        return 'TRANS_DC_RETIRED';
                    case 294:
                        return 'TRANS_DC_DID_NOT_CLASSIFIED';
                    case 300:
                        return 'TRANS_DC_NOT_QUALIFIED';
                    case 301:
                        return 'TRANS_DC_OWNER_POINTS';
                    case 326:
                        return 'TRANS_DC_NON_RUNNER';
                    case 327:
                        return 'TRANS_DC_PULLED_UP';
                    case 328:
                        return 'TRANS_DC_UNSEATED_RIDER';
                    case 329:
                        return 'TRANS_DC_RAN_OUT';
                    case 330:
                        return 'TRANS_DC_FALL';
                    case 331:
                        return 'TRANS_DC_BROUGHT_DOWN';
                    case 332:
                        return 'TRANS_DC_HIT_RAILS';
                    case 333:
                        return 'TRANS_DC_REFUSED_TO_RACE';
                    case 356:
                        return 'TRANS_DC_SLIPPED_UP'
                }
            })();
            if (transKey != null) {
                return this.utilTrans(transKey)
            } else {
                return ''
            }
        };
        return Helper_TranslateParticipantStatus
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_TranslateParticipantStatus', Helper_TranslateParticipantStatus, ['helperTranslateParticipantStatus'])
}).call(this);
(function() {
    var VisitCounter;
    VisitCounter = (function() {
        VisitCounter.prototype.COUNTER_INTERVAL = 1800;
        VisitCounter.prototype.COUNTER_STORAGE_KEY = 'VisitCounter_counter';
        VisitCounter.prototype.LAST_VISIT_STORAGE_KEY = 'VisitCounter_lastVisit';

        function VisitCounter(clientStorage, util_date) {
            this.clientStorage = clientStorage;
            this.util_date = util_date
        }
        VisitCounter.prototype.iterate = function() {
            var count, lastVisit, now;
            now = this.util_date.getLocalUTime();
            lastVisit = this.clientStorage.get(this.LAST_VISIT_STORAGE_KEY);
            count = this.getCurrentCount();
            if ((lastVisit == null) || now - lastVisit > this.COUNTER_INTERVAL) {
                count++;
                this.clientStorage.store(this.COUNTER_STORAGE_KEY, count)
            }
            return this.clientStorage.store(this.LAST_VISIT_STORAGE_KEY, now)
        };
        VisitCounter.prototype.getCurrentCount = function() {
            var count;
            count = this.clientStorage.get(this.COUNTER_STORAGE_KEY);
            if (count == null) {
                count = 0
            }
            return count
        };
        return VisitCounter
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_VisitCounter', VisitCounter, ['visitCounter'])
}).call(this);
(function() {
    var Window, create;
    create = function(util_config) {
        return new Window(util_config, function() {
            return project_type_name
        })
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Helper_Window', create);
    Window = (function() {
        function Window(cfg, projectTypeNameGetter) {
            this.cfg = cfg;
            this.projectTypeNameGetter = projectTypeNameGetter;
            this.scrollbarWidth = 0
        }
        Window.prototype.getWidth = function() {
            var ref, width;
            if (this.scrollbarWidth === 0) {
                this.scrollbarWidth = this.getScrollbarWidth() - 0
            }
            if ((ref = this.projectTypeNameGetter()) === '_ass' || ref === '_in' || ref === '_diretta-2' || ref === '_scoreboard') {
                width = 572
            } else {
                width = 550
            }
            return width += this.scrollbarWidth
        };
        Window.prototype.getHeight = function() {
            return 700
        };
        Window.prototype.getScrollbarWidth = function() {
            var div, w1, w2;
            div = $('<div style="width:50px;height:50px;position:absolute;top:-200px;left:-200px;"><div style="height:100px;"></div>');
            $('body').append(div);
            w1 = $('div', div).innerWidth();
            div.css('overflow-y', 'scroll');
            w2 = $('div', div).innerWidth();
            $(div).remove();
            return w1 - w2
        };
        Window.prototype.closePopup = function(thisPopup) {
            var i, len, popup, ref, results;
            if (this.cfg.get('app', 'popup')[thisPopup] != null) {
                ref = this.cfg.get('app', 'popup')[thisPopup];
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                    popup = ref[i];
                    results.push($(popup).hide())
                }
                return results
            }
        };
        return Window
    })()
}).call(this);
(function() {
    var DropDownList, base, cjs;
    cjs = typeof window !== "undefined" && window !== null ? window.cjs : require('../generic/generic');
    DropDownList = (function() {
        var CSS_CLASS_LIST_OPEN, CSS_CLASS_SELECTED_ITEM, CSS_CLASS_SELECTED_ITEM_WRAP, SELECTOR_LIST, SELECTOR_LIST_ITEM, SELECTOR_LIST_ITEM_SELECTED;
        SELECTOR_LIST = 'ul.dropdown-list';
        SELECTOR_LIST_ITEM = 'ul.dropdown-list .list-item';
        SELECTOR_LIST_ITEM_SELECTED = 'ul.dropdown-list .list-item.selected';
        CSS_CLASS_SELECTED_ITEM = 'selected';
        CSS_CLASS_LIST_OPEN = 'open-list';
        CSS_CLASS_SELECTED_ITEM_WRAP = 'selected-item-wrap';

        function DropDownList(jQuery1, listWrapElement, onItemSelectCallback) {
            this.jQuery = jQuery1;
            this.listWrapElement = listWrapElement;
            this.onItemSelectCallback = onItemSelectCallback != null ? onItemSelectCallback : function() {};
            this.listElement = this.jQuery(this.listWrapElement).find(SELECTOR_LIST);
            this.selectedItemElement = null;
            this.selectedItemWrapElement = null;
            this.listClicked = false
        }
        DropDownList.prototype.init = function() {
            var selectedItem;
            this.disableLinks();
            this.handleCloseList();
            selectedItem = this.listWrapElement.find(SELECTOR_LIST_ITEM_SELECTED);
            if (selectedItem.length) {
                this.setSelectedItem(selectedItem)
            }
            this.initSelectedItemWrap();
            this.listWrapElement.click((function(context) {
                return function(e) {
                    e.preventDefault();
                    context.listClicked = true;
                    return context.toggleList()
                }
            })(this));
            return this.listWrapElement.find(SELECTOR_LIST_ITEM).click((function(context) {
                return function() {
                    context.setSelectedItem(context.jQuery(this));
                    context.selectedItemWrapElement.children().remove();
                    context.selectedItemWrapElement.append(context.getSelectedItem().children().clone());
                    return context.onItemSelectCallback(context.jQuery(this))
                }
            })(this))
        };
        DropDownList.prototype.handleCloseList = function() {
            return jQuery(document).click((function(context) {
                return function() {
                    if (!context.listClicked) {
                        context.closeList()
                    }
                    context.listClicked = false
                }
            })(this))
        };
        DropDownList.prototype.disableLinks = function() {
            return this.listElement.find('a').click(function(e) {
                return e.preventDefault()
            })
        };
        DropDownList.prototype.getSelectedItem = function() {
            return this.selectedItemElement
        };
        DropDownList.prototype.setSelectedItem = function(selectedItemElement) {
            this.selectedItemElement = selectedItemElement;
            this.listWrapElement.find(SELECTOR_LIST_ITEM_SELECTED).removeClass(CSS_CLASS_SELECTED_ITEM);
            return this.selectedItemElement.addClass(CSS_CLASS_SELECTED_ITEM)
        };
        DropDownList.prototype.initSelectedItemWrap = function() {
            var wrap;
            wrap = this.jQuery('<span class="' + CSS_CLASS_SELECTED_ITEM_WRAP + '"></span>');
            if (this.getSelectedItem()) {
                wrap.append(this.getSelectedItem().children().clone())
            }
            this.listWrapElement.prepend(wrap);
            return this.selectedItemWrapElement = wrap
        };
        DropDownList.prototype.isListOpen = function() {
            return this.listElement.hasClass(CSS_CLASS_LIST_OPEN)
        };
        DropDownList.prototype.toggleList = function() {
            return this.listElement.toggleClass(CSS_CLASS_LIST_OPEN)
        };
        DropDownList.prototype.openList = function() {
            return this.listElement.addClass(CSS_CLASS_LIST_OPEN)
        };
        DropDownList.prototype.closeList = function() {
            return this.listElement.removeClass(CSS_CLASS_LIST_OPEN)
        };
        return DropDownList
    })();
    if (typeof window !== "undefined" && window !== null ? window.cjs : void 0) {
        if ((base = window.cjs).DropDownList == null) {
            base.DropDownList = DropDownList
        }
    } else {
        if (exports.DropDownList == null) {
            exports.DropDownList = DropDownList
        }
    }
}).call(this);
(function() {
    var List_Navigation;
    List_Navigation = (function() {
        List_Navigation.prototype.ALL_RACES = 0;
        List_Navigation.prototype.LIVE = 1;
        List_Navigation.prototype.FINISHED = 2;
        List_Navigation.prototype.SCHEDULED = 3;
        List_Navigation.prototype.ODDS = 4;
        List_Navigation.prototype.MY_GAMES = 5;
        List_Navigation.prototype.ODDS_MATCHES = 1;
        List_Navigation.prototype.ODDS_PREMATCH = 2;
        List_Navigation.prototype.ODDS_LIVE = 3;

        function List_Navigation(util_enviroment) {
            this.util_enviroment = util_enviroment
        }
        List_Navigation.prototype.getCurrentCategory = function() {
            return this.util_enviroment.getCategory()
        };
        List_Navigation.prototype.getCurrentNavigationCategory = function() {
            return this.util_enviroment.getNavigationCategory()
        };
        List_Navigation.prototype.getCurrentSubCategory = function() {
            return this.util_enviroment.getSubCategory()
        };
        List_Navigation.prototype.isAllRaces = function() {
            return this.getCurrentCategory() === List_Navigation.prototype.ALL_RACES
        };
        List_Navigation.prototype.isLive = function() {
            return this.getCurrentCategory() === List_Navigation.prototype.LIVE
        };
        List_Navigation.prototype.isFinished = function() {
            return this.getCurrentCategory() === List_Navigation.prototype.FINISHED
        };
        List_Navigation.prototype.isScheduled = function() {
            return this.getCurrentCategory() === List_Navigation.prototype.SCHEDULED
        };
        List_Navigation.prototype.isOdds = function() {
            return this.getCurrentCategory() === List_Navigation.prototype.ALL_RACES && (this.isOddsPrematch() || this.isOddsLive())
        };
        List_Navigation.prototype.isMyGames = function() {
            return this.getCurrentCategory() === List_Navigation.prototype.MY_GAMES
        };
        List_Navigation.prototype.isOddsMatches = function() {
            return this.getCurrentSubCategory() === List_Navigation.prototype.ODDS_MATCHES
        };
        List_Navigation.prototype.isOddsPrematch = function() {
            return this.getCurrentSubCategory() === List_Navigation.prototype.ODDS_PREMATCH
        };
        List_Navigation.prototype.isOddsLive = function() {
            return this.getCurrentSubCategory() === List_Navigation.prototype.ODDS_LIVE
        };
        return List_Navigation
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('List_Navigation', List_Navigation, ['list_navigation', 'listNavigation'])
}).call(this);
(function() {
    var DataHandlerClass, Data_Handler, dataEventHandler, dataEventHandlerArchive, dataEventHandlerMygames, dataEventHandlerTemporary, dataLeagueHandler, dataLeagueHandlerArchive, dataLeagueHandlerMygames, dataLeagueHandlerTemporary, dataParticipantHandler, dataParticipantHandlerTemporary, dic;
    Data_Handler = (function() {
        function Data_Handler(utilString) {
            this.utilString = utilString;
            this.setIds([])
        }
        Data_Handler.prototype.setDataHolder = function(_dataHolder) {
            this._dataHolder = _dataHolder;
            return this.resetIds()
        };
        Data_Handler.prototype.getDataHolder = function() {
            return this._dataHolder
        };
        Data_Handler.prototype.sort = function(compareFunction) {
            var ids;
            if (compareFunction == null) {
                compareFunction = this._defaultCompareFunction
            }
            if (typeof compareFunction !== "function") {
                return
            }
            ids = this.getIds();
            this._sortKeysBuffer = {};
            ids.sort((function(_this) {
                return function(a, b) {
                    return compareFunction.apply(_this, [a, b])
                }
            })(this));
            this._sortKeysBuffer = {};
            return this.setIds(ids)
        };
        Data_Handler.prototype.filter = function(filterFunction) {
            var i, id, ids, index, len, newIds;
            if (typeof filterFunction !== "function") {
                return
            }
            ids = this.getIds();
            newIds = [];
            index = 0;
            for (i = 0, len = ids.length; i < len; i++) {
                id = ids[i];
                if (filterFunction.apply(this, [index, id]) === true) {
                    newIds.push(id)
                }
                index++
            }
            return this.setIds(newIds)
        };
        Data_Handler.prototype.limit = function(count, offset) {
            var ids, newIds;
            if (offset == null) {
                offset = 0
            }
            ids = this.getIds();
            newIds = ids.slice(offset, offset + count);
            return this.setIds(newIds)
        };
        Data_Handler.prototype.count = function() {
            return this.getIds().length
        };
        Data_Handler.prototype.each = function(callbackFunction) {
            var i, id, ids, index, len, ret;
            if (typeof callbackFunction !== "function") {
                return
            }
            ids = this.getIds();
            index = 0;
            for (i = 0, len = ids.length; i < len; i++) {
                id = ids[i];
                ret = callbackFunction.apply(this, [index, id]);
                index++;
                if (ret === false) {
                    break
                }
            }
            return true
        };
        Data_Handler.prototype.setIds = function(_ids) {
            this._ids = _ids
        };
        Data_Handler.prototype.getIds = function() {
            return this._ids
        };
        Data_Handler.prototype.resetIds = function() {
            return this.setIds(this._dataHolder.getAllContainerIds())
        };
        Data_Handler.prototype.getItem = function(id) {
            return this.getDataHolder().getItem(id)
        };
        Data_Handler.prototype._defaultCompareFunction = function(idA, idB) {
            var hasAccentsForLanguage;
            hasAccentsForLanguage = this.utilString.hasAccentsForLanguage();
            if (!hasAccentsForLanguage) {
                return this.utilString.compare(this.getItem(idA).getSortKey(), this.getItem(idB).getSortKey())
            }
            if (this._sortKeysBuffer[idA] == null) {
                this._sortKeysBuffer[idA] = this.getItem(idA).getSortKey();
                if (hasAccentsForLanguage) {
                    this._sortKeysBuffer[idA] = this.utilString.replaceAccents(this._sortKeysBuffer[idA]);
                    this._sortKeysBuffer[idA] = this._sortKeysBuffer[idA].replace(/[a-z]/g, function(letter) {
                        return letter.toUpperCase()
                    })
                }
            }
            if (this._sortKeysBuffer[idB] == null) {
                this._sortKeysBuffer[idB] = this.getItem(idB).getSortKey();
                if (hasAccentsForLanguage) {
                    this._sortKeysBuffer[idB] = this.utilString.replaceAccents(this._sortKeysBuffer[idB]);
                    this._sortKeysBuffer[idB] = this._sortKeysBuffer[idB].replace(/[a-z]/g, function(letter) {
                        return letter.toUpperCase()
                    })
                }
            }
            return this.utilString.fastCompare(this._sortKeysBuffer[idA], this._sortKeysBuffer[idB])
        };
        return Data_Handler
    })();
    dic = (typeof window !== "undefined" && window !== null ? window : global).cjs.dic;
    dic.registerClass('Data_Handler', Data_Handler, ['dataHandler']);
    DataHandlerClass = dic.getClass('Data_Handler');
    dataEventHandler = function(Data_EventHolder) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_EventHolder);
        return handler
    };
    dataEventHandlerArchive = function(Data_EventHolderArchive) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_EventHolderArchive);
        return handler
    };
    dataEventHandlerMygames = function(Data_EventHolderMygames) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_EventHolderMygames);
        return handler
    };
    dataEventHandlerTemporary = function(Data_EventHolderTemporary) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_EventHolderTemporary);
        return handler
    };
    dataLeagueHandler = function(Data_LeagueHolder) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_LeagueHolder);
        return handler
    };
    dataLeagueHandlerArchive = function(Data_LeagueHolderArchive) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_LeagueHolderArchive);
        return handler
    };
    dataLeagueHandlerMygames = function(Data_LeagueHolderMygames) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_LeagueHolderMygames);
        return handler
    };
    dataLeagueHandlerTemporary = function(Data_LeagueHolderTemporary) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_LeagueHolderTemporary);
        return handler
    };
    dataParticipantHandler = function(Data_ParticipantHolder) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_ParticipantHolder);
        return handler
    };
    dataParticipantHandlerTemporary = function(Data_ParticipantHolderTemporary) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_ParticipantHolderTemporary);
        return handler
    };
    dic.registerSingleton('Data_EventHandler', dataEventHandler, ['dataEventHandler']);
    dic.registerSingleton('Data_EventHandlerArchive', dataEventHandlerArchive, ['dataEventHandlerArchive']);
    dic.registerSingleton('Data_EventHandlerMygames', dataEventHandlerMygames, ['dataEventHandlerMygames']);
    dic.registerSingleton('Data_EventHandlerTemporary', dataEventHandlerTemporary, ['dataEventHandlerTemporary']);
    dic.registerSingleton('Data_LeagueHandler', dataLeagueHandler, ['dataLeagueHandler']);
    dic.registerSingleton('Data_LeagueHandlerArchive', dataLeagueHandlerArchive, ['dataLeagueHandlerArchive']);
    dic.registerSingleton('Data_LeagueHandlerMygames', dataLeagueHandlerMygames, ['dataLeagueHandlerMygames']);
    dic.registerSingleton('Data_LeagueHandlerTemporary', dataLeagueHandlerTemporary, ['dataLeagueHandlerTemporary']);
    dic.registerSingleton('Data_ParticipantHandler', dataParticipantHandler, ['dataParticipantHandler']);
    dic.registerSingleton('Data_ParticipantHandlerTemporary', dataParticipantHandlerTemporary, ['dataParticipantHandlerTemporary'])
}).call(this);
(function() {
    var Data_Holder;
    Data_Holder = (function() {
        function Data_Holder(util) {
            this.util = util;
            this.reinit()
        }
        Data_Holder.prototype.reinit = function(newContainer) {
            if (newContainer == null) {
                newContainer = {}
            }
            return this._container = newContainer
        };
        Data_Holder.prototype.getAllContainerIds = function() {
            return this.util.Object.keys(this._container)
        };
        Data_Holder.prototype.getOrCreateNewItem = function(id) {
            if (this._container[id] == null) {
                this._container[id] = this._getNewItemInstance();
                this._container[id].setId(id)
            }
            return this._container[id]
        };
        Data_Holder.prototype.getItem = function(id) {
            if (!this.hasItem(id)) {
                throw new Error("Item " + id + " not found")
            }
            return this._container[id]
        };
        Data_Holder.prototype.setItem = function(id, item) {
            return this._container[id] = item
        };
        Data_Holder.prototype.hasItem = function(id) {
            return this._container[id] != null
        };
        Data_Holder.prototype.hasData = function() {
            var waste;
            for (waste in this._container) {
                return true
            }
            return false
        };
        Data_Holder.prototype.removeItem = function(id) {
            return delete this._container[id]
        };
        Data_Holder.prototype.getReferences = function() {
            var id, refs;
            refs = {};
            for (id in this._container) {
                refs[id] = this._container[id]
            }
            return refs
        };
        Data_Holder.prototype.addItemsFromRawObject = function(rawObject, replaceItemIfExists) {
            var data, id, item, key, newData, results, value;
            if (replaceItemIfExists == null) {
                replaceItemIfExists = false
            }
            results = [];
            for (id in rawObject) {
                data = rawObject[id];
                if (!replaceItemIfExists && this.hasItem(id)) {
                    continue
                }
                newData = {};
                for (key in data) {
                    value = data[key];
                    newData[key] = value
                }
                item = this.getOrCreateNewItem(id);
                results.push(item.reinit(newData))
            }
            return results
        };
        Data_Holder.prototype._getNewItemInstance = function() {
            return cjs.dic.getNewInstance('Data_Item')
        };
        Data_Holder.prototype._dumpContainer = function() {
            var i, id, len, ref, ret;
            ret = {};
            ref = this.getAllContainerIds();
            for (i = 0, len = ref.length; i < len; i++) {
                id = ref[i];
                ret[id] = this.getItem(id).getData()
            }
            return ret
        };
        return Data_Holder
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Data_Holder', Data_Holder, ['dataHolder'])
}).call(this);
(function() {
    var Data_HolderProxy;
    Data_HolderProxy = (function() {
        Data_HolderProxy.prototype.SCOPE_DEFAULT = 'default';
        Data_HolderProxy.prototype.SCOPE_MYGAMES = 'mygames';
        Data_HolderProxy.prototype.SCOPE_ARCHIVE = 'archive';
        Data_HolderProxy.prototype.SCOPE_TEMPORARY = 'temporary';

        function Data_HolderProxy() {
            this.setScope(Data_HolderProxy.prototype.SCOPE_DEFAULT)
        }
        Data_HolderProxy.prototype.setScope = function(_scopeName) {
            this._scopeName = _scopeName
        };
        Data_HolderProxy.prototype.getScope = function() {
            return this._scopeName
        };
        Data_HolderProxy.prototype.setDataHolders = function(_dataHolders) {
            this._dataHolders = _dataHolders
        };
        Data_HolderProxy.prototype.setDataHandlers = function(_dataHandlers) {
            this._dataHandlers = _dataHandlers
        };
        Data_HolderProxy.prototype.getHolder = function() {
            if (this._dataHolders[this._scopeName] != null) {
                return this._dataHolders[this._scopeName]
            }
            throw new Error("Holder for scope " + this._scopeName + " not found")
        };
        Data_HolderProxy.prototype.getHandler = function() {
            if (this._dataHandlers[this._scopeName] != null) {
                return this._dataHandlers[this._scopeName]
            }
            throw new Error("Handler for scope " + this._scopeName + " not found")
        };
        Data_HolderProxy.prototype.eachHolder = function(callbackFunction) {
            var holder, ref, ret, scopeName;
            if (typeof callbackFunction !== "function") {
                return
            }
            ref = this._dataHolders;
            for (scopeName in ref) {
                holder = ref[scopeName];
                ret = callbackFunction(scopeName, holder);
                if (ret === false) {
                    break
                }
            }
            return true
        };
        Data_HolderProxy.prototype.eachHandler = function(callbackFunction) {
            var handler, ref, ret, scopeName;
            if (typeof callbackFunction !== "function") {
                return
            }
            ref = this._dataHandlers;
            for (scopeName in ref) {
                handler = ref[scopeName];
                ret = callbackFunction(scopeName, handler);
                if (ret === false) {
                    break
                }
            }
            return true
        };
        Data_HolderProxy.prototype.findScopeByItemId = function(itemId) {
            var retScope;
            retScope = false;
            if (this.getHolder().hasItem(itemId)) {
                return this._scopeName
            }
            this.eachHolder(function(scope, holder) {
                if (scope === this._scopeName) {
                    return
                }
                if (holder.hasItem(itemId)) {
                    retScope = scope;
                    return false
                }
            });
            return retScope
        };
        Data_HolderProxy.prototype.findHolderByItemId = function(itemId) {
            var scope;
            scope = this.findScopeByItemId(itemId);
            if (scope === false) {
                return false
            }
            return this._dataHolders[scope]
        };
        Data_HolderProxy.prototype.findHandlerByItemId = function(itemId) {
            var scope;
            scope = this.findScopeByItemId(itemId);
            if (scope === false || (this._dataHandlers[scope] == null)) {
                return false
            }
            return this._dataHandlers[scope]
        };
        Data_HolderProxy.prototype.getItemValue = function(itemId, index) {
            var holder;
            holder = this.findHolderByItemId(itemId);
            if (holder === false) {
                return null
            }
            return holder.getItem(itemId).getValue(index)
        };
        return Data_HolderProxy
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Data_HolderProxy', Data_HolderProxy, ['dataHolderProxy'])
}).call(this);
(function() {
    var Data_Item;
    Data_Item = (function() {
        function Data_Item(util) {
            this.util = util;
            this.reinit()
        }
        Data_Item.prototype.setId = function(_id) {
            this._id = _id
        };
        Data_Item.prototype.getId = function() {
            return this._id
        };
        Data_Item.prototype.getSortKey = function(type) {
            return ""
        };
        Data_Item.prototype.getValue = function(index, defaultReturnValueIfNotFound) {
            if (defaultReturnValueIfNotFound == null) {
                defaultReturnValueIfNotFound = null
            }
            if (index in this._data) {
                return this._data[index]
            }
            return defaultReturnValueIfNotFound
        };
        Data_Item.prototype.getStatsResults = function(typeId, defaultReturnValueIfNotFound) {
            if (defaultReturnValueIfNotFound == null) {
                defaultReturnValueIfNotFound = null
            }
            return this.getValue('statsResults.' + typeId, defaultReturnValueIfNotFound)
        };
        Data_Item.prototype.setValue = function(index, value) {
            return this._data[index] = value
        };
        Data_Item.prototype.removeValue = function(index) {
            return delete this._data[index]
        };
        Data_Item.prototype.reinit = function(dataObject) {
            if (dataObject == null) {
                dataObject = {}
            }
            this._data = dataObject;
            if (this._data['is_valid'] == null) {
                return this._data['is_valid'] = true
            }
        };
        Data_Item.prototype.isValid = function() {
            if (!this.util.Config.get('app', 'myteams', 'enable')) {
                return true
            }
            if (this._data['is_valid'] != null) {
                return this._data['is_valid']
            }
            return true
        };
        Data_Item.prototype.invalidate = function() {
            return this._data['is_valid'] = false
        };
        Data_Item.prototype.getData = function(clone) {
            var id, newDataObj;
            if (clone == null) {
                clone = false
            }
            if (!clone) {
                return this._data
            }
            newDataObj = {};
            for (id in this._data) {
                newDataObj[id] = this.getValue(id)
            }
            return newDataObj
        };
        return Data_Item
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Data_Item', Data_Item, ['dataItem'])
}).call(this);
(function() {
    var Data_EventHolder, dic, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Data_EventHolder = (function(superClass) {
        extend(Data_EventHolder, superClass);

        function Data_EventHolder() {
            return Data_EventHolder.__super__.constructor.apply(this, arguments)
        }
        Data_EventHolder.prototype.getOrCreateNewEvent = function(id) {
            return this.getOrCreateNewItem(id)
        };
        Data_EventHolder.prototype.getEvent = function(id) {
            return this.getItem(id)
        };
        Data_EventHolder.prototype.hasEvent = function(id) {
            return this.hasItem(id)
        };
        Data_EventHolder.prototype.removeEvent = function(id) {
            return this.removeItem(id)
        };
        Data_EventHolder.prototype._getNewItemInstance = function() {
            return cjs.dic.getNewInstance('Data_EventItem')
        };
        return Data_EventHolder
    })(cjs.dic.getClass('Data_Holder'));
    dic = (typeof window !== "undefined" && window !== null ? window : global).cjs.dic;
    dic.registerClass('Data_EventHolder', Data_EventHolder, ['dataEventHolder']);
    dic.registerClass('Data_EventHolderArchive', Data_EventHolder, ['dataEventHolderArchive']);
    dic.registerClass('Data_EventHolderMygames', Data_EventHolder, ['dataEventHolderMygames']);
    dic.registerClass('Data_EventHolderTemporary', Data_EventHolder, ['dataEventHolderTemporary'])
}).call(this);
(function() {
    var Data_EventHolderProxy, initDataEventHolderProxy, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Data_EventHolderProxy = (function(superClass) {
        extend(Data_EventHolderProxy, superClass);

        function Data_EventHolderProxy() {
            return Data_EventHolderProxy.__super__.constructor.apply(this, arguments)
        }
        Data_EventHolderProxy.prototype.getEventHolder = function() {
            return this.getHolder()
        };
        Data_EventHolderProxy.prototype.getEventHandler = function() {
            return this.getHandler()
        };
        Data_EventHolderProxy.prototype.findEventHolderByEventId = function(eventId) {
            return this.findHolderByItemId(eventId)
        };
        Data_EventHolderProxy.prototype.findEventHandlerByEventId = function(eventId) {
            return this.findHandlerByItemId(eventId)
        };
        Data_EventHolderProxy.prototype.getEventValue = function(eventId, index) {
            return this.getItemValue(eventId, index)
        };
        return Data_EventHolderProxy
    })(cjs.dic.getClass('Data_HolderProxy'));
    initDataEventHolderProxy = function(Data_EventHolder, Data_EventHolderMygames, Data_EventHolderArchive, Data_EventHolderTemporary, Data_EventHandler, Data_EventHandlerMygames, Data_EventHandlerArchive, Data_EventHandlerTemporary) {
        var handlers, holderProxy, holderProxyClass, holders;
        holderProxy = new Data_EventHolderProxy();
        holderProxyClass = cjs.dic.getClass('Data_HolderProxy');
        holders = {};
        holders[holderProxyClass.prototype.SCOPE_DEFAULT] = Data_EventHolder;
        holders[holderProxyClass.prototype.SCOPE_ARCHIVE] = Data_EventHolderArchive;
        holders[holderProxyClass.prototype.SCOPE_MYGAMES] = Data_EventHolderMygames;
        holders[holderProxyClass.prototype.SCOPE_TEMPORARY] = Data_EventHolderTemporary;
        holderProxy.setDataHolders(holders);
        handlers = {};
        handlers[holderProxyClass.prototype.SCOPE_DEFAULT] = Data_EventHandler;
        handlers[holderProxyClass.prototype.SCOPE_ARCHIVE] = Data_EventHandlerArchive;
        handlers[holderProxyClass.prototype.SCOPE_MYGAMES] = Data_EventHandlerMygames;
        handlers[holderProxyClass.prototype.SCOPE_TEMPORARY] = Data_EventHandlerTemporary;
        holderProxy.setDataHandlers(handlers);
        return holderProxy
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Data_EventHolderProxy', initDataEventHolderProxy, ['dataEventHolderProxy', 'dataEvent'])
}).call(this);
(function() {
    var Data_EventItem, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty,
        indexOf = [].indexOf || function(item) {
                for (var i = 0, l = this.length; i < l; i++) {
                    if (i in this && this[i] === item) return i
                }
                return -1
            };
    Data_EventItem = (function(superClass) {
        extend(Data_EventItem, superClass);

        function Data_EventItem() {
            return Data_EventItem.__super__.constructor.apply(this, arguments)
        }
        Data_EventItem.prototype.getSortKey = function(type) {
            var country, holeStartTime, isWinterSport, leagueId, leagueItem, leagueSortKey, sortByTime, sortKey, sportId, sports, stageTypeSortArray, statsSortKey, timeDesc, title, topLeaguesFirst, tournamentTemplate;
            topLeaguesFirst = sortTopLeaguesFirst();
            timeDesc = isSortDesc();
            sortByTime = isSortByTime();
            leagueItem = this.getLeague();
            leagueSortKey = leagueItem.getSortKey();
            leagueId = leagueItem.getId();
            sports = this.util.List.getSports();
            sportId = this.getSportId();
            isWinterSport = this.util.Sport.inGroup(sportId, sports.WINTER_SPORTS);
            sortKey = [];
            sortKey.push(leagueSortKey.substr(0, 2));
            if (!participant) {
                sortKey.push(topLeaguesFirst && cjs.myLeagues.isTop(leagueId) ? 'a' : 'b')
            }
            if (sportId === sports.HORSE_RACING) {
                title = leagueItem.getTitle().split(':');
                country = this.util.String.rPad(title[0].replace(/\ /g, ""), 15, "0");
                tournamentTemplate = this.util.String.rPad(title[1].replace(/\ /g, ""), 15, "0").trim();
                sortKey.push(country);
                sortKey.push(tournamentTemplate)
            }
            if (sortByTime) {
                if (!(cjs.participantPage && cjs.participantPage.getTab() === cjs.constants.participantPage.TAB_RESULTS)) {
                    sortKey.push(!cjs.myLeagues.isTop(leagueId) && leagueItem.isSecondary() ? 'a' : 'b')
                }
                sortKey.push(5555555555 + (timeDesc ? -1 : 1) * this.getStartUTime())
            } else {
                if (this.util.Sport.isStageSport(sportId)) {
                    if (sportId === sports.CYCLING) {
                        sortKey.push(leagueItem.getCategoryId() + leagueSortKey.substr(leagueSortKey.indexOf('.') + 4, 12))
                    }
                    sortKey.push(leagueSortKey.substr(2, leagueSortKey.indexOf('.') + 2));
                    if (sportId === sports.HORSE_RACING && this.util.Enviroment.isTournamentPage) {
                        sortKey.push(9999999999 - this.getStartUTime())
                    } else {
                        if (this.getStageType() === this.util.List.getEventStages().SCHEDULED) {
                            sortKey.push("9");
                            sortKey.push(this.getStartUTime())
                        } else {
                            sortKey.push("00000000000")
                        }
                        stageTypeSortArray = [0, 3, 1, 2];
                        sortKey.push(stageTypeSortArray[this.getStageType()]);
                        sortKey.push(9999999999 - this.getStartUTime())
                    }
                }
            }
            sortKey.push(leagueSortKey);
            if (isWinterSport) {
                sortKey.push(1000 + parseInt(this.getStatsResultsSortKey()))
            } else {
                statsSortKey = this.getStatsSortKey();
                if ((statsSortKey != null) && statsSortKey !== '') {
                    sortKey.push(1000 + parseInt(statsSortKey))
                } else {
                    sortKey.push(9999)
                }
            }
            if (isNoDuelTournament(leagueId) && !isWinterSport) {
                if (this.getParticipantStatus()) {
                    sortKey.push(9)
                } else {
                    sortKey.push(0)
                }
                if (this.getHomeScorePart(5) === '') {
                    sortKey.push("99999999")
                } else {
                    sortKey.push("9999" + this.util.String.lPad(this.getRank(), 4, "0"))
                }
                if (this.isScheduled() || this.getHomeScorePart(5) === '') {
                    holeStartTime = 9999999999;
                    if (/^[0-9]{3,}$/.test(this.getParticipantHoleInfo())) {
                        holeStartTime += this.getParticipantHoleInfo()
                    }
                    sortKey.push(this.util.String.lPad(holeStartTime, 10, "0"))
                } else {
                    sortKey.push("0000000000")
                }
            } else {
                sortKey.push("0000")
            }
            if (!sortByTime) {
                sortKey.push(9999999999 + this.getStartUTime())
            }
            sortKey.push(this.util.String.rPad(this.getHomeName() + "", 10, " "));
            sortKey.push(this.util.String.rPad(this.getAwayName() + "", 10, " "));
            return sortKey.join('')
        };
        Data_EventItem.prototype.getLeague = function() {
            var leagueHolderProxy;
            leagueHolderProxy = cjs.dic.get('dataLeagueHolderProxy');
            return leagueHolderProxy.getHolder().getLeague(this.getLeagueId())
        };
        Data_EventItem.prototype.getLeagueId = function() {
            return this.getValue('labl_id')
        };
        Data_EventItem.prototype.getSportId = function() {
            return parseInt(this.getValue('sport_id'))
        };
        Data_EventItem.prototype.getSportName = function() {
            return this.getValue('sport')
        };
        Data_EventItem.prototype.getStageType = function() {
            return parseInt(this.getValue('AB'))
        };
        Data_EventItem.prototype.isTotallyFinished = function() {
            var isAlterStageFinished;
            isAlterStageFinished = this.getValue('DZ') === this.util.List.getEventStageTypes().FINISHED;
            if ((isAlterStageFinished && !this.isInterrupted() && !this.isAfterDay()) || (!this.getValue('DZ') && this.isFinished() && !this.isInterrupted() && !this.isAfterDay())) {
                return true
            }
            return false
        };
        Data_EventItem.prototype.getStage = function() {
            return parseInt(this.getValue('AC'))
        };
        Data_EventItem.prototype.isRoundThree = function() {
            return this.getStage() === this.util.Enviroment.getConstants().event_stage.THIRD_ROUND
        };
        Data_EventItem.prototype.isRoundAfterThree = function() {
            return this.getStage() === this.util.Enviroment.getConstants().event_stage.AFTER_ROUND3
        };
        Data_EventItem.prototype.isRoundFour = function() {
            return this.getStage() === this.util.Enviroment.getConstants().event_stage.FOURTH_ROUND
        };
        Data_EventItem.prototype.isAnyRoundOverAfterTwo = function() {
            return this.isRoundThree() || this.isRoundAfterThree() || this.isRoundFour() || this.isRoundFinish()
        };
        Data_EventItem.prototype.isRoundFinish = function() {
            return this.getStage() === 3
        };
        Data_EventItem.prototype.isScheduled = function() {
            return this.getStageType() === 1
        };
        Data_EventItem.prototype.isLive = function() {
            return this.getStageType() === 2
        };
        Data_EventItem.prototype.isFinished = function() {
            return this.getStageType() === 3
        };
        Data_EventItem.prototype.isDelayed = function() {
            return this.getStage() === this.util.List.getEventStages().DELAYED
        };
        Data_EventItem.prototype.isEventStageFinished = function() {
            return this.getStage() === this.util.List.getEventStages().FINISHED
        };
        Data_EventItem.prototype.isToFinish = function() {
            return this.getStage() === this.util.List.getEventStages().TO_FINISH
        };
        Data_EventItem.prototype.isInterrupted = function() {
            return this.getStage() === this.util.List.getEventStages().INTERRUPTED
        };
        Data_EventItem.prototype.isAfterDay = function() {
            var ref;
            return ref = this.getStage(), indexOf.call(this.util.List.getAfterEventStages(), ref) >= 0
        };
        Data_EventItem.prototype.isPenalties = function() {
            return this.getStage() === this.util.List.getEventStages().PENALTIES
        };
        Data_EventItem.prototype.getHomeScorePart = function(part) {
            switch (part) {
                case 1:
                    return this.getValue('BA');
                case 2:
                    return this.getValue('BC');
                case 3:
                    return this.getValue('BE');
                case 4:
                    return this.getValue('BG');
                case 5:
                    return this.getValue('BI')
            }
        };
        Data_EventItem.prototype.getStartUTime = function() {
            return this.getValue('AD')
        };
        Data_EventItem.prototype.getStartUTimeDate = function() {
            return this.util.Date.timestamp2date(this.util.Enviroment.dateFormat(), this.getStartUTime(), this.util.Enviroment.getGmtOffset())
        };
        Data_EventItem.prototype.getEndUTime = function() {
            return this.getValue('AP')
        };
        Data_EventItem.prototype.getStageStartUTime = function() {
            return this.getValue('AO')
        };
        Data_EventItem.prototype.getPar = function() {
            if (this.isParticipantLive() || this.wasParticipantLive()) {
                if (this.getHomeScore() > 0 && !this.isStableFord()) {
                    return '+' + this.getHomeScore()
                } else {
                    return this.getHomeScore()
                }
            } else {
                return '-'
            }
        };
        Data_EventItem.prototype.isStableFord = function() {
            return parseInt(this.getValue('ZT')) === 1
        };
        Data_EventItem.prototype.getHomeScore = function() {
            return this.getValue('AG')
        };
        Data_EventItem.prototype.getAwayScore = function() {
            return this.getValue('AH')
        };
        Data_EventItem.prototype.getHomeGameScore = function() {
            return this.getValue('WA')
        };
        Data_EventItem.prototype.getAwayGameScore = function() {
            return this.getValue('WB')
        };
        Data_EventItem.prototype.getOddsWinner = function() {
            return parseInt(this.getValue('AZ'))
        };
        Data_EventItem.prototype.getHomeMartialArtsFinished = function() {
            return this.getValue('IA')
        };
        Data_EventItem.prototype.getAwayMartialArtsFinished = function() {
            return this.getValue('IB')
        };
        Data_EventItem.prototype.getHomeMartialArtsFinishedRound = function() {
            return this.getValue('IC')
        };
        Data_EventItem.prototype.getAwayMartialArtsFinishedRound = function() {
            return this.getValue('ID')
        };
        Data_EventItem.prototype.isOddsHomeWinner = function() {
            return this.getOddsWinner() === this.util.List.getWinnerSides().HOME
        };
        Data_EventItem.prototype.isOddsAwayWinner = function() {
            return this.getOddsWinner() === this.util.List.getWinnerSides().AWAY
        };
        Data_EventItem.prototype.isOddsDrawWinner = function() {
            return this.getOddsWinner() === this.util.List.getWinnerSides().DRAW
        };
        Data_EventItem.prototype.getService = function() {
            return parseInt(this.getValue('WC'))
        };
        Data_EventItem.prototype.hasService = function() {
            var ref;
            return (ref = this.getService()) === 1 || ref === 2
        };
        Data_EventItem.prototype.hasHomeService = function() {
            return this.getService() === 1
        };
        Data_EventItem.prototype.hasAwayService = function() {
            return this.getService() === 2
        };
        Data_EventItem.prototype.getHomeName = function() {
            return this.getValue('AE')
        };
        Data_EventItem.prototype.getAwayName = function() {
            return this.getValue('AF')
        };
        Data_EventItem.prototype.getHomeRedCardCount = function() {
            return this.getValue('AJ')
        };
        Data_EventItem.prototype.getAwayRedCardCount = function() {
            return this.getValue('AK')
        };
        Data_EventItem.prototype.getWinner = function() {
            return parseInt(this.getValue('AS'))
        };
        Data_EventItem.prototype.hasLiveBetting = function() {
            return this.getValue('AN') === 'y'
        };
        Data_EventItem.prototype.hasLiveBettingByBookmaker = function(bookmakerId) {
            var bookmakersWithLiveInOffer, settings;
            bookmakersWithLiveInOffer = [];
            settings = this.getValue('MW');
            if (settings != null) {
                if (typeof settings === 'string') {
                    bookmakersWithLiveInOffer = settings.split('|').map(function(bookmaker) {
                        return parseInt(bookmaker)
                    })
                } else {
                    bookmakersWithLiveInOffer = [parseInt(settings)]
                }
            }
            return indexOf.call(bookmakersWithLiveInOffer, bookmakerId) >= 0
        };
        Data_EventItem.prototype.hasLiveCentre = function() {
            return parseInt(this.getValue('AW')) === 1
        };
        Data_EventItem.prototype.isMarkedAsLive = function() {
            return this.getValue('AI') === 'y'
        };
        Data_EventItem.prototype.isHomeWinner = function() {
            return this.getWinner() === 1
        };
        Data_EventItem.prototype.isAwayWinner = function() {
            return this.getWinner() === 2
        };
        Data_EventItem.prototype.isGoallessDraw = function() {
            return this.getWinner() === 0
        };
        Data_EventItem.prototype.getRank = function() {
            return this.getValue('WS')
        };
        Data_EventItem.prototype.getParticipantStatus = function() {
            return this.getValue('WT')
        };
        Data_EventItem.prototype.getParticipantStatusSubType = function() {
            return this.getValue('VX')
        };
        Data_EventItem.prototype.getParticipantHoleInfo = function() {
            return this.getValue('GH')
        };
        Data_EventItem.prototype.getParToday = function() {
            return this.getValue('GI')
        };
        Data_EventItem.prototype.setParToday = function(value) {
            return this.setValue('GI', value)
        };
        Data_EventItem.prototype.getGolfHolesPlayed = function() {
            return this.getValue('GS')
        };
        Data_EventItem.prototype.isGolfNational = function() {
            return this.getValue('GN') === 1
        };
        Data_EventItem.prototype.getHomeParticipantCountryId = function() {
            return this.getValue('CA')
        };
        Data_EventItem.prototype.getAwayParticipantCountryId = function() {
            return this.getValue('CB')
        };
        Data_EventItem.prototype.getLapTime = function() {
            return this.getValue('ND')
        };
        Data_EventItem.prototype.getGap = function() {
            return this.getValue('NG')
        };
        Data_EventItem.prototype.getLapsDistance = function() {
            return this.getValue('NH')
        };
        Data_EventItem.prototype.getRankIsTied = function() {
            return parseInt(this.getValue('WW')) === 1
        };
        Data_EventItem.prototype.isParticipantLive = function() {
            return this.getValue('WZ') === 1
        };
        Data_EventItem.prototype.wasParticipantLive = function() {
            if (this.isFinished() && this.isEventStageFinished()) {
                return true
            }
            return this.getValue('WZ') === 0
        };
        Data_EventItem.prototype.getGameTime = function() {
            return this.getValue('BX')
        };
        Data_EventItem.prototype.getRound = function() {
            return this.getValue('ER', '')
        };
        Data_EventItem.prototype.getCyclingJersey = function() {
            return this.getValue('WY')
        };
        Data_EventItem.prototype.getDetailId = function() {
            return this.getId().split(/_/)[2].substr(0, 8)
        };
        Data_EventItem.prototype.isOddPublished = function(oddIndex) {
            return !(new RegExp(oddIndex)).test(this.getValue('XX', ''))
        };
        Data_EventItem.prototype.getLiveSentence = function() {
            return this.getValue('LS')
        };
        Data_EventItem.prototype.getStatsSortKey = function() {
            return this.getValue('NI')
        };
        Data_EventItem.prototype.getCurrentDistance = function() {
            return this.getValue('NJ')
        };
        Data_EventItem.prototype.getDistance = function() {
            return this.getValue('NK')
        };
        Data_EventItem.prototype.getWeight = function() {
            return this.getValue('NL')
        };
        Data_EventItem.prototype.getStartingPrice = function() {
            return this.getValue('NM')
        };
        Data_EventItem.prototype.getAge = function() {
            return this.getValue('NN')
        };
        Data_EventItem.prototype.getDataStageTime = function() {
            return this.getValue('CK')
        };
        Data_EventItem.prototype.getCounter = function() {
            return this.getValue('counter')
        };
        Data_EventItem.prototype.getCountryName = function() {
            return this.getValue('CC')
        };
        Data_EventItem.prototype.getEachWayHandicap = function() {
            return this.getValue('XI')
        };
        Data_EventItem.prototype.getOriginalId = function() {
            return this.getValue('original_id')
        };
        Data_EventItem.prototype.getTvLiveStreaming = function() {
            return this.getValue('AL')
        };
        Data_EventItem.prototype.hasBroadcast = function(allowedBookmakers) {
            return this.hasLiveStreamingBroadcast(allowedBookmakers) || this.hasTVBroadcast() || this.hasWWWBroadcast()
        };
        Data_EventItem.prototype.hasTVBroadcast = function() {
            var broadcastData, data;
            broadcastData = this.getValue('AL');
            data = broadcastData ? JSON.parse(broadcastData) : {};
            if ((data != null ? data[1] : void 0) != null) {
                return true
            } else {
                return false
            }
        };
        Data_EventItem.prototype.hasLiveStreamingBroadcast = function(allowedBookmakers) {
            var broadcastData, data, i, len, ref, ref1, tvItem;
            broadcastData = this.getValue('AL');
            data = broadcastData ? JSON.parse(broadcastData) : {};
            if ((data != null ? data[2] : void 0) == null) {
                return false
            }
            ref = data[2];
            for (i = 0, len = ref.length; i < len; i++) {
                tvItem = ref[i];
                if ((tvItem['BI'] != null) && (ref1 = tvItem['BI'], indexOf.call(allowedBookmakers, ref1) >= 0)) {
                    return true
                }
            }
            return false
        };
        Data_EventItem.prototype.hasWWWBroadcast = function() {
            var broadcastData, data;
            broadcastData = this.getValue('AL');
            data = broadcastData ? JSON.parse(broadcastData) : {};
            if ((data != null ? data[3] : void 0) != null) {
                return true
            } else {
                return false
            }
        };
        Data_EventItem.prototype.getStatsResultsRank = function() {
            var value;
            value = this.getStatsResults(this.util.List.getStatsDataTypes().RANK);
            if (value != null) {
                return parseInt(value)
            } else {
                return value
            }
        };
        Data_EventItem.prototype.getStatsResultsJumpRound1 = function() {
            var value;
            value = this.getStatsResults(this.util.List.getStatsDataTypes().JUMP_ROUND_1);
            if (value != null) {
                return value + ' m'
            } else {
                return ''
            }
        };
        Data_EventItem.prototype.getStatsResultsJumpRound2 = function() {
            var value;
            value = this.getStatsResults(this.util.List.getStatsDataTypes().JUMP_ROUND_2);
            if (value != null) {
                return value + ' m'
            } else {
                return ''
            }
        };
        Data_EventItem.prototype.getStatsResultsJumpCount = function() {
            return this.getStatsResults(this.util.List.getStatsDataTypes().JUMP_COUNT)
        };
        Data_EventItem.prototype.getStatsResultsPointsRound1 = function() {
            return this.getStatsResults(this.util.List.getStatsDataTypes().POINTS_ROUND_1)
        };
        Data_EventItem.prototype.getStatsResultsPointsRound2 = function() {
            return this.getStatsResults(this.util.List.getStatsDataTypes().POINTS_ROUND_2)
        };
        Data_EventItem.prototype.getStatsResultsPoints = function() {
            return this.getStatsResults(this.util.List.getStatsDataTypes().POINTS)
        };
        Data_EventItem.prototype.getStatsResultsTime = function() {
            return this.getStatsResults(this.util.List.getStatsDataTypes().TIME)
        };
        Data_EventItem.prototype.getStatsResultsTimeRound1 = function() {
            return this.getStatsResults(this.util.List.getStatsDataTypes().TIME_ROUND_1)
        };
        Data_EventItem.prototype.getStatsResultsTimeRound2 = function() {
            return this.getStatsResults(this.util.List.getStatsDataTypes().TIME_ROUND_2)
        };
        Data_EventItem.prototype.getStatsResultsGap = function() {
            return this.getStatsResults(this.util.List.getStatsDataTypes().GAP)
        };
        Data_EventItem.prototype.getStatsResultsSortKey = function() {
            return this.getStatsResults(this.util.List.getStatsDataTypes().EVENT_PARTICIPANT_SORT_KEY)
        };
        Data_EventItem.prototype.getStatsResultsPenaltyLap = function() {
            return this.getStatsResults(this.util.List.getStatsDataTypes().PENALTY_LAP)
        };
        Data_EventItem.prototype.getStatsResultsMissedShot = function() {
            return this.getStatsResults(this.util.List.getStatsDataTypes().MISSED_SHOT)
        };
        Data_EventItem.prototype.getStatsResultsStopReason = function(typeId) {
            var value;
            if (typeId == null) {
                typeId = this.util.List.getStatsDataTypes().STOP_REASON
            }
            value = this.getStatsResults(typeId);
            if (value) {
                value = parseInt(value)
            }
            if (value === this.util.List.getEventIncidentType().CUT_OFF && this.util.Sport.inGroup(this.getSportId(), this.util.List.getSports().WINTER_SPORTS)) {
                return null
            } else {
                return value
            }
        };
        Data_EventItem.prototype.getStatsResultsStopReasonRound1 = function() {
            return this.getStatsResultsStopReason(this.util.List.getStatsDataTypes().STOP_REASON_ROUND_1)
        };
        Data_EventItem.prototype.getStatsResultsStopReasonRound2 = function() {
            return this.getStatsResultsStopReason(this.util.List.getStatsDataTypes().STOP_REASON_ROUND_2)
        };
        Data_EventItem.prototype.isStatsResultsCutOff = function() {
            var value;
            value = this.getStatsResults(this.util.List.getStatsDataTypes().STOP_REASON);
            if (value) {
                return parseInt(value) === this.util.List.getEventIncidentType().CUT_OFF
            } else {
                return false
            }
        };
        Data_EventItem.prototype.getStatsResultsOnTrack = function() {
            var value;
            value = this.getStatsResults(this.util.List.getStatsDataTypes().ON_TRACK);
            if (value) {
                return parseInt(value) === 1
            } else {
                return false
            }
        };
        Data_EventItem.prototype.getStatsResultsLapDistance = function() {
            return this.getStatsResults(this.util.List.getStatsDataTypes().LAPS_DISTANCE)
        };
        Data_EventItem.prototype.isNationalTeam = function() {
            return this.getValue('GN') === 1
        };
        return Data_EventItem
    })(cjs.dic.getClass('Data_Item'));
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Data_EventItem', Data_EventItem, ['dataEventItem'])
}).call(this);
(function() {
    var Data_LeagueHolder, dic, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Data_LeagueHolder = (function(superClass) {
        extend(Data_LeagueHolder, superClass);

        function Data_LeagueHolder() {
            return Data_LeagueHolder.__super__.constructor.apply(this, arguments)
        }
        Data_LeagueHolder.prototype.getOrCreateNewLeague = function(id) {
            return this.getOrCreateNewItem(id)
        };
        Data_LeagueHolder.prototype.getLeague = function(id) {
            return this.getItem(id)
        };
        Data_LeagueHolder.prototype.hasLeague = function(id) {
            return this.hasItem(id)
        };
        Data_LeagueHolder.prototype.removeLeague = function(id) {
            return this.removeItem(id)
        };
        Data_LeagueHolder.prototype._getNewItemInstance = function() {
            return cjs.dic.getNewInstance('Data_LeagueItem')
        };
        return Data_LeagueHolder
    })(cjs.dic.getClass('Data_Holder'));
    dic = (typeof window !== "undefined" && window !== null ? window : global).cjs.dic;
    dic.registerClass('Data_LeagueHolder', Data_LeagueHolder, ['dataLeagueHolder']);
    dic.registerClass('Data_LeagueHolderArchive', Data_LeagueHolder, ['dataLeagueHolderArchive']);
    dic.registerClass('Data_LeagueHolderMygames', Data_LeagueHolder, ['dataLeagueHolderMygames']);
    dic.registerClass('Data_LeagueHolderTemporary', Data_LeagueHolder, ['dataLeagueHolderTemporary'])
}).call(this);
(function() {
    var Data_LeagueHolderProxy, initDataLeagueHolderProxy, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Data_LeagueHolderProxy = (function(superClass) {
        extend(Data_LeagueHolderProxy, superClass);

        function Data_LeagueHolderProxy() {
            return Data_LeagueHolderProxy.__super__.constructor.apply(this, arguments)
        }
        Data_LeagueHolderProxy.prototype.getLeagueHolder = function() {
            return this.getHolder()
        };
        Data_LeagueHolderProxy.prototype.getLeagueHandler = function() {
            return this.getHandler()
        };
        Data_LeagueHolderProxy.prototype.findLeagueHolderByLeagueId = function(leagueId) {
            return this.findHolderByItemId(leagueId)
        };
        Data_LeagueHolderProxy.prototype.findLeagueHandlerByLeagueId = function(leagueId) {
            return this.findHandlerByItemId(leagueId)
        };
        Data_LeagueHolderProxy.prototype.getLeagueValue = function(leagueId, index) {
            return this.getItemValue(leagueId, index)
        };
        return Data_LeagueHolderProxy
    })(cjs.dic.getClass('Data_HolderProxy'));
    initDataLeagueHolderProxy = function(Data_LeagueHolder, Data_LeagueHolderMygames, Data_LeagueHolderArchive, Data_LeagueHolderTemporary, Data_LeagueHandler, Data_LeagueHandlerMygames, Data_LeagueHandlerArchive, Data_LeagueHandlerTemporary) {
        var handlers, holderProxy, holderProxyClass, holders;
        holderProxy = new Data_LeagueHolderProxy();
        holderProxyClass = cjs.dic.getClass('Data_HolderProxy');
        holders = {};
        holders[holderProxyClass.prototype.SCOPE_DEFAULT] = Data_LeagueHolder;
        holders[holderProxyClass.prototype.SCOPE_ARCHIVE] = Data_LeagueHolderArchive;
        holders[holderProxyClass.prototype.SCOPE_MYGAMES] = Data_LeagueHolderMygames;
        holders[holderProxyClass.prototype.SCOPE_TEMPORARY] = Data_LeagueHolderTemporary;
        holderProxy.setDataHolders(holders);
        handlers = {};
        handlers[holderProxyClass.prototype.SCOPE_DEFAULT] = Data_LeagueHandler;
        handlers[holderProxyClass.prototype.SCOPE_ARCHIVE] = Data_LeagueHandlerArchive;
        handlers[holderProxyClass.prototype.SCOPE_MYGAMES] = Data_LeagueHandlerMygames;
        handlers[holderProxyClass.prototype.SCOPE_TEMPORARY] = Data_LeagueHandlerTemporary;
        holderProxy.setDataHandlers(handlers);
        return holderProxy
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Data_LeagueHolderProxy', initDataLeagueHolderProxy, ['dataLeagueHolderProxy', 'dataLeague'])
}).call(this);
(function() {
    var Data_LeagueItem, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Data_LeagueItem = (function(superClass) {
        extend(Data_LeagueItem, superClass);

        function Data_LeagueItem() {
            return Data_LeagueItem.__super__.constructor.apply(this, arguments)
        }
        Data_LeagueItem.prototype.getOriginalId = function() {
            return this.getId().split('_')[1]
        };
        Data_LeagueItem.prototype.getSortKey = function(type) {
            return this.getValue('ZX')
        };
        Data_LeagueItem.prototype.hasTable = function() {
            return parseInt(this.getValue('ZG')) === 1
        };
        Data_LeagueItem.prototype.hasLiveTable = function() {
            return parseInt(this.getValue('ZO')) === 1
        };
        Data_LeagueItem.prototype.hasDraw = function() {
            return parseInt(this.getValue('ZG')) === 2
        };
        Data_LeagueItem.prototype.getTitle = function() {
            return this.getValue('ZA')
        };
        Data_LeagueItem.prototype.getCountryId = function() {
            return this.getValue('ZB')
        };
        Data_LeagueItem.prototype.getCountryName = function() {
            return this.getValue('ZY')
        };
        Data_LeagueItem.prototype.getTournamentId = function() {
            return this.getValue('ZE')
        };
        Data_LeagueItem.prototype.getTournamentStageId = function() {
            return this.getValue('ZC')
        };
        Data_LeagueItem.prototype.getStageId = function() {
            return this.getValue('ZC')
        };
        Data_LeagueItem.prototype.getStagesCount = function() {
            return this.getValue('ZCC')
        };
        Data_LeagueItem.prototype.getTournamentType = function() {
            return this.getValue('ZD')
        };
        Data_LeagueItem.prototype.getTournamentStageType = function() {
            return this.getValue('ZJ')
        };
        Data_LeagueItem.prototype.getTournamentTemplateKey = function() {
            return this.getValue('ZH')
        };
        Data_LeagueItem.prototype.getTournamentTemplateName = function() {
            return this.getValue('ZK')
        };
        Data_LeagueItem.prototype.getTournamentTemplateAcronym = function() {
            return this.getValue('ZAC')
        };
        Data_LeagueItem.prototype.getSuperTemplateId = function() {
            return this.getValue('ZHS')
        };
        Data_LeagueItem.prototype.getRaceType = function() {
            return this.getValue('ZM')
        };
        Data_LeagueItem.prototype._parseValueFromTournamentTemplateKey = function(index) {
            var ttk;
            ttk = this.getTournamentTemplateKey();
            if (ttk != null) {
                return ttk.split('_')[index]
            } else {
                return null
            }
        };
        Data_LeagueItem.prototype.getCategoryId = function() {
            var categoryId;
            categoryId = this._parseValueFromTournamentTemplateKey(0);
            if (categoryId != null) {
                return parseInt(categoryId)
            } else {
                return null
            }
        };
        Data_LeagueItem.prototype.getTournamentTemplateId = function() {
            var tournamentTemplateId;
            tournamentTemplateId = this._parseValueFromTournamentTemplateKey(1);
            if (tournamentTemplateId != null) {
                return tournamentTemplateId
            } else {
                return null
            }
        };
        Data_LeagueItem.prototype.isRaceTypeRace = function() {
            return this.getRaceType() === 'r'
        };
        Data_LeagueItem.prototype.isRaceTypePractice = function() {
            return this.getRaceType() === 'p'
        };
        Data_LeagueItem.prototype.getRaceInfoText = function() {
            return this.getValue('ZN')
        };
        Data_LeagueItem.prototype.getPrizeMoney = function() {
            return this.getValue('ZP')
        };
        Data_LeagueItem.prototype.getPar = function() {
            return this.getValue('ZQ')
        };
        Data_LeagueItem.prototype.getEventId = function() {
            return this.getValue('ZZ')
        };
        Data_LeagueItem.prototype.getMeetingId = function() {
            return this.getValue('QM')
        };
        Data_LeagueItem.prototype.getStageTabs = function() {
            return this.getValue('ZV')
        };
        Data_LeagueItem.prototype.getUrl = function() {
            return this.getValue('ZL')
        };
        Data_LeagueItem.prototype.getIs7Rugby = function() {
            return parseInt(this.getValue('ZR'))
        };
        Data_LeagueItem.prototype.getSportId = function() {
            return parseInt(this.getValue('sport_id'))
        };
        Data_LeagueItem.prototype.getSportName = function() {
            return this.getValue('sport')
        };
        Data_LeagueItem.prototype.isOpen = function() {
            return this.getValue('display')
        };
        Data_LeagueItem.prototype.getEventCount = function() {
            return this.getValue('g_count')
        };
        Data_LeagueItem.prototype.isPrimary = function() {
            return this.getTournamentType() === 'p'
        };
        Data_LeagueItem.prototype.isSecondary = function() {
            return this.getTournamentType() === 's'
        };
        Data_LeagueItem.prototype.isTop = function() {
            return this.getTournamentType() === 't'
        };
        Data_LeagueItem.prototype.isClosed = function() {
            return this.getTournamentType() === 'c'
        };
        Data_LeagueItem.prototype.isGolfPlayOff = function() {
            return this.getValue('GP') === '1'
        };
        return Data_LeagueItem
    })(cjs.dic.getClass('Data_Item'));
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Data_LeagueItem', Data_LeagueItem, ['dataLeagueItem'])
}).call(this);
(function() {
    var Data_ParticipantHolder, dic, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Data_ParticipantHolder = (function(superClass) {
        extend(Data_ParticipantHolder, superClass);

        function Data_ParticipantHolder() {
            return Data_ParticipantHolder.__super__.constructor.apply(this, arguments)
        }
        Data_ParticipantHolder.prototype.getOrCreateNewParticipant = function(id) {
            return this.getOrCreateNewItem(id)
        };
        Data_ParticipantHolder.prototype.getParticipant = function(id) {
            return this.getItem(id)
        };
        Data_ParticipantHolder.prototype.hasParticipant = function(id) {
            return this.hasItem(id)
        };
        Data_ParticipantHolder.prototype.removeParticipant = function(id) {
            return this.removeItem(id)
        };
        Data_ParticipantHolder.prototype._getNewItemInstance = function() {
            return cjs.dic.getNewInstance('Data_ParticipantItem')
        };
        return Data_ParticipantHolder
    })(cjs.dic.getClass('Data_Holder'));
    dic = (typeof window !== "undefined" && window !== null ? window : global).cjs.dic;
    dic.registerClass('Data_ParticipantHolder', Data_ParticipantHolder, ['dataParticipantHolder'])
}).call(this);
(function() {
    var Data_ParticipantItem, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Data_ParticipantItem = (function(superClass) {
        extend(Data_ParticipantItem, superClass);

        function Data_ParticipantItem(util) {
            this.util = util;
            this.clearEventIds()
        }
        Data_ParticipantItem.prototype.reinit = function() {
            Data_ParticipantItem.__super__.reinit.apply(this, arguments);
            return this.clearEventIds()
        };
        Data_ParticipantItem.prototype.addEventId = function(eventId) {
            return this._eventIds[eventId] = 1
        };
        Data_ParticipantItem.prototype.clearEventIds = function() {
            return this._eventIds = {}
        };
        Data_ParticipantItem.prototype.getEventIds = function() {
            return this._eventIds
        };
        Data_ParticipantItem.prototype.getShortName = function() {
            return this.getValue(1)
        };
        Data_ParticipantItem.prototype.getCountryName = function() {
            return this.getValue(2)
        };
        Data_ParticipantItem.prototype.getMobileImage = function() {
            return this.getValue(3)
        };
        Data_ParticipantItem.prototype.getSportId = function() {
            var value;
            value = this.getValue(4).split(';');
            value = value.map(function(val) {
                if (!val || isNaN(val)) {
                    return 0
                } else {
                    return parseInt(val)
                }
            });
            if (value.length === 1) {
                return value[0]
            } else {
                return value
            }
        };
        Data_ParticipantItem.prototype.getCountryId = function() {
            var value;
            value = this.getValue(5).split(';');
            value = value.map(function(val) {
                if (!val || isNaN(val)) {
                    return 0
                } else {
                    return parseInt(val)
                }
            });
            if (value.length === 1) {
                return value[0]
            } else {
                return value
            }
        };
        Data_ParticipantItem.prototype.getUrl = function() {
            return this.getValue(6)
        };
        Data_ParticipantItem.prototype.getTableImage = function() {
            return this.getValue(7)
        };
        Data_ParticipantItem.prototype.getTitle = function() {
            return this.util.String.toUpper(this.getCountryName()) + ': ' + this.getShortName()
        };
        return Data_ParticipantItem
    })(cjs.dic.getClass('Data_Item'));
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Data_ParticipantItem', Data_ParticipantItem, ['dataParticipantItem'])
}).call(this);
(function() {
    var Generator;
    Generator = (function() {
        Generator.STAGE_DEFAULT = 1;
        Generator.STAGE_MYTEAMS = 2;

        function Generator() {
            this._stage = Generator.STAGE_DEFAULT
        }
        Generator.prototype.getStage = function() {
            return this._stage
        };
        Generator.prototype.setStage = function(_stage) {
            this._stage = _stage
        };
        return Generator
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Content_Generator', Generator, ['contentGenerator'])
}).call(this);
(function() {
    var Age;
    Age = function(utilTrans) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                return currentEventItem.getAge()
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'age'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_Age', Age)
}).call(this);
(function() {
    var Distance;
    Distance = function(utilTrans) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                return currentEventItem.getDistance()
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'distance'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_Distance', Distance)
}).call(this);
(function() {
    var Gap;
    Gap = function(utilTrans, utilSport, utilList) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var content, currentDistance, currentDistanceHtml, lapDistance, rank, sportId, value;
                sportId = currentEventItem.getSportId();
                rank = currentEventItem.getStatsResultsRank();
                currentDistanceHtml = null;
                if (utilSport.inGroup(sportId, utilList.getSports().WINTER_SPORTS) && currentEventItem.getStage() === utilList.getEventStages().LIVE) {
                    currentDistance = currentEventItem.getCurrentDistance();
                    if (currentDistance && rank === 1) {
                        currentDistanceHtml = '<span class="current-distance">' + currentDistance + ' ' + utilTrans('TRANS_WINTER_SPORTS_KM') + '</span>'
                    }
                }
                content = '';
                lapDistance = currentEventItem.getStatsResultsLapDistance();
                if (lapDistance > 0 || lapDistance < 0) {
                    content += lapDistance > 0 ? "+" + lapDistance : lapDistance;
                    content += ' ' + utilSport.getRacingSportShortLapsLabel(sportId)
                } else {
                    value = currentEventItem.getStatsResultsGap();
                    if ((value != null) && value !== '' && rank !== 1) {
                        content += value > 0 || value.replace(/:/g, '') >= 0 ? '+' + value : value
                    }
                }
                if (currentDistanceHtml) {
                    return currentDistanceHtml + '<span>' + content + '</span>'
                } else {
                    return content
                }
            },
            getClass: function(currentEventItem, historyDataItem) {
                var currentDistance, isLive, rank, retClass, sportId;
                retClass = 'stats-results-gap';
                sportId = currentEventItem.getSportId();
                isLive = currentEventItem.getStageType() === utilList.getEventStageTypes().LIVE;
                if (sportId === utilList.getSports().WINTER_SPORTS_ALPINE_SKIING) {
                    if (isLive && !currentEventItem.isStatsResultsCutOff()) {
                        retClass += ' playing'
                    }
                } else if (currentEventItem.getStatsResultsOnTrack()) {
                    retClass += ' playing'
                }
                currentDistance = currentEventItem.getCurrentDistance();
                rank = currentEventItem.getStatsResultsRank();
                if (utilSport.inGroup(currentEventItem.getSportId(), utilList.getSports().WINTER_SPORTS) && isLive) {
                    if (currentDistance && rank === 1) {
                        retClass += ' current-distance'
                    }
                }
                if (!currentDistance && rank === 1) {
                    retClass += ' no-highlight'
                }
                return retClass
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_Gap', Gap)
}).call(this);
(function() {
    var Grid;
    Grid = function(utilTrans) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                return currentEventItem.getValue('NE')
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'grid'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_Grid', Grid)
}).call(this);
(function() {
    var JumpCount;
    JumpCount = function(utilTrans) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                return currentEventItem.getStatsResultsJumpCount()
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'stats-results-jump-count'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_JumpCount', JumpCount)
}).call(this);
(function() {
    var JumpRound1;
    JumpRound1 = function(utilTrans, helperTranslateParticipantStatus) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var participantStatusId;
                participantStatusId = currentEventItem.getStatsResultsStopReasonRound1();
                if (participantStatusId) {
                    return helperTranslateParticipantStatus.translateShort(participantStatusId)
                } else {
                    return currentEventItem.getStatsResultsJumpRound1()
                }
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'stats-results-jump-round-1'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_JumpRound1', JumpRound1)
}).call(this);
(function() {
    var JumpRound2;
    JumpRound2 = function(utilTrans, helperTranslateParticipantStatus) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var participantStatusId;
                participantStatusId = currentEventItem.getStatsResultsStopReasonRound2();
                if (participantStatusId) {
                    return helperTranslateParticipantStatus.translateShort(participantStatusId)
                } else {
                    return currentEventItem.getStatsResultsJumpRound2()
                }
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'stats-results-jump-round-2'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_JumpRound2', JumpRound2)
}).call(this);
(function() {
    var Laps;
    Laps = function(utilTrans) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                return currentEventItem.getValue('NC')
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'laps'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_Laps', Laps)
}).call(this);
(function() {
    var LapTime;
    LapTime = function(utilTrans, utilSport, utilEnviroment, utilList) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var content, currentDistance, currentDistanceHtml, gap, lapTime, lapsDistance, lapsLabel, leagueItem, rank, sportId;
                rank = currentEventItem.getRank();
                leagueItem = currentEventItem.getLeague();
                sportId = currentEventItem.getSportId();
                if (currentEventItem.getParticipantStatus()) {
                    return this._getTranslatedParticipantStatus(currentEventItem)
                }
                currentDistanceHtml = null;
                if (sportId === utilList.getSports().CYCLING && currentEventItem.getStage() === utilList.getEventStages().LIVE) {
                    currentDistance = currentEventItem.getCurrentDistance();
                    if ((currentDistance != null) && rank === 1) {
                        currentDistanceHtml = '<span class="current-distance">' + currentDistance + ' ' + utilTrans('TRANS_CYCLING_KM') + '</span>'
                    }
                }
                content = '';
                lapsDistance = currentEventItem.getLapsDistance();
                if ((lapsDistance != null) && lapsDistance > 0 && leagueItem.isRaceTypeRace()) {
                    content += "+" + lapsDistance;
                    lapsLabel = utilSport.getRacingSportShortLapsLabel(sportId);
                    if (lapsLabel) {
                        content += " " + lapsLabel
                    }
                } else {
                    lapTime = currentEventItem.getLapTime();
                    gap = currentEventItem.getGap();
                    if ((lapTime != null) && rank === 1) {
                        content += lapTime
                    } else if ((gap != null) && gap !== '' && (sportId === utilList.getSports().CYCLING || rank !== 1)) {
                        content += gap
                    } else {
                        if (lapTime != null) {
                            content += lapTime
                        }
                    }
                }
                if (currentDistanceHtml) {
                    return currentDistanceHtml + '<span>' + content + '</span>'
                } else {
                    return content
                }
            },
            getClass: function(currentEventItem, historyDataItem) {
                var content, retClass;
                retClass = 'lap-time';
                if (currentEventItem.isParticipantLive()) {
                    retClass += ' playing'
                }
                content = currentEventItem.getLapTime();
                if (currentEventItem.getSportId() !== utilList.getSports().CYCLING) {
                    if (currentEventItem.getRank() === 1 && ((content == null) || content === '')) {
                        retClass += ' leader'
                    }
                }
                if (currentEventItem.getSportId() === utilList.getSports().CYCLING && currentEventItem.getStage() === utilList.getEventStages().LIVE) {
                    if ((currentEventItem.getCurrentDistance() != null) && currentEventItem.getRank() === 1) {
                        retClass += ' current-distance'
                    }
                }
                return retClass
            },
            _getTranslatedParticipantStatus: function(currentEventItem) {
                var status, transKey;
                if (currentEventItem.getParticipantStatusSubType()) {
                    return this._getTranslatedParticipantStatusSubType(currentEventItem)
                }
                status = currentEventItem.getParticipantStatus();
                transKey = (function() {
                    switch (parseInt(status)) {
                        case 280:
                            return 'TRANS_DC_SHORT_CUT_OFF';
                        case 281:
                            return 'TRANS_DC_SHORT_DISQUALIFIED';
                        case 282:
                            return 'TRANS_DC_SHORT_DID_NOT_START';
                        case 283:
                            return 'TRANS_DC_SHORT_DID_NOT_FINISH';
                        case 284:
                            return 'TRANS_DC_SHORT_MADE_CUT_DID_NOT_FINISH';
                        case 285:
                            return 'TRANS_DC_SHORT_WITHDRAWN';
                        case 291:
                            return 'TRANS_DC_SHORT_RETIRED';
                        case 294:
                            return 'TRANS_DC_SHORT_DID_NOT_CLASSIFIED';
                        case 300:
                            return 'TRANS_DC_SHORT_NOT_QUALIFIED';
                        case 301:
                            return 'TRANS_DC_SHORT_OWNER_POINTS'
                    }
                })();
                return utilTrans(transKey)
            },
            _getTranslatedParticipantStatusSubType: function(currentEventItem) {
                var status;
                status = currentEventItem.getParticipantStatusSubType();
                return utilTrans('TRANS_DC_INCIDENT_SUBTYPE_' + status)
            },
            _getWinnerContent: function(currentEventItem, content) {
                if (!currentEventItem.isScheduled()) {
                    if (currentEventItem.isParticipantLive() || currentEventItem.getStage() !== utilEnviroment.getConstants().event_stage.FINISHED) {
                        content = ''
                    } else if (currentEventItem.wasParticipantLive()) {
                        content = ''
                    }
                }
                return content
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_LapTime', LapTime)
}).call(this);
(function() {
    var Number;
    Number = function(utilTrans) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                return currentEventItem.getValue('NB')
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'number'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_Number', Number)
}).call(this);
(function() {
    var ParToday;
    ParToday = function(util_list, Helper_Formatter) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var parToday;
                if (currentEventItem.isAnyRoundOverAfterTwo() && currentEventItem.getParticipantStatus()) {
                    return ""
                }
                parToday = currentEventItem.getParToday();
                if (parToday > 0) {
                    parToday = '+' + parToday
                }
                return parToday
            },
            getClass: function(currentEventItem, historyDataItem) {
                var eventStage, eventStages, retClass;
                retClass = '';
                eventStages = util_list.getEventStages();
                eventStage = currentEventItem.getStage();
                if (currentEventItem.getParticipantStatus()) {
                    retClass += ' player_cut_off'
                }
                if ((currentEventItem.isLive() || eventStage === eventStages.PENDING) && currentEventItem.getParticipantHoleInfo() !== "F" && !(/^[0-9]{3,}$/i.test(currentEventItem.getParticipantHoleInfo()))) {
                    retClass += ' playing'
                }
                return retClass
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_ParToday', ParToday)
}).call(this);
(function() {
    var Pitstops;
    Pitstops = function(utilTrans) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                return currentEventItem.getValue('NF')
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'pitstops'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_Pitstops', Pitstops)
}).call(this);
(function() {
    var Points;
    Points = function(utilTrans, utilList) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                return currentEventItem.getStatsResultsPoints()
            },
            getClass: function(currentEventItem, historyDataItem) {
                var isLive, retClass, sportId;
                retClass = 'stats-results-points';
                sportId = currentEventItem.getSportId();
                isLive = currentEventItem.getStageType() === utilList.getEventStageTypes().LIVE;
                if (sportId === utilList.getSports().WINTER_SPORTS_SKI_JUMPING && isLive && !currentEventItem.isStatsResultsCutOff()) {
                    retClass += ' playing'
                }
                return retClass
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_Points', Points)
}).call(this);
(function() {
    var PointsRound1;
    PointsRound1 = function(utilTrans) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                return currentEventItem.getStatsResultsPointsRound1()
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'stats-results-points-round-1'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_PointsRound1', PointsRound1)
}).call(this);
(function() {
    var PointsRound2;
    PointsRound2 = function(utilTrans) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                return currentEventItem.getStatsResultsPointsRound2()
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'stats-results-points-round-2'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_PointsRound2', PointsRound2)
}).call(this);
(function() {
    var Rank;
    Rank = function(utilTrans, utilEnviroment, utilSport, utilList, contentGenerator, helperTranslateParticipantStatus) {
        var eventIncidentTypes, eventStages, sports;
        sports = utilEnviroment.getConstants().sport;
        eventStages = utilEnviroment.getConstants().event_stage;
        eventIncidentTypes = utilEnviroment.getConstants().event_incident_type;
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var currentParticipantStatus, currentRank, rank, trans;
                if (currentEventItem.isScheduled() && !(currentEventItem.getSportId() === sports.GOLF && currentEventItem.getStage() === eventStages.DELAYED)) {
                    if (currentEventItem.getSportId() === sports.GOLF && contentGenerator.getStage() === contentGenerator.constructor.STAGE_MYTEAMS) {
                        return currentEventItem.getStartUTimeDate()
                    } else if (currentEventItem.getSportId() === sports.HORSE_RACING && currentEventItem.getParticipantStatus() === eventIncidentTypes.NON_RUNNER) {
                        return utilTrans('TRANS_DC_SHORT_NON_RUNNER')
                    } else {
                        return ''
                    }
                }
                rank = '';
                if (utilSport.inGroup(currentEventItem.getSportId(), sports.WINTER_SPORTS)) {
                    currentRank = currentEventItem.getStatsResultsRank();
                    currentParticipantStatus = currentEventItem.getStatsResultsStopReason()
                } else {
                    currentRank = currentEventItem.getRank();
                    currentParticipantStatus = currentEventItem.getParticipantStatus()
                }
                if (currentParticipantStatus) {
                    trans = helperTranslateParticipantStatus.translateShort(currentParticipantStatus);
                    if (trans != null) {
                        rank = trans
                    }
                } else if (currentRank && (currentEventItem.getSportId() !== sports.GOLF || currentEventItem.isParticipantLive() || currentEventItem.wasParticipantLive() || currentEventItem.getStage() === eventStages.DELAYED)) {
                    rank = currentRank;
                    if (currentEventItem.getSportId() === sports.GOLF) {
                        if (currentEventItem.getRankIsTied()) {
                            rank = 'T' + rank
                        }
                    } else {
                        rank = rank + '.'
                    }
                }
                return rank
            },
            getClass: function(currentEventItem, historyDataItem) {
                var currentParticipantStatus, currentRank, displayPosition, eventStageLive, historyRank, isCurrentEventStageLive, isHistoryEventStageLive, retClass;
                if (utilSport.inGroup(currentEventItem.getSportId(), sports.WINTER_SPORTS)) {
                    currentRank = currentEventItem.getStatsResultsRank();
                    historyRank = historyDataItem.getStatsResults(utilList.getStatsDataTypes().RANK);
                    if (!historyRank) {
                        currentRank = currentEventItem.getStatsResultsSortKey();
                        historyRank = historyDataItem.getStatsResults(utilList.getStatsDataTypes().EVENT_PARTICIPANT_SORT_KEY)
                    }
                    currentParticipantStatus = currentEventItem.getStatsResultsStopReason();
                    eventStageLive = utilList.getEventStages().LIVE;
                    isCurrentEventStageLive = currentEventItem.getStageType() === eventStageLive;
                    isHistoryEventStageLive = historyDataItem.getValue('AB') === eventStageLive;
                    displayPosition = isCurrentEventStageLive || isHistoryEventStageLive
                } else {
                    currentRank = currentEventItem.getRank();
                    historyRank = historyDataItem.getValue('WS');
                    currentParticipantStatus = currentEventItem.getParticipantStatus();
                    displayPosition = currentEventItem.isParticipantLive() || currentEventItem.wasParticipantLive()
                }
                retClass = '';
                if (currentParticipantStatus) {
                    retClass = 'player_cut_off'
                }
                if (!currentParticipantStatus && historyRank !== null && displayPosition) {
                    if (currentRank > historyRank) {
                        retClass += 'position-up'
                    }
                    if (currentRank < historyRank) {
                        retClass += 'position-down'
                    }
                }
                return retClass
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_Rank', Rank)
}).call(this);
(function() {
    var RawScoreHome;
    RawScoreHome = function(util_list, Helper_Formatter) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var eventHomeScore, eventSportName, eventStage, eventStages, score;
                score = '-';
                eventStages = util_list.getEventStages();
                eventStage = currentEventItem.getStage();
                eventHomeScore = currentEventItem.getHomeScore();
                eventSportName = currentEventItem.getSportName();
                if (eventHomeScore === '') {
                    return score
                }
                if (currentEventItem.isLive() || (currentEventItem.isFinished() && (eventStage !== eventStages.POSTPONED && eventStage !== eventStages.CANCELED)) || eventStage === eventStages.TO_FINISH) {
                    if (!(eventHomeScore === 0 && !currentEventItem.isGoallessDraw() && eventStage !== eventStages.RETIRED)) {
                        score = eventHomeScore
                    }
                }
                if (eventSportName === 'aussie-rules') {
                    score = Helper_Formatter.getParsedMultiScoreWithTitle(score)
                }
                return score
            },
            getClass: function(currentEventItem, historyDataItem) {
                var eventStage, eventStages, retClass;
                retClass = '';
                eventStages = util_list.getEventStages();
                eventStage = currentEventItem.getStage();
                if (currentEventItem.isLive() || currentEventItem.isFinished()) {
                    retClass = 'bold';
                    if (currentEventItem.isLive() || eventStage === eventStages.PENDING) {
                        retClass += ' playing'
                    }
                }
                if (currentEventItem.getSportName() === 'golf') {
                    if (currentEventItem.getParticipantStatus()) {
                        retClass += ' player_cut_off'
                    }
                }
                return retClass
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_RawScoreHome', RawScoreHome)
}).call(this);
(function() {
    var ScoreAway;
    ScoreAway = function(util_list, Helper_Formatter) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var eventAwayScore, eventHomeScore, eventSportName, eventStage, eventStages, score;
                score = '-';
                eventStages = util_list.getEventStages();
                eventStage = currentEventItem.getStage();
                eventHomeScore = currentEventItem.getHomeScore();
                eventAwayScore = currentEventItem.getAwayScore();
                eventSportName = currentEventItem.getSportName();
                if (eventAwayScore === '') {
                    return score
                }
                if (currentEventItem.isLive() || (currentEventItem.isFinished() && (eventStage !== eventStages.POSTPONED && eventStage !== eventStages.CANCELED)) || eventStage === eventStages.TO_FINISH) {
                    if (!(eventHomeScore === 0 && eventAwayScore === 0 && !currentEventItem.isGoallessDraw() && eventStage !== eventStages.RETIRED)) {
                        score = eventAwayScore
                    }
                }
                if (eventSportName === 'aussie-rules') {
                    score = Helper_Formatter.getParsedMultiScoreWithTitle(score)
                }
                return score
            },
            getClass: function(currentEventItem, historyDataItem) {
                var eventStage, eventStages, retClass;
                retClass = '';
                eventStages = util_list.getEventStages();
                eventStage = currentEventItem.getStage();
                if (currentEventItem.isLive() || currentEventItem.isFinished()) {
                    retClass = 'bold';
                    if (currentEventItem.isLive() || eventStage === eventStages.PENDING) {
                        retClass += ' playing'
                    }
                }
                if (currentEventItem.getSportName() === 'golf') {
                    if (currentEventItem.getParticipantStatus()) {
                        retClass += ' player_cut_off'
                    }
                }
                return retClass
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_ScoreAway', ScoreAway)
}).call(this);
(function() {
    var ScoreDuel;
    ScoreDuel = function(utilSport, utilList) {
        return {
            getContent: function(currentEventItem) {
                var eventStage, eventStages, isProperlyFinished, score, sportId;
                sportId = currentEventItem.getSportId();
                eventStage = currentEventItem.getStage();
                eventStages = utilList.getEventStages();
                isProperlyFinished = currentEventItem.isFinished() && (eventStage !== eventStages.POSTPONED && eventStage !== eventStages.CANCELED);
                score = '-';
                if (utilSport.isRacingSport(sportId) && isProperlyFinished) {
                    score = currentEventItem.getHomeScore() + ' - ' + currentEventItem.getAwayScore()
                }
                return score
            },
            getClass: function(currentEventItem) {
                if (currentEventItem.isFinished()) {
                    return 'bold'
                } else {
                    return ''
                }
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_ScoreDuel', ScoreDuel)
}).call(this);
(function() {
    var ServeAway;
    ServeAway = function(utilTrans, utilEnviroment, utilList) {
        var sports;
        sports = utilList.getSports();
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var eventHasAlreadyStarted, isPesapalloPenalties, isScheduledServiceSport, showOpposite, sportId, sportName;
                sportId = currentEventItem.getSportId();
                sportName = utilEnviroment.getSportListById()[sportId];
                showOpposite = currentEventItem.hasHomeService() && (sportId === sports.BASEBALL || sportId === sports.PESAPALLO || sportId === sports.CRICKET);
                isPesapalloPenalties = sportId === sports.PESAPALLO && currentEventItem.isPenalties();
                eventHasAlreadyStarted = currentEventItem.isLive() || currentEventItem.isInterrupted() || !currentEventItem.isTotallyFinished();
                isScheduledServiceSport = (sportId === sports.TENNIS || sportId === sports.CRICKET || sportId === sports.DARTS || sportId === sports.BASEBALL) && currentEventItem.isScheduled();
                if ((currentEventItem.hasAwayService() || showOpposite) && !isPesapalloPenalties && (eventHasAlreadyStarted || isScheduledServiceSport)) {
                    return '<span class="icons"><span class="' + sportName + '-serve' + (showOpposite ? '-opposite' : '') + '"></span></span>'
                } else {
                    return '&nbsp;'
                }
            },
            getClass: function(currentEventItem, historyDataItem) {
                if (currentEventItem.isLive()) {
                    return 'playing'
                } else {
                    return ''
                }
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_ServeAway', ServeAway)
}).call(this);
(function() {
    var ServeHome;
    ServeHome = function(utilTrans, utilEnviroment, utilList) {
        var sports;
        sports = utilList.getSports();
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var eventHasAlreadyStarted, isPesapalloPenalties, isScheduledServiceSport, showOpposite, sportId, sportName;
                sportId = currentEventItem.getSportId();
                sportName = utilEnviroment.getSportListById()[sportId];
                showOpposite = currentEventItem.hasAwayService() && (sportId === sports.BASEBALL || sportId === sports.PESAPALLO || sportId === sports.CRICKET);
                isPesapalloPenalties = sportId === sports.PESAPALLO && currentEventItem.isPenalties();
                eventHasAlreadyStarted = currentEventItem.isLive() || currentEventItem.isInterrupted() || !currentEventItem.isTotallyFinished();
                isScheduledServiceSport = (sportId === sports.TENNIS || sportId === sports.CRICKET || sportId === sports.DARTS || sportId === sports.BASEBALL) && currentEventItem.isScheduled();
                if ((currentEventItem.hasHomeService() || showOpposite) && !isPesapalloPenalties && (eventHasAlreadyStarted || isScheduledServiceSport)) {
                    return '<span class="icons"><span class="' + sportName + '-serve' + (showOpposite ? '-opposite' : '') + '"></span></span>'
                } else {
                    return '&nbsp;'
                }
            },
            getClass: function(currentEventItem, historyDataItem) {
                if (currentEventItem.isLive()) {
                    return 'playing'
                } else {
                    return ''
                }
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_ServeHome', ServeHome)
}).call(this);
(function() {
    var Shooting;
    Shooting = function(utilTrans) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var missedShot, penaltyLap, result;
                penaltyLap = currentEventItem.getStatsResultsPenaltyLap();
                missedShot = currentEventItem.getStatsResultsMissedShot();
                result = [];
                if (penaltyLap) {
                    result.push(penaltyLap)
                }
                if (missedShot) {
                    result.push(missedShot)
                }
                return result.join(' + ')
            },
            getClass: function(currentEventItem, historyDataItem) {
                var retClass;
                retClass = 'stats-results-shooting';
                if (currentEventItem.getStatsResultsOnTrack()) {
                    retClass += ' playing'
                }
                return retClass
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_Shooting', Shooting)
}).call(this);
(function() {
    var StartingPrice;
    StartingPrice = function(utilTrans) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                return currentEventItem.getStartingPrice()
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'starting-price'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_StartingPrice', StartingPrice)
}).call(this);
(function() {
    var Team;
    Team = function(utilTrans) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                return '<span class="padl">' + currentEventItem.getValue('NA') + '</span>'
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'team'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_Team', Team)
}).call(this);
(function() {
    var Time;
    Time = function(utilTrans, utilList, helperTranslateParticipantStatus) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var participantStatusId, participantStatusIdRound1, participantStatusIdRound2;
                participantStatusId = currentEventItem.getStatsResultsStopReason();
                if (participantStatusId) {
                    participantStatusIdRound1 = currentEventItem.getStatsResultsStopReasonRound1();
                    participantStatusIdRound2 = currentEventItem.getStatsResultsStopReasonRound2();
                    if ((participantStatusIdRound1 != null) || (participantStatusIdRound2 != null)) {
                        return ''
                    } else {
                        return helperTranslateParticipantStatus.translateShort(participantStatusId)
                    }
                } else {
                    return currentEventItem.getStatsResultsTime()
                }
            },
            getClass: function(currentEventItem, historyDataItem) {
                var isLive, retClass, sportId;
                retClass = 'stats-results-time';
                sportId = currentEventItem.getSportId();
                isLive = currentEventItem.getStageType() === utilList.getEventStageTypes().LIVE;
                if (sportId === utilList.getSports().WINTER_SPORTS_ALPINE_SKIING) {
                    if (isLive && !currentEventItem.isStatsResultsCutOff()) {
                        retClass += ' playing'
                    }
                } else if (currentEventItem.getStatsResultsOnTrack()) {
                    retClass += ' playing'
                }
                return retClass
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_Time', Time)
}).call(this);
(function() {
    var TimeRound1;
    TimeRound1 = function(utilTrans, helperTranslateParticipantStatus) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var participantStatusId;
                participantStatusId = currentEventItem.getStatsResultsStopReasonRound1();
                if (participantStatusId != null) {
                    return helperTranslateParticipantStatus.translateShort(participantStatusId)
                } else {
                    return currentEventItem.getStatsResultsTimeRound1()
                }
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'stats-results-time-round-1'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_TimeRound1', TimeRound1)
}).call(this);
(function() {
    var TimeRound2;
    TimeRound2 = function(utilTrans, helperTranslateParticipantStatus) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var participantStatusId;
                participantStatusId = currentEventItem.getStatsResultsStopReasonRound2();
                if (participantStatusId != null) {
                    return helperTranslateParticipantStatus.translateShort(participantStatusId)
                } else {
                    return currentEventItem.getStatsResultsTimeRound2()
                }
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'stats-results-time-round-2'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_TimeRound2', TimeRound2)
}).call(this);
(function() {
    var TournamentTemplateAcronym;
    TournamentTemplateAcronym = function(utilTrans) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                var countryName, html, leagueItem;
                leagueItem = currentEventItem.getLeague();
                countryName = leagueItem.getCountryName();
                html = "<span class=\"flag fl_" + (leagueItem.getCountryId()) + "\" title=\"" + countryName + "\"></span>\n<a href=\"" + (leagueItem.getUrl()) + "\"><span title=\"" + (leagueItem.getTournamentTemplateName()) + " (" + countryName + ")\">" + (leagueItem.getTournamentTemplateAcronym()) + "</span></a>";
                return html.replace('\n', '')
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'acronym'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_TournamentTemplateAcronym', TournamentTemplateAcronym)
}).call(this);
(function() {
    var Weight;
    Weight = function(utilTrans) {
        return {
            getContent: function(currentEventItem, historyDataItem) {
                return currentEventItem.getWeight()
            },
            getClass: function(currentEventItem, historyDataItem) {
                return 'weight'
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Template_CellContent_Weight', Weight)
}).call(this);
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['tabs/tabs.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            return this.escapeExpression(this.lambda((depth0 != null ? depth0.tabs_class : depth0), depth0))
        },
        "3": function(depth0, helpers, partials, data) {
            return "	<ul class=\"ifmenu\">\n		<li class=\"selected\"><span><strong>" + this.escapeExpression(this.lambda((depth0 != null ? depth0.tabs_title : depth0), depth0)) + "</strong></span></li>\n	</ul>\n"
        },
        "5": function(depth0, helpers, partials, data) {
            var stack1, helper, alias1 = this.escapeExpression;
            return ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.next_row : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(6, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "				<li " + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.stage_id : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(8, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "\n					" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.tab_id : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(10, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "\n					class=\"li" + alias1(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "index",
                    "hash": {},
                    "data": data
                }) : helper))) + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.tab_class : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(12, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.selected : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(14, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + ((stack1 = helpers['if'].call(depth0, (data && data.first), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(16, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + ((stack1 = helpers['if'].call(depth0, (data && data.last), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(18, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + " \">\n						<span><a " + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.link_class : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(20, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + ">" + alias1(this.lambda((depth0 != null ? depth0.tab_title : depth0), depth0)) + "</a></span>\n				</li>\n"
        },
        "6": function(depth0, helpers, partials, data) {
            return "                    </ul><ul class=\"ifmenu next-row\">\n"
        },
        "8": function(depth0, helpers, partials, data) {
            return " data-stage-id=\"" + this.escapeExpression(this.lambda((depth0 != null ? depth0.stage_id : depth0), depth0)) + "\" "
        },
        "10": function(depth0, helpers, partials, data) {
            return " id=\"" + this.escapeExpression(this.lambda((depth0 != null ? depth0.tab_id : depth0), depth0)) + "\""
        },
        "12": function(depth0, helpers, partials, data) {
            return " " + this.escapeExpression(this.lambda((depth0 != null ? depth0.tab_class : depth0), depth0))
        },
        "14": function(depth0, helpers, partials, data) {
            return " selected"
        },
        "16": function(depth0, helpers, partials, data) {
            return " first"
        },
        "18": function(depth0, helpers, partials, data) {
            return " last"
        },
        "20": function(depth0, helpers, partials, data) {
            return " class=\"" + this.escapeExpression(this.lambda((depth0 != null ? depth0.link_class : depth0), depth0)) + "\""
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;
            return "<div id=\"tabs\" class=\"" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.tabs_class : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(1, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "\">\n" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.tabs_title : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(3, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "	<div class=\"submenu\">\n		<ul class=\"ifmenu\">\n" + ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tabs : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(5, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "		</ul>\n		<div class=\"color-spacer\"></div>\n	</div>\n</div>"
        },
        "useData": true
    })
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['player-profile/last-matches-rows.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;
            return "<tr class=\"event-row\" id=\"" + alias2(alias1((depth0 != null ? depth0.eventId : depth0), depth0)) + "\" data-hp-url=\"" + alias2(alias1((depth0 != null ? depth0.homeParticipantUrl : depth0), depth0)) + "\" data-ap-url=\"" + alias2(alias1((depth0 != null ? depth0.awayParticipantUrl : depth0), depth0)) + "\" data-season=\"" + alias2(alias1((depth0 != null ? depth0.tournamentSeason : depth0), depth0)) + "\">\n	<td class=\"event-start-time\">" + alias2(alias1((depth0 != null ? depth0.eventStartTime : depth0), depth0)) + "</td>\n	<td class=\"tournament-short-name acronym\">\n		" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.flagId : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "<a href=\"" + alias2(alias1((depth0 != null ? depth0.tournamentUrl : depth0), depth0)) + "\"><span title=\"" + alias2(alias1((depth0 != null ? depth0.tournamentTitle : depth0), depth0)) + "\">" + alias2(alias1((depth0 != null ? depth0.tournamentTemplateShortCode : depth0), depth0)) + "</span></a>\n	</td>\n	<td class=\"team-name" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.homeWin : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(4, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "\">" + alias2(alias1((depth0 != null ? depth0.homeParticipantName : depth0), depth0)) + "</td>\n	<td class=\"team-name" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.awayWin : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(4, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "\">" + alias2(alias1((depth0 != null ? depth0.awayParticipantName : depth0), depth0)) + "</td>\n	<td class=\"score\">\n		<span>\n			<strong>" + alias2(alias1((depth0 != null ? depth0.homeScore : depth0), depth0)) + " : " + alias2(alias1((depth0 != null ? depth0.awayScore : depth0), depth0)) + "</strong>" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.scoreFt : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(6, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "\n		</span>\n	</td>\n\n" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.stats : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(8, data, 0),
                    "inverse": this.program(11, data, 0),
                    "data": data
                })) != null ? stack1 : "") + "\n	<td class=\"winLose\"><span class=\"winLoseIcon\"><a title=\"" + alias2(alias1((depth0 != null ? depth0.winLoseTitle : depth0), depth0)) + "\" class=\"form-" + alias2(alias1((depth0 != null ? depth0.winLoseClassSuffix : depth0), depth0)) + "\"><span></span></a></span></td>\n</tr>\n"
        },
        "2": function(depth0, helpers, partials, data) {
            var alias1 = this.lambda,
                alias2 = this.escapeExpression;
            return "<span class=\"flag fl_" + alias2(alias1((depth0 != null ? depth0.flagId : depth0), depth0)) + "\" title=\"" + alias2(alias1((depth0 != null ? depth0.flagName : depth0), depth0)) + "\"></span>"
        },
        "4": function(depth0, helpers, partials, data) {
            return " win"
        },
        "6": function(depth0, helpers, partials, data) {
            return "<br/>(" + this.escapeExpression(this.lambda((depth0 != null ? depth0.scoreFt : depth0), depth0)) + ")"
        },
        "8": function(depth0, helpers, partials, data) {
            var stack1;
            return ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.stats : depth0), {
                "name": "each",
                "hash": {},
                "fn": this.program(9, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "")
        },
        "9": function(depth0, helpers, partials, data) {
            var alias1 = this.lambda,
                alias2 = this.escapeExpression;
            return "			<td class=\"match-info " + alias2(alias1((depth0 != null ? depth0.type : depth0), depth0)) + "\">" + alias2(alias1((depth0 != null ? depth0.value : depth0), depth0)) + "</td>\n"
        },
        "11": function(depth0, helpers, partials, data) {
            var stack1;
            return ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.absenceCategory : depth0), {
                "name": "if",
                "hash": {},
                "fn": this.program(12, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "")
        },
        "12": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;
            return "		<td colspan=\"4\" >\n			<span title=\"" + alias2(alias1((depth0 != null ? depth0.absenceTypeText : depth0), depth0)) + "\">" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.absenceIcon : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(13, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + alias2(alias1((depth0 != null ? depth0.absenceCategory : depth0), depth0)) + "</span>\n		</td>\n"
        },
        "13": function(depth0, helpers, partials, data) {
            return "<span class=\"absence " + this.escapeExpression(this.lambda((depth0 != null ? depth0.absenceIcon : depth0), depth0)) + "\"></span>"
        },
        "15": function(depth0, helpers, partials, data) {
            var helper;
            return "	<tr class=\"show-more-last-matches\"><td colspan=\"10\"><span>" + this.escapeExpression(((helper = (helper = helpers.showMore || (depth0 != null ? depth0.showMore : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "showMore",
                    "hash": {},
                    "data": data
                }) : helper))) + "</span></td></tr>\n"
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;
            return ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.lastMatches : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(1, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.hasMoreLastMatches : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(15, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "")
        },
        "useData": true
    })
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['odds/odds-content.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var helper;
            return "			<col width=\"" + this.escapeExpression(((helper = (helper = helpers.defaultColumnWidth || (depth0 != null ? depth0.defaultColumnWidth : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "defaultColumnWidth",
                    "hash": {},
                    "data": data
                }) : helper))) + "\">\n"
        },
        "3": function(depth0, helpers, partials, data) {
            return "			<col width=\"80\">\n"
        },
        "5": function(depth0, helpers, partials, data) {
            return " class=\"black\""
        },
        "7": function(depth0, helpers, partials, data) {
            var stack1;
            return "				<th" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.attrs : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(8, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + ">" + this.escapeExpression(this.lambda((depth0 != null ? depth0.name : depth0), depth0)) + "</th>\n"
        },
        "8": function(depth0, helpers, partials, data) {
            var stack1;
            return ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.attrs : depth0), {
                "name": "each",
                "hash": {},
                "fn": this.program(9, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "")
        },
        "9": function(depth0, helpers, partials, data) {
            var helper, alias1 = this.escapeExpression;
            return " " + alias1(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "key",
                    "hash": {},
                    "data": data
                }) : helper))) + "=\"" + alias1(this.lambda(depth0, depth0)) + "\""
        },
        "11": function(depth0, helpers, partials, data) {
            var helper;
            return "				<th>" + this.escapeExpression(((helper = (helper = helpers.bonusTitle || (depth0 != null ? depth0.bonusTitle : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "bonusTitle",
                    "hash": {},
                    "data": data
                }) : helper))) + "</th>\n"
        },
        "13": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;
            return "				<td class=\"ah ht" + alias2(alias1(((stack1 = (depth0 != null ? depth0.handicap : depth0)) != null ? stack1.type : stack1), depth0)) + "\">" + alias2(alias1(((stack1 = (depth0 != null ? depth0.handicap : depth0)) != null ? stack1.value : stack1), depth0)) + "</td>\n"
        },
        "15": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda;
            return "				<td class=\"kx " + this.escapeExpression(alias1((depth0 != null ? depth0.wrapper_class : depth0), depth0)) + "\">\n					<span" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.content_class : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(16, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "\n                         " + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.alt_text : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(18, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "\n                         " + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.eu_value : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(20, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "\n                    >" + ((stack1 = alias1((depth0 != null ? depth0.value : depth0), depth0)) != null ? stack1 : "") + "</span>\n				</td>\n"
        },
        "16": function(depth0, helpers, partials, data) {
            return " class=\"" + this.escapeExpression(this.lambda((depth0 != null ? depth0.content_class : depth0), depth0)) + "\""
        },
        "18": function(depth0, helpers, partials, data) {
            return " alt=\"" + this.escapeExpression(this.lambda((depth0 != null ? depth0.alt_text : depth0), depth0)) + "\""
        },
        "20": function(depth0, helpers, partials, data) {
            return " eu=\"" + this.escapeExpression(this.lambda((depth0 != null ? depth0.eu_value : depth0), depth0)) + "\""
        },
        "22": function(depth0, helpers, partials, data) {
            var stack1, helper;
            return "				" + ((stack1 = ((helper = (helper = helpers.mainBookmakerBonusHtml || (depth0 != null ? depth0.mainBookmakerBonusHtml : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "mainBookmakerBonusHtml",
                    "hash": {},
                    "data": data
                }) : helper))) != null ? stack1 : "") + "\n"
        },
        "24": function(depth0, helpers, partials, data) {
            var helper;
            return "				<td class=\"bonus\"><span class=\"no-pdg\">" + this.escapeExpression(((helper = (helper = helpers.emptyCellChar || (depth0 != null ? depth0.emptyCellChar : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "emptyCellChar",
                    "hash": {},
                    "data": data
                }) : helper))) + "</span></td>\n"
        },
        "26": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1, helper;
            return "			<tr class=\"even bet-and-win\">\n				<td class=\"text\">" + ((stack1 = ((helper = (helper = helpers.betAndWinText || (depth0 != null ? depth0.betAndWinText : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "betAndWinText",
                    "hash": {},
                    "data": data
                }) : helper))) != null ? stack1 : "") + "</td>\n				" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.isBettingType_ASIAN_HANDICAP : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(27, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "\n" + ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.betAndWinCells : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(29, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "			</tr>\n"
        },
        "27": function(depth0, helpers, partials, data) {
            return "<td></td>"
        },
        "29": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1;
            return "					<td class=\"amount\">\n" + ((stack1 = helpers['if'].call(depth0, depth0, {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(30, data, 0, blockParams, depths),
                    "inverse": this.program(32, data, 0, blockParams, depths),
                    "data": data
                })) != null ? stack1 : "") + "					</td>\n"
        },
        "30": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1, alias1 = this.lambda;
            return "							<a onclick=\"return !window.open(this.href)\" href=\"" + ((stack1 = alias1((depths[2] != null ? depths[2].mainBookmakerUrl : depths[2]), depth0)) != null ? stack1 : "") + "\"><span>" + ((stack1 = alias1(depth0, depth0)) != null ? stack1 : "") + "</span></a>\n"
        },
        "32": function(depth0, helpers, partials, data) {
            var stack1;
            return "							<span>" + ((stack1 = this.lambda(depth0, depth0)) != null ? stack1 : "") + "</span>\n"
        },
        "34": function(depth0, helpers, partials, data) {
            var stack1, helper;
            return "	<div class=\"bottom-block\">\n		<a href=\"#\" onclick=\"detail_tab('odds-comparison'" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.useBookmarkInOne : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(35, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "); return false;\">" + this.escapeExpression(((helper = (helper = helpers.moreBookmakersText || (depth0 != null ? depth0.moreBookmakersText : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "moreBookmakersText",
                    "hash": {},
                    "data": data
                }) : helper))) + "</a> »\n	</div>\n"
        },
        "35": function(depth0, helpers, partials, data) {
            return ", null, null, 'top'"
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1, helper, alias1 = helpers.helperMissing,
                alias2 = "function",
                alias3 = this.escapeExpression;
            return "<div class=\"odds-comparison-bookmark\">\n	<ul class=\"ifmenu\">\n		<li class=\"selected\"><span><strong>" + alias3(((helper = (helper = helpers.tabTitle || (depth0 != null ? depth0.tabTitle : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "tabTitle",
                    "hash": {},
                    "data": data
                }) : helper))) + "</strong></span></li>\n	</ul>\n</div>\n<div class=\"color-spacer odds-spacer\"></div>\n<table id=\"default-" + alias3(((helper = (helper = helpers.tableType || (depth0 != null ? depth0.tableType : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "tableType",
                    "hash": {},
                    "data": data
                }) : helper))) + "\" class=\"odds\" cellspacing=\"0\">\n	<colgroup>\n		<col>\n		<col width=\"" + alias3(((helper = (helper = helpers.defaultColumnWidth || (depth0 != null ? depth0.defaultColumnWidth : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "defaultColumnWidth",
                    "hash": {},
                    "data": data
                }) : helper))) + "\">\n" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.isNotBettingType_HOME_AWAY_DRAW_NO_BET : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(1, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "		<col width=\"" + alias3(((helper = (helper = helpers.defaultColumnWidth || (depth0 != null ? depth0.defaultColumnWidth : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "defaultColumnWidth",
                    "hash": {},
                    "data": data
                }) : helper))) + "\">\n" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.isBettingType_TWP : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(1, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.hasBonusBehindOdds : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(3, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "	</colgroup>\n	<thead>\n		<tr" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.isBettingType_1X2 : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(5, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + ">\n			<th class=\"bookmaker\">" + ((stack1 = ((helper = (helper = helpers.bookmakerTitle || (depth0 != null ? depth0.bookmakerTitle : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "bookmakerTitle",
                    "hash": {},
                    "data": data
                }) : helper))) != null ? stack1 : "") + "</th>\n" + ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tableHeader : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(7, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.hasBonusBehindOdds : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(11, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "		</tr>\n	</thead>\n	<tbody>\n		<tr class=\"odd\">\n			<td class=\"bookmaker\">" + ((stack1 = ((helper = (helper = helpers.mainBookmakerLinkHtml || (depth0 != null ? depth0.mainBookmakerLinkHtml : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "mainBookmakerLinkHtml",
                    "hash": {},
                    "data": data
                }) : helper))) != null ? stack1 : "") + "</td>\n" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.isBettingType_ASIAN_HANDICAP : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(13, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.oddsCells : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(15, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.mainBookmakerBonusHtml : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(22, data, 0, blockParams, depths),
                    "inverse": this.program(24, data, 0, blockParams, depths),
                    "data": data
                })) != null ? stack1 : "") + "		</tr>\n" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.hasBetAndWinEnabled : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(26, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "	</tbody>\n</table>\n" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.hasOddsComparison : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(34, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "<div class=\"spacer-block\">&nbsp;</div>"
        },
        "useData": true,
        "useDepths": true
    })
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['odds/prematch-odds.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            return "<div id=\"tab-prematch-odds\">\n    <div id=\"prematch-odds-content\">\n\n    </div>\n</div>"
        },
        "useData": true
    })
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['odds/live-odds.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            return "<div id=\"tab-live-odds\">\n	<div id=\"live-odds-preload\" class=\"preload-panel\"><div class=\"preload\"><span>Loading ...</span></div></div>\n	<div id=\"live-odds-content\">\n\n	</div>\n</div>"
        },
        "useData": true
    })
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['odds/live-betting-strip.tpl'] = template({
        "1": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;
            return "    <div class=\"lb-strip-" + alias2(alias1((depths[1] != null ? depths[1].version : depths[1]), depth0)) + "\">\n        <a href=\"" + alias2(alias1((depths[1] != null ? depths[1].liveBettingStripUrl : depths[1]), depth0)) + "\" target=\"_blank\">\n" + ((stack1 = helpers['if'].call(depth0, (depths[1] != null ? depths[1].version9 : depths[1]), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(2, data, 0, blockParams, depths),
                    "inverse": this.program(4, data, 0, blockParams, depths),
                    "data": data
                })) != null ? stack1 : "") + "        </a>\n    </div>\n"
        },
        "2": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda;
            return "                <div class=\"text\">\n                    <div class=\"check_in\">\n                        <span></span>\n                    </div>\n                  <span>\n                    " + ((stack1 = alias1((depth0 != null ? depth0.OH_1 : depth0), depth0)) != null ? stack1 : "") + "\n                  </span>\n                </div>\n                <div class=\"button_in\">\n                    <span>" + ((stack1 = alias1((depth0 != null ? depth0.OH_2 : depth0), depth0)) != null ? stack1 : "") + "</span>\n                </div>\n"
        },
        "4": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1;
            return ((stack1 = helpers['if'].call(depth0, (depths[2] != null ? depths[2].version7or8 : depths[2]), {
                "name": "if",
                "hash": {},
                "fn": this.program(5, data, 0, blockParams, depths),
                "inverse": this.program(7, data, 0, blockParams, depths),
                "data": data
            })) != null ? stack1 : "")
        },
        "5": function(depth0, helpers, partials, data) {
            return "                    <strong></strong>\n                    <span>\n                        <strong>" + this.escapeExpression(this.lambda((depth0 != null ? depth0.OH_1 : depth0), depth0)) + "</strong>\n                    </span>\n"
        },
        "7": function(depth0, helpers, partials, data) {
            return "                    <span>" + this.escapeExpression(this.lambda((depth0 != null ? depth0.OH_1 : depth0), depth0)) + "</span>\n"
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1;
            return ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.liveBettingStripText : depth0), {
                "name": "each",
                "hash": {},
                "fn": this.program(1, data, 0, blockParams, depths),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "")
        },
        "useData": true,
        "useDepths": true
    })
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['my-teams/my-teams-menu.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;
            return ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.items : depth0), {
                "name": "each",
                "hash": {},
                "fn": this.program(2, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "")
        },
        "2": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;
            return "		<li title=\"" + alias2(alias1((depth0 != null ? depth0.title : depth0), depth0)) + "\"" + ((stack1 = helpers['if'].call(depth0, (data && data.last), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(3, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + ">\n		" + ((stack1 = alias1((depth0 != null ? depth0.htmlToggleIcon : depth0), depth0)) != null ? stack1 : "") + "\n		<a href=\"" + alias2(alias1((depth0 != null ? depth0.url : depth0), depth0)) + "\">\n		" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.logo : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(5, data, 0),
                    "inverse": this.program(7, data, 0),
                    "data": data
                })) != null ? stack1 : "") + alias2(alias1((depth0 != null ? depth0.name : depth0), depth0)) + "</a>\n		</li>\n"
        },
        "3": function(depth0, helpers, partials, data) {
            return " class=\"last\""
        },
        "5": function(depth0, helpers, partials, data) {
            return "<span style=\"background-image: url(" + this.escapeExpression(this.lambda((depth0 != null ? depth0.logo : depth0), depth0)) + ");\" class=\"team-logo\"></span>"
        },
        "7": function(depth0, helpers, partials, data) {
            return "<span class=\"flag fl_" + this.escapeExpression(this.lambda((depth0 != null ? depth0.countryId : depth0), depth0)) + "\"></span>"
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;
            return ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.items : depth0), {
                "name": "if",
                "hash": {},
                "fn": this.program(1, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "")
        },
        "useData": true
    })
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['my-teams/my-teams-menu-empty.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1, helper;
            return "<li class=\"last myTeamInfo\">" + ((stack1 = ((helper = (helper = helpers.htmlContent || (depth0 != null ? depth0.htmlContent : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "htmlContent",
                    "hash": {},
                    "data": data
                }) : helper))) != null ? stack1 : "") + "</li>\n"
        },
        "useData": true
    })
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['my-teams/my-teams-menu-loading.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            return "<li><div class=\"menu_loading\">&nbsp;</div></li>\n"
        },
        "useData": true
    })
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['broadcast/broadcast.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;
            return "<ul class=\"ifmenu\">\n	<li class=\"selected\">\n		<span>\n			<strong>" + this.escapeExpression(this.lambda((depth0 != null ? depth0.title : depth0), depth0)) + "</strong>\n		</span>\n	</li>\n</ul>\n<div class=\"color-spacer\"></div>\n<div class=\"tv-program\">\n" + ((stack1 = this.invokePartial(partials['broadcast/live-streaming'], depth0, {
                    "name": "broadcast/live-streaming",
                    "data": data,
                    "indent": "\t",
                    "helpers": helpers,
                    "partials": partials
                })) != null ? stack1 : "") + ((stack1 = this.invokePartial(partials['broadcast/tv-channel'], depth0, {
                    "name": "broadcast/tv-channel",
                    "data": data,
                    "indent": "\t",
                    "helpers": helpers,
                    "partials": partials
                })) != null ? stack1 : "") + "	<div class=\"spacer-block\">\n		&nbsp;\n	</div>\n</div>\n\n"
        },
        "usePartial": true,
        "useData": true
    })
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['broadcast/tv-channel.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;
            return "	<table class=\"tv-channel\">\n		<thead>\n			<tr class=\"main\">\n				<th>" + this.escapeExpression(this.lambda((depth0 != null ? depth0.titleTvChannel : depth0), depth0)) + "</th>\n			</tr>\n		</thead>\n		<tbody>\n		<tr>\n			<td>\n" + ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tvChannel : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "			</td>\n		</tr>\n		</tbody>\n	</table>\n"
        },
        "2": function(depth0, helpers, partials, data) {
            var stack1;
            return ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.url : depth0), {
                "name": "if",
                "hash": {},
                "fn": this.program(3, data, 0),
                "inverse": this.program(6, data, 0),
                "data": data
            })) != null ? stack1 : "")
        },
        "3": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;
            return "						<a href=\"" + alias2(alias1((depth0 != null ? depth0.url : depth0), depth0)) + "\" onclick=\"return !window.open(this.href)\" title=\"" + alias2(alias1((depth0 != null ? depth0.name : depth0), depth0)) + "\"class=\"no-bm\">" + alias2(alias1((depth0 != null ? depth0.name : depth0), depth0)) + "</a>" + ((stack1 = helpers.unless.call(depth0, (data && data.last), {
                    "name": "unless",
                    "hash": {},
                    "fn": this.program(4, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "\n"
        },
        "4": function(depth0, helpers, partials, data) {
            return ", "
        },
        "6": function(depth0, helpers, partials, data) {
            var stack1;
            return "						" + this.escapeExpression(this.lambda((depth0 != null ? depth0.name : depth0), depth0)) + ((stack1 = helpers.unless.call(depth0, (data && data.last), {
                    "name": "unless",
                    "hash": {},
                    "fn": this.program(4, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "\n"
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;
            return ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.tvChannel : depth0), {
                "name": "if",
                "hash": {},
                "fn": this.program(1, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "")
        },
        "useData": true
    })
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['broadcast/live-streaming.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;
            return "	<table class=\"live-streaming\">\n		<thead>\n			<tr class=\"main\">\n				<th>" + this.escapeExpression(this.lambda((depth0 != null ? depth0.titleLiveStreaming : depth0), depth0)) + "</th>\n			</tr>\n		</thead>\n		<tbody>\n" + ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.liveStreaming : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") + "		</tbody>\n	</table>\n"
        },
        "2": function(depth0, helpers, partials, data) {
            var stack1, helper, options, buffer = "			<tr";
            stack1 = ((helper = (helper = helpers.isEven || (depth0 != null ? depth0.isEven : depth0)) != null ? helper : helpers.helperMissing), (options = {
                "name": "isEven",
                "hash": {},
                "fn": this.program(3, data, 0),
                "inverse": this.noop,
                "data": data
            }), (typeof helper === "function" ? helper.call(depth0, options) : helper));
            if (!helpers.isEven) {
                stack1 = helpers.blockHelperMissing.call(depth0, stack1, options)
            }
            if (stack1 != null) {
                buffer += stack1
            }
            return buffer + ">\n				<td>\n" + ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.url : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(5, data, 0),
                    "inverse": this.program(7, data, 0),
                    "data": data
                })) != null ? stack1 : "") + "				</td>\n			</tr>\n"
        },
        "3": function(depth0, helpers, partials, data) {
            return " class=\"even\""
        },
        "5": function(depth0, helpers, partials, data) {
            var alias1 = this.lambda,
                alias2 = this.escapeExpression;
            return "					<a href=\"" + alias2(alias1((depth0 != null ? depth0.url : depth0), depth0)) + "\" onclick=\"return !window.open(this.href)\" title=\"" + alias2(alias1((depth0 != null ? depth0.name : depth0), depth0)) + "\"\n					   class=\"elink\">" + alias2(alias1((depth0 != null ? depth0.name : depth0), depth0)) + "</a>\n"
        },
        "7": function(depth0, helpers, partials, data) {
            return "					" + this.escapeExpression(this.lambda((depth0 != null ? depth0.name : depth0), depth0)) + "\n"
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;
            return ((stack1 = helpers['if'].call(depth0, (depth0 != null ? depth0.liveStreaming : depth0), {
                "name": "if",
                "hash": {},
                "fn": this.program(1, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "")
        },
        "useData": true
    })
})();
cjs.HtmlTemplate = {
    "TPL_TABS_TABS": "tabs\/tabs.tpl",
    "TPL_PLAYER_PROFILE_LAST_MATCHES_ROWS": "player-profile\/last-matches-rows.tpl",
    "TPL_ODDS_ODDS_CONTENT": "odds\/odds-content.tpl",
    "TPL_ODDS_PREMATCH_ODDS": "odds\/prematch-odds.tpl",
    "TPL_ODDS_LIVE_ODDS": "odds\/live-odds.tpl",
    "TPL_ODDS_LIVE_BETTING_STRIP": "odds\/live-betting-strip.tpl",
    "TPL_MY_TEAMS_MY_TEAMS_MENU": "my-teams\/my-teams-menu.tpl",
    "TPL_MY_TEAMS_MY_TEAMS_MENU_EMPTY": "my-teams\/my-teams-menu-empty.tpl",
    "TPL_MY_TEAMS_MY_TEAMS_MENU_LOADING": "my-teams\/my-teams-menu-loading.tpl",
    "TPL_BROADCAST_BROADCAST": "broadcast\/broadcast.tpl",
    "TPL_BROADCAST_TV_CHANNEL": "broadcast\/tv-channel.tpl",
    "TPL_BROADCAST_LIVE_STREAMING": "broadcast\/live-streaming.tpl"
};
(function() {
    var HtmlTemplate;
    HtmlTemplate = (function() {
        function HtmlTemplate(Handlebars, util_enviroment, util_object, HtmlTemplate_Helpers) {
            this.Handlebars = Handlebars;
            this.util_enviroment = util_enviroment;
            this.util_object = util_object;
            this.HtmlTemplate_Helpers = HtmlTemplate_Helpers
        }
        HtmlTemplate.prototype.render = function(template, data) {
            var helperFunction, helperName, partial, partialName, partialNameNoExtension, ref, ref1, ref2;
            if (template == null) {
                throw Error("Template name must be specified.")
            }
            HtmlTemplate = this.util_enviroment.getHtmlTemplate();
            if (((ref = this.Handlebars.templates) != null ? ref[template] : void 0) == null) {
                throw Error("Template '" + template + "' does not exist.")
            }
            if (!this.util_object.keys(this.Handlebars.partials).length) {
                ref1 = this.Handlebars.templates;
                for (partialName in ref1) {
                    partial = ref1[partialName];
                    partialNameNoExtension = partialName.replace('.tpl', '');
                    this.Handlebars.registerPartial(partialNameNoExtension, partial)
                }
            }
            ref2 = this.HtmlTemplate_Helpers;
            for (helperName in ref2) {
                helperFunction = ref2[helperName];
                this.Handlebars.registerHelper(helperName, helperFunction)
            }
            return this.Handlebars.templates[template](data)
        };
        return HtmlTemplate
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('HtmlTemplate', HtmlTemplate)
}).call(this);
(function() {
    var init;
    init = function(Handlebars) {
        var Helpers;
        return Helpers = {
            isEven: function(options) {
                if ((options.data.index + 1) % 2 === 0) {
                    return options.fn(this)
                }
            },
            isOdd: function(options) {
                if ((options.data.index + 1) % 2 === 1) {
                    return options.fn(this)
                }
            },
            block: function(template, context, options) {
                var f;
                f = Handlebars.partials[template];
                if (typeof f !== 'function') {
                    throw Error("Partial '" + template + "' not found.")
                }
                return new Handlebars.SafeString(f(context))
            }
        }
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('HtmlTemplate_Helpers', init)
}).call(this);
(function() {
    var base, base1, base2, dir, log, type;
    type = function(obj) {
        var classToType, i, len, myClass, name, ref;
        if (obj === void 0 || obj === null) {
            return String(obj)
        }
        classToType = new Object();
        ref = "Boolean Number String Function Array Date RegExp".split(" ");
        for (i = 0, len = ref.length; i < len; i++) {
            name = ref[i];
            classToType["[object " + name + "]"] = name.toLowerCase()
        }
        myClass = Object.prototype.toString.call(obj);
        if (myClass in classToType) {
            return classToType[myClass]
        }
        return "object"
    };
    log = function(msg, ident) {
        if (ident == null) {
            ident = ''
        }
        if (ident !== '') {
            ident = ident + ': '
        }
        if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
            return console.log("" + ident + msg)
        }
    };
    dir = function(obj) {
        if ((typeof console !== "undefined" && console !== null ? console.dir : void 0) != null) {
            return console.dir(obj)
        }
    };
    if (typeof window !== "undefined" && window !== null) {
        if (window.cjs == null) {
            window.cjs = {}
        }
        if ((base = window.cjs).type == null) {
            base.type = type
        }
        if ((base1 = window.cjs).log == null) {
            base1.log = log
        }
        if ((base2 = window.cjs).dir == null) {
            base2.dir = dir
        }
    } else {
        if (exports.type == null) {
            exports.type = type
        }
        if (exports.log == null) {
            exports.log = log
        }
        if (exports.dir == null) {
            exports.dir = dir
        }
    }
}).call(this);
(function() {
    var Status, base, cjs;
    cjs = typeof window !== "undefined" && window !== null ? window.cjs : require('../generic/generic');
    Status = (function() {
        Status.prototype.debug = false;
        Status.prototype.ident = 'Status';

        function Status() {
            this._active = true;
            $(window).on('focus', (function(_this) {
                return function() {
                    if (Status.prototype.debug) {
                        cjs.log("Window got focus", Status.prototype.ident)
                    }
                    return _this._active = true
                }
            })(this));
            $(window).on('blur', (function(_this) {
                return function() {
                    if (Status.prototype.debug) {
                        cjs.log("Window lost focus", Status.prototype.ident)
                    }
                    return _this._active = false
                }
            })(this))
        }
        Status.prototype.isActive = function() {
            return this._active
        };
        return Status
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).Status == null) {
            base.Status = Status
        }
    } else {
        if (exports.Status == null) {
            exports.Status = Status
        }
    }
}).call(this);
(function() {
    var cjs, dev;
    cjs = typeof window !== "undefined" && window !== null ? window.cjs : require('../generic/generic');
    dev = {
        initUrl: '/x/js/core-debugger_0_0.js',
        initialized: false,
        init: function(callback) {
            callback = (function(fnc) {
                return function() {
                    if (cjs.type(fnc) === 'function') {
                        return fnc()
                    }
                }
            })(callback);
            if (this.initialized) {
                return callback()
            }
            if (this.initInternal != null) {
                callback = ((function(_this) {
                    return function(fnc) {
                        return function() {
                            return _this.initInternal(fnc)
                        }
                    }
                })(this))(callback)
            }
            this.initialized = true;
            return $.getScript(this.initUrl, function(data, textStatus, jqxhr) {
                return callback()
            })
        },
        _isDisabled: cjs.dic.get('utilBrowser').mobile() && !cjs.dic.get('utilBrowser').android(),
        _errorReportsLimit: (cjs.dic.get('utilBrowser').android() ? 5 : 20),
        _errorReportsReportedMark: '[cjs.devREPORTED]',
        _errorReportsPrint: false,
        _errorReports: [],
        reportError: function(msg, exception, onlyMessage) {
            var env, error, i, key, len, ref, report, reports, value;
            if (exception == null) {
                exception = null
            }
            if (onlyMessage == null) {
                onlyMessage = false
            }
            if (exception) {
                msg += "\n\n---- Stack trace ----\n\n" + (this.stackTrace.get(exception));
                exception.message += " " + this._errorReportsReportedMark
            }
            if (this._errorReportsPrint) {
                cerr(msg)
            }
            key = void 0;
            value = void 0;
            error = void 0;
            reports = this._errorReports;
            this._errorReports = [];
            env = this._isDisabled || onlyMessage ? "{}" : this._buildEnv();
            ref = this._errorReports;
            for (i = 0, len = ref.length; i < len; i++) {
                report = ref[i];
                reports.push(report)
            }
            this._errorReports = reports;
            reports = null;
            error = {
                msg: msg,
                env: env,
                time: cjs.Util.Date.timestamp2date('y-m-d_H-i-s')
            };
            while (this._errorReports.length && this._errorReports.length > this._errorReportsLimit) {
                this._errorReports.splice(0, 1)
            }
            return this._errorReports.push(error)
        },
        parseReportObject: function(reports) {
            var report, reportId;
            for (reportId in reports) {
                report = reports[reportId];
                eval('var tmpObj = ' + report.env);
                report.envObj = tmpObj
            }
            return reports
        },
        stackTrace: {
            get: function(exception) {
                var e, error1, stackTrace, stackTracePreMsg;
                stackTrace = [];
                stackTracePreMsg = "";
                try {
                    if (!exception) {
                        exception = this._getException()
                    } else {
                        stackTracePreMsg = "Exception message [" + exception.message + "]\n\n"
                    }
                    stackTrace = this._modes[this._mode(exception)](exception)
                } catch (error1) {
                    e = error1;
                    cdir(e);
                    stackTrace.push("Couldn't retrieve stack trace!")
                }
                return stackTracePreMsg + stackTrace.join("\n\n")
            },
            _getException: function() {
                var e, error1;
                try {
                    return this.nonexistingMethod()
                } catch (error1) {
                    e = error1;
                    return e
                }
            },
            _mode: function(e) {
                if (e["arguments"] && e.stack) {
                    return "chrome"
                } else if (e.stack) {
                    return "firefox"
                }
                return "other"
            },
            _modes: {
                chrome: function(e) {
                    var stack;
                    stack = (e.stack + "\n").replace(/^\S[^\(]+?[\n$]/g, "").replace(/^\s+(at eval )?at\s+/g, "").replace(/^([^\(]+?)([\n$])/g, "{anonymous}()@$1$2").replace(/^Object.<anonymous>\s*\(([^\)]+)\)/g, "{anonymous}()@$1").split("\n");
                    stack.pop();
                    return stack
                },
                firefox: function(e) {
                    return e.stack.replace(/(?:\n@:0)?\s+$/m, "").replace(/^[\(@]/g, "{anonymous}()@").split("\n")
                },
                other: function(ex) {
                    var anon, args, curr, fn, fnRE, maxStackSize, stack;
                    curr = arguments_.callee.caller.caller;
                    anon = "{anonymous}";
                    fnRE = /function\s*([\w\-$]+)?\s*\(/i;
                    stack = [];
                    fn = void 0;
                    args = void 0;
                    maxStackSize = 10;
                    while (curr && curr["arguments"] && stack.length < maxStackSize) {
                        fn = (fnRE.test(curr.toString()) ? RegExp.$1 || anon : anon);
                        args = Array.prototype.slice.call(curr["arguments"] || []);
                        stack[stack.length] = fn + "(" + args + ")";
                        curr = curr.caller
                    }
                    return stack
                }
            }
        },
        _timeProfiles: {},
        _arrayToObject: function(arr, deep) {
            var data, prop, ret;
            if (deep == null) {
                deep = 1
            }
            if (deep >= 3) {
                return arr
            }
            ret = $.extend({}, arr);
            for (prop in ret) {
                data = ret[prop];
                ret[prop] = $.extend({}, this._arrayToObject(data, ++deep))
            }
            return ret
        },
        _buildEnv: function() {
            var env, error1, error2, key, manualAdd, manualStringify, stringifyFunction, stringifyHTMLelement, valOfWindow, value;
            dev = null;
            if ((cjs != null ? cjs.dev : void 0) != null) {
                dev = cjs.dev;
                delete cjs.dev
            }
            try {
                manualAdd = ['cjs', 'ls', 'clientStorage', 'banners'];
                stringifyFunction = function(fnc) {
                    var e, error1;
                    try {
                        return JSON.stringify({
                            'JSON.stringify': {
                                'function': fnc.toString(),
                                'prototype': fnc.prototype
                            }
                        }, function(key, val) {
                            if (typeof val === "function") {
                                return val.toString()
                            }
                            return val
                        })
                    } catch (error1) {
                        e = error1;
                        return '"JSON.stringify - stringifyFunction error"'
                    }
                };
                stringifyHTMLelement = function(obj) {
                    var ax, e, el, error1, txt;
                    try {
                        if (!obj || !obj.tagName) {
                            return '"JSON.stringify - stringifyHTMLelement error"'
                        }
                        el = document.createElement("div");
                        el.appendChild(obj.cloneNode(false));
                        txt = el.innerHTML;
                        ax = txt.indexOf('>') + 1;
                        txt = txt.substring(0, ax) + who.innerHTML + txt.substring(ax);
                        el = null;
                        return JSON.stringify(txt)
                    } catch (error1) {
                        e = error1;
                        return '"JSON.stringify - stringifyHTMLelement error"'
                    }
                };
                manualStringify = function(obj) {
                    var e, error1, stringifiedObjects;
                    try {
                        stringifiedObjects = [];
                        return JSON.stringify(obj, function(key, val) {
                            if (typeof val === "object") {
                                if (stringifiedObjects.indexOf(val) >= 0) {
                                    return '"JSON.stringify - Already stringified"'
                                }
                                stringifiedObjects.push(val);
                                if (val instanceof HTMLElement) {
                                    return '"JSON.stringify - HTML element"'
                                }
                                if (((val != null ? val.jquery : void 0) != null) && (val.context != null)) {
                                    return '"JSON.stringify - jquery element"'
                                }
                            }
                            if (typeof val === "function") {
                                return stringifyFunction(val)
                            }
                            return val
                        })
                    } catch (error1) {
                        e = error1;
                        return '"JSON.stringify - manualStringify error"'
                    }
                };
                env = "{";
                for (key in window) {
                    try {
                        valOfWindow = window[key];
                        if (manualAdd.indexOf(key) >= 0) {
                            value = manualStringify(valOfWindow)
                        } else {
                            value = JSON.stringify(valOfWindow)
                        }
                        if (value === void 0) {
                            if (typeof valOfWindow === "function") {
                                value = stringifyFunction(valOfWindow)
                            } else {
                                value = "\"" + value + "\""
                            }
                        }
                        env += "\"" + key + "\":" + value + ","
                    } catch (error1) {
                        env += "\"" + key + "\":\"JSON.stringify - error\","
                    }
                }
                env = env.substring(0, env.length - 1);
                env += "}"
            } catch (error2) {
                env = "{}"
            }
            if (dev) {
                cjs.dev = dev
            }
            return env
        },
        setStartTime: function(timeProfileName) {
            return this._timeProfiles[timeProfileName] = (new Date()).getTime()
        },
        getRunTime: function(timeProfileName) {
            return '' + ((new Date()).getTime() - this._timeProfiles[timeProfileName]) / 1000 + ' s'
        }
    };
    if (typeof window !== "undefined" && window !== null) {
        if (window.cjs == null) {
            window.cjs = {}
        }
        window.cjs.dev = dev
    } else {
        exports.dev = dev
    }
}).call(this);
(function() {
    var Indicator, base;
    Indicator = (function() {
        function Indicator(status) {
            if (status == null) {
                status = 'off'
            }
            this.setStatus(status)
        }
        Indicator.prototype.getStatus = function() {
            return this._status
        };
        Indicator.prototype.setStatus = function(status) {
            if ((status === 'push' || status === 'ajax')) {
                return this._status = status
            } else {
                this._status = 'off';
                return this.setAttributes('')
            }
        };
        Indicator.prototype.setAttributes = function(attr) {
            return this._attributes = attr.toString()
        };
        Indicator.prototype.htmlUpdate = function(elm_obj, status, sync_attr) {
            var rendered_string;
            if (status == null) {
                status = null
            }
            if (sync_attr == null) {
                sync_attr = null
            }
            if (status !== null) {
                this.setStatus(status)
            }
            if (sync_attr !== null) {
                this.setAttributes(sync_attr)
            }
            rendered_string = this._render();
            if (elm_obj.html() === rendered_string) {
                return false
            } else {
                elm_obj.html(rendered_string);
                return true
            }
        };
        Indicator.prototype._render = function() {
            switch (this._status) {
                case 'ajax':
                    return '<span class="ajax" title="SyncA (' + this._attributes + 's)"></span>';
                case 'push':
                    return '<span class="push" title="SyncP (' + this._attributes + ')"></span>';
                default:
                    return '<span class="nosync" title="Sync Offline"></span>'
            }
        };
        return Indicator
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).SyncIndicator == null) {
            base.SyncIndicator = Indicator
        }
    } else {
        if (exports.SyncIndicator == null) {
            exports.SyncIndicator = Indicator
        }
    }
}).call(this);
(function() {
    var Push, base, cjs, bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments)
            }
        },
        indexOf = [].indexOf || function(item) {
                for (var i = 0, l = this.length; i < l; i++) {
                    if (i in this && this[i] === item) return i
                }
                return -1
            };
    cjs = typeof window !== "undefined" && window !== null ? window.cjs : require('../generic/generic');
    if (!(typeof window !== "undefined" && window !== null)) {
        cjs.dev = {
            reportError: function() {}
        }
    }
    Push = (function() {
        Push.prototype.MAX_SUBSCRIBE_MESSAGES = 20;
        Push.prototype.debug = false;
        Push.prototype.ident = 'Push';
        Push.prototype.errorReporter = null;
        Push.prototype.logMessages = false;

        function Push(domain, domain_aliases, port, ssl, _push, _jsxCompressor, fallback, util, jQuery, soundPlayerGetter, fallbackStartGetter, enable, _projectId) {
            this._push = _push;
            this._jsxCompressor = _jsxCompressor;
            this.util = util;
            this.jQuery = jQuery;
            this.soundPlayerGetter = soundPlayerGetter;
            if (fallbackStartGetter == null) {
                fallbackStartGetter = (function() {
                    return 10
                })
            }
            if (enable == null) {
                enable = true
            }
            this._projectId = _projectId != null ? _projectId : null;
            this.saveMessageLogs = bind(this.saveMessageLogs, this);
            this.statusHandler = bind(this.statusHandler, this);
            this.messageHandler = bind(this.messageHandler, this);
            this.scheduleFallback = bind(this.scheduleFallback, this);
            if (Push.prototype.debug) {
                cjs.log("Object created using domain: " + domain + " and domain aliases: " + (domain_aliases.toString()), Push.prototype.ident)
            }
            this._connected = false;
            this._connected_server = '';
            this._domain = null;
            this._domain_aliases = [];
            this._port = parseInt(port);
            this._ssl = ssl ? true : false;
            this._subscription = [];
            this._namespace = '';
            this._fallback_function = null;
            this._fallback_checker = null;
            this._fallback_started = false;
            this._reconnect_checker = null;
            this._last_server_utime = 0;
            this._fallback_start = parseInt(Number(typeof fallbackStartGetter === "function" ? fallbackStartGetter() : void 0));
            if (this._fallback_start <= 0 || isNaN(this._fallback_start)) {
                this._fallback_start = 10
            }
            this._day_delta = 0;
            this._max_reconnect_time = 15;
            this._messageLogs = [];
            this._subscriptionInfo = [];
            this._actions = {
                service: "Service",
                sys: "System",
                u_: "Update",
                g_: "Game",
                games_: "Notification",
                lsid_: "Lsid"
            };
            this._domain = domain.toString();
            if (this._domain === '') {
                throw "Push domain can't be empty!"
            }
            this.setDomainAliases(domain_aliases);
            if (Push.prototype.debug) {
                cjs.log("Registering fallback function", Push.prototype.ident)
            }
            if (cjs.type(fallback) === 'function') {
                this._fallback_function = fallback
            }
            this._enabled = this.enable(enable)
        }
        Push.prototype.getDomain = function() {
            return this._domain
        };
        Push.prototype.getDomainAliases = function() {
            return this._domain_aliases
        };
        Push.prototype.setDomainAliases = function(aliases) {
            var i, j, len;
            if (cjs.type(aliases) === 'string') {
                aliases = aliases.replace(/[ ]/g, '').split(',')
            }
            for (j = 0, len = aliases.length; j < len; j++) {
                i = aliases[j];
                if (i !== '') {
                    this._domain_aliases.push(i)
                }
            }
            if (this._domain_aliases.length === 0) {
                throw "Push domain aliases can't be empty!"
            }
        };
        Push.prototype.enable = function(status) {
            return this._enabled = status ? true : false
        };
        Push.prototype.isConnected = function() {
            return this._connected
        };
        Push.prototype.connect = function(day_delta) {
            var domain_alias, domain_alias_parts, domain_list, j, len, protocol, ref;
            if (day_delta == null) {
                day_delta = 0
            }
            if (this._connected) {
                return true
            }
            if (day_delta !== 0 && day_delta !== (-1)) {
                return false
            }
            this.scheduleFallback();
            if (!this._enabled) {
                if (Push.prototype.debug) {
                    cjs.log("Push disabled by configuration, reverting to AJAX", Push.prototype.ident)
                }
                return false
            }
            if (Push.prototype.debug) {
                cjs.log("Connecting to a server using day_delta: " + day_delta, Push.prototype.ident)
            }
            this._day_delta = day_delta;
            domain_list = [];
            protocol = this._ssl ? 'https' : 'http';
            ref = this._domain_aliases;
            for (j = 0, len = ref.length; j < len; j++) {
                domain_alias = ref[j];
                domain_alias_parts = domain_alias.split(':');
                if (!(domain_alias_parts != null ? domain_alias_parts[1] : void 0)) {
                    domain_alias_parts[1] = 100
                }
                domain_list.push(domain_alias_parts[1] + ' ' + protocol + '://' + domain_alias_parts[0] + '.' + this._domain + ':' + this._port)
            }
            try {
                if (Push.prototype.debug) {
                    cjs.log("Configuring server list: " + domain_list.toString())
                }
                this._push.setServers(domain_list);
                this._push.setMessageHandler(this.messageHandler);
                this._push.setStatusHandler(this.statusHandler);
                this._connected = true;
                this.subscribe(null, true)
            } catch (undefined) {}
            return true
        };
        Push.prototype.disconnect = function(stop_fallback) {
            if (stop_fallback == null) {
                stop_fallback = true
            }
            if (!this._connected) {
                return
            }
            try {
                if (this._connected) {
                    this._push.disconnect()
                }
            } catch (undefined) {}
            this._connected = false;
            this._connected_server = '';
            if (stop_fallback) {
                if (Push.prototype.debug) {
                    cjs.log("Stopping fallback mechanism", Push.prototype.ident)
                }
                this.stopFallback();
                clearTimeout(this._fallback_checker)
            }
            if (Push.prototype.debug) {
                return cjs.log("Disconnected from the server", Push.prototype.ident)
            }
        };
        Push.prototype.reconnect = function() {
            if (Push.prototype.debug) {
                cjs.log("Trying reconnect to a server", Push.prototype.ident)
            }
            return this.connect(this._day_delta)
        };
        Push.prototype.getConnectedServer = function() {
            if (this._connected_server === '') {
                this.detectConnectedServer()
            }
            return this._connected_server
        };
        Push.prototype.getProjectId = function() {
            return this._projectId
        };
        Push.prototype.getPortNumber = function() {
            return this._port
        };
        Push.prototype.detectConnectedServer = function() {
            if (this._connected) {
                return this._connected_server = this._push.getInfo().split("\n")[8].split("//")[1].split(".")[0]
            }
        };
        Push.prototype.startFallback = function() {
            if (this._fallback_function === null || this._fallback_started) {
                return false
            }
            if (Push.prototype.debug) {
                cjs.log("Starting fallback function", Push.prototype.ident)
            }
            this._fallback_started = true;
            this._fallback_function('start');
            return true
        };
        Push.prototype.stopFallback = function() {
            if (this._fallback_function === null || !this._fallback_started) {
                return false
            }
            if (Push.prototype.debug) {
                cjs.log("Stopping fallback function", Push.prototype.ident)
            }
            this._fallback_function('stop');
            this._fallback_started = false;
            clearTimeout(this._reconnect_checker);
            return true
        };
        Push.prototype.scheduleFallback = function(delay) {
            var callback;
            if (delay == null) {
                delay = this._fallback_start
            }
            delay = Number(delay);
            delay = parseInt(delay);
            if (delay < 0) {
                delay = 1
            }
            callback = (function(_this) {
                return function() {
                    return _this.startFallback()
                }
            })(this);
            clearTimeout(this._fallback_checker);
            return this._fallback_checker = setTimeout(callback, delay * 1000)
        };
        Push.prototype.setNamespace = function(value) {
            if (Push.prototype.debug) {
                cjs.log("Setting namespace to: " + value, Push.prototype.ident)
            }
            return this._namespace = value.toString()
        };
        Push.prototype.getSubscription = function() {
            return this._subscription
        };
        Push.prototype.subscribe = function(values, resubscribe, numberOfHistoricalMessages) {
            var copySubscription, fragment, j, len, subjects, update, val;
            if (resubscribe == null) {
                resubscribe = false
            }
            if (numberOfHistoricalMessages == null) {
                numberOfHistoricalMessages = 60
            }
            if (resubscribe) {
                if (this._subscription.length === 0) {
                    return 0
                }
                if (this._connected) {
                    this._push.subscribeWithHistory(this._subscription, numberOfHistoricalMessages)
                }
                if (Push.prototype.debug) {
                    cjs.log("Total subscribed subjects: " + this._subscription.length + ", values: " + (this._subscription.toString()), Push.prototype.ident)
                }
                return this._subscription.length
            }
            if (values.push == null) {
                values = [values]
            }
            subjects = [];
            for (j = 0, len = values.length; j < len; j++) {
                val = values[j];
                fragment = this._namespace + val;
                if (indexOf.call(this._subscription, fragment) < 0) {
                    if (indexOf.call(this._subscription, fragment) < 0) {
                        this._subscription.push(fragment)
                    }
                    subjects.push(val)
                }
            }
            if (subjects.length > 0) {
                if (Push.prototype.debug && values.length > 0) {
                    cjs.log("Subscribing subjects: " + (subjects.toString()), Push.prototype.ident)
                }
                if (Push.prototype.debug) {
                    cjs.log("Total subscribed subjects: " + this._subscription.length + ", values: " + (this._subscription.toString()), Push.prototype.ident)
                }
                copySubscription = this._subscription.slice(0);
                while (copySubscription.length) {
                    update = copySubscription.splice(0, Push.prototype.MAX_SUBSCRIBE_MESSAGES);
                    if (this._connected) {
                        this._push.subscribeWithHistory(update, numberOfHistoricalMessages)
                    }
                }
            }
            return this._subscription.length
        };
        Push.prototype.unsubscribe = function(values) {
            var fragment, index, j, len, subjects, update, val;
            if (values.push == null) {
                values = [values]
            }
            subjects = [];
            for (j = 0, len = values.length; j < len; j++) {
                val = values[j];
                fragment = this._namespace + val;
                index = this.indexOf(this._subscription, fragment);
                if (index !== -1) {
                    this._subscription.splice(index, 1);
                    subjects.push(fragment)
                }
            }
            if (subjects.length > 0) {
                if (Push.prototype.debug && values.length > 0) {
                    cjs.log("Unsubscribing subjects: " + (values.toString()), Push.prototype.ident)
                }
                if (Push.prototype.debug) {
                    cjs.log("Total subscribed subjects: " + this._subscription.length + ", values: " + (this._subscription.toString()), Push.prototype.ident)
                }
                while (subjects.length) {
                    update = subjects.splice(0, Push.prototype.MAX_SUBSCRIBE_MESSAGES);
                    if (this._connected) {
                        this._push.unsubscribe(update)
                    }
                }
            }
            return this._subscription.length
        };
        Push.prototype.updateSubscription = function(values) {
            var j, k, len, len1, ref, subjects_subscribe, subjects_unsubscribe, val;
            if (values.push == null) {
                values = [values]
            }
            subjects_subscribe = [];
            subjects_unsubscribe = [];
            for (j = 0, len = values.length; j < len; j++) {
                val = values[j];
                if (indexOf.call(this._subscription, val) < 0) {
                    subjects_subscribe.push(val)
                }
            }
            ref = this._subscription;
            for (k = 0, len1 = ref.length; k < len1; k++) {
                val = ref[k];
                val = val.substr(this._namespace.length);
                if (indexOf.call(values, val) < 0) {
                    subjects_unsubscribe.push(val)
                }
            }
            this.subscribe(subjects_subscribe);
            this.unsubscribe(subjects_unsubscribe);
            return this._subscription.length
        };
        Push.prototype.setSubscriptionInfo = function(subscriptionInfo) {
            return this._subscriptionInfo = subscriptionInfo
        };
        Push.prototype.getSubscriptionInfo = function() {
            return this._subscriptionInfo
        };
        Push.prototype.messageHandler = function(messages) {
            var action, e, error, execute, j, key, len, messages_count, msg, msgLog, tmp, tmpwns;
            if (Push.prototype.debug) {
                cjs.log("Got new messages: " + messages.length + " subjects", Push.prototype.ident)
            }
            messages_count = 0;
            try {
                for (j = 0, len = messages.length; j < len; j++) {
                    msg = messages[j];
                    if (msg.subject == null) {
                        continue
                    }
                    if (!msg.subject.match("" + this._namespace)) {
                        continue
                    }
                    if (msg.content == null) {
                        continue
                    }
                    tmpwns = msg.subject.substr(this._namespace.length);
                    tmp = tmpwns.split('_');
                    key = tmp[0];
                    if (tmp[1] != null) {
                        key += '_'
                    }
                    if (!this._actions[key]) {
                        continue
                    }
                    msgLog = "" + (new Date()).getTime() + " " + msg.subject + " [" + msg.content + "]";
                    if (msg.content.match(/^c\_\_/)) {
                        msg.content = this._jsxCompressor.decompress(msg.content.replace(/^c\_\_/, ''))
                    }
                    msgLog += " [" + msg.content + "] " + "[" + this._connected_server + "]";
                    if (Push.prototype.logMessages) {
                        this._messageLogs.push(msgLog)
                    }
                    if (Push.prototype.debug) {
                        cjs.log("	" + tmpwns + " -> " + msg.content, Push.prototype.ident)
                    }
                    if (typeof window === "undefined" || window === null) {
                        (typeof global !== "undefined" && global !== null ? global : window).cjs = require("./actions/" + (this._actions[key].toLowerCase()))
                    }
                    execute = "PushAction" + this._actions[key];
                    action = new(typeof global !== "undefined" && global !== null ? global : window).cjs[execute](msg.content, this, msg.subject, cjs.dic);
                    messages_count++
                }
            } catch (error) {
                e = error;
                msg = "Push response error " + (JSON.stringify(messages));
                if (this.errorReporter) {
                    this.errorReporter(msg, e)
                }
                throw e
            }
            return messages_count
        };
        Push.prototype.statusHandler = function(status) {
            var callback, reconnect_in;
            if (status.type == null) {
                return false
            }
            switch (status.type) {
                case this._push.NOTIFY_SERVER_DOWN:
                    if (Push.prototype.debug) {
                        cjs.log("NOTIFY: Server Down", Push.prototype.ident)
                    }
                    this.disconnect(false);
                    this._max_reconnect_time = this._max_reconnect_time * 2;
                    if (this._max_reconnect_time > 600) {
                        this._max_reconnect_time = 600
                    }
                    reconnect_in = Math.floor((Math.random() * this._max_reconnect_time) + 1);
                    if (Push.prototype.debug) {
                        cjs.log("Try reconnect to a Push server in " + reconnect_in + " seconds.", Push.prototype.ident)
                    }
                    callback = (function(_this) {
                        return function() {
                            return _this.reconnect()
                        }
                    })(this);
                    this._reconnect_checker = setTimeout(callback, reconnect_in * 1000);
                    return this.startFallback();
                case this._push.NOTIFY_SERVER_UP:
                    if (Push.prototype.debug) {
                        cjs.log("NOTIFY: Server Up", Push.prototype.ident)
                    }
                    this._connected = true;
                    this.stopFallback();
                    this._max_reconnect_time = 15;
                    if (Push.prototype.debug) {
                        return cjs.log("Connected to server: " + (this.detectConnectedServer()) + "." + this._domain, Push.prototype.ident)
                    }
                    break;
                case this._push.NOTIFY_DATA_RESYNC:
                    if (Push.prototype.debug) {
                        cjs.log("NOTIFY: Data Loss", Push.prototype.ident)
                    }
                    cjs.dev.reportError("NOTIFY: Data Loss", null, true);
                    return false;
                case this._push.NOTIFY_UNSUPPORTED_BROWSER:
                    if (Push.prototype.debug) {
                        cjs.log("NOTIFY: Unsupported Browser", Push.prototype.ident)
                    }
                    return this._connected = false;
                default:
                    if (Push.prototype.debug) {
                        cjs.log("NOTIFY: Unknown status", Push.prototype.ident)
                    }
                    return false
            }
        };
        Push.prototype.indexOf = function(obj, search, start) {
            var end, index, j, ref, ref1;
            if (Array.prototype.indexOf) {
                return Array.prototype.indexOf.call(obj, search, start)
            }
            if (!start) {
                start = 0
            }
            end = obj.length - 1;
            for (index = j = ref = start, ref1 = end; ref <= ref1 ? j <= ref1 : j >= ref1; index = ref <= ref1 ? ++j : --j) {
                if (obj[index] === search) {
                    return index
                }
            }
            return -1
        };
        Push.prototype.saveMessageLogs = function(a) {
            var data, e, error, file, j, len, ref, row;
            try {
                data = "";
                ref = this._messageLogs;
                for (j = 0, len = ref.length; j < len; j++) {
                    row = ref[j];
                    data += row + "\n"
                }
                a.download = 'pushMessagesLog[' + cjs.Util.Date.timestamp2date('y-m-d_H-i-s') + '](' + window.location + ')';
                if ((window.Blob != null) && (window.URL != null)) {
                    file = new window.Blob([data]);
                    a.hidden = '';
                    return a.href = window.URL.createObjectURL(file)
                } else {
                    return a.href = "data:application/octet-stream," + (escape('[escaped]' + data))
                }
            } catch (error) {
                e = error;
                return cerr('Can\'t create download file on this browser!')
            }
        };
        return Push
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).Push == null) {
            base.Push = Push
        }
    } else {
        if (exports.Push == null) {
            exports.Push = Push
        }
    }
}).call(this);
(function() {
    var PushActionUpdate, base;
    PushActionUpdate = (function() {
        function PushActionUpdate(data) {
            var parse_status;
            parse_status = parse(data, true, false, 'update');
            fs_update.update('update');
            if (!parse_status) {
                refresh_iframe
            }
        }
        return PushActionUpdate
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).PushActionUpdate == null) {
            base.PushActionUpdate = PushActionUpdate
        }
    } else {
        if (exports.PushActionUpdate == null) {
            exports.PushActionUpdate = PushActionUpdate
        }
    }
}).call(this);
(function() {
    var PushActionSystem, base;
    PushActionSystem = (function() {
        function PushActionSystem(data, push) {
            var dmo, i, len, method;
            data = data.split(':');
            if (data[0] === 'utime') {
                cjs.dic.get('Helper_CurrentTime').setServerTimestamp(data[1])
            } else if (data[0] === 'sst') {
                set_service_status(data[1], true)
            } else if (data[0] === 'fcr') {
                check_static_serial(data[1])
            } else if (data[0] === 'dmo') {
                dmo = data[1];
                dmo = dmo.split(',');
                for (i = 0, len = dmo.length; i < len; i++) {
                    method = dmo[i];
                    this.overrideDeliveryMethod(push, method)
                }
            } else if (data[0] === 'ben') {
                if ((cjs.benchmarkRequest != null) && !cjs.benchmarkRequest.compareRequestRate(data[1])) {
                    cjs.benchmarkRequest.setRequestRate(data[1])
                }
            }
        }
        PushActionSystem.prototype.overrideDeliveryMethod = function(push, record) {
            var data, ref;
            data = record.split('|');
            if ((data[0] === 'all' || parseInt(data[0], 10) === push.getProjectId()) && data[1] === 'a') {
                push.disconnect();
                if (typeof window !== "undefined" && window !== null) {
                    if ((ref = window.cjs.synci) != null) {
                        ref.htmlUpdate($("div#sync-indicator"), 'off')
                    }
                }
                return push.scheduleFallback(Math.floor(Math.random() * 11) * 2)
            }
        };
        return PushActionSystem
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).PushActionSystem == null) {
            base.PushActionSystem = PushActionSystem
        }
    } else {
        if (exports.PushActionSystem == null) {
            exports.PushActionSystem = PushActionSystem
        }
    }
}).call(this);
(function() {
    var PushActionService, base;
    PushActionService = (function() {
        function PushActionService(data, push) {
            var delta, ref;
            delta = null;
            data = data.split(':');
            if (data[0] === 'utime') {
                delta = Math.abs(cjs.dic.get('Helper_CurrentTime').getTimestamp() - data[1])
            }
            if (delta === null || delta >= 30) {
                push.scheduleFallback(Math.floor(Math.random() * 11))
            } else {
                if (typeof window !== "undefined" && window !== null) {
                    if ((ref = window.cjs.synci) != null) {
                        ref.htmlUpdate($("div#sync-indicator"), 'push', push.getConnectedServer() + ':' + push.getPortNumber())
                    }
                }
                push.stopFallback();
                push.scheduleFallback(30)
            }
        }
        return PushActionService
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).PushActionService == null) {
            base.PushActionService = PushActionService
        }
    } else {
        if (exports.PushActionService == null) {
            exports.PushActionService = PushActionService
        }
    }
}).call(this);
(function() {
    var PushActionGame, base;
    PushActionGame = (function() {
        function PushActionGame(data) {
            response_game_handler(data, false)
        }
        return PushActionGame
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).PushActionGame == null) {
            base.PushActionGame = PushActionGame
        }
    } else {
        if (exports.PushActionGame == null) {
            exports.PushActionGame = PushActionGame
        }
    }
}).call(this);
(function() {
    var PushActionNotification, base;
    PushActionNotification = (function() {
        function PushActionNotification(data, push, gameSubject, dic) {
            this.data = data;
            this.push = push;
            this.gameSubject = gameSubject;
            this.dic = dic;
            this.dic.get('Notification_MyGames').addNotification(this.dic.get('NotificationBuilder').get(this.data, this.push, this.gameSubject))
        }
        return PushActionNotification
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).PushActionNotification == null) {
            base.PushActionNotification = PushActionNotification
        }
    } else {
        if (exports.PushActionNotification == null) {
            exports.PushActionNotification = PushActionNotification
        }
    }
}).call(this);
(function() {
    var PushActionLsid;
    PushActionLsid = (function() {
        function PushActionLsid(data) {
            var ref;
            if (data) {
                if ((ref = ls.loginClient) != null) {
                    ref.tryDataAutosync(JSON.parse(data))
                }
            }
        }
        return PushActionLsid
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.PushActionLsid = PushActionLsid
}).call(this);
(function() {
    var Notification_MyGames;
    Notification_MyGames = (function() {
        Notification_MyGames.prototype.EXPIRATION_TIME = 180000;
        Notification_MyGames.prototype.BOX_DISTANCE = 5;
        Notification_MyGames.prototype.FADEIN_TIMEOUT = 800;
        Notification_MyGames.prototype.FADEOUT_TIMEOUT = 800;
        Notification_MyGames.prototype.IMAGE_PLAYER_WIDTH = '24px';
        Notification_MyGames.prototype.IMAGE_COUNTRY_WIDTH = '30px';
        Notification_MyGames.prototype.IMAGE_PLAYER_HEIGHT = '30px';
        Notification_MyGames.prototype.IMAGE_COUNTRY_HEIGHT = '30px';
        Notification_MyGames.prototype.BOX_WIDTH = 192;
        Notification_MyGames.NOTIFICATIONS = [];
        Notification_MyGames.prototype.NOTIFICATION_COUNTER = 1;
        Notification_MyGames.prototype.LSID_DATA_KEY = 'lsSettins';
        Notification_MyGames.SETTING_SHOW_WITH_SOUND = 'yessound';
        Notification_MyGames.SETTING_SHOW_WITHOUT_SOUND = 'yessilent';
        Notification_MyGames.SETTING_NOT_SHOW = 'no';

        function Notification_MyGames($, utilObject, utilEnviroment, utilUrl, utilTrans, utilSport, settingsStorage) {
            this.$ = $;
            this.utilObject = utilObject;
            this.utilEnviroment = utilEnviroment;
            this.utilUrl = utilUrl;
            this.utilTrans = utilTrans;
            this.utilSport = utilSport;
            this.settingsStorage = settingsStorage;
            this._resizeHandler();
            this._lsid = this.utilEnviroment.getLoginClientObject();
            this._userSettings = null
        }
        Notification_MyGames.prototype.addNotification = function(notification) {
            var generated, nId, newNotification, ref;
            this._userSettings = this.settingsStorage.read(this.LSID_DATA_KEY);
            if ((((ref = this._userSettings) != null ? ref['mygamesNotifications'] : void 0) != null) && this._userSettings['mygamesNotifications'] === Notification_MyGames.SETTING_NOT_SHOW) {
                return null
            }
            this._startTimeout();
            newNotification = this._parseData(notification);
            if (newNotification == null) {
                return null
            }
            Notification_MyGames.NOTIFICATIONS[newNotification['id']] = newNotification;
            generated = this._generateHtml(newNotification);
            this.$(generated).appendTo(this.$('body'));
            this._recalculatedLeftAttributes();
            this._show();
            nId = '#game-notification-' + newNotification['id'];
            this.$(nId).on('click', (function(newNotification, that) {
                return function() {
                    return that.utilEnviroment.detailOpen(newNotification['game-id'], null, newNotification['url-home'], newNotification['url-away'], newNotification['url-season'], false)
                }
            })(newNotification, this));
            this.$(nId + ' .close').on('click', (function(that) {
                return function(event) {
                    event.stopPropagation();
                    return that.$(nId).fadeOut(this.FADEOUT_TIMEOUT, function() {
                        that.$(nId).remove();
                        delete Notification_MyGames.NOTIFICATIONS[newNotification['id']];
                        that._recalculatedLeftAttributes();
                        return that._show()
                    })
                }
            })(this));
            if (this.$('#feed_planter').length !== 0) {
                return this.$(".game-notification").css({
                    'margin-bottom': '200px'
                })
            }
        };
        Notification_MyGames.prototype._startTimeout = function() {
            var fn;
            clearTimeout(this._timeoutId);
            fn = (function(_this) {
                return function() {
                    var currentTime, id, nId, notification, ref, results;
                    if (_this.utilObject.keys(Notification_MyGames.NOTIFICATIONS).length !== 0) {
                        _this._startTimeout()
                    }
                    ref = Notification_MyGames.NOTIFICATIONS;
                    results = [];
                    for (id in ref) {
                        notification = ref[id];
                        currentTime = Date.now();
                        if (currentTime >= (parseInt(notification['timestamp']) + parseInt(_this.EXPIRATION_TIME))) {
                            nId = '#game-notification-' + notification['id'];
                            results.push(_this.$(nId).fadeOut(_this.FADEOUT_TIMEOUT, (function(notification, that) {
                                return function() {
                                    that.$(nId).remove();
                                    delete Notification_MyGames.NOTIFICATIONS[notification['id']];
                                    that._recalculatedLeftAttributes();
                                    return that._show()
                                }
                            })(notification, _this)))
                        } else {
                            results.push(void 0)
                        }
                    }
                    return results
                }
            })(this);
            return this._timeoutId = setTimeout(fn, 1000)
        };
        Notification_MyGames.prototype._parseData = function(notification) {
            var data, gid, id, imageUrl, logoAway, logoHome, newNotification, notificationTimestamp, score, subjectParts, subscriptionInfo;
            data = JSON.parse(notification.getData());
            subscriptionInfo = notification.getPush().getSubscriptionInfo();
            subjectParts = notification.getGameSubject().split('_');
            id = subjectParts[subjectParts.length - 1];
            imageUrl = this.utilEnviroment.getBaseImageDataUrl().replace(this.utilUrl.getLocationOrigin(), '');
            notificationTimestamp = data[12];
            if (subscriptionInfo[id]['timestamp'] > (notificationTimestamp * 1000)) {
                return null
            }
            if (data[3] === '') {
                score = '-'
            } else {
                if (data[4] === 1) {
                    score = '<span class="change">' + data[3].split(':')[0] + '</span> - ' + data[3].split(':')[1]
                } else if (data[4] === 2) {
                    score = data[3].split(':')[0] + ' - <span class="change">' + data[3].split(':')[1] + '</span>'
                } else {
                    score = data[3].split(':')[0] + ' - ' + data[3].split(':')[1]
                }
            }
            if (data[9] !== '') {
                logoHome = 'url(\'' + imageUrl + data[9] + '\')'
            } else {
                logoHome = 'none'
            }
            if (data[11] !== '') {
                logoAway = 'url(\'' + imageUrl + data[11] + '\')'
            } else {
                logoAway = 'none'
            }
            if (data[5] > 2) {
                logoHome = 'none';
                logoAway = 'none'
            }
            gid = 'g_' + subscriptionInfo[id]['sportId'] + '_' + id;
            newNotification = {
                'id': this.NOTIFICATION_COUNTER,
                'text': data[0],
                'label': data[1] + ' - ' + data[2],
                'score': score,
                'logo-home': logoHome,
                'logo-away': logoAway,
                'game-id': gid,
                'image-width': data[10] === 1 ? this.IMAGE_PLAYER_WIDTH : this.IMAGE_COUNTRY_WIDTH,
                'image-height': data[10] === 1 ? this.IMAGE_PLAYER_HEIGHT : this.IMAGE_COUNTRY_HEIGHT,
                'url-home': data[6],
                'url-away': data[7],
                'url-season': data[8],
                'timestamp': Date.now(),
                'hidden': true
            };
            this._playMelody(gid, data[0], subscriptionInfo[id]['sportId']);
            this.NOTIFICATION_COUNTER++;
            return newNotification
        };
        Notification_MyGames.prototype._generateHtml = function(newNotification) {
            var currentBoxId, html, item;
            item = newNotification;
            currentBoxId = 'game-notification-' + item['id'];
            html = "<div id=\"" + currentBoxId + "\" title=\"" + (this.utilTrans('TRANS_CLICK_FOR_MATCH_DETAIL')) + "\" class=\"game-notification\" style=\"display: none;\">\n<div class=\"notification-content\">\n<div class=\"game-id\" style=\"display:none\">" + item['game-id'] + "</div>\n<div class=\"timestamp\" style=\"display:none\">" + item['timestamp'] + "</div>\n<div class=\"label\">" + item['label'] + "</div>\n<div class=\"logo-home notification-logo\" style=\"background-image: " + item['logo-home'] + "; width: " + item['image-width'] + "; height: " + item['image-height'] + "; background-size: " + item['image-width'] + " " + item['image-height'] + "\"></div>\n<div class=\"logo-away notification-logo\" style=\"background-image: " + item['logo-away'] + "; width: " + item['image-width'] + "; height: " + item['image-height'] + "; background-size: " + item['image-width'] + " " + item['image-height'] + "\"></div>\n<div class=\"score\">" + item['score'] + "</div>\n<div class=\"text\">" + item['text'] + "</div>\n<div class=\"url-home\" style=\"display:none\">" + item['url-home'] + "</div>\n<div class=\"url-away\" style=\"display:none\">" + item['url-away'] + "</div>\n<div class=\"url-season\" style=\"display:none\">" + item['url-season'] + "</div>\n<div class=\"close\" title=\"\"></div>\n</div>\n			   </div>";
            return html
        };
        Notification_MyGames.prototype._playMelody = function(gameId, actionType, sportId) {
            var soundMelody;
            if ((this._userSettings == null) || (this._userSettings['mygamesNotifications'] == null) || this._userSettings['mygamesNotifications'] === Notification_MyGames.SETTING_SHOW_WITHOUT_SOUND) {
                return
            }
            soundMelody = '';
            if (actionType === this.utilTrans('TRANS_NOTIFICATION_MESSAGE_MATCH_FINISHED') || actionType === 'Finished.') {
                soundMelody = 'finished'
            } else if (actionType === this.utilTrans('TRANS_NOTIFICATION_MESSAGE_GOAL') || actionType === 'Goal!') {
                soundMelody = 'score-incremented'
            }
            return this.utilEnviroment.getSoundPlayer().play(gameId, soundMelody, false, this.utilSport.getOriginalNameFromId(sportId))
        };
        Notification_MyGames.prototype._recalculatedLeftAttributes = function() {
            var id, left, length, notification, ref, results, tempIndex;
            tempIndex = 1;
            length = this.utilObject.keys(Notification_MyGames.NOTIFICATIONS).length;
            ref = Notification_MyGames.NOTIFICATIONS;
            results = [];
            for (id in ref) {
                notification = ref[id];
                left = this._calculateLeft(length, tempIndex, this.BOX_WIDTH, this.BOX_DISTANCE);
                tempIndex++;
                results.push(this.$('#game-notification-' + id).css('left', left + 'px'))
            }
            return results
        };
        Notification_MyGames.prototype._show = function() {
            var maximumNotifications, queue;
            maximumNotifications = this._getMaximumNotificationCount(this.BOX_DISTANCE, this.BOX_WIDTH);
            queue = this._getQueue(Notification_MyGames.NOTIFICATIONS, maximumNotifications);
            if (queue[0].length) {
                this.$(queue[0].join(',')).show()
            }
            if (queue[1].length) {
                this.$(queue[1].join(',')).hide()
            }
            if (queue[2].length) {
                return this.$(queue[2].join(',')).fadeIn(this.FADEIN_TIMEOUT)
            }
        };
        Notification_MyGames.prototype._getWindowWidth = function() {
            return parseInt(this.$(window).width())
        };
        Notification_MyGames.prototype._getMaximumNotificationCount = function(boxDistance, boxWidth) {
            var count;
            if (typeof boxDistance === 'number' && typeof boxWidth === 'number') {
                count = Math.floor((this._getWindowWidth() - boxDistance) / (boxWidth + boxDistance));
                if (count > 0) {
                    return count
                } else {
                    return 0
                }
            } else {
                return 0
            }
        };
        Notification_MyGames.prototype._getQueue = function(notifications, maximumNotifications) {
            var anyShowed, fadeInIds, hideIds, i, id, ids, len, nId, notification, showIds, totalShowed;
            if (notifications == null) {
                notifications = []
            }
            showIds = [];
            hideIds = [];
            fadeInIds = [];
            ids = this.utilObject.keys(notifications).reverse();
            anyShowed = false;
            totalShowed = 0;
            for (i = 0, len = ids.length; i < len; i++) {
                id = ids[i];
                notification = notifications[id];
                nId = '#game-notification-' + id;
                if (anyShowed === false && notification.hidden && totalShowed < maximumNotifications) {
                    fadeInIds.push(nId);
                    notification.hidden = false
                } else if (notification.hidden && totalShowed < maximumNotifications) {
                    showIds.push(nId);
                    notification.hidden = false
                } else if (!notification.hidden && totalShowed >= maximumNotifications) {
                    hideIds.push(nId);
                    notification.hidden = true
                }
                if (!notification.hidden) {
                    anyShowed = true
                }
                if (!notification.hidden) {
                    totalShowed++
                }
            }
            return [showIds, hideIds, fadeInIds]
        };
        Notification_MyGames.prototype._resizeHandler = function() {
            return this.$(window).on('resize', (function(_this) {
                return function() {
                    return _this._show()
                }
            })(this))
        };
        Notification_MyGames.prototype._calculateLeft = function(length, index, boxWidth, boxDistance) {
            if (typeof length !== 'number' || typeof index !== 'number' || typeof boxWidth !== 'number' || typeof boxDistance !== 'number') {
                return 0
            } else {
                return (length * (boxWidth + boxDistance)) - (index * (boxWidth + boxDistance))
            }
        };
        return Notification_MyGames
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Notification_MyGames', Notification_MyGames, ['notificationMyGames'])
}).call(this);
(function() {
    var NotificationBuilder;
    NotificationBuilder = {};
    NotificationBuilder.get = function(data, push, gameSubject) {
        var Builder;
        Builder = (function() {
            function Builder(_data, _push, _gameSubject) {
                this._data = _data;
                this._push = _push;
                this._gameSubject = _gameSubject
            }
            Builder.prototype.getData = function() {
                return this._data
            };
            Builder.prototype.getPush = function() {
                return this._push
            };
            Builder.prototype.getGameSubject = function() {
                return this._gameSubject
            };
            return Builder
        })();
        return new Builder(data, push, gameSubject)
    };
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerGetter('NotificationBuilder', NotificationBuilder)
}).call(this);
(function() {
    var SettingsStorage;
    SettingsStorage = (function() {
        function SettingsStorage(clientStorage, utilEnviroment) {
            this.clientStorage = clientStorage;
            this.utilEnviroment = utilEnviroment
        }
        SettingsStorage.prototype.write = function(key, value) {
            var data, index, jsonData, ref, ref1;
            if ((ref = this.utilEnviroment.getLoginClientObject()) != null ? ref.loggedIn() : void 0) {
                return this.utilEnviroment.getLoginClientObject().storeData(value, key, null)
            } else {
                ref1 = key.split('.'), key = ref1[0], index = ref1[1];
                jsonData = this.read(key);
                if (jsonData == null) {
                    data = {}
                } else {
                    data = jsonData
                }
                if (index != null) {
                    data[index] = value
                }
                return this.clientStorage.store(key, JSON.stringify(data))
            }
        };
        SettingsStorage.prototype.read = function(key) {
            var data, dataArr, index, ref, ref1;
            if ((ref = this.utilEnviroment.getLoginClientObject()) != null ? ref.loggedIn() : void 0) {
                return this.utilEnviroment.getLoginClientObject().getData(key)
            } else {
                ref1 = key.split('.'), key = ref1[0], index = ref1[1];
                data = this.clientStorage.get(key);
                if (data == null) {
                    return null
                }
                dataArr = JSON.parse(data);
                if (index != null) {
                    return dataArr[index]
                }
                return dataArr
            }
        };
        SettingsStorage.prototype.remove = function(key) {
            var ref;
            if ((ref = this.utilEnviroment.getLoginClientObject()) != null ? ref.loggedIn() : void 0) {
                return this.utilEnviroment.getLoginClientObject().removeData(key)
            } else {
                return this.clientStorage.drop(key)
            }
        };
        return SettingsStorage
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('SettingsStorage', SettingsStorage, ['settingsStorage'])
}).call(this);
(function() {
    var Geo_GeoIp;
    Geo_GeoIp = (function() {
        function Geo_GeoIp($, utilEnviroment, utilUrl, utilTrans, clientStorage, utilConfig) {
            this.$ = $;
            this.utilEnviroment = utilEnviroment;
            this.utilUrl = utilUrl;
            this.utilTrans = utilTrans;
            this.clientStorage = clientStorage;
            this.utilConfig = utilConfig
        }
        Geo_GeoIp.prototype.equalGeoIp = function(requestedGeoIp, doneCallback) {
            return this.utilEnviroment.getGeoIp((function(_this) {
                return function() {
                    if (requestedGeoIp === _this.utilEnviroment.getGlobalGeoIp()) {
                        return doneCallback(true)
                    } else {
                        return doneCallback(false)
                    }
                }
            })(this), true)
        };
        return Geo_GeoIp
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Geo_GeoIp', Geo_GeoIp, ['geoGeoIP'])
}).call(this);
(function() {
    var Builder, Feed_Request, ref;
    Builder = (function() {
        function Builder() {
            this._dic;
            this._updaterGetter;
            this._createAjaxJqObject;
            this._baseFeedXUrlGetter;
            this._projectTypeIdGetter;
            this._localLanguageGetter;
            this._sudateGetter;
            this._pageUtimeGetter;
            this._sportIdGetter;
            this._isMixedFeedGetter;
            this._ie6UrlSuffixGetter;
            this._statsBehaviorGetter;
            this._isParticipantDetailGetter;
            this._detailFeedGeoIpHeadersGetter;
            this._detailMainBookmakerGetter;
            this._isLiveOddsGetter;
            this._eventParticipantIdGetter;
            this._oddsFormatGetter;
            this._tournamentStageIdGetter;
            this._isTournamentPagesEnableGetter;
            this._projectIdGetter;
            this._externalProjectIdGetter;
            return this
        }
        Builder.prototype.build = function() {
            return new Feed_Request(this._dic, this._updaterGetter, this._createAjaxJqObject, this._baseFeedXUrlGetter, this._projectTypeIdGetter, this._localLanguageGetter, this._sudateGetter, this._pageUtimeGetter, this._sportIdGetter, this._isMixedFeedGetter, this._ie6UrlSuffixGetter, this._statsBehaviorGetter, this._isParticipantDetailGetter, this._detailFeedGeoIpHeadersGetter, this._detailMainBookmakerGetter, this._isLiveOddsGetter, this._eventParticipantIdGetter, this._oddsFormatGetter, this._tournamentStageIdGetter, this._isTournamentPagesEnableGetter, this._projectIdGetter, this._externalProjectIdGetter)
        };
        Builder.prototype.setDic = function(_dic) {
            this._dic = _dic;
            return this
        };
        Builder.prototype.setUpdaterGetter = function(_updaterGetter) {
            this._updaterGetter = _updaterGetter;
            return this
        };
        Builder.prototype.setCreateAjaxJqObject = function(_createAjaxJqObject) {
            this._createAjaxJqObject = _createAjaxJqObject;
            return this
        };
        Builder.prototype.setBaseFeedXUrlGetter = function(_baseFeedXUrlGetter) {
            this._baseFeedXUrlGetter = _baseFeedXUrlGetter;
            return this
        };
        Builder.prototype.setProjectTypeIdGetter = function(_projectTypeIdGetter) {
            this._projectTypeIdGetter = _projectTypeIdGetter;
            return this
        };
        Builder.prototype.setLocalLanguageGetter = function(_localLanguageGetter) {
            this._localLanguageGetter = _localLanguageGetter;
            return this
        };
        Builder.prototype.setSudateGetter = function(_sudateGetter) {
            this._sudateGetter = _sudateGetter;
            return this
        };
        Builder.prototype.setPageUtimeGetter = function(_pageUtimeGetter) {
            this._pageUtimeGetter = _pageUtimeGetter;
            return this
        };
        Builder.prototype.setSportIdGetter = function(_sportIdGetter) {
            this._sportIdGetter = _sportIdGetter;
            return this
        };
        Builder.prototype.setIsMixedFeedGetter = function(_isMixedFeedGetter) {
            this._isMixedFeedGetter = _isMixedFeedGetter;
            return this
        };
        Builder.prototype.setIe6UrlSuffixGetter = function(_ie6UrlSuffixGetter) {
            this._ie6UrlSuffixGetter = _ie6UrlSuffixGetter;
            return this
        };
        Builder.prototype.setStatsBehaviorGetter = function(_statsBehaviorGetter) {
            this._statsBehaviorGetter = _statsBehaviorGetter;
            return this
        };
        Builder.prototype.setIsParticipantDetailGetter = function(_isParticipantDetailGetter) {
            this._isParticipantDetailGetter = _isParticipantDetailGetter;
            return this
        };
        Builder.prototype.setDetailFeedGeoIpHeadersGetter = function(_detailFeedGeoIpHeadersGetter) {
            this._detailFeedGeoIpHeadersGetter = _detailFeedGeoIpHeadersGetter;
            return this
        };
        Builder.prototype.setDetailMainBookmakerGetter = function(_detailMainBookmakerGetter) {
            this._detailMainBookmakerGetter = _detailMainBookmakerGetter;
            return this
        };
        Builder.prototype.setIsLiveOddsGetter = function(_isLiveOddsGetter) {
            this._isLiveOddsGetter = _isLiveOddsGetter;
            return this
        };
        Builder.prototype.setEventParticipantIdGetter = function(_eventParticipantIdGetter) {
            this._eventParticipantIdGetter = _eventParticipantIdGetter;
            return this
        };
        Builder.prototype.setOddsFormatGetter = function(_oddsFormatGetter) {
            this._oddsFormatGetter = _oddsFormatGetter;
            return this
        };
        Builder.prototype.setTournamentStageIdGetter = function(_tournamentStageIdGetter) {
            this._tournamentStageIdGetter = _tournamentStageIdGetter;
            return this
        };
        Builder.prototype.setIsTournamentPagesEnableGetter = function(_isTournamentPagesEnableGetter) {
            this._isTournamentPagesEnableGetter = _isTournamentPagesEnableGetter;
            return this
        };
        Builder.prototype.setProjectIdGetter = function(_projectIdGetter) {
            this._projectIdGetter = _projectIdGetter;
            return this
        };
        Builder.prototype.setExternalProjectIdGetter = function(_externalProjectIdGetter) {
            this._externalProjectIdGetter = _externalProjectIdGetter;
            return this
        };
        return Builder
    })();
    Feed_Request = (function() {
        Feed_Request.Builder = Builder;
        Feed_Request.beforeFullFeedCallbacks = [];

        function Feed_Request(_dic, _updaterGetter, _createAjaxJqObject, _baseFeedXUrlGetter, _projectTypeIdGetter, _localLanguageGetter, _sudateGetter, _pageUtimeGetter, _sportIdGetter, _isMixedFeedGetter, _ie6UrlSuffixGetter, _statsBehaviorGetter, _isParticipantDetailGetter, _detailFeedGeoIpHeadersGetter, _detailMainBookmakerGetter, _isLiveOddsGetter, _eventParticipantIdGetter, _oddsFormatGetter, _tournamentStageIdGetter, _isTournamentPagesEnableGetter, _projectIdGetter, _externalProjectIdGetter) {
            this._dic = _dic;
            this._updaterGetter = _updaterGetter;
            this._createAjaxJqObject = _createAjaxJqObject;
            this._baseFeedXUrlGetter = _baseFeedXUrlGetter;
            this._projectTypeIdGetter = _projectTypeIdGetter;
            this._localLanguageGetter = _localLanguageGetter;
            this._sudateGetter = _sudateGetter;
            this._pageUtimeGetter = _pageUtimeGetter;
            this._sportIdGetter = _sportIdGetter;
            this._isMixedFeedGetter = _isMixedFeedGetter;
            this._ie6UrlSuffixGetter = _ie6UrlSuffixGetter;
            this._statsBehaviorGetter = _statsBehaviorGetter;
            this._isParticipantDetailGetter = _isParticipantDetailGetter;
            this._detailFeedGeoIpHeadersGetter = _detailFeedGeoIpHeadersGetter;
            this._detailMainBookmakerGetter = _detailMainBookmakerGetter;
            this._isLiveOddsGetter = _isLiveOddsGetter;
            this._eventParticipantIdGetter = _eventParticipantIdGetter;
            this._oddsFormatGetter = _oddsFormatGetter;
            this._tournamentStageIdGetter = _tournamentStageIdGetter;
            this._isTournamentPagesEnableGetter = _isTournamentPagesEnableGetter;
            this._projectIdGetter = _projectIdGetter;
            this._externalProjectIdGetter = _externalProjectIdGetter;
            this._activeRequests = {}
        }
        Feed_Request.prototype.execute = function(action, sportId, overrideCompleteCallback, feedConfig, errorCallback) {
            var completeCallback, feedData;
            if (feedConfig == null) {
                feedConfig = {}
            }
            feedData = this.getFeedData(action, sportId, void 0, feedConfig);
            if (!feedData) {
                return false
            }
            if (overrideCompleteCallback != null) {
                feedData.completeCallback = overrideCompleteCallback
            }
            this._abortActiveRequest(feedData.context);
            completeCallback = (function(feedData) {
                return function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
                    if (feedData.completeCallback) {
                        return feedData.completeCallback(r_status, r_headers, r_content, r_trigger, r_custom_headers)
                    }
                }
            })(feedData);
            if (typeof feedData.beforeCallback === "function") {
                feedData.beforeCallback()
            }
            this._activeRequests[feedData.context] = this._createAjaxJqObject(feedData.url, completeCallback, action);
            this._activeRequests[feedData.context].async(feedData.async);
            if (errorCallback != null) {
                this._activeRequests[feedData.context].setErrorCallback(errorCallback)
            }
            this._activeRequests[feedData.context].update(feedData.postData, feedData.postMethod, feedData.headers);
            return true
        };
        Feed_Request.prototype._isShifedMidnight = function() {
            var gmtOffsetGetter, localDate, localTimezoneOffsetSeconds, specialTimeZoneDiff;
            localDate = new Date();
            gmtOffsetGetter = this._dic.get('util_enviroment').getGmtOffset();
            localTimezoneOffsetSeconds = localDate.getTimezoneOffset() * 60;
            localDate.setTime((this._dic.get('Helper_CurrentTime').getTimestamp() + localTimezoneOffsetSeconds - gmtOffsetGetter()) * 1000);
            specialTimeZoneDiff = (gmtOffsetGetter() / 60) % 60;
            if (specialTimeZoneDiff !== 0 && localDate.getHours() === 0) {
                return true
            }
            return false
        };
        Feed_Request.prototype.getFeedData = function(feedName, sportId, day, feedConfig) {
            var data, dataType, feedData, feedFunction;
            if (day == null) {
                day = this._sudateGetter()
            }
            if (feedConfig == null) {
                feedConfig = {}
            }
            sportId = this._getSportId(sportId);
            day = this._getDay(day);
            feedFunction = this._getFeedFunctionName(feedName);
            if (this[feedFunction] == null) {
                return false
            }
            feedData = {
                context: feedName,
                headers: {},
                postData: null,
                postMethod: null,
                async: true,
                feedName: feedName
            };
            data = this[feedFunction](sportId, feedConfig);
            if (!data) {
                return false
            }
            for (dataType in data) {
                if (data.hasOwnProperty(dataType)) {
                    feedData[dataType] = data[dataType]
                }
                switch (dataType) {
                    case 'url':
                    case 'context':
                        feedData[dataType] = this._replaceTags(feedData[dataType], sportId, day)
                }
            }
            if (!/^http:\/\//.test(feedData.url)) {
                feedData.url = this._baseFeedXUrlGetter() + feedData.url
            }
            if ((feedData.headers != null) && cjs.Util.Object.keys(feedData.headers).length === 0) {
                feedData.headers = {}
            }
            return feedData
        };
        Feed_Request.prototype.hasActiveRequest = function(context) {
            if (this._activeRequests[context] == null) {
                return false
            }
            return this._activeRequests[context].updating !== false
        };
        Feed_Request.prototype.feedFull = function(sportId) {
            var headers, url;
            if (this._isMixedFeedGetter() && sportId === 0) {
                url = 'fm_%SUDATE%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%STATS_BEHAVIOR%%IE6_SUFFIX%'
            } else if (this._dic.get('util_sport').isGroupSport(sportId)) {
                url = 'fp_%SPORT_ID%_%SUDATE%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%STATS_BEHAVIOR%%IE6_SUFFIX%'
            } else {
                url = 'f_%SPORT_ID%_%SUDATE%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%STATS_BEHAVIOR%%IE6_SUFFIX%'
            }
            headers = {};
            if (!cjs.geoIP) {
                headers['X-GeoIP'] = 1
            }
            if (this._pageUtimeGetter() === 0) {
                headers['X-utime'] = 1
            }
            return {
                context: 'full_%SPORT_ID%_%SUDATE%',
                url: url,
                headers: headers,
                beforeCallback: (function(request) {
                    return function() {
                        cjs.full_loaded = false;
                        return request.executeBeforeFullFeedCallbacks()
                    }
                })(this),
                completeCallback: this._updaterGetter().response_full
            }
        };
        Feed_Request.prototype.feedUpdate = function(sportId, feedConfig) {
            var headers;
            headers = {};
            if (feedConfig.benchmarkRequest != null) {
                headers['X-BenchmarkRequest'] = 1
            }
            return {
                url: 'u_%SPORT_ID%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                completeCallback: this._updaterGetter().response_update,
                context: 'update_%SPORT_ID%',
                headers: headers
            }
        };
        Feed_Request.prototype.feedUpdateLocal = function(sportId) {
            return {
                url: 'ul_%SPORT_ID%_%PROJECT_ID%%IE6_SUFFIX%',
                completeCallback: function() {},
                context: 'update_local_%SPORT_ID%'
            }
        };
        Feed_Request.prototype.feedRepair = function(sportId) {
            return {
                url: 'r_%SPORT_ID%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                beforeCallback: function() {
                    return cjs.repair_loaded = false
                },
                completeCallback: this._updaterGetter().response_update,
                context: 'repair_%SPORT_ID%'
            }
        };
        Feed_Request.prototype.feedFrepair = function(sportId) {
            var ret;
            ret = this.feedRepair(sportId);
            ret.context = 'frepair_%SPORT_ID%';
            return ret
        };
        Feed_Request.prototype.feedCountry = function(sportId) {
            var headers;
            headers = {};
            if (!cjs.geoIP) {
                headers['X-GeoIP'] = 1
            }
            if (this._pageUtimeGetter() === 0) {
                headers['X-utime'] = 1
            }
            return {
                headers: headers,
                url: 'c_%SPORT_ID%_%COUNTRY_ID%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%COUNTRY_TOURNAMENT_ORDER%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                beforeCallback: (function(request) {
                    return function() {
                        cjs.full_loaded = false;
                        return request.executeBeforeFullFeedCallbacks()
                    }
                })(this),
                completeCallback: this._updaterGetter().response_full
            }
        };
        Feed_Request.prototype.feedTournament = function(sportId) {
            var beforeCallback, headers, url;
            if (this._isTournamentPagesEnableGetter()) {
                url = 't_%SPORT_ID%_%COUNTRY_ID%_%TOURNAMENT_ID%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%';
                beforeCallback = (function(request) {
                    return function() {
                        cjs.full_loaded = false;
                        if (cjs.Util.Sport.inGroup(sportId, cjs.constants.sport.MOTORSPORT)) {
                            request._updaterGetter().country_tournament_order_fin = true
                        } else {
                            request._updaterGetter().country_tournament_order_fin = false
                        }
                        return request.executeBeforeFullFeedCallbacks()
                    }
                })(this)
            } else {
                url = 't_%SPORT_ID%_%COUNTRY_ID%_%TOURNAMENT_ID%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%COUNTRY_TOURNAMENT_ORDER%_%PROJECT_TYPE_ID%%IE6_SUFFIX%';
                beforeCallback = (function(request) {
                    return function() {
                        cjs.full_loaded = false;
                        return request.executeBeforeFullFeedCallbacks()
                    }
                })(this)
            }
            headers = {};
            if (!cjs.geoIP) {
                headers['X-GeoIP'] = 1
            }
            if (this._pageUtimeGetter() === 0) {
                headers['X-utime'] = 1
            }
            return {
                headers: headers,
                url: url,
                beforeCallback: beforeCallback,
                completeCallback: this._updaterGetter().response_full
            }
        };
        Feed_Request.prototype.feedParticipant = function(sportId, feedConfig) {
            var beforeCallback, headers, participantId, url;
            participantId = (feedConfig != null ? feedConfig.participantId : void 0) || "";
            url = "p_%SPORT_ID%_%COUNTRY_ID%_" + participantId + "_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%";
            beforeCallback = function() {
                cjs.full_loaded = false;
                return updater.country_tournament_order_fin = false
            };
            headers = {};
            if (!cjs.geoIP) {
                headers['X-GeoIP'] = 1
            }
            if (this._pageUtimeGetter() === 0) {
                headers['X-utime'] = 1
            }
            return {
                headers: headers,
                url: url,
                beforeCallback: beforeCallback,
                async: false,
                completeCallback: this._updaterGetter().response_full
            }
        };
        Feed_Request.prototype.feedSeries = function(sportId, feedConfig) {
            var beforeCallback, headers, seriesId, url;
            seriesId = (feedConfig != null ? feedConfig.seriesId : void 0) || "";
            url = "s_%SPORT_ID%_" + seriesId + "_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%";
            beforeCallback = function() {
                cjs.full_loaded = false;
                return updater.country_tournament_order_fin = false
            };
            headers = {};
            if (!cjs.geoIP) {
                headers['X-GeoIP'] = 1
            }
            if (this._pageUtimeGetter() === 0) {
                headers['X-utime'] = 1
            }
            return {
                headers: headers,
                url: url,
                beforeCallback: beforeCallback,
                async: false,
                completeCallback: this._updaterGetter().response_full
            }
        };
        Feed_Request.prototype.feedOdds = function(sportId) {
            var url;
            if (this._isMixedFeedGetter() && sportId === 0) {
                url = 'mo_%SUDATE%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%_%IS_LIVE_ODDS%%IE6_SUFFIX%'
            } else {
                url = 'fo_%SPORT_ID%_%SUDATE%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%_%IS_LIVE_ODDS%%IE6_SUFFIX%'
            }
            return {
                context: 'odds_%SPORT_ID%',
                url: url,
                completeCallback: this._updaterGetter().response_odds
            }
        };
        Feed_Request.prototype.feedLoadFullOdds = function(sportId) {
            return {
                url: 'fo_%SPORT_ID%_%SUDATE%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%_%IS_LIVE_ODDS%%IE6_SUFFIX%',
                completeCallback: this._updaterGetter().response_load_odds
            }
        };
        Feed_Request.prototype.feedUpdatedOdds = function(sportId) {
            var url;
            if (this._isMixedFeedGetter() && sportId === 0) {
                url = 'uo_m_%IS_LIVE_ODDS%%IE6_SUFFIX%'
            } else {
                url = 'uo_%SPORT_ID%_%IS_LIVE_ODDS%%IE6_SUFFIX%'
            }
            return {
                url: url,
                completeCallback: this._updaterGetter().response_updated_odds
            }
        };
        Feed_Request.prototype.feedLoadTournamentOdds = function(sportId) {
            return {
                url: 'to_%SPORT_ID%_%COUNTRY_ID%_%TOURNAMENT_ID%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%COUNTRY_TOURNAMENT_ORDER%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                completeCallback: this._updaterGetter().response_load_odds
            }
        };
        Feed_Request.prototype.feedLoadParticipantOdds = function(sportId, feedConfig) {
            var participantId;
            participantId = (feedConfig != null ? feedConfig.participantId : void 0) || "";
            return {
                url: "po_%SPORT_ID%_%COUNTRY_ID%_" + participantId + "_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%",
                completeCallback: this._updaterGetter().response_load_odds
            }
        };
        Feed_Request.prototype.feedGame = function(sportId) {
            var url;
            if (this._isParticipantDetailGetter()) {
                url = 'gp_%PROJECT_TYPE_ID%_%EVENT_ID%_%EVENT_PARTICIPANT_ID%%IE6_SUFFIX%'
            } else {
                url = 'g_%PROJECT_TYPE_ID%_%EVENT_ID%%IE6_SUFFIX%'
            }
            return {
                url: url,
                completeCallback: this._updaterGetter().response_game
            }
        };
        Feed_Request.prototype.feedDetail = function(sportId) {
            var url;
            if (this._isParticipantDetailGetter()) {
                url = 'dcp_%PROJECT_TYPE_ID%_%EVENT_ID%_%EVENT_PARTICIPANT_ID%%IE6_SUFFIX%'
            } else {
                url = 'dc_%PROJECT_TYPE_ID%_%EVENT_ID%%IE6_SUFFIX%'
            }
            return {
                url: url,
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail
            }
        };
        Feed_Request.prototype.feedDetailSummary = function(sportId) {
            var url;
            if (this._isParticipantDetailGetter()) {
                url = 'd_sp_%EVENT_ID%_%EVENT_PARTICIPANT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%'
            } else {
                url = 'd_su_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%'
            }
            return {
                url: url,
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailSummaryPlayerCard = function(sportId) {
            return {
                url: 'd_pc_%EVENT_ID%_%EVENT_PARTICIPANT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailOddsComparison = function(sportId) {
            var url;
            url = 'd_od_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%_%ODDS_FORMAT%';
            if (this._externalProjectIdGetter()) {
                url += '_%EXTERNAL_PROJECT_ID%'
            }
            url += '%IE6_SUFFIX%';
            return {
                url: url,
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailHead2Head = function(sportId) {
            return {
                url: 'd_hh_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailLineups = function(sportId) {
            return {
                url: 'd_li_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailMissingPlayers = function(sportId) {
            return {
                url: 'd_mpl_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailMatchHistory = function(sportId) {
            return {
                url: 'd_mh_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailStatistics = function(sportId) {
            return {
                url: 'd_st_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailCommentary = function(sportId) {
            return {
                url: 'd_ph_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailLiveTable = function(sportId) {
            return {
                url: 'd_lt_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailStandings = function(sportId) {
            return {
                url: 'd_ta_%TOURNAMENT_STAGE_ID%_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailDraw = function(sportId) {
            return {
                url: 'd_dr_%TOURNAMENT_STAGE_ID%_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailCommentaryPreview = function(sportId) {
            return {
                url: 'd_pv_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailTv = function(sportId) {
            return {
                url: 'd_tv_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailHighlights = function(sportId) {
            var url;
            if (this._isParticipantDetailGetter()) {
                url = 'd_hip_%EVENT_ID%_%EVENT_PARTICIPANT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%'
            } else {
                url = 'd_hi_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%'
            }
            return {
                url: url,
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailPlayerStatistics = function(sportId) {
            return {
                url: 'd_ps_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailPlayerStatisticsGolf = function(sportId) {
            return {
                url: 'd_psg_%EVENT_ID%_%EVENT_PARTICIPANT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailPlayerStatisticsPreview = function(sportId) {
            return {
                url: 'd_pt_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailLiveOdds = function(sportId) {
            return {
                url: 'df_lod2_%DETAIL_BOOKMAKER_ID%_%EVENT_ID%%IE6_SUFFIX%',
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedDetailOddsSetup = function(sportId) {
            return {
                url: 'df_dos_%PROJECT_TYPE_ID%_%EVENT_ID%_%EVENT_PARTICIPANT_ID%%IE6_SUFFIX%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            }
        };
        Feed_Request.prototype.feedSys = function(sportId) {
            return {
                url: 'sys%IE6_SUFFIX%',
                completeCallback: this._updaterGetter().response_sys
            }
        };
        Feed_Request.prototype.feedTournamentFixtures = function(sportId, feedConfig) {
            var dataPart, seasonId;
            seasonId = (feedConfig != null ? feedConfig.seasonId : void 0) || "";
            dataPart = (feedConfig != null ? feedConfig.dataPart : void 0) || "";
            return {
                context: 'tournament-fixtures_%SPORT_ID%',
                url: "tf_%SPORT_ID%_%COUNTRY_ID%_%TOURNAMENT_ID%_" + seasonId + "_" + dataPart + "_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%",
                completeCallback: this._updaterGetter().response_tournament_fixtures
            }
        };
        Feed_Request.prototype.feedTournamentResults = function(sportId, feedConfig) {
            var dataPart, seasonId;
            seasonId = (feedConfig != null ? feedConfig.seasonId : void 0) || "";
            dataPart = (feedConfig != null ? feedConfig.dataPart : void 0) || "";
            return {
                context: 'tournament-fixtures_%SPORT_ID%',
                url: "tr_%SPORT_ID%_%COUNTRY_ID%_%TOURNAMENT_ID%_" + seasonId + "_" + dataPart + "_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%",
                completeCallback: this._updaterGetter().response_tournament_results
            }
        };
        Feed_Request.prototype.feedParticipantFixtures = function(sportId, feedConfig) {
            var dataPart, participantId;
            participantId = (feedConfig != null ? feedConfig.participantId : void 0) || "";
            dataPart = (feedConfig != null ? feedConfig.dataPart : void 0) || "";
            return {
                context: 'tournament-fixtures_%SPORT_ID%',
                url: "pf_%SPORT_ID%_%COUNTRY_ID%_" + participantId + "_" + dataPart + "_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%",
                completeCallback: this._updaterGetter().response_participant_fixtures
            }
        };
        Feed_Request.prototype.feedParticipantResults = function(sportId, feedConfig) {
            var dataPart, participantId;
            participantId = (feedConfig != null ? feedConfig.participantId : void 0) || "";
            dataPart = (feedConfig != null ? feedConfig.dataPart : void 0) || "";
            return {
                context: 'tournament-fixtures_%SPORT_ID%',
                url: "pr_%SPORT_ID%_%COUNTRY_ID%_" + participantId + "_" + dataPart + "_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%%IE6_SUFFIX%",
                completeCallback: this._updaterGetter().response_participant_results
            }
        };
        Feed_Request.prototype.feedMyTeamsEventsDataMerged = function(sportId, feedConfig) {
            var context, participantIds;
            participantIds = (feedConfig != null ? feedConfig.participantIds.join('_') : void 0) || '';
            context = "my-teams-events-data-merged";
            if (participantIds) {
                context += "_" + participantIds
            }
            return {
                context: context,
                url: "pmx_%PROJECT_TYPE_ID%_%TIMEZONE_HOUR%_" + participantIds + "%IE6_SUFFIX%",
                completeCallback: null
            }
        };
        Feed_Request.prototype.feedPlayerLastMatches = function(sportId, feedConfig) {
            var pageNumber, participantId;
            participantId = (feedConfig != null ? feedConfig.participantId : void 0) || "";
            pageNumber = (feedConfig != null ? feedConfig.pageNumber : void 0) || 0;
            return {
                url: "plm_" + participantId + "_" + pageNumber + "%IE6_SUFFIX%",
                completeCallback: null
            }
        };
        Feed_Request.prototype.executeBeforeFullFeedCallbacks = function() {
            var callback, i, len, ref, results;
            ref = Feed_Request.beforeFullFeedCallbacks;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                callback = ref[i];
                if (typeof callback === "function") {
                    callback()
                }
                results.push(Feed_Request.beforeFullFeedCallbacks.shift())
            }
            return results
        };
        Feed_Request.prototype._getSportId = function(sportId) {
            if (sportId == null) {
                sportId = this._sportIdGetter()
            }
            return parseInt(sportId)
        };
        Feed_Request.prototype._getDay = function(day) {
            return parseInt(day)
        };
        Feed_Request.prototype._replaceTags = function(str, sportId, day) {
            var r, replacements, timezoneHour;
            timezoneHour = cjs.timezone.getTimezoneHour();
            if (this._isShifedMidnight()) {
                timezoneHour += 1
            }
            str = str + "";
            replacements = {
                '%LOCAL_LANGUAGE%': this._localLanguageGetter,
                '%LOCAL_LANGUAGE_ID%': (function(_this) {
                    return function() {
                        return _this._dic.get('utilConfig').get('app', 'lang', 'dc')
                    }
                })(this),
                '%SUDATE%': function() {
                    return day
                },
                '%PROJECT_TYPE_ID%': this._projectTypeIdGetter,
                '%PROJECT_ID%': this._projectIdGetter,
                '%EXTERNAL_PROJECT_ID%': this._externalProjectIdGetter,
                '%STATS_BEHAVIOR%': this._statsBehaviorGetter,
                '%IE6_SUFFIX%': this._ie6UrlSuffixGetter,
                '%DETAIL_BOOKMAKER_ID%': this._detailMainBookmakerGetter,
                '%TIMEZONE_HOUR%': function() {
                    return timezoneHour
                },
                '%SPORT_ID%': (function(sportId) {
                    return function() {
                        return sportId
                    }
                })(sportId),
                '%IS_LIVE_ODDS%': this._isLiveOddsGetter,
                '%COUNTRY_ID%': (function(updaterGetter) {
                    return function() {
                        return updaterGetter().country_id
                    }
                })(this._updaterGetter),
                '%TOURNAMENT_ID%': (function(updaterGetter) {
                    return function() {
                        return updaterGetter().tournament_id
                    }
                })(this._updaterGetter),
                '%COUNTRY_TOURNAMENT_ORDER%': (function(updaterGetter) {
                    return function() {
                        if (updaterGetter().country_tournament_order_fin) {
                            return 'y'
                        } else {
                            return 'n'
                        }
                    }
                })(this._updaterGetter),
                '%EVENT_ID%': (function(updaterGetter) {
                    return function() {
                        return updaterGetter().game
                    }
                })(this._updaterGetter),
                '%EVENT_PARTICIPANT_ID%': this._eventParticipantIdGetter,
                '%ODDS_FORMAT%': this._oddsFormatGetter,
                '%TOURNAMENT_STAGE_ID%': this._tournamentStageIdGetter
            };
            r = new RegExp(cjs.Util.Object.keys(replacements).join('|'), 'g');
            return str.replace(r, function(key) {
                return replacements[key]()
            })
        };
        Feed_Request.prototype._getFeedFunctionName = function(feedName) {
            var feedNamePartIndex, feedNamePartValue, feedNameParts;
            feedNameParts = feedName.split('-');
            for (feedNamePartIndex in feedNameParts) {
                feedNamePartValue = feedNameParts[feedNamePartIndex];
                feedNameParts[feedNamePartIndex] = cjs.Util.String.toUpperFirstChar(feedNamePartValue)
            }
            return 'feed' + feedNameParts.join('')
        };
        Feed_Request.prototype._abortActiveRequest = function(context) {
            if (this._activeRequests[context] == null) {
                return
            }
            if (this._activeRequests[context].updating != null) {
                this._activeRequests[context].abort()
            }
            return delete this._activeRequests[context]
        };
        return Feed_Request
    })();
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.Feed_Request = Feed_Request
    }
}).call(this);
(function() {
    var Feed_Loader, ref;
    Feed_Loader = (function() {
        function Feed_Loader() {
            this.reset()
        }
        Feed_Loader.prototype.reset = function() {
            this.abortActiveRequests();
            this._feeds = {};
            this._feedsLoaded = 0;
            this._filterCallback = function() {
                return true
            };
            this._beforeCallback = null;
            return this._afterCallback = null
        };
        Feed_Loader.prototype.addIntoQueue = function(feedRequest) {
            if (this._feeds[feedRequest.context] != null) {
                return false
            }
            this._feeds[feedRequest.context] = feedRequest;
            return true
        };
        Feed_Loader.prototype.beforeCallback = function(callback) {
            return this._beforeCallback = callback
        };
        Feed_Loader.prototype.afterCallback = function(callback) {
            return this._afterCallback = callback
        };
        Feed_Loader.prototype.abortActiveRequests = function() {
            var context, feedData, ref, ref1;
            ref = this._feeds;
            for (context in ref) {
                feedData = ref[context];
                if (((ref1 = feedData.ajaxJqObject) != null ? ref1.updating : void 0) != null) {
                    feedData.ajaxJqObject.abort()
                }
            }
            return this._feedsLoaded = 0
        };
        Feed_Loader.prototype.downloadAndExecuteFeeds = function() {
            var context, feedCount;
            this.abortActiveRequests();
            feedCount = 0;
            for (context in this._feeds) {
                this._downloadFeed(context);
                feedCount++
            }
            if (feedCount === 0) {
                if (typeof this._beforeCallback === "function") {
                    this._beforeCallback()
                }
                if (typeof this._afterCallback === "function") {
                    this._afterCallback()
                }
            }
            return true
        };
        Feed_Loader.prototype.executeCompleteCallback = function(context) {
            var feedData, r;
            if ((this._feeds[context] == null) || this._feedsLoaded !== cjs.Util.Object.keys(this._feeds).length) {
                return false
            }
            feedData = this._feeds[context];
            if (feedData.beforeCallback) {
                feedData.beforeCallback()
            }
            r = feedData.responseData;
            return feedData.completeCallback(r.responseStatus, r.responseHeaders, r.responseContent, r.responseTrigger, r.responseCustomHeaders)
        };
        Feed_Loader.prototype.executeFilterCallback = function(callback) {
            return this._filterCallback = callback
        };
        Feed_Loader.prototype._downloadFeed = function(context) {
            var completeCallback, feedData;
            feedData = this._feeds[context];
            completeCallback = (function(obj, feedContext) {
                return function(responseStatus, responseHeaders, responseContent, responseTrigger, responseCustomHeaders) {
                    return obj._responseCallback(feedContext, responseStatus, responseHeaders, responseContent, responseTrigger, responseCustomHeaders)
                }
            })(this, context);
            if (typeof feedData.beforeCallback === "function") {
                feedData.beforeCallback()
            }
            this._feeds[context].ajaxJqObject = cjs.feedRequest._createAjaxJqObject(feedData.url, completeCallback, feedData.feedName);
            return this._feeds[context].ajaxJqObject.update(feedData.postData, feedData.postMethod, feedData.headers)
        };
        Feed_Loader.prototype._responseCallback = function(feedContext, responseStatus, responseHeaders, responseContent, responseTrigger, responseCustomHeaders) {
            this._feeds[feedContext].responseData = {
                responseStatus: responseStatus,
                responseHeaders: responseHeaders,
                responseContent: responseContent,
                responseTrigger: responseTrigger,
                responseCustomHeaders: responseCustomHeaders
            };
            this._feedsLoaded++;
            if (this._feedsLoaded === cjs.Util.Object.keys(this._feeds).length) {
                return this._executeAllCallbacks()
            }
        };
        Feed_Loader.prototype._executeAllCallbacks = function() {
            var context, feedData, ref;
            if (typeof this._beforeCallback === "function") {
                this._beforeCallback()
            }
            ref = this._feeds;
            for (context in ref) {
                feedData = ref[context];
                if (!this._filterCallback(context)) {
                    continue
                }
                this.executeCompleteCallback(context)
            }
            if (typeof this._afterCallback === "function") {
                this._afterCallback()
            }
            return true
        };
        return Feed_Loader
    })();
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.Feed_Loader = Feed_Loader
    }
}).call(this);
(function() {
    var Feed_Logger;
    Feed_Logger = (function() {
        Feed_Logger.MAX_COUNT = 100;

        function Feed_Logger() {
            this._feeds = []
        }
        Feed_Logger.prototype.log = function(data) {
            this._feeds.push(data);
            if (this._feeds.length > Feed_Logger.MAX_COUNT) {
                return this._feeds.shift()
            }
        };
        Feed_Logger.prototype.get = function() {
            return this._feeds
        };
        return Feed_Logger
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Feed_Logger', Feed_Logger)
}).call(this);
(function() {
    var Feed_Parser;
    Feed_Parser = (function() {
        function Feed_Parser(util_object, util_enviroment) {
            this.util_object = util_object;
            this.util_enviroment = util_enviroment;
            this._parserConfig = this.util_enviroment.getParserConfig()
        }
        Feed_Parser.prototype.parse = function(content) {
            var i, index, item, items, itemsCount, len, parsedItems, parts, ref, signature, value;
            ref = this._parseContentToItems(content), parsedItems = ref[0], signature = ref[1];
            itemsCount = -1;
            items = [];
            for (i = 0, len = parsedItems.length; i < len; i++) {
                item = parsedItems[i];
                if (itemsCount === -1 || item === '') {
                    itemsCount++;
                    items[itemsCount] = []
                }
                if (item !== '') {
                    parts = item.split(this._parserConfig.JS_INDEX);
                    index = parts[0];
                    value = parts[1];
                    if (items[itemsCount][index] == null) {
                        items[itemsCount][index] = []
                    }
                    items[itemsCount][index].push(value)
                }
            }
            if (items.length !== 0) {
                if (this.util_object.keys(items[items.length - 1]).length === 0) {
                    items.pop()
                }
            }
            return {
                'data': items,
                'signature': signature
            }
        };
        Feed_Parser.prototype._parseContentToItems = function(content) {
            var i, index, item, items, j, len, len1, ref, ref1, row, rows, signature, value;
            signature = '';
            items = [];
            content = this._trim(content);
            rows = content.split(this._parserConfig.JS_ROW_END);
            for (i = 0, len = rows.length; i < len; i++) {
                row = rows[i];
                ref = row.split(this._parserConfig.JS_CELL_END);
                for (j = 0, len1 = ref.length; j < len1; j++) {
                    item = ref[j];
                    items.push(item);
                    if (item !== '') {
                        ref1 = item.split(this._parserConfig.JS_INDEX), index = ref1[0], value = ref1[1];
                        if (index === 'A1') {
                            if (!value) {
                                value = null
                            }
                            signature = value
                        }
                    }
                }
            }
            return [items, signature]
        };
        Feed_Parser.prototype._trim = function(content) {
            var ref;
            while ((ref = content.charAt(content.length - 1)) === this._parserConfig.JS_ROW_END || ref === this._parserConfig.JS_CELL_END) {
                content = content.substring(0, content.length - 1)
            }
            return content
        };
        return Feed_Parser
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Feed_Parser', Feed_Parser)
}).call(this);
(function() {
    var Feed_Translator;
    Feed_Translator = (function() {
        function Feed_Translator() {
            this._dictionary = {}
        }
        Feed_Translator.prototype.translate = function(toTranslate) {
            var i, key, len, transKeys, translate, translateForKey, value;
            transKeys = this._parseTransKeys(toTranslate);
            if (transKeys === null) {
                return toTranslate
            }
            translate = toTranslate;
            for (key = i = 0, len = transKeys.length; i < len; key = ++i) {
                value = transKeys[key];
                translateForKey = this._get(value);
                if (translateForKey === null) {
                    return false
                }
                if (translateForKey !== null) {
                    translate = translate.replace(value, translateForKey)
                }
            }
            return translate
        };
        Feed_Translator.prototype._isParsable = function(toTranslate) {
            if (typeof toTranslate === 'string') {
                return true
            }
            return false
        };
        Feed_Translator.prototype._parseTransKeys = function(toTranslate) {
            if (!this._isParsable(toTranslate)) {
                return null
            }
            return toTranslate.match(/(\{[A-Z]+-[A-Z]+-[a-zA-Z0-9]+\})/g)
        };
        Feed_Translator.prototype._parseDictionary = function(dictionaryItem) {
            if (!this._isParsable(dictionaryItem)) {
                return null
            }
            return dictionaryItem.match(/^(\{[A-Z]+-[A-Z]+-[a-zA-Z0-9]+\})_(.*)$/)
        };
        Feed_Translator.prototype.parseIntoDictionary = function(dictionaryItem) {
            var _, key, parsedDictionary, translate;
            parsedDictionary = this._parseDictionary(dictionaryItem);
            if (parsedDictionary == null) {
                return false
            }
            _ = parsedDictionary[0], key = parsedDictionary[1], translate = parsedDictionary[2];
            this._addToDictionary(key, translate);
            return true
        };
        Feed_Translator.prototype._addToDictionary = function(key, translate) {
            return this._dictionary[key] = translate
        };
        Feed_Translator.prototype._get = function(key) {
            var translate;
            translate = null;
            if (this._dictionary[key] != null) {
                translate = this._dictionary[key]
            }
            return translate
        };
        return Feed_Translator
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Feed_Translator', Feed_Translator)
}).call(this);
(function() {
    var Feed_Service_LocalUpdate, ref;
    Feed_Service_LocalUpdate = (function() {
        Feed_Service_LocalUpdate.NAME = 'updateLocal';

        function Feed_Service_LocalUpdate(_sportId, _feedRequestGetter, _windowGetter, _updaterGetter) {
            this._sportId = _sportId;
            this._feedRequestGetter = _feedRequestGetter;
            this._windowGetter = _windowGetter;
            this._updaterGetter = _updaterGetter;
            this._syncTime = 0;
            this._lastSyncTime = 0
        }
        Feed_Service_LocalUpdate.prototype.setSyncTime = function(timestamp) {
            return this._syncTime = parseInt(timestamp)
        };
        Feed_Service_LocalUpdate.prototype.update = function(action) {
            var responseCallback;
            if (action !== 'update') {
                return false
            }
            responseCallback = (function(_this) {
                return function(status, headers, content, trigger) {
                    return _this._response(status, headers, content, trigger)
                }
            })(this);
            if (this._syncTime > this._lastSyncTime) {
                this._feedRequestGetter().execute(Feed_Service_LocalUpdate.NAME, this._sportId, responseCallback);
                this._lastSyncTime = this._syncTime;
                return true
            }
            return false
        };
        Feed_Service_LocalUpdate.prototype._response = function(status, headers, content, trigger) {
            this._windowGetter().parse(content, true, false, trigger);
            return this._updaterGetter().update(trigger)
        };
        return Feed_Service_LocalUpdate
    })();
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.Feed_Service_LocalUpdate = Feed_Service_LocalUpdate
    }
}).call(this);
(function() {
    var Feed_Content_LiveOdds;
    Feed_Content_LiveOdds = (function() {
        Feed_Content_LiveOdds.prototype.ANIMATION_DURATION = 100;
        Feed_Content_LiveOdds.prototype.EMPTY_VALUE_CHAR = '-';

        function Feed_Content_LiveOdds(util_enviroment, _$, Feed_Parser, util_config, util_odds, util_trans, util_number, util_list) {
            this.util_enviroment = util_enviroment;
            this._$ = _$;
            this.Feed_Parser = Feed_Parser;
            this.util_config = util_config;
            this.util_odds = util_odds;
            this.util_trans = util_trans;
            this.util_number = util_number;
            this.util_list = util_list;
            this._updater = this.util_enviroment.getUpdater();
            this._tabElementId = 'tab-live-odds';
            this._contentElementId = 'live-odds-content';
            this._tableId = 'default-live-odds';
            this._feedName = 'detail-live-odds';
            this._oddsFormatGetter = this.util_enviroment.getOddsFormat();
            this._updateAlreadyUsed = false;
            this._currentEventStageType = null;
            this._lastEventStageType = null;
            this._bookmakerId = null;
            this._downloadingFeedInProgress = false;
            this._initSetBookmakerIdCb()
        }
        Feed_Content_LiveOdds.prototype._initSetBookmakerIdCb = function() {
            return this._setBookmakerIdCb = function() {}
        };
        Feed_Content_LiveOdds.prototype.setBookmakerId = function(bookmakerId) {
            bookmakerId = parseInt(bookmakerId);
            this._bookmakerId = isNaN(bookmakerId) ? null : bookmakerId;
            if (this._bookmakerId) {
                return this._setBookmakerIdCb()
            }
        };
        Feed_Content_LiveOdds.prototype.getBookmakerId = function() {
            return this._bookmakerId
        };
        Feed_Content_LiveOdds.prototype.getTableId = function() {
            return this._tableId
        };
        Feed_Content_LiveOdds.prototype.getFeedName = function() {
            return this._feedName
        };
        Feed_Content_LiveOdds.prototype.getTabElementId = function() {
            return this._tabElementId
        };
        Feed_Content_LiveOdds.prototype.wasUpdateAlreadyUsed = function() {
            return this._updateAlreadyUsed
        };
        Feed_Content_LiveOdds.prototype.setCurrentEventStageType = function(currentEventStageType) {
            if (this._currentEventStageType !== currentEventStageType) {
                this._lastEventStageType = this._currentEventStageType
            }
            return this._currentEventStageType = currentEventStageType
        };
        Feed_Content_LiveOdds.prototype.isActive = function() {
            var data, isActive, isLive;
            data = this.util_enviroment.getFsDetail();
            isActive = data['CQ'] != null ? this._isBookmakerActive(data['CQ']) : false;
            isLive = data['DA'] === this.util_list.getEventStageTypes().LIVE;
            return isActive && isLive
        };
        Feed_Content_LiveOdds.prototype.updateHash = function(_hash) {
            var data;
            this._hash = _hash;
            data = this.util_enviroment.getFsDetail();
            if (data['CN'] == null) {
                return data['CN'] = this._hash
            } else if (data['CN'] !== this._hash && this.isActive()) {
                return this.downloadFeed(2000)
            }
        };
        Feed_Content_LiveOdds.prototype.show = function(callbackAfterShow) {
            this._$("#" + this._tabElementId).show();
            return typeof callbackAfterShow === "function" ? callbackAfterShow() : void 0
        };
        Feed_Content_LiveOdds.prototype.hide = function() {
            return this._$("#" + this._tabElementId).hide()
        };
        Feed_Content_LiveOdds.prototype.downloadFeed = function(delay) {
            var cb;
            if (delay == null) {
                delay = 0
            }
            if (this._downloadingFeedInProgress) {
                return
            }
            this._downloadingFeedInProgress = true;
            cb = (function(_this) {
                return function() {
                    var bookieCb;
                    bookieCb = function() {
                        _this._initSetBookmakerIdCb();
                        return _this._updater.doc_update(_this._feedName)
                    };
                    if (_this._bookmakerId) {
                        return bookieCb()
                    } else {
                        return _this._setBookmakerIdCb = bookieCb
                    }
                }
            })(this);
            clearTimeout(this._timeoutId);
            if (delay) {
                return this._timeoutId = setTimeout(cb, delay)
            } else {
                return cb()
            }
        };
        Feed_Content_LiveOdds.prototype.update = function(data) {
            this._downloadingFeedInProgress = false;
            if (!data['feedContent']) {
                return
            }
            if (data['show']) {
                this.show(data['callbackAfterShow'])
            }
            this.updateHash(data['hash']);
            return this.updateHtmlContent(data['feedContent'])
        };
        Feed_Content_LiveOdds.prototype.updateHtmlContent = function(feedContent) {
            var cellType, i, len, movementClass, movementShort, oddsActive, oddsExists, oddsType, params, parsedData, ref, ref1, ref2, ref3, value;
            if (!feedContent) {
                return false
            }
            parsedData = this.Feed_Parser.parse(feedContent).data[0];
            if (!parsedData) {
                return false
            }
            cellType = 0;
            ref = ['A', 'B', 'C'];
            for (i = 0, len = ref.length; i < len; i++) {
                oddsType = ref[i];
                oddsExists = (((ref1 = parsedData["X" + oddsType]) != null ? ref1[0] : void 0) != null) && parsedData["X" + oddsType][0] !== '';
                oddsActive = (((ref2 = parsedData["Y" + oddsType]) != null ? ref2[0] : void 0) != null) && parsedData["Y" + oddsType][0] === '1';
                if (oddsExists) {
                    if (oddsType === 'A') {
                        cellType = 1
                    }
                    if (oddsType === 'B') {
                        cellType = 1 - cellType
                    }
                    if (oddsType === 'C') {
                        cellType = 2
                    }
                    ref3 = this._getOddsValues(parsedData["X" + oddsType][0]), value = ref3[0], movementClass = ref3[1], movementShort = ref3[2];
                    params = {
                        'newValue': value,
                        'movementClass': movementClass,
                        'movementShort': movementShort,
                        'cellType': "o_" + cellType,
                        'oddsType': oddsType,
                        'oddsActive': oddsActive
                    };
                    this._updateOdds(params)
                }
            }
            this._updateAlreadyUsed = true;
            return true
        };
        Feed_Content_LiveOdds.prototype._updateOdds = function(params) {
            var $cell;
            $cell = this._$("#" + this._tableId + " td.kx." + params['cellType'] + " span");
            params['currentOddsActive'] = $cell.attr('data-active') === '1';
            params['currentValue'] = $cell.html();
            params['newFormattedValue'] = this.util_odds.getSingleOddsInNewFormat(this._oddsFormatGetter(), params['newValue']);
            if (!this._isOddsUpdatable(params)) {
                return false
            }
            this._updateOddsCellValue($cell, params);
            return true
        };
        Feed_Content_LiveOdds.prototype._updateOddsCellValue = function($cell, params) {
            var callback;
            callback = (function(_this) {
                return function() {
                    var $betAndWinSpan, active, attrName, attrValue, attrs, className, classes, index, oldBasicAltValue;
                    params['currentEuValue'] = $cell.attr('eu');
                    $cell.html(params['newFormattedValue']);
                    if (_this._lastEventStageType === _this.util_list.getEventStageTypes().SCHEDULED) {
                        oldBasicAltValue = _this._createOldEuValue($cell.attr('alt'));
                        if (oldBasicAltValue && oldBasicAltValue !== Feed_Content_LiveOdds.prototype.EMPTY_VALUE_CHAR) {
                            params['basicAltFormattedValue'] = _this.util_odds.getSingleOddsInNewFormat(_this._oddsFormatGetter(), oldBasicAltValue)
                        }
                    }
                    attrs = _this._createAttributesToUpdate(params);
                    for (attrName in attrs) {
                        attrValue = attrs[attrName];
                        $cell.attr(attrName, attrValue)
                    }
                    classes = _this._createClasses(params);
                    for (className in classes) {
                        active = classes[className];
                        if (active) {
                            $cell.addClass(className)
                        } else {
                            $cell.removeClass(className)
                        }
                    }
                    index = $cell.closest('td').index();
                    $betAndWinSpan = _this._$("#" + _this._tableId + " tr.bet-and-win td:eq(" + index + ") span");
                    return $betAndWinSpan.html(_this._getFormattedBetAndWinAmount(params))
                }
            })(this);
            if (this._updateAlreadyUsed) {
                return this._doAnimationOnElement($cell, (function(_this) {
                    return function($cell, params) {
                        return function() {
                            return callback()
                        }
                    }
                })(this)($cell, params))
            } else {
                return callback()
            }
        };
        Feed_Content_LiveOdds.prototype._doAnimationOnElement = function($element, firstStepCallback) {
            var callback, stepsCount;
            stepsCount = 3;
            callback = function(opacity, step) {
                if (!(step < stepsCount * 2)) {
                    return
                }
                return $element.animate({
                    'opacity': opacity
                }, Feed_Content_LiveOdds.ANIMATION_DURATION, (function(opacity, step) {
                    return function() {
                        if (step === 0) {
                            if (typeof firstStepCallback === "function") {
                                firstStepCallback()
                            }
                        }
                        return callback(1 - opacity, step + 1)
                    }
                })(opacity, step))
            };
            return callback(0, 0)
        };
        Feed_Content_LiveOdds.prototype._isOddsUpdatable = function(params) {
            if (params['oddsActive'] !== params['currentOddsActive']) {
                return true
            }
            if (params['currentValue'] === params['newFormattedValue']) {
                return false
            }
            return true
        };
        Feed_Content_LiveOdds.prototype._createAttributesToUpdate = function(params) {
            var attrs, oldEu;
            attrs = {
                'alt': '',
                'eu': this.util_odds.getSingleOddsInNewFormat('eu', params['newValue']),
                'data-active': params['oddsActive'] + 0
            };
            if (!(params['currentValue'] && params['movementShort'] && params['newFormattedValue'])) {
                return attrs
            }
            attrs['alt'] = "" + params['currentValue'] + params['movementShort'] + params['newFormattedValue'];
            if (params['currentValue'] === params['newFormattedValue']) {
                delete attrs['alt']
            } else if (params['currentValue'] === Feed_Content_LiveOdds.prototype.EMPTY_VALUE_CHAR) {
                attrs['alt'] = '';
                if (params['basicAltFormattedValue']) {
                    attrs['alt'] = "" + params['basicAltFormattedValue'] + params['movementShort'] + params['newFormattedValue']
                }
            }
            if (params['currentEuValue']) {
                oldEu = this._createOldEuValue(params['currentEuValue']);
                attrs['eu'] = "" + oldEu + params['movementShort'] + attrs['eu']
            }
            return attrs
        };
        Feed_Content_LiveOdds.prototype._createClasses = function(params) {
            var classes, hasCurrentValue, isDown, isValidEventStageType;
            classes = {
                'down': false,
                'up': false
            };
            hasCurrentValue = params['currentValue'] !== Feed_Content_LiveOdds.prototype.EMPTY_VALUE_CHAR;
            isValidEventStageType = this._lastEventStageType === this.util_list.getEventStageTypes().SCHEDULED;
            if (params['movementClass'] && (hasCurrentValue || isValidEventStageType)) {
                isDown = params['movementClass'] === 'down';
                classes['down'] = isDown;
                classes['up'] = !isDown
            }
            classes['not-published'] = !params['oddsActive'];
            return classes
        };
        Feed_Content_LiveOdds.prototype._getFormattedBetAndWinAmount = function(params) {
            var betAndWinAmount, formattedTotalAmount, totalAmount;
            if (!params['newValue']) {
                return ''
            }
            betAndWinAmount = this.util_config.get('app', 'odds', 'bet_and_win', 'amount');
            totalAmount = parseInt(params['newValue'] * betAndWinAmount);
            formattedTotalAmount = this.util_number.format(totalAmount, this.util_trans('TRANS_ODDS_BET_AND_WIN_AMOUNT_SEPARATOR'));
            return this.util_trans('TRANS_ODDS_BET_AND_WIN_AMOUNT_FORMAT', [formattedTotalAmount])
        };
        Feed_Content_LiveOdds.prototype._getOddsValues = function(value) {
            var firstChar, movementClass, movementShort;
            movementClass = '';
            movementShort = '';
            if (!value) {
                value = ''
            }
            if (value) {
                firstChar = value.charAt(0);
                if (firstChar === 'd' || firstChar === 'u') {
                    movementClass = firstChar === 'd' ? 'down' : 'up';
                    movementShort = "[" + firstChar + "]";
                    value = value.substr(1)
                } else if (firstChar === 's') {
                    value = value.substr(1)
                }
            }
            return [value, movementClass, movementShort]
        };
        Feed_Content_LiveOdds.prototype._createOldEuValue = function(value) {
            var oldEuValues, oldMovement, ref;
            if (!value) {
                return ''
            }
            oldMovement = value.match(/\[[ud]\]/);
            oldEuValues = value.split(oldMovement);
            return (ref = oldEuValues[1]) != null ? ref : oldEuValues[0]
        };
        Feed_Content_LiveOdds.prototype._isBookmakerActive = function(data) {
            var bookmakers;
            if (typeof data === 'string') {
                bookmakers = data.split('|').map(function(a) {
                    return parseInt(a)
                });
                return bookmakers.indexOf(this._bookmakerId) > -1
            } else {
                return data === this._bookmakerId
            }
        };
        return Feed_Content_LiveOdds
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Feed_Content_LiveOdds', Feed_Content_LiveOdds)
}).call(this);
(function() {
    var Feed_Content_OddsSetup;
    Feed_Content_OddsSetup = (function() {
        function Feed_Content_OddsSetup(_$, util_enviroment, HtmlTemplate, utilConfig, Feed_Parser, utilList, util_odds, utilTrans) {
            this._$ = _$;
            this.util_enviroment = util_enviroment;
            this.HtmlTemplate = HtmlTemplate;
            this.utilConfig = utilConfig;
            this.Feed_Parser = Feed_Parser;
            this.utilList = utilList;
            this.util_odds = util_odds;
            this.utilTrans = utilTrans;
            this._htmlTemplates = this.util_enviroment.getHtmlTemplate();
            this._isVisible = false;
            this._liveData = {};
            this._prematchData = {};
            this._stripData = {};
            this._liveBettingStrip = {};
            this._parsedData = {};
            this._format = this.util_enviroment.getOddsFormat()();
            this._versionBettingStrip = this.utilConfig.get('app', 'detail_live_betting_strip', 'version');
            this._bookmakerId;
            this._initCallbacks();
            this._rotateLiveBettingStripTime = this.utilConfig.get('app', 'detail_live_betting_strip', 'rotation_time')
        }
        Feed_Content_OddsSetup.prototype.setLiveData = function(_liveData) {
            this._liveData = _liveData
        };
        Feed_Content_OddsSetup.prototype.setPrematchData = function(_prematchData) {
            this._prematchData = _prematchData
        };
        Feed_Content_OddsSetup.prototype.setStripData = function(_stripData) {
            this._stripData = _stripData
        };
        Feed_Content_OddsSetup.prototype.setData = function(_data) {
            this._data = _data;
            if (this._data) {
                return this.parseFeed(this._data)
            }
        };
        Feed_Content_OddsSetup.prototype.setEventStageTypeId = function(_eventStageTypeId) {
            this._eventStageTypeId = _eventStageTypeId
        };
        Feed_Content_OddsSetup.prototype.setVisible = function(_isVisible) {
            this._isVisible = _isVisible
        };
        Feed_Content_OddsSetup.prototype.getBookmakerId = function() {
            return this._getDataFromIndex("MX")
        };
        Feed_Content_OddsSetup.prototype.show = function() {
            if (!(this._data && this._eventStageTypeId)) {
                return
            }
            if (!this.isVisible()) {
                this.parseFeed(this._data);
                this._parseLiveBettingStrip();
                this._parseBookmakerData();
                this._parseBetAndWinCells();
                this.setOddsToTemplate(this._parseOddsCells('M'));
                this.setOddsToTemplate(this._parseOddsCells('O'));
                this.showLiveBettingStrip(this._eventStageTypeId);
                this.createHtmlLiveOdds();
                this.createHtmlPrematchOdds();
                this.createBroadcast();
                this.setVisible(true);
                return this.runCallbacks()
            }
        };
        Feed_Content_OddsSetup.prototype.addCallback = function(cb) {
            return this._callbacks['common'].push(cb)
        };
        Feed_Content_OddsSetup.prototype.addFinalCallback = function(cb) {
            return this._callbacks['final'].push(cb)
        };
        Feed_Content_OddsSetup.prototype.runCallbacks = function() {
            var cb, j, k, len, len1, ref, ref1;
            ref = this._callbacks['common'];
            for (j = 0, len = ref.length; j < len; j++) {
                cb = ref[j];
                if (typeof cb === "function") {
                    cb(this)
                }
            }
            ref1 = this._callbacks['final'];
            for (k = 0, len1 = ref1.length; k < len1; k++) {
                cb = ref1[k];
                if (typeof cb === "function") {
                    cb(this)
                }
            }
            return this._initCallbacks()
        };
        Feed_Content_OddsSetup.prototype._initCallbacks = function() {
            return this._callbacks = {
                'common': [],
                'final': []
            }
        };
        Feed_Content_OddsSetup.prototype.isVisible = function() {
            return this._isVisible
        };
        Feed_Content_OddsSetup.prototype.addOrRunCallback = function(cb) {
            if (!this.isVisible()) {
                return this.addCallback(cb)
            } else {
                return typeof cb === "function" ? cb() : void 0
            }
        };
        Feed_Content_OddsSetup.prototype.parseFeed = function(feedContent) {
            if (!feedContent) {
                return false
            }
            this._parsedData = this.Feed_Parser.parse(feedContent).data[0];
            if (!this._parsedData) {
                return false
            }
        };
        Feed_Content_OddsSetup.prototype._parseOddsCells = function(type) {
            var data;
            data = {
                live: type === 'O' ? 1 : 0,
                oddsValues: this._getArrayFromIndex(type + "I"),
                previousOddsValues: this._getArrayFromIndex(type + "J"),
                oddsActive: this._getArrayFromIndex(type + "K"),
                movements: this._getArrayFromIndex(type + "L"),
                wrappedClasses: this._getArrayFromIndex(type + "M")
            };
            return data
        };
        Feed_Content_OddsSetup.prototype.setOddsToTemplate = function(data) {
            var active, count, euValue, i, oddsCells, previousValue, value;
            i = 0;
            oddsCells = [];
            count = (data != null ? data.oddsValues : void 0) != null ? data.oddsValues.length : 0;
            while (i < count) {
                active = data.oddsActive[i] === '1';
                value = this._getOddValue(data.oddsValues[i]);
                previousValue = this._getOddValue(data.previousOddsValues[i]);
                euValue = this._getAltText(data.oddsValues[i], data.previousOddsValues[i], data.movements[i]);
                oddsCells[i] = {
                    value: value,
                    previous_value: previousValue,
                    wrapper_class: data.wrappedClasses[i],
                    content_class: this._getContentClass(data.movements[i], active),
                    alt_text: data.live ? value : this._getAltText(value, previousValue, data.movements[i]),
                    eu_value: data.live ? euValue : this._getEuValue(euValue, data.oddsValues[i])
                };
                i++
            }
            if (data.live) {
                return this._liveData.oddsCells = oddsCells
            } else {
                return this._prematchData.oddsCells = oddsCells
            }
        };
        Feed_Content_OddsSetup.prototype._getAltText = function(value, prevValue, movement) {
            if (this._hasValue(value) && this._hasValue(prevValue) && this._hasValue(movement)) {
                return prevValue + ("[" + (movement.charAt(0)) + "]") + value
            } else {
                return ''
            }
        };
        Feed_Content_OddsSetup.prototype._getEuValue = function(alt, value) {
            if (alt === '') {
                return value
            } else {
                return alt
            }
        };
        Feed_Content_OddsSetup.prototype._hasValue = function(value) {
            return value && value !== '-' && value.length > 0
        };
        Feed_Content_OddsSetup.prototype._getOddValue = function(value) {
            var odds;
            if (value !== '-') {
                return odds = this.util_odds.getSingleOddsInNewFormat(this.util_enviroment.getOddsFormat()(), value)
            } else {
                return odds = value
            }
        };
        Feed_Content_OddsSetup.prototype._getContentClass = function(movement, active) {
            var classes;
            classes = ["odds-wrap"];
            if (movement) {
                classes.push(movement)
            }
            if (!active) {
                classes.push("not-published")
            }
            return classes.join(' ')
        };
        Feed_Content_OddsSetup.prototype.createHtmlLiveOdds = function() {
            var htmlLiveOddsContent;
            htmlLiveOddsContent = this.HtmlTemplate.render(this._htmlTemplates.TPL_ODDS_ODDS_CONTENT, this._liveData);
            return this._$('#detail').find("#live-odds-content").html(htmlLiveOddsContent)
        };
        Feed_Content_OddsSetup.prototype.createHtmlPrematchOdds = function() {
            var htmlOddsContent;
            if (this._hasValues(this._prematchData.oddsCells)) {
                htmlOddsContent = this.HtmlTemplate.render(this._htmlTemplates.TPL_ODDS_ODDS_CONTENT, this._prematchData);
                this._$('#detail').find("#prematch-odds-content").html(htmlOddsContent);
                return this.showLiveOffer()
            }
        };
        Feed_Content_OddsSetup.prototype.createBroadcast = function() {
            var broadcast, broadcastJson, data, htmlBroadcastContent, liveStreaming, tvChannel;
            broadcastJson = this._getDataFromIndex("AL");
            if (broadcastJson !== '') {
                broadcast = JSON.parse(broadcastJson);
                liveStreaming = this._getBroadcastNameAndUrl(broadcast[2]);
                tvChannel = this._getBroadcastNameAndUrl(broadcast[1]);
                if (liveStreaming.length > 0 || tvChannel.length > 0) {
                    data = {
                        liveStreaming: liveStreaming,
                        tvChannel: tvChannel,
                        title: this.utilTrans('TRANS_DETAIL_BOOKMARK_TV_LIVE_STREAMING'),
                        titleLiveStreaming: this.utilTrans('TRANS_LIVE_STREAMING'),
                        titleTvChannel: this.utilTrans('TRANS_TV_CHANNEL')
                    };
                    htmlBroadcastContent = this.HtmlTemplate.render(this._htmlTemplates.TPL_BROADCAST_BROADCAST, data);
                    this._$('#detail').find("#broadcast").html(htmlBroadcastContent)
                }
            }
            return ''
        };
        Feed_Content_OddsSetup.prototype.showLiveOffer = function() {
            if (this._eventStageTypeId === this.utilList.getEventStageTypes().FINISHED) {
                return this._$('.live-offer2').hide()
            } else if (this._eventStageTypeId === this.utilList.getEventStageTypes().LIVE) {
                return this._$('.live-offer1').addClass('live-offer2').removeClass('live-offer1')
            }
        };
        Feed_Content_OddsSetup.prototype.showLiveBettingStrip = function() {
            if (this._eventStageTypeId === this.utilList.getEventStageTypes().LIVE && (this._stripData[this._bookmakerId] != null)) {
                this._setLiveBettingStripContent(this._getHtmlBettingStrip());
                if (this._$(".live-betting-strip > div").length > 1) {
                    this._$(".live-betting-strip > div:gt(0)").addClass('hidden');
                    clearInterval(this._rotateInterval);
                    return this._rotateInterval = setInterval((function(_this) {
                        return function() {
                            var $first, $next;
                            $first = _this._$('.live-betting-strip > div:first');
                            $first.addClass('hidden');
                            $next = $first.next();
                            $first.appendTo('.live-betting-strip');
                            return $next.removeClass('hidden')
                        }
                    })(this), this._rotateLiveBettingStripTime)
                }
            } else {
                return this._setLiveBettingStripContent('')
            }
        };
        Feed_Content_OddsSetup.prototype._getHtmlBettingStrip = function() {
            var bettingStrip, button, content, index, j, len, params, ref;
            if (this._versionBettingStrip !== 9) {
                ref = this._liveBettingStrip.liveBettingStripText;
                for (j = 0, len = ref.length; j < len; j++) {
                    bettingStrip = ref[j];
                    index = this._liveBettingStrip.liveBettingStripText.indexOf(bettingStrip);
                    content = this._$('<div>' + bettingStrip.OH_1 + '</div>').text();
                    this._liveBettingStrip.liveBettingStripText[index]['OH_1'] = content;
                    button = this._$('<div>' + bettingStrip.OH_2 + '</div>').text();
                    this._liveBettingStrip.liveBettingStripText[index]['OH_2'] = button
                }
            }
            params = {
                'version': this._versionBettingStrip,
                'version7or8': this._versionBettingStrip === 7 || this._versionBettingStrip === 8,
                'version9': this._versionBettingStrip === 9,
                'liveBettingStripUrl': this._liveBettingStrip.liveBettingStripUrl,
                'liveBettingStripText': this._liveBettingStrip.liveBettingStripText
            };
            return this.HtmlTemplate.render(this._htmlTemplates.TPL_ODDS_LIVE_BETTING_STRIP, params)
        };
        Feed_Content_OddsSetup.prototype._setLiveBettingStripContent = function(html) {
            return this._$('#detail').find('.live-betting-strip').html(html)
        };
        Feed_Content_OddsSetup.prototype._getDataFromIndex = function(index) {
            var ref;
            if ((((ref = this._parsedData[index]) != null ? ref[0] : void 0) != null) && this._parsedData[index][0] !== '') {
                return this._parsedData[index][0]
            } else {
                return ''
            }
        };
        Feed_Content_OddsSetup.prototype._getArrayFromIndex = function(index) {
            var arrayFromIndex;
            arrayFromIndex = this._getDataFromIndex(index);
            if ((arrayFromIndex != null) && arrayFromIndex !== '') {
                return arrayFromIndex.split("|")
            } else {
                return []
            }
        };
        Feed_Content_OddsSetup.prototype._parseBookmakerData = function() {
            this._prematchData.mainBookmakerLinkHtml = this._getDataFromIndex("MN");
            this._prematchData.mainBookmakerBonusHtml = this._getDataFromIndex("MO");
            this._prematchData.mainBookmakerUrl = this._getDataFromIndex("MP");
            this._liveData.mainBookmakerLinkHtml = this._getDataFromIndex("ON");
            this._liveData.mainBookmakerBonusHtml = this._getDataFromIndex("OO");
            this._liveData.mainBookmakerUrl = this._getDataFromIndex("OP");
            return this._bookmakerId = parseInt(this._getDataFromIndex("MX"))
        };
        Feed_Content_OddsSetup.prototype._parseBetAndWinCells = function() {
            this._prematchData.betAndWinCells = this._getArrayFromIndex("MQ");
            return this._liveData.betAndWinCells = this._getArrayFromIndex("OQ")
        };
        Feed_Content_OddsSetup.prototype._parseLiveBettingStrip = function() {
            this._liveBettingStrip.liveBettingStripUrl = this._getDataFromIndex("OG");
            return this._liveBettingStrip.liveBettingStripText = this._$.parseJSON(this._getDataFromIndex("OH"))
        };
        Feed_Content_OddsSetup.prototype._hasValues = function(oddsCells) {
            var cell, j, len, previousValueIsValid, ref, ref1, valueIsValid;
            for (j = 0, len = oddsCells.length; j < len; j++) {
                cell = oddsCells[j];
                if ((cell.value != null) && (cell.previous_value != null)) {
                    valueIsValid = (ref = cell.value) !== '' && ref !== '-';
                    previousValueIsValid = (ref1 = cell.previous_value) !== '' && ref1 !== '-';
                    if (valueIsValid || previousValueIsValid) {
                        return true
                    }
                }
            }
            return false
        };
        Feed_Content_OddsSetup.prototype._isBookmakerActive = function(data) {
            var bookmakers;
            if (typeof data === 'string') {
                bookmakers = data.split('|').map(function(a) {
                    return parseInt(a)
                });
                return bookmakers.indexOf(this._bookmakerId) > -1
            } else {
                return data === this._bookmakerId
            }
        };
        Feed_Content_OddsSetup.prototype._getBroadcastNameAndUrl = function(broadcasts) {
            var broadcast, broadcastTemp, i, j, len;
            broadcastTemp = [];
            if (broadcasts != null) {
                for (i = j = 0, len = broadcasts.length; j < len; i = ++j) {
                    broadcast = broadcasts[i];
                    broadcastTemp[i] = {
                        name: broadcast.BN,
                        url: broadcast.BU
                    }
                }
            }
            return broadcastTemp
        };
        return Feed_Content_OddsSetup
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Feed_Content_OddsSetup', Feed_Content_OddsSetup)
}).call(this);
(function() {
    var Feed_Content_OddsBonus;
    Feed_Content_OddsBonus = (function() {
        function Feed_Content_OddsBonus(utilConfig, Feed_Parser, utilTrans) {
            this.utilConfig = utilConfig;
            this.Feed_Parser = Feed_Parser;
            this.utilTrans = utilTrans;
            this._parsedData = {};
            this._items = {
                short: [],
                long: []
            };
            this._currentIndex = {
                short: 0,
                long: 0
            };
            this._mainBookmakerId = ''
        }
        Feed_Content_OddsBonus.prototype.init = function(feedResponse) {
            return this.parseFeed(feedResponse)
        };
        Feed_Content_OddsBonus.prototype.parseFeed = function(feedContent) {
            var parsedData;
            if (!feedContent) {
                return false
            }
            parsedData = this.Feed_Parser.parse(feedContent).data;
            this._parseBonuses(parsedData);
            if (!parsedData) {
                return false
            }
        };
        Feed_Content_OddsBonus.prototype._parseBonuses = function(parsedData) {
            var item, results, row;
            results = [];
            for (row in parsedData) {
                item = parsedData[row];
                if (item['MY'] != null) {
                    this._items['long'] = item['MY'][0].split("|")
                }
                if (item['MZ'] != null) {
                    this._items['short'] = item['MZ'][0].split("|")
                }
                if (item['MX'] != null) {
                    results.push(this._mainBookmakerId = item['MX'][0])
                } else {
                    results.push(void 0)
                }
            }
            return results
        };
        Feed_Content_OddsBonus.prototype.getMainBookmakerId = function() {
            return this._mainBookmakerId
        };
        Feed_Content_OddsBonus.prototype.getMainBookmakerClass = function() {
            if (this._mainBookmakerId) {
                return 'bookmaker' + this._mainBookmakerId
            } else {
                return ''
            }
        };
        Feed_Content_OddsBonus.prototype.getTitle = function() {
            var title;
            title = this.utilTrans('TRANS_ODDS_BONUS_TITLE');
            if (this.utilConfig.get('app', 'terms_and_conditions_apply', 'enable')) {
                title += ' ' + this.utilTrans('TRANS_TERMS_AND_CONDITIONS_APPLY')
            }
            return title
        };
        Feed_Content_OddsBonus.prototype.getText = function(textType) {
            var ref, text;
            if (((ref = this._items[textType]) != null ? ref[this._currentIndex[textType]] : void 0) != null) {
                text = this._items[textType][this._currentIndex[textType]]
            } else {
                text = ''
            }
            this._resetCounterIfNeeded(textType);
            return text
        };
        Feed_Content_OddsBonus.prototype._resetCounterIfNeeded = function(textType) {
            var count, ref;
            count = 0;
            if (((ref = this._items[textType]) != null ? ref.length : void 0) != null) {
                count = this._items[textType].length
            }
            if (this._currentIndex[textType] === (count - 1)) {
                this.reset();
                return 0
            } else {
                return this._currentIndex[textType]++
            }
        };
        Feed_Content_OddsBonus.prototype.hasItems = function() {
            if (this._items['short'].length === 0 && this._items['long'].length === 0) {
                return false
            }
            return true
        };
        Feed_Content_OddsBonus.prototype.reset = function() {
            return this._currentIndex = {
                short: 0,
                long: 0
            }
        };
        return Feed_Content_OddsBonus
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Feed_Content_OddsBonus', Feed_Content_OddsBonus)
}).call(this);
(function() {
    var LastMatches;
    LastMatches = (function() {
        LastMatches.prototype.FEED_ACTION = 'player-last-matches';

        function LastMatches(util_enviroment, DicProxy, _$, HtmlTemplate) {
            this.util_enviroment = util_enviroment;
            this.DicProxy = DicProxy;
            this._$ = _$;
            this.HtmlTemplate = HtmlTemplate;
            this._nextPageNumber = 1;
            this._htmlTemplates = this.util_enviroment.getHtmlTemplate();
            this._fsUpdate = this.util_enviroment.getFsUpdate();
            this._elementId = "last-matches";
            this._showMoreRowSelector = "#" + this._elementId + " table tr.show-more-last-matches";
            this._delegateEvents()
        }
        LastMatches.prototype.loadNext = function() {
            return this.load(this._nextPageNumber)
        };
        LastMatches.prototype.load = function(pageNumber) {
            var feedRequest, participantId;
            participantId = this.util_enviroment.getParticipantId();
            pageNumber = parseInt(pageNumber);
            if (!(pageNumber > 0)) {
                throw Error("Page number must be greater than zero.")
            }
            this._showLoading();
            feedRequest = this.util_enviroment.getFeedRequestObject();
            return this.DicProxy.onReady((function(_this) {
                return function() {
                    var cb;
                    cb = function(responseStatus, responseHeaders, responseContent) {
                        _this._nextPageNumber = pageNumber + 1;
                        _this._showContent(responseContent);
                        return _this._hideLoading()
                    };
                    return feedRequest.execute(_this.FEED_ACTION, null, cb, {
                        'participantId': participantId,
                        'pageNumber': pageNumber
                    })
                }
            })(this))
        };
        LastMatches.prototype._showContent = function(content) {
            var data, html, templateName;
            data = JSON.parse(content);
            if (data) {
                templateName = this._htmlTemplates.TPL_PLAYER_PROFILE_LAST_MATCHES_ROWS;
                data['lastMatches'] = this._getFilteredLastMatches(data['lastMatches']);
                html = this.HtmlTemplate.render(templateName, data);
                this._$(this._showMoreRowSelector).replaceWith(html);
                return this._fsUpdate.strip_regenerate()
            }
        };
        LastMatches.prototype._getFilteredLastMatches = function(lastMatches) {
            var exists, filteredLastMatches, i, index, lastMatch, len;
            filteredLastMatches = [];
            for (index = i = 0, len = lastMatches.length; i < len; index = ++i) {
                lastMatch = lastMatches[index];
                exists = this._$("#" + this._elementId + " #" + lastMatch.eventId).length > 0;
                if (!exists) {
                    filteredLastMatches.push(lastMatch)
                }
            }
            return filteredLastMatches
        };
        LastMatches.prototype._delegateEvents = function() {
            var tooltipSelector;
            this._$("#fsbody").on('click', this._showMoreRowSelector, (function(_this) {
                return function(e) {
                    return _this.loadNext()
                }
            })(this));
            tooltipSelector = "#" + this._elementId + " tr.event-row td[colspan] span[title]";
            this._$("#fsbody").on("mouseenter", tooltipSelector, (function(_this) {
                return function(e) {
                    return _this.util_enviroment.getTooltipObject().show(_this._$(e.currentTarget).get(0), e, null, null)
                }
            })(this));
            this._$("#fsbody").on("mouseleave", tooltipSelector, (function(_this) {
                return function(e) {
                    return _this.util_enviroment.getTooltipObject().hide(_this._$(e.currentTarget).get(0))
                }
            })(this));
            return this._fsUpdate.register_actions()
        };
        LastMatches.prototype._showLoading = function() {
            var scrollTop;
            scrollTop = this.util_enviroment.getPageScrollTop();
            this._$('#preload').css('top', scrollTop + 100);
            return this.util_enviroment.getPreloadShow()()
        };
        LastMatches.prototype._hideLoading = function() {
            return this.util_enviroment.getPreloadHide()()
        };
        return LastMatches
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Feed_Content_LastMatches', LastMatches)
}).call(this);
(function() {
    var Odds_Prematch;
    Odds_Prematch = (function() {
        function Odds_Prematch(util_enviroment, _$, util_list, util_sport) {
            this.util_enviroment = util_enviroment;
            this._$ = _$;
            this.util_list = util_list;
            this.util_sport = util_sport
        }
        Odds_Prematch.prototype.prepareAndSetDetailOddsWinner = function(element) {
            var awayScore, homeScore, i, isTennis, j, periodLimit, ref, scoreFirstPeriod, scoreSecondPeriod, tennisGameScore;
            if (this._detailOddsWinnerWasSet) {
                return
            }
            if (!this._$(element).find("div.nodata-block").html()) {
                isTennis = this.util_sport.getId() === this.util_list.getSports().TENNIS;
                homeScore = [];
                awayScore = [];
                tennisGameScore = [0, 0];
                periodLimit = 2;
                if (isTennis) {
                    periodLimit = 5
                }
                for (i = j = 1, ref = periodLimit; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
                    homeScore[i] = this._formatScoreForCell(this._$(element).find("td span.p" + i + "_home").html());
                    awayScore[i] = this._formatScoreForCell(this._$(element).find("td span.p" + i + "_away").html());
                    if (isTennis) {
                        tennisGameScore[0] += homeScore[i];
                        tennisGameScore[1] += awayScore[i]
                    }
                }
                scoreFirstPeriod = [homeScore[1], awayScore[1]];
                scoreSecondPeriod = [homeScore[2], awayScore[2]];
                this.util_enviroment.getDetailSetOddsWinner()(tennisGameScore, scoreFirstPeriod, scoreSecondPeriod);
                return this._detailOddsWinnerWasSet = true
            }
        };
        Odds_Prematch.prototype._formatScoreForCell = function(value) {
            if (!value) {
                return 0
            }
            return parseInt(value)
        };
        return Odds_Prematch
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Odds_Prematch', Odds_Prematch)
}).call(this);
(function() {
    var Benchmark_Request, base;
    Benchmark_Request = (function() {
        function Benchmark_Request(_request, _sportIdGetter) {
            this._request = _request;
            this._sportIdGetter = _sportIdGetter;
            this._requestRate = 0;
            this._checkerId = null;
            this._resetPendingRequest = (function(_this) {
                return function() {
                    return _this._pendingRequest = false
                }
            })(this)
        }
        Benchmark_Request.prototype.compareRequestRate = function(requestRate) {
            return ("" + requestRate) === ("" + this._requestRate)
        };
        Benchmark_Request.prototype.setRequestRate = function(requestRate) {
            var e, error;
            try {
                requestRate = parseInt(requestRate)
            } catch (error) {
                e = error;
                requestRate = 0
            }
            this._requestRate = requestRate;
            return this._restartChecker()
        };
        Benchmark_Request.prototype._restartChecker = function() {
            clearInterval(this._checkerId);
            this._checkerId = null;
            this._resetPendingRequest();
            if (!this._requestRate) {
                return
            }
            return this._checkerId = setInterval((function(_this) {
                return function() {
                    return _this._tryToMakeRequest()
                }
            })(this), this._requestRate)
        };
        Benchmark_Request.prototype._tryToMakeRequest = function() {
            if (this._pendingRequest) {
                return
            }
            return this._pendingRequest = this._request.execute('update', this._sportIdGetter(), this._resetPendingRequest, {
                benchmarkRequest: 1
            }, this._resetPendingRequest)
        };
        return Benchmark_Request
    })();
    if (typeof window !== "undefined" && window !== null) {
        if ((base = window.cjs).Benchmark_Request == null) {
            base.Benchmark_Request = Benchmark_Request
        }
    } else {
        if (exports.Benchmark_Request == null) {
            exports.Benchmark_Request = Benchmark_Request
        }
    }
}).call(this);
(function() {
    var SoundPlayerSM2, base, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    SoundPlayerSM2 = (function() {
        SoundPlayerSM2.prototype.tooltipHideDelay = 5000;
        SoundPlayerSM2.prototype.iDeviceLoopInterval = 1000;
        SoundPlayerSM2.prototype.iDeviceLoadSoundManagerDelay = 2500;

        function SoundPlayerSM2(soundManager, jQueryAjax, tooltip, clientStorage, myGames, myLeagues, myTeamsGetter, project, getCategory, dataEventHolderProxy, storageKey, soundTypes, sportSounds, toggleTitleOn, toggleTitleOff, userAgent, baseUrlGetter) {
            this.soundManager = soundManager;
            this.jQueryAjax = jQueryAjax;
            this.tooltip = tooltip;
            this.clientStorage = clientStorage;
            this.myGames = myGames;
            this.myLeagues = myLeagues;
            this.myTeamsGetter = myTeamsGetter;
            this.project = project;
            this.getCategory = getCategory;
            this.dataEventHolderProxy = dataEventHolderProxy;
            this.storageKey = storageKey;
            this.soundTypes = soundTypes;
            this.sportSounds = sportSounds;
            this.toggleTitleOn = toggleTitleOn;
            this.toggleTitleOff = toggleTitleOff;
            this.baseUrlGetter = baseUrlGetter != null ? baseUrlGetter : function() {
                return ''
            };
            this.soundManagerLoaded = false;
            this.initializing = false;
            this.remainingPlays = {};
            this.gameSoundsPlayed = {};
            this.postponedPlays = [];
            this.isIDevice = userAgent.match(/(iPod|iPhone|iPad)/i) != null;
            this.disabled = this.isIDevice || this.clientStorage.get(this.storageKey) === '1';
            this.iQueue = [];
            this.iLoopIsNotRunning = true;
            this.iSilence = '_fs/%s/silence.%s';
            this.sounds = {
                commonCheers: '_fs/%s/common-cheers.%s',
                commonCorrection: '_fs/%s/common-correction.%s',
                commonEndOfGame: '_fs/%s/common-end-of-game.%s',
                soccerCardRed: '_fs/%s/soccer-card-red.%s',
                tennisGame: '_fs/%s/tennis-game.%s',
                tennisGameSet: '_fs/%s/tennis-game-set.%s',
                tennisGameSetMatch: '_fs/%s/tennis-game-set-match.%s'
            };
            if (this.project === '_ass') {
                this.sounds.commonCheers = '_ass/%s/common-cheers.%s';
                this.sounds.tennisGame = '_ass/%s/tennis-game.%s';
                this.sounds.tennisGameSet = '_ass/%s/tennis-game-set.%s';
                this.sounds.tennisGameSetMatch = '_ass/%s/tennis-game-set-match.%s'
            }
            if (this.isIDevice) {
                setTimeout(((function(_this) {
                    return function() {
                        return _this.loadSoundManager()
                    }
                })(this)), this.iDeviceLoadSoundManagerDelay)
            }
        }
        SoundPlayerSM2.prototype.setupToggle = function($toggleElem) {
            var event;
            this.$toggleElem = $toggleElem;
            event = this.isIDevice ? 'touchend' : 'click';
            this.$toggleElem.off(event);
            this.$toggleElem.on(event, (function(_this) {
                return function(e) {
                    _this.tooltip.hide(e.currentTarget);
                    _this.toggle();
                    return _this.tooltip.show(e.currentTarget, e)
                }
            })(this));
            return this.updateToggle()
        };
        SoundPlayerSM2.prototype.updateToggle = function() {
            return this.$toggleElem.toggleClass('sound-off', this.disabled).attr('title', this.disabled ? this.toggleTitleOn : this.toggleTitleOff)
        };
        SoundPlayerSM2.prototype.toggle = function() {
            this.disabled = !this.disabled;
            if (this.disabled && this.soundManagerLoaded) {
                this.soundManager.stopAll()
            }
            this.clientStorage.store(this.storageKey, this.disabled ? '1' : '0');
            this.updateToggle();
            if (this.isIDevice) {
                setTimeout(((function(_this) {
                    return function() {
                        return _this.tooltip.hide_all()
                    }
                })(this)), this.tooltipHideDelay);
                if (!this.disabled && this.iLoopIsNotRunning) {
                    return this.startILoop()
                }
            }
        };
        SoundPlayerSM2.prototype.play = function(gameId, soundType, fromILoop, fromNotification) {
            var ref, ref1, ref2, ref3, ref4, soundId;
            if (fromILoop == null) {
                fromILoop = false
            }
            if (fromNotification == null) {
                fromNotification = false
            }
            if (this.disabled) {
                return false
            }
            if (!this.isSoundPlayAllowed(gameId, fromNotification)) {
                return false
            }
            if (!this.soundTypeCanBePlayed(gameId, soundType)) {
                return false
            }
            if (!this.soundManagerLoaded) {
                this.postponedPlays.push([gameId, soundType]);
                if (!this.initializing) {
                    this.initializing = true;
                    this.loadSoundManager((function(_this) {
                        return function() {
                            var ref, results;
                            _this.initializing = false;
                            results = [];
                            while (_this.postponedPlays.length > 0) {
                                ref = _this.postponedPlays.shift(), gameId = ref[0], soundType = ref[1];
                                results.push(_this.play(gameId, soundType, fromILoop, fromNotification))
                            }
                            return results
                        }
                    })(this))
                }
                return false
            }
            if (fromNotification) {
                soundId = (ref = this.sportSounds) != null ? (ref1 = ref[fromNotification]) != null ? ref1[soundType] : void 0 : void 0
            } else {
                soundId = (ref2 = this.sportSounds) != null ? (ref3 = ref2[this.dataEventHolderProxy.getHolder().getEvent(gameId).getValue('sport')]) != null ? ref3[soundType] : void 0 : void 0
            }
            if (((ref4 = this.sounds[soundId]) != null ? ref4.play : void 0) == null) {
                return false
            }
            if (this.isIDevice && !fromILoop) {
                this.iQueue.push([gameId, soundType, true, fromNotification]);
                return true
            }
            this.gameSoundsPlayed[gameId].push(soundType);
            this.remainingPlays[soundId] += 1;
            return this.playNext(soundId)
        };
        SoundPlayerSM2.prototype.playNext = function(soundId, forcePlay) {
            var remaining;
            if (forcePlay == null) {
                forcePlay = false
            }
            remaining = this.remainingPlays[soundId];
            if (remaining === 0) {
                return false
            }
            if (remaining === 1 || forcePlay) {
                this.sounds[soundId].play();
                return true
            }
            if (remaining > 1) {
                return true
            }
        };
        SoundPlayerSM2.prototype.isSoundPlayAllowed = function(gameId, fromNotification) {
            var eventItem, leagueItem, ref, ref1;
            if (fromNotification) {
                if (this.getCategory() === 5 || (this.getCategory() === 1 && fromNotification === sport)) {
                    return false
                } else {
                    return true
                }
            }
            if (!((this.getCategory() != null) && (this.dataEventHolderProxy != null) && this.dataEventHolderProxy.getHolder().hasEvent(gameId))) {
                return false
            }
            if (this.getCategory() === 5 && !(this.myGames.check(gameId) || ((ref = this.myTeamsGetter()) != null ? ref.eventExists(gameId) : void 0))) {
                return false
            }
            eventItem = this.dataEventHolderProxy.getHolder().getEvent(gameId);
            leagueItem = eventItem.getLeague();
            if (leagueItem.isSecondary() && !this.myLeagues.isTop(leagueItem.getId())) {
                return false
            }
            if (this.project === '_ass' && !leagueItem.getValue('display')) {
                return false
            }
            if ((ref1 = this.getCategory()) !== 1 && ref1 !== 5) {
                return false
            }
            return true
        };
        SoundPlayerSM2.prototype.soundTypeCanBePlayed = function(gameId, soundType) {
            var ref, ref1, ref2, typesPlayed;
            if (!(gameId in this.gameSoundsPlayed)) {
                this.gameSoundsPlayed[gameId] = []
            }
            typesPlayed = this.gameSoundsPlayed[gameId];
            switch (soundType) {
                case this.soundTypes.scoreIncremented:
                    return ref = this.soundTypes.finished, indexOf.call(typesPlayed, ref) < 0;
                case this.soundTypes.tennisGame:
                    return (ref1 = this.soundTypes.finished, indexOf.call(typesPlayed, ref1) < 0) && (ref2 = this.soundTypes.scoreIncremented, indexOf.call(typesPlayed, ref2) < 0);
                default:
                    return true
            }
        };
        SoundPlayerSM2.prototype.gameUpdateFinished = function(gameId) {
            return delete this.gameSoundsPlayed[gameId]
        };
        SoundPlayerSM2.prototype.loadSoundManager = function(callback) {
            var onSoundFinish;
            onSoundFinish = (function(soundPlayer) {
                return function() {
                    soundPlayer.remainingPlays[this.id] -= 1;
                    return soundPlayer.playNext(this.id, true)
                }
            })(this);
            this.soundManagerLoaded = true;
            this.soundManager.audioFormats.mp3.required = false;
            return this.soundManager.setup({
                url: this.baseUrlGetter() + '/res/sound/soundmanager2',
                debugMode: false,
                preferFlash: false,
                onready: (function(_this) {
                    return function() {
                        var format, name, path, ref;
                        format = _this.soundManager.canPlayMIME('audio/ogg') ? 'ogg' : 'mp3';
                        ref = _this.sounds;
                        for (name in ref) {
                            path = ref[name];
                            _this.remainingPlays[name] = 0;
                            _this.sounds[name] = _this.soundManager.createSound({
                                id: name,
                                url: ("/res/sound/" + path).replace(/%s/g, format),
                                onfinish: onSoundFinish
                            })
                        }
                        if (_this.isIDevice) {
                            _this.iSilence = _this.soundManager.createSound({
                                id: 'silence',
                                url: ("/res/sound/" + _this.iSilence).replace(/%s/g, format)
                            })
                        }
                        return typeof callback === "function" ? callback() : void 0
                    }
                })(this)
            })
        };
        SoundPlayerSM2.prototype.startILoop = function() {
            this.iLoopIsNotRunning = false;
            this.iSilence.play();
            return setInterval(((function(_this) {
                return function() {
                    var args, results;
                    results = [];
                    while (args = _this.iQueue.shift()) {
                        results.push(_this.play.apply(_this, args))
                    }
                    return results
                }
            })(this)), this.iDeviceLoopInterval)
        };
        return SoundPlayerSM2
    })();
    if (typeof window !== "undefined" && window !== null) {
        if ((base = window.cjs).SoundPlayerSM2 == null) {
            base.SoundPlayerSM2 = SoundPlayerSM2
        }
    } else {
        module.exports = SoundPlayerSM2
    }
}).call(this);
(function() {
    var Midnight, base, base1;
    Midnight = (function() {
        function Midnight(pageUtimeGetter, updaterGetter, refreshInProgressGetter, sudateGetter, gmtOffsetDiffGetter) {
            this.pageUtimeGetter = pageUtimeGetter;
            this.updaterGetter = updaterGetter;
            this.refreshInProgressGetter = refreshInProgressGetter;
            this.sudateGetter = sudateGetter;
            this.gmtOffsetDiffGetter = gmtOffsetDiffGetter;
            this._interval = null;
            this._reload = false;
            this.bind_up()
        }
        Midnight.prototype.bind_up = function() {
            return this._interval = setInterval(((function(_this) {
                return function() {
                    return _this.try_reload()
                }
            })(this)), 10 * 1000)
        };
        Midnight.prototype.unbind = function() {
            return this._interval = clearInterval(this._interval)
        };
        Midnight.prototype.try_reload = function() {
            var currentMidnightTimestamp, ref, refreshInProgress;
            refreshInProgress = this.refreshInProgressGetter();
            if (this.sudateGetter() === 0 && !((refreshInProgress != null) || refreshInProgress)) {
                currentMidnightTimestamp = this._getMidnightTimestamp();
                if ((this._lastMidnightTimestamp && currentMidnightTimestamp !== this._lastMidnightTimestamp) || this._reload) {
                    this._reload = true;
                    if ((ref = this.updaterGetter()) != null) {
                        if (typeof ref.doc_update === "function") {
                            ref.doc_update()
                        }
                    }
                }
                return this._lastMidnightTimestamp = currentMidnightTimestamp
            }
        };
        Midnight.prototype.disableReload = function() {
            return this._reload = false
        };
        Midnight.prototype._getMidnightTimestamp = function() {
            var date, now, timestamp;
            now = new Date((this.pageUtimeGetter() - this.gmtOffsetDiffGetter()) * 1000);
            date = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
            timestamp = date.getTime() / 1000;
            return timestamp
        };
        return Midnight
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs.classes).Midnight == null) {
            base.Midnight = Midnight
        }
    } else {
        if ((base1 = exports.classes).Midnight == null) {
            base1.Midnight = Midnight
        }
    }
}).call(this);
(function() {
    var HighlightData, base, cjs;
    cjs = typeof window !== "undefined" && window !== null ? window.cjs : require('../generic/generic');
    HighlightData = (function() {
        function HighlightData(highlighter) {
            if (cjs.type(highlighter) === 'object') {
                this._highlighter = highlighter
            }
            this._container = {}
        }
        HighlightData.prototype.highlight = function(eventId, dataIndex, sportId, correction, time, cleanup, highlightConfig) {
            var i, index, len, ref, ref1, ref2;
            if (correction == null) {
                correction = false
            }
            if (time == null) {
                time = 60
            }
            if (cleanup == null) {
                cleanup = {}
            }
            if (highlightConfig == null) {
                highlightConfig = {}
            }
            if ((cleanup != null ? cleanup[dataIndex] : void 0) != null) {
                ref = cleanup[dataIndex];
                for (i = 0, len = ref.length; i < len; i++) {
                    index = ref[i];
                    if (((ref1 = this._container[eventId]) != null ? ref1[index] : void 0) != null) {
                        clearTimeout(this._container[eventId][index].timeout);
                        if (this._highlighter) {
                            this._highlighter.hide(eventId, index, this._container[eventId][index].sportId)
                        }
                        delete this._container[eventId][index]
                    }
                }
            }
            if (((ref2 = this._container[eventId]) != null ? ref2[dataIndex] : void 0) != null) {
                clearTimeout(this._container[eventId][dataIndex].timeout);
                if (this._highlighter) {
                    this._highlighter.hide(eventId, dataIndex, this._container[eventId][dataIndex].sportId)
                }
            }
            if (this._container[eventId] == null) {
                this._container[eventId] = {}
            }
            if (this._container[eventId][dataIndex] == null) {
                this._container[eventId][dataIndex] = {}
            }
            this._container[eventId][dataIndex].sportId = sportId;
            this._container[eventId][dataIndex].correction = correction;
            this._container[eventId][dataIndex].highlightConfig = highlightConfig;
            this._container[eventId][dataIndex].timeout = setTimeout((function(container, highlighter, eventId, dataIndex, sportId) {
                return function() {
                    var ref3;
                    if ((ref3 = container[eventId]) != null) {
                        delete ref3[dataIndex]
                    }
                    if (highlighter) {
                        return highlighter.hide(eventId, dataIndex, sportId)
                    }
                }
            })(this._container, this._highlighter, eventId, dataIndex, sportId), time * 1000);
            if (this._highlighter) {
                return this._highlighter.display(eventId, dataIndex, sportId, correction, highlightConfig)
            }
        };
        HighlightData.prototype.display = function(eventId) {
            var data, dataIndex, ref, results;
            ref = this._container[eventId];
            results = [];
            for (dataIndex in ref) {
                data = ref[dataIndex];
                if (this._highlighter) {
                    this._highlighter.hide(eventId, dataIndex, data.sportId)
                }
                if (this._highlighter) {
                    results.push(this._highlighter.display(eventId, dataIndex, data.sportId, data.correction, data.highlightConfig))
                } else {
                    results.push(void 0)
                }
            }
            return results
        };
        HighlightData.prototype.displayAll = function() {
            var eventId, results;
            results = [];
            for (eventId in this._container) {
                results.push(this.display(eventId))
            }
            return results
        };
        HighlightData.prototype.reset = function() {
            var cellData, dataIndex, eventData, eventId, ref, ref1;
            ref = this._container;
            for (eventId in ref) {
                eventData = ref[eventId];
                for (dataIndex in eventData) {
                    cellData = eventData[dataIndex];
                    if (cellData.timeout != null) {
                        clearTimeout(cellData.timeout)
                    }
                    if ((ref1 = this._container[eventId]) != null) {
                        delete ref1[dataIndex]
                    }
                }
            }
            return true
        };
        return HighlightData
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).HighlightData == null) {
            base.HighlightData = HighlightData
        }
    } else {
        if (exports.HighlightData == null) {
            exports.HighlightData = HighlightData
        }
    }
}).call(this);
(function() {
    var HighlightHtml, base, cjs, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    cjs = typeof window !== "undefined" && window !== null ? window.cjs : require('../generic/generic');
    HighlightHtml = (function() {
        function HighlightHtml(config, _projectName, jQuery, _dic) {
            var i, index, j, len, len1, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref28, ref29, ref3, ref30, ref31, ref32, ref33, ref34, ref35, ref4, ref5, ref6, ref7, ref8, ref9;
            this._projectName = _projectName != null ? _projectName : '_fs';
            this.jQuery = jQuery != null ? jQuery : $;
            this._dic = _dic != null ? _dic : cjs.dic;
            this._backgroundConfig = (ref = config != null ? config.background : void 0) != null ? ref : {
                "default": []
            };
            this._messageConfig = (ref1 = config != null ? config.message : void 0) != null ? ref1 : {
                "default": []
            };
            this._trans = (ref2 = config != null ? config.trans : void 0) != null ? ref2 : {};
            this._trans.c = (ref3 = this._trans.c) != null ? ref3 : "!CORRECTION";
            if (config != null) {
                config.homeScorePart = (ref4 = config != null ? config.homeScorePart : void 0) != null ? ref4 : []
            }
            if (config != null) {
                config.awayScorePart = (ref5 = config != null ? config.awayScorePart : void 0) != null ? ref5 : []
            }
            this._homeIndexes = {};
            this._homeScorePart = {};
            this._homeScore = (ref6 = config.homeScore) != null ? ref6 : null;
            if (this._homeScore) {
                this._homeIndexes[this._homeScore] = this._homeScore
            }
            ref7 = config != null ? config.homeScorePart : void 0;
            for (i = 0, len = ref7.length; i < len; i++) {
                index = ref7[i];
                this._homeIndexes[index] = index;
                this._homeScorePart[index] = index
            }
            this._awayIndexes = {};
            this._awayScorePart = {};
            this._awayScore = (ref8 = config.awayScore) != null ? ref8 : null;
            if (this._awayScore != null) {
                this._awayIndexes[this._awayScore] = this._awayScore
            }
            ref9 = config != null ? config.awayScorePart : void 0;
            for (j = 0, len1 = ref9.length; j < len1; j++) {
                index = ref9[j];
                this._awayIndexes[index] = index;
                this._awayScorePart[index] = index
            }
            this._finalScore = (ref10 = config.finalScore) != null ? ref10 : null;
            this._matchStatus = (ref11 = config.matchStatus) != null ? ref11 : null;
            this._serve = (ref12 = config.serve) != null ? ref12 : null;
            this._rank = (ref13 = config.rank) != null ? ref13 : null;
            this._hole = (ref14 = config.hole) != null ? ref14 : null;
            this._lapTime = (ref15 = config.lapTime) != null ? ref15 : null;
            this._gap = (ref16 = config.gap) != null ? ref16 : null;
            this._laps = (ref17 = config.laps) != null ? ref17 : null;
            this._grid = (ref18 = config.grid) != null ? ref18 : null;
            this._pitStops = (ref19 = config.pitStops) != null ? ref19 : null;
            this._activeHighlightContainer = {};
            this._isOddsView = false;
            this._isPointByPointGetter = (ref20 = config.isPointByPointGetter) != null ? ref20 : function() {
                return false
            };
            this._awayCorrection = (ref21 = config.awayCorrection) != null ? ref21 : null;
            this._homeCorrection = (ref22 = config.homeCorrection) != null ? ref22 : null;
            this._awayPenalty = (ref23 = config.awayPenalty) != null ? ref23 : null;
            this._homePenalty = (ref24 = config.homePenalty) != null ? ref24 : null;
            this._awayPenaltyMissed = (ref25 = config.awayPenaltyMissed) != null ? ref25 : null;
            this._homePenaltyMissed = (ref26 = config.homePenaltyMissed) != null ? ref26 : null;
            this._parDiff = (ref27 = config.parDiff) != null ? ref27 : null;
            this._parDiffAway = (ref28 = config.parDiffAway) != null ? ref28 : null;
            this._wicketHome = (ref29 = config.wicketHome) != null ? ref29 : [];
            this._wicketHome_1st_period = (ref30 = config.wicketHome_1st_period) != null ? ref30 : [];
            this._wicketHome_2nd_period = (ref31 = config.wicketHome_2nd_period) != null ? ref31 : [];
            this._wicketAway = (ref32 = config.wicketAway) != null ? ref32 : [];
            this._wicketAway_1st_period = (ref33 = config.wicketAway_1st_period) != null ? ref33 : [];
            this._wicketAway_2nd_period = (ref34 = config.wicketAway_2nd_period) != null ? ref34 : [];
            this._parToday = (ref35 = config.parToday) != null ? ref35 : null
        }
        HighlightHtml.prototype._getPartialScorePosition = function(scores, index) {
            var arrIndex, counter;
            counter = 1;
            for (arrIndex in scores) {
                if (arrIndex === index) {
                    return counter
                }
                counter++
            }
            return 0
        };
        HighlightHtml.prototype._getNotifyCells = function(index, sportId) {
            if (this._projectName === '_portable') {
                return this._getNotifyCellsPortable(index, sportId)
            } else {
                return this._getNotifyCellsDefault(index, sportId)
            }
        };
        HighlightHtml.prototype._getNotifyCellsDefault = function(index, sportId) {
            var arrIndex, i, len, messageIndexes, notify, parser, position, ref, ref1, stats;
            sportId = parseInt(sportId);
            notify = {
                messageCell: null,
                messageSide: 0,
                highlightCell: []
            };
            messageIndexes = (ref = (ref1 = this._messageConfig[sportId]) != null ? ref1 : this._messageConfig['default']) != null ? ref : [];
            for (i = 0, len = messageIndexes.length; i < len; i++) {
                arrIndex = messageIndexes[i];
                if (arrIndex === index) {
                    if (this._awayIndexes.hasOwnProperty(index)) {
                        notify.messageCell = cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME;
                        notify.messageSide = 1
                    } else {
                        if (index === this._parDiffAway || indexOf.call(this._wicketAway, index) >= 0) {
                            notify.messageCell = cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME
                        } else {
                            notify.messageCell = cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME
                        }
                    }
                    break
                }
            }
            if (indexOf.call(this._wicketHome, index) >= 0) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME);
                if (indexOf.call(this._wicketHome_1st_period, index) >= 0) {
                    notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1)
                }
                if (indexOf.call(this._wicketHome_2nd_period, index) >= 0) {
                    notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2)
                }
            } else if (indexOf.call(this._wicketAway, index) >= 0) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME);
                if (indexOf.call(this._wicketAway_1st_period, index) >= 0) {
                    notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1)
                }
                if (indexOf.call(this._wicketAway_2nd_period, index) >= 0) {
                    notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2)
                }
            }
            if (index === this._homeCorrection) {
                notify.messageCell = cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME
            } else if (index === this._awayCorrection) {
                notify.messageSide = 1;
                notify.messageCell = cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME
            }
            if (index === this._homePenalty || index === this._homePenaltyMissed) {
                notify.messageCell = cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME;
                if (index === this._homePenaltyMissed) {
                    notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME)
                }
            } else if (index === this._awayPenalty || index === this._awayPenaltyMissed) {
                notify.messageSide = 1;
                notify.messageCell = cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME;
                if (index === this._awayPenaltyMissed) {
                    notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME)
                }
            }
            if (index === this._homeScore || index === this._finalScore) {
                notify.highlightCell.push('row-home')
            } else if (index === this._awayScore) {
                notify.highlightCell.push('row-away')
            }
            if (this.getIsOddsView() || sportId !== 1) {
                notify.messageSide = 1
            }
            if (this._homeScorePart.hasOwnProperty(index)) {
                position = this._getPartialScorePosition(this._homeScorePart, index);
                if (position) {
                    notify.highlightCell.push(((function() {
                        switch (position) {
                            case 14:
                                return cjs.TemplateCell.prototype.CELL_SCORE_HOME_ERRORS;
                            case 13:
                                return cjs.TemplateCell.prototype.CELL_SCORE_HOME_HITS;
                            default:
                                return cjs.TemplateCell.prototype['CELL_SCORE_HOME_PART_' + position]
                        }
                    })()))
                }
            } else if (this._awayScorePart.hasOwnProperty(index)) {
                position = this._getPartialScorePosition(this._awayScorePart, index);
                if (position) {
                    notify.highlightCell.push(((function() {
                        switch (position) {
                            case 14:
                                return cjs.TemplateCell.prototype.CELL_SCORE_AWAY_ERRORS;
                            case 13:
                                return cjs.TemplateCell.prototype.CELL_SCORE_AWAY_HITS;
                            default:
                                return cjs.TemplateCell.prototype['CELL_SCORE_AWAY_PART_' + position]
                        }
                    })()))
                }
            }
            if (index === this._matchStatus) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_MATCH_STATUS)
            }
            if (index === this._serve) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_SERVE_AWAY);
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_SERVE_HOME)
            }
            if (index === this._rank) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_RANK)
            }
            if (index === this._hole) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_SCORE_HOME_HOLE)
            }
            if (index === this._laps) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_LAPS)
            }
            if (index === this._lapTime || index === this._gap) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_LAP_TIME)
            }
            if (index === this._grid) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_GRID)
            }
            if (index === this._pitStops) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_PITSTOPS)
            }
            if (this._isPointByPointGetter(sportId) && (index === 'WA' || index === 'WB')) {
                if (index === 'WA') {
                    notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_SCORE_HOME_POINT_BY_POINT)
                }
                if (index === 'WB') {
                    notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_SCORE_AWAY_POINT_BY_POINT)
                }
            }
            if (this._projectName === '_ass') {
                notify.messageSide = 1
            }
            if (index === this._parToday) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_SCORE_HOME_TODAY)
            }
            stats = this._dic.get('util_list').getStatsDataTypes();
            parser = this._dic.get('Helper_Parser');
            if (index === parser.getStatsResultsIndex(stats.RANK)) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_RANK)
            }
            if (index === parser.getStatsResultsIndex(stats.POINTS)) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_POINTS_TOTAL)
            }
            if (index === parser.getStatsResultsIndex(stats.JUMP_ROUND_1)) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_JUMP_ROUND_1)
            }
            if (index === parser.getStatsResultsIndex(stats.JUMP_ROUND_2)) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_JUMP_ROUND_2)
            }
            if (index === parser.getStatsResultsIndex(stats.JUMP_COUNT)) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_JUMP_COUNT)
            }
            if (index === parser.getStatsResultsIndex(stats.TIME)) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_TIME)
            }
            if (index === parser.getStatsResultsIndex(stats.GAP) || index === 'NJ') {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_DIFFERENCE)
            }
            if (index === parser.getStatsResultsIndex(stats.STOP_REASON)) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_RANK)
            }
            if (index === parser.getStatsResultsIndex(stats.PENALTY_LAP)) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_SHOOTING)
            }
            if (index === parser.getStatsResultsIndex(stats.MISSED_SHOT)) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_SHOOTING)
            }
            if (index === parser.getStatsResultsIndex(stats.POINTS_ROUND_1)) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_POINTS_ROUND_1)
            }
            if (index === parser.getStatsResultsIndex(stats.POINTS_ROUND_2)) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_POINTS_ROUND_2)
            }
            if (index === parser.getStatsResultsIndex(stats.TIME_ROUND_1)) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_RUN_1)
            }
            if (index === parser.getStatsResultsIndex(stats.TIME_ROUND_2)) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_RUN_2)
            }
            return notify
        };
        HighlightHtml.prototype._getNotifyCellsPortable = function(index, sportId) {
            var notify;
            sportId = parseInt(sportId);
            notify = {
                messageCell: null,
                messageSide: 0,
                highlightCell: []
            };
            if (index === this._homeScore || index === this._awayScore || index === this._matchStatus) {
                notify.highlightCell.push('row-home');
                notify.highlightCell.push('row-away')
            }
            if (index === this._homeScore) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME);
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_SCORE_HOME)
            }
            if (index === this._awayScore) {
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME);
                notify.highlightCell.push(cjs.TemplateCell.prototype.CELL_SCORE_AWAY)
            }
            return notify
        };
        HighlightHtml.prototype._hasBackground = function(index, sportId) {
            var arrIndex, backgrounds, i, len, ref, ref1;
            backgrounds = (ref = (ref1 = this._backgroundConfig[sportId]) != null ? ref1 : this._backgroundConfig['default']) != null ? ref : [];
            for (i = 0, len = backgrounds.length; i < len; i++) {
                arrIndex = backgrounds[i];
                if (arrIndex === index) {
                    return true
                }
            }
            return false
        };
        HighlightHtml.prototype._getMessage = function(index, sportId, fsDataIndex) {
            var arrIndex, eventItem, hasMsg, holder, i, len, messages, msg, par, ref, ref1, ref2, ref3;
            messages = (ref = (ref1 = this._messageConfig[sportId]) != null ? ref1 : this._messageConfig['default']) != null ? ref : [];
            if (index === this._homeCorrection || index === this._awayCorrection) {
                return this._trans['u' + sportId]
            }
            if (index === this._homePenalty || index === this._awayPenalty) {
                return this._trans['p' + sportId]
            }
            if (index === this._homePenaltyMissed || index === this._awayPenaltyMissed) {
                return this._trans['pm' + sportId]
            }
            if (index === this._parDiff || index === this._parDiffAway) {
                holder = this._dic.get('dataEventHolderProxy').getHolder();
                if (!holder.hasEvent(fsDataIndex)) {
                    return false
                }
                eventItem = holder.getEvent(fsDataIndex);
                par = eventItem.getValue(index).split("|")[0];
                return this._trans['par' + (par < 0 ? 'm' : '') + (Math.min(Math.abs(par), 3))]
            }
            if (indexOf.call(this._wicketHome, index) >= 0 || indexOf.call(this._wicketAway, index) >= 0) {
                return this._trans['wicket']
            }
            hasMsg = false;
            for (i = 0, len = messages.length; i < len; i++) {
                arrIndex = messages[i];
                if (arrIndex === index) {
                    hasMsg = true
                }
                if (hasMsg) {
                    break
                }
            }
            if (hasMsg) {
                return msg = (ref2 = (ref3 = this._trans[sportId]) != null ? ref3 : this._trans['default']) != null ? ref2 : null
            }
        };
        HighlightHtml.prototype.getIndexes = function(sportId) {
            var config, messageConfig, ref, ref1, ref2;
            config = (ref = this._backgroundConfig[sportId]) != null ? ref : this._backgroundConfig['default'];
            messageConfig = (ref1 = (ref2 = this._messageConfig[sportId]) != null ? ref2 : this._messageConfig['default']) != null ? ref1 : [];
            return [].concat(config, messageConfig)
        };
        HighlightHtml.prototype.display = function(eventId, index, sportId, correction, highlightConfig) {
            var fsDataIndex, gameRow, gameRowObjects, highlightCell, highlightClass, i, j, k, l, len, len1, len2, len3, len4, m, message, messageSide, messageSideMissedPenalty, missedPenalty, notify, ref, results, results1, sportDefinition;
            sportId = parseInt(sportId);
            if (!this.canBeEventHighlighted(sportId, eventId)) {
                return
            }
            if (!this.canBeEventIndexHighLighted(sportId, eventId, index)) {
                return
            }
            if (!cjs.template.canBeGameResolved(sportId, eventId)) {
                return
            }
            fsDataIndex = "g_" + sportId + "_" + eventId;
            gameRowObjects = cjs.templateGameDataProxy.getGameRowObjects(fsDataIndex);
            if (!gameRowObjects.length) {
                return
            }
            sportDefinition = gameRowObjects[0].getSportDefinition();
            notify = this._getNotifyCells(index, sportId);
            if (notify.highlightCell) {
                ref = notify.highlightCell;
                for (i = 0, len = ref.length; i < len; i++) {
                    highlightCell = ref[i];
                    if (sportDefinition.getGameRowCount() === 1 && this._hasBackground(index, sportId) && highlightCell === 'row-away') {
                        highlightCell = 'row-home'
                    }
                    if (this._activeHighlightContainer[sportId + "_" + eventId + "_" + highlightCell] == null) {
                        this._activeHighlightContainer[sportId + "_" + eventId + "_" + highlightCell] = 0
                    }
                    this._activeHighlightContainer[sportId + "_" + eventId + "_" + highlightCell]++;
                    highlightClass = (highlightConfig != null ? highlightConfig['use_sec_highlight_class'] : void 0) === true ? 'highlight-highlighted-sec' : 'highlight-highlighted';
                    if (this._hasBackground(index, sportId)) {
                        if (sportDefinition.getGameRowCount() === 1 && highlightCell === 'row-away') {
                            highlightCell = 'row-home'
                        }
                        for (j = 0, len1 = gameRowObjects.length; j < len1; j++) {
                            gameRow = gameRowObjects[j];
                            if (highlightCell === 'row-home') {
                                gameRow.getJqElement().eq(0).addClass(highlightClass)
                            }
                            if (highlightCell === 'row-away') {
                                gameRow.getJqElement().eq(1).addClass(highlightClass)
                            }
                        }
                    }
                    if (!((highlightCell === 'row-home' || highlightCell === 'row-away') || highlightCell === -1 || !this._hasBackground(index, sportId))) {
                        for (k = 0, len2 = gameRowObjects.length; k < len2; k++) {
                            gameRow = gameRowObjects[k];
                            gameRow.getCell(highlightCell).getJqElement().addClass(highlightClass)
                        }
                    }
                }
            }
            if (notify.messageCell != null) {
                message = correction ? this._trans.c : this._getMessage(index, sportId, fsDataIndex);
                messageSide = notify.messageSide === 1 ? 'highlight-right' : 'highlight-left';
                missedPenalty = false;
                if (index === 'EC' || index === 'ED') {
                    if (sportId === cjs.constants.sport.HOCKEY || sportId === cjs.constants.sport.SOCCER) {
                        missedPenalty = true
                    }
                }
                if (message) {
                    if (!missedPenalty) {
                        results = [];
                        for (l = 0, len3 = gameRowObjects.length; l < len3; l++) {
                            gameRow = gameRowObjects[l];
                            results.push(gameRow.getCell(notify.messageCell).getJqElement().prepend("<span class=\"highlight-message " + messageSide + " bold playing\">" + message + "</span>"))
                        }
                        return results
                    } else {
                        messageSideMissedPenalty = notify.messageSide === 1 ? 'highlight-left' : 'highlight-right';
                        results1 = [];
                        for (m = 0, len4 = gameRowObjects.length; m < len4; m++) {
                            gameRow = gameRowObjects[m];
                            results1.push(gameRow.getCell(notify.messageCell).getJqElement().append("<span class=\"highlight-message missed-penalty " + messageSideMissedPenalty + " bold playing\">" + message + "</span>"))
                        }
                        return results1
                    }
                }
            }
        };
        HighlightHtml.prototype.hide = function(eventId, index, sportId) {
            var fsDataIndex, gameRow, gameRowObjects, highlightCell, i, j, k, len, len1, len2, notify, ref, results, sportDefinition;
            sportId = parseInt(sportId);
            if (!cjs.template.canBeGameResolved(sportId, eventId)) {
                return
            }
            fsDataIndex = "g_" + sportId + "_" + eventId;
            gameRowObjects = cjs.templateGameDataProxy.getGameRowObjects(fsDataIndex);
            if (!gameRowObjects.length) {
                return
            }
            sportDefinition = gameRowObjects[0].getSportDefinition();
            notify = this._getNotifyCells(index, sportId, true);
            if (notify.highlightCell) {
                ref = notify.highlightCell;
                for (i = 0, len = ref.length; i < len; i++) {
                    highlightCell = ref[i];
                    if (sportDefinition.getGameRowCount() === 1 && highlightCell === 'row-away') {
                        highlightCell = 'row-home'
                    }
                    if (this._activeHighlightContainer[sportId + "_" + eventId + "_" + highlightCell] != null) {
                        this._activeHighlightContainer[sportId + "_" + eventId + "_" + highlightCell] -= 1
                    }
                    if (this._activeHighlightContainer[sportId + "_" + eventId + "_" + highlightCell] == null) {
                        this._activeHighlightContainer[sportId + "_" + eventId + "_" + highlightCell] = 0
                    }
                    if (this._activeHighlightContainer[sportId + "_" + eventId + "_" + highlightCell] < 1) {
                        delete this._activeHighlightContainer[sportId + "_" + eventId + "_" + highlightCell];
                        for (j = 0, len1 = gameRowObjects.length; j < len1; j++) {
                            gameRow = gameRowObjects[j];
                            if (highlightCell === 'row-home') {
                                gameRow.getJqElement().eq(0).removeClass('highlight-highlighted highlight-highlighted-sec')
                            }
                            if (highlightCell === 'row-away') {
                                gameRow.getJqElement().eq(1).removeClass('highlight-highlighted highlight-highlighted-sec')
                            }
                            if (!((highlightCell === 'row-home' || highlightCell === 'row-away') || highlightCell === -1)) {
                                gameRow.getCell(highlightCell).getJqElement().removeClass('highlight-highlighted highlight-highlighted-sec')
                            }
                        }
                    }
                }
            }
            if (notify.messageCell != null) {
                results = [];
                for (k = 0, len2 = gameRowObjects.length; k < len2; k++) {
                    gameRow = gameRowObjects[k];
                    results.push(gameRow.getCell(notify.messageCell).getJqElement().find(".highlight-message").remove())
                }
                return results
            }
        };
        HighlightHtml.prototype.setIsOddsView = function(_isOddsView) {
            this._isOddsView = _isOddsView
        };
        HighlightHtml.prototype.getIsOddsView = function() {
            return this._isOddsView
        };
        HighlightHtml.prototype.canBeEventHighlighted = function(sportId, eventId) {
            var fsDataIndex;
            fsDataIndex = "g_" + sportId + "_" + eventId;
            if (hasMatchFinalResultOnly(fsDataIndex)) {
                return false
            }
            return true
        };
        HighlightHtml.prototype.canBeEventIndexHighLighted = function(sportId, eventId, propertyIndex) {
            var eventItem, fsDataIndex, holder, ret;
            fsDataIndex = "g_" + sportId + "_" + eventId;
            holder = this._dic.get('dataEventHolderProxy').getHolder();
            if (!holder.hasEvent(fsDataIndex)) {
                return false
            }
            eventItem = holder.getEvent(fsDataIndex);
            ret = eventItem.getValue(propertyIndex);
            if ((propertyIndex === 'WA' || propertyIndex === 'WB') && eventItem.getValue('AB') === cjs.constants.MATCH_STATUS_TYPE_FIN) {
                return false
            }
            if ((ret == null) || ret === '') {
                return false
            }
            return true
        };
        return HighlightHtml
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).HighlightHtml == null) {
            base.HighlightHtml = HighlightHtml
        }
    } else {
        if (exports.HighlightHtml == null) {
            exports.HighlightHtml = HighlightHtml
        }
    }
}).call(this);
(function() {
    var LangboxChecker, base;
    LangboxChecker = (function() {
        function LangboxChecker(storage, url, projectId, checkEnabled, checkGeoIp, idToShowBefore) {
            var geoIP, i, len;
            if (projectId == null) {
                projectId = 1
            }
            if (checkEnabled == null) {
                checkEnabled = false
            }
            if (checkGeoIp == null) {
                checkGeoIp = []
            }
            if (idToShowBefore == null) {
                idToShowBefore = "lang-box-wrapper"
            }
            this._storage = storage;
            this._url = url;
            this._projectId = projectId;
            this._checkEnabled = checkEnabled;
            this._checkGeoIp = {};
            for (i = 0, len = checkGeoIp.length; i < len; i++) {
                geoIP = checkGeoIp[i];
                this._checkGeoIp[geoIP] = 1
            }
            this._idToShowBefore = idToShowBefore;
            this._checked = false;
            this._myGeoIp = ''
        }
        LangboxChecker.prototype.canBeDisplayed = function() {
            return $("#" + this._idToShowBefore).length && this._checkEnabled && !this._isClosed() && !this._checked
        };
        LangboxChecker.prototype.check = function(myGeoIp) {
            var langbox;
            if (!(this._checked || this._isClosed() || !this._checkEnabled || (this._checkGeoIp[myGeoIp] == null) || !$("#" + this._idToShowBefore).length)) {
                this._myGeoIp = myGeoIp;
                langbox = this._load();
                if (langbox) {
                    this._display(langbox, false)
                } else {
                    $.ajax({
                        url: this._url + "lb_" + myGeoIp + "_" + this._projectId,
                        context: this,
                        success: this._display
                    })
                }
            }
            return this._checked = true
        };
        LangboxChecker.prototype._display = function(langbox, store) {
            if (langbox == null) {
                langbox = null
            }
            if (store == null) {
                store = true
            }
            if (langbox) {
                $("#" + this._idToShowBefore).append(langbox).css('display', '')
            }
            if (langbox && store) {
                return this._storage.store("lang_box_" + this._myGeoIp + "_content", langbox, 86400)
            }
        };
        LangboxChecker.prototype._isClosed = function() {
            return this._storage.get('lang_box') === 'c'
        };
        LangboxChecker.prototype._load = function(langbox, store) {
            if (langbox == null) {
                langbox = null
            }
            if (store == null) {
                store = true
            }
            return this._storage.get("lang_box_" + this._myGeoIp + "_content")
        };
        LangboxChecker.prototype.close = function() {
            if (($("#" + this._idToShowBefore).hide(100).length) > 0) {
                return this._storage.store('lang_box', 'c', 7 * 86400)
            }
        };
        return LangboxChecker
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).LangboxChecker == null) {
            base.LangboxChecker = LangboxChecker
        }
    } else {
        if (exports.LangboxChecker == null) {
            exports.LangboxChecker = LangboxChecker
        }
    }
}).call(this);
(function() {
    var LivescoreSettings, base;
    LivescoreSettings = (function() {
        function LivescoreSettings(_lsid, _conf, _util, _$, _dic) {
            var dialog, mygamesGroupsPart, tmpl;
            this._lsid = _lsid;
            this._conf = _conf;
            this._util = _util != null ? _util : cjs.Util;
            this._$ = _$ != null ? _$ : jQuery;
            this._dic = _dic != null ? _dic : cjs.dic;
            this._notificationMyGames = this._dic.getClass('Notification_MyGames');
            if (this._dic.exists('SettingsStorage')) {
                this._settingsStorage = this._dic.get('SettingsStorage')
            }
            this._defConf = {
                sortByTime: this._conf.sortByTime,
                topLeaguesFirst: this._conf.topLeaguesFirst,
                mygamesGroups: false,
                mygamesNotifications: this._notificationMyGames.SETTING_SHOW_WITHOUT_SOUND
            };
            this._userSettingsKey = 'lsSettins';
            this.loadUserSettings();
            this._dialog = document.createElement('div');
            this._$(this._dialog).attr('id', 'livescore-settings');
            this._trans = this._util.trans;
            mygamesGroupsPart = '';
            if (this._util.Config.get('app', 'mygames', 'groups', 'enable')) {
                mygamesGroupsPart = "<div class=\"mggroups-form-element\">\n	<strong>" + (this._trans('TRANS_SETTINGS_LIVESCORE_MYGAMES_DISPLAY_GROUPS')) + "</strong>\n		<div class=\"options\">\n			<label><input type=\"radio\" name=\"mggroups\" value=\"true\">" + (this._trans('TRANS_ODDS_COMPARISON_YES')) + "</label><br/>\n			<label><input type=\"radio\" name=\"mggroups\" value=\"false\" checked=\"checked\">" + (this._trans('TRANS_ODDS_COMPARISON_NO')) + "</label>\n		</div>\n</div>"
            }
            dialog = [];
            tmpl = "<ul class=\"tabs-menu\">\n	<li class=\"li0 settings selected\"><span><a class=\"settings unclickable\" href=\"#\" onClick=\"return false;\">" + (this._trans('TRANS_SETTINGS')) + "</a></span></li>\n</ul>\n<div class=\"contents\">\n	<div class=\"settings selected\">\n	 <form id=\"livescore-settings-form\" method=\"post\" action=\"/\">\n		<div class=\"header\">" + (this._trans('TRANS_SETTINGS_LIVESCORE_GENERAL_SETTINGS')) + "</div>\n		<div class=\"content\">\n			<div class=\"error-box\"><span class=\"err-msg\">" + (this._trans('TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER_LOGIN_LINK')) + "</span></div>\n\n			<div class=\"sortby-form-element\">\n				<strong>" + (this._trans('TRANS_SETTINGS_LIVESCORE_ORDER_MATCHES_BY')) + ":</strong>\n				<div class=\"options\">\n					<label><input type=\"radio\" name=\"sortby\" value=\"league\" checked=\"checked\">" + (this._trans('TRANS_SETTINGS_LIVESCORE_ORDER_BY_LEAGUE_NAME')) + "</label><br/>\n					<label><input type=\"radio\" name=\"sortby\" value=\"time\">" + (this._trans('TRANS_SETTINGS_LIVESCORE_ORDER_BY_MATCH_START_TIME')) + "</label>\n				</div>\n			</div>\n\n			<div class=\"topfirst-form-element\">\n				<strong>" + (this._trans('TRANS_SETTINGS_LIVESCORE_SHOW_MY_LEAGUES_ON_TOP')) + ":</strong>\n				<div class=\"options\">\n					<label><input type=\"radio\" name=\"topfirst\" value=\"true\" checked=\"checked\">" + (this._trans('TRANS_ODDS_COMPARISON_YES')) + "</label><br/>\n					<label><input type=\"radio\" name=\"topfirst\" value=\"false\">" + (this._trans('TRANS_ODDS_COMPARISON_NO')) + "</label>\n				</div>\n			</div>\n		</div>\n\n		<div class=\"header\">" + (this._trans('TRANS_NOTIFICATION_SETTINGS_MY_GAMES')) + "</div>\n		<div class=\"content\">\n			" + mygamesGroupsPart + "\n\n			<div class=\"mgnotifications-form-element\">\n				<strong>" + (this._trans('TRANS_SETTINGS_LIVESCORE_DISPLAY_NOTIFICATIONS_BOTTOM_LEFT')) + "</strong>\n				<div class=\"options\">\n					<label><input type=\"radio\" name=\"mgnotifications\" value=\"" + this._notificationMyGames.SETTING_SHOW_WITH_SOUND + "\">" + (this._trans('TRANS_SETTINGS_LIVESCORE_NOTIFICATIONS_SOUND_EFFECT_ON')) + "</label><br/>\n					<label><input type=\"radio\" name=\"mgnotifications\" value=\"" + this._notificationMyGames.SETTING_SHOW_WITHOUT_SOUND + "\" checked=\"checked\">" + (this._trans('TRANS_SETTINGS_LIVESCORE_NOTIFICATIONS_SOUND_EFFECT_OFF')) + "</label><br/>\n					<label><input type=\"radio\" name=\"mgnotifications\" value=\"" + this._notificationMyGames.SETTING_NOT_SHOW + "\">" + (this._trans('TRANS_ODDS_COMPARISON_NO')) + "</label>\n				</div>\n			</div>\n		</div>\n\n	 </form>\n	</div>\n</div>";
            dialog.push(tmpl);
            this._technicalError = false;
            this._$(this._dialog).html(dialog.join(''))
        }
        LivescoreSettings.prototype.loadUserSettings = function() {
            return this.restoreDefaults()
        };
        LivescoreSettings.prototype.restoreDefaults = function() {
            var key, localSettings, ref, results, value;
            ref = this._defConf;
            for (key in ref) {
                value = ref[key];
                this._conf[key] = value
            }
            localSettings = this._settingsStorage.read(this._userSettingsKey);
            results = [];
            for (key in localSettings) {
                value = localSettings[key];
                results.push(this._conf[key] = value)
            }
            return results
        };
        LivescoreSettings.prototype.restoreDefaultsUser = function() {
            var userConfirm, userSettings;
            userConfirm = window.confirm(this._trans('TRANS_SETTINGS_LIVESCORE_RESTORE_DEFAULT_CONFIRM'));
            if (!userConfirm) {
                return false
            }
            this.restoreDefaults();
            userSettings = this._settingsStorage.remove(this._userSettingsKey);
            this._redrawLivescore();
            return this._lsid._hideDialog()
        };
        LivescoreSettings.prototype._redrawLivescore = function() {
            if (cjs.disableRedrawUserSettings) {
                return true
            }
            sort_fs_data();
            return pgenerate(true, category, false, null, this._util.Enviroment.getSubCategory())
        };
        LivescoreSettings.prototype.errorRollback = function() {
            var form;
            this.loadUserSettings();
            this._redrawLivescore();
            form = this._$('#livescore-settings-form');
            if (form.length) {
                if (this._technicalError) {
                    return
                }
                return this.show(true)
            } else {
                return this._lsid.showTechnicalError()
            }
        };
        LivescoreSettings.prototype.setSortByTime = function(value) {
            var key;
            if (value == null) {
                value = false
            }
            key = this._userSettingsKey + ".sortByTime";
            this._settingsStorage.write(key, value, null, (function(_this) {
                return function() {
                    return _this.errorRollback()
                }
            })(this));
            this._conf.sortByTime = value;
            return this._redrawLivescore()
        };
        LivescoreSettings.prototype.setTopLeaguesFirst = function(value) {
            var key;
            if (value == null) {
                value = false
            }
            key = this._userSettingsKey + ".topLeaguesFirst";
            this._settingsStorage.write(key, value, null, (function(_this) {
                return function() {
                    return _this.errorRollback()
                }
            })(this));
            this._conf.topLeaguesFirst = value;
            return this._redrawLivescore()
        };
        LivescoreSettings.prototype.setMygamesGroups = function(value) {
            var key;
            if (value == null) {
                value = false
            }
            key = this._userSettingsKey + ".mygamesGroups";
            this._settingsStorage.write(key, value, null, (function(_this) {
                return function() {
                    return _this.errorRollback()
                }
            })(this));
            this._conf.mygamesGroups = value;
            return this._redrawLivescore()
        };
        LivescoreSettings.prototype.setMygamesNotifications = function(value) {
            var key;
            if (value == null) {
                value = this._notificationMyGames.SETTING_SHOW_WITHOUT_SOUND
            }
            key = this._userSettingsKey + ".mygamesNotifications";
            this._settingsStorage.write(key, value, null, (function(_this) {
                return function() {
                    return _this.errorRollback()
                }
            })(this));
            this._conf.mygamesNotifications = value;
            return this._redrawLivescore()
        };
        LivescoreSettings.prototype._getDisplayCallback = function() {
            var settings;
            settings = this;
            return function() {
                var mggroups, mgnotifications, sortby, topfirst;
                sortby = settings._conf.sortByTime ? 'time' : 'league';
                topfirst = settings._conf.topLeaguesFirst ? 'true' : 'false';
                mggroups = settings._conf.mygamesGroups ? 'true' : 'false';
                mgnotifications = settings._conf.mygamesNotifications ? settings._conf.mygamesNotifications : settings._notificationMyGames.SETTING_SHOW_WITHOUT_SOUND;
                settings._$(settings._dialog).find('.sortby-form-element input').removeAttr('checked');
                settings._$(settings._dialog).find(".sortby-form-element input[value=" + sortby + "]").prop('checked', true);
                settings._$(settings._dialog).find(".topfirst-form-element input[value=" + topfirst + "]").prop('checked', true);
                settings._$(settings._dialog).find(".mggroups-form-element input[value=" + mggroups + "]").prop('checked', true);
                settings._$(settings._dialog).find(".mgnotifications-form-element input[value=" + mgnotifications + "]").prop('checked', true);
                if (!settings._technicalError) {
                    settings._$("a.restore-defaults").click(function() {
                        settings.restoreDefaultsUser();
                        return false
                    });
                    settings._$('#livescore-settings-form .error-box').hide();
                    return settings._$('#livescore-settings-form input').removeAttr("disabled").click(function() {
                        switch (this.name) {
                            case "sortby":
                                return settings.setSortByTime(this.value === 'time');
                            case "topfirst":
                                return settings.setTopLeaguesFirst(this.value === 'true');
                            case "mggroups":
                                return settings.setMygamesGroups(this.value === 'true');
                            case "mgnotifications":
                                return settings.setMygamesNotifications(this.value)
                        }
                    })
                } else {
                    settings._$('#livescore-settings-form .error-box').show();
                    settings._$('#livescore-settings-form input').attr("disabled", "disabled");
                    return true
                }
            }
        };
        LivescoreSettings.prototype.show = function(serverError) {
            if (serverError == null) {
                serverError = false
            }
            this._technicalError = serverError;
            this._$(this._dialog).find('.error-box .err-msg').html(this._technicalError ? this._lsid.trans('errTechnical') : this._trans('TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER_LOGIN_LINK'));
            this._$(this._dialog).find('.error-box .err-msg a').click((function(lsid) {
                return function() {
                    lsid.showDialog('login');
                    return false
                }
            })(this._lsid));
            return this._lsid._showDialog(this._dialog, this._getDisplayCallback(), null, false)
        };
        return LivescoreSettings
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).LivescoreSettings == null) {
            base.LivescoreSettings = LivescoreSettings
        }
    } else {
        if (exports.LivescoreSettings == null) {
            exports.LivescoreSettings = LivescoreSettings
        }
    }
}).call(this);
(function() {
    var AjaxProxy, base, cjs;
    cjs = typeof window !== "undefined" && window !== null ? window.cjs : require('../generic/generic');
    AjaxProxy = (function() {
        function AjaxProxy(proxyFileUrl, readyCallback) {
            var that;
            this._proxyFileUrl = proxyFileUrl;
            if (cjs.type(readyCallback) === 'function') {
                this._readyCallback = readyCallback
            } else {
                this._readyCallback = null
            }
            this._iframeLoaded = false;
            that = this;
            this._iframe = $('<iframe>').attr('src', this._proxyFileUrl).load(this._onLoadProxy(that)).appendTo('head')[0];
            this._storedRequests = []
        }
        AjaxProxy.prototype.ajax = function(action, setAjaxCallback) {
            if (cjs.type(setAjaxCallback) !== 'function') {
                setAjaxCallback = function() {
                    return false
                }
            }
            this._storedRequests.push({
                'action': action,
                'setAjaxCallback': setAjaxCallback
            });
            return true
        };
        AjaxProxy.prototype.isReady = function() {
            return this._iframeLoaded
        };
        AjaxProxy.prototype._onLoadProxy = function(that) {
            return (function(ajaxProxyInstance) {
                return function() {
                    var i, len, ref, request, results;
                    ajaxProxyInstance.ajax = ajaxProxyInstance._iframe.contentWindow.jQuery.ajax;
                    ajaxProxyInstance._iframeLoaded = true;
                    if (typeof ajaxProxyInstance._readyCallback === "function") {
                        ajaxProxyInstance._readyCallback()
                    }
                    ref = that._storedRequests;
                    results = [];
                    for (i = 0, len = ref.length; i < len; i++) {
                        request = ref[i];
                        results.push(request.setAjaxCallback(ajaxProxyInstance.ajax(request.action)))
                    }
                    return results
                }
            })(this)
        };
        return AjaxProxy
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).AjaxProxy == null) {
            base.AjaxProxy = AjaxProxy
        }
    } else {
        if (exports.AjaxProxy == null) {
            exports.AjaxProxy = AjaxProxy
        }
    }
}).call(this);
(function() {
    var DicProxy;
    DicProxy = (function() {
        DicProxy.prototype.READY = 1;
        DicProxy.prototype.LOADING = 2;
        DicProxy.prototype.RUN_CALLBACKS = 3;

        function DicProxy(utilEnviroment) {
            this.utilEnviroment = utilEnviroment;
            this._ready = false;
            this._callbacks = [];
            this._proxyLoading = false
        }
        DicProxy.prototype.isReady = function() {
            return this._ready
        };
        DicProxy.prototype.onReady = function(cb) {
            if (this.isReady()) {
                if (typeof cb === "function") {
                    cb()
                }
                return DicProxy.prototype.READY
            }
            this._callbacks.push(cb);
            if (this._proxyLoading) {
                return DicProxy.prototype.LOADING
            }
            this._proxyLoading = true;
            this.utilEnviroment.prepareFeedProxy((function(_this) {
                return function() {
                    return _this._runCallbacks()
                }
            })(this));
            return DicProxy.prototype.RUN_CALLBACKS
        };
        DicProxy.prototype._runCallbacks = function() {
            var cb, i, len, ref;
            this._ready = true;
            ref = this._callbacks;
            for (i = 0, len = ref.length; i < len; i++) {
                cb = ref[i];
                if (typeof cb === "function") {
                    cb()
                }
            }
            this._callbacks = [];
            return this._proxyLoading = false
        };
        return DicProxy
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('DicProxy', DicProxy)
}).call(this);
(function() {
    var AjaxJqObject, cjs, ref;
    cjs = typeof window !== "undefined" && window !== null ? window.cjs : require('../generic/generic');
    AjaxJqObject = (function() {
        AjaxJqObject.prototype.updating = false;
        AjaxJqObject.prototype.aborting = false;
        AjaxJqObject.prototype.ajaxAsync = true;
        AjaxJqObject.prototype.container = null;
        AjaxJqObject.prototype.returnTextAfterUpdate = false;
        AjaxJqObject.prototype.errorReporter = null;
        AjaxJqObject.activeRequests = 0;
        AjaxJqObject.MAX_REQUEST_ATTEMPTS = 3;

        function AjaxJqObject(url, feedProxy, callbackFunction, actionTrigger, callbackObject, u304Get, ie6, webkit, feedSign, _dicGetter) {
            this.url = url;
            this.feedProxy = feedProxy;
            this.callbackFunction = callbackFunction;
            this.actionTrigger = actionTrigger;
            this.callbackObject = callbackObject;
            this.u304Get = u304Get;
            this.ie6 = ie6;
            this.webkit = webkit != null ? webkit : true;
            this.feedSign = feedSign;
            this._dicGetter = _dicGetter != null ? _dicGetter : (function() {
                return cjs.dic
            });
            this._requestAttempts = 0;
            this._sendRequestTrigger = null
        }
        AjaxJqObject.prototype.abort = function() {
            var base;
            if (this.updating) {
                this.updating = false;
                this.aborting = true;
                if (this.ajax != null) {
                    if (typeof(base = this.ajax).abort === "function") {
                        base.abort()
                    }
                }
                return this.ajax = null
            }
        };
        AjaxJqObject.prototype.async = function(val) {
            return this.ajaxAsync = val ? true : false
        };
        AjaxJqObject.prototype.setErrorCallback = function(_errorCallback) {
            this._errorCallback = _errorCallback
        };
        AjaxJqObject.prototype.rtext = function(val) {
            this.returnTextAfterUpdate = val ? true : false;
            return this.ajaxAsync = !this.returnTextAfterUpdate
        };
        AjaxJqObject.prototype.update = function(passData, postMethod, headers) {
            var ajaxSettings, ref, that, u304;
            if (this.updating) {
                return false
            }
            this.ajax = null;
            AjaxJqObject.activeRequests++;
            if (typeof jQuery === 'undefined') {
                return false
            }
            if (typeof headers === 'undefined') {
                headers = {}
            }
            this.updating = new Date();
            ajaxSettings = {
                url: this.url,
                async: this.ajaxAsync
            };
            ajaxSettings.data = passData ? passData : void 0;
            ajaxSettings.type = /post/i.test(postMethod) ? 'POST' : 'GET';
            headers['Accept-Language'] = '*';
            headers['Accept'] = '*/*';
            if (typeof this.callbackFunction !== 'undefined' && !this.webkit) {
                headers['User-Agent'] = 'core' + (this.ie6 ? '/ie6' : '')
            }
            if (((ref = this.actionTrigger) === 'update' || ref === 'game') && this.u304Get) {
                u304 = this.u304Get();
                if (u304) {
                    headers['X-Signature'] = u304
                }
            }
            if (this.feedSign != null) {
                headers['X-Fsign'] = this.feedSign
            }
            ajaxSettings.headers = headers;
            that = this;
            ajaxSettings.complete = function() {
                var isOk;
                try {
                    that._log(that);
                    if (that.ajax.readyState === 4) {
                        that.updating = false;
                        isOk = false;
                        if (!that.aborting) {
                            isOk = that._ajaxResponse()
                        }
                        if (isOk) {
                            that.ajax = null;
                            return that._requestAttempts = 0
                        }
                    } else {
                        if (typeof that._errorCallback === "function") {
                            that._errorCallback(that.ajax.status, that.actionTrigger)
                        }
                        return typeof that._sendRequestTrigger === "function" ? that._sendRequestTrigger() : void 0
                    }
                } catch (undefined) {}
            };
            this._sendRequestTrigger = (function(ajaxSettings, that) {
                return function() {
                    var cb, timeout;
                    if (that._requestAttempts++ <= AjaxJqObject.MAX_REQUEST_ATTEMPTS) {
                        cb = function() {
                            return that._ajaxSendRequest(ajaxSettings)
                        };
                        timeout = (that._requestAttempts - 1) * 250;
                        if (timeout) {
                            setTimeout(cb, timeout)
                        } else {
                            cb()
                        }
                        return false
                    }
                    return true
                }
            })(ajaxSettings, this);
            return this._sendRequestTrigger()
        };
        AjaxJqObject.prototype._ajaxSendRequest = function(ajaxSettings) {
            var ref;
            if ((this.ajaxAsync && (this.feedProxy != null)) || (!this.ajaxAsync && ((ref = this.feedProxy) != null ? ref.isReady() : void 0))) {
                this.ajax = this.feedProxy.ajax(ajaxSettings, (function(_this) {
                    return function(ajax) {
                        return _this.ajax = ajax
                    }
                })(this))
            } else {
                this.ajax = jQuery.ajax(ajaxSettings)
            }
            if (!this.ajaxAsync && this.ajax !== null) {
                return this._ajaxResponse()
            }
        };
        AjaxJqObject.prototype._ajaxResponse = function() {
            var e, error, msg, ref, triggerStatus;
            AjaxJqObject.activeRequests--;
            if ((ref = this.ajax.status) === 200 || ref === 304 || ref === 204 || ref === 1223 || ref === 0) {
                if (this.returnTextAfterUpdate === true) {
                    return this.ajax.responseText
                } else {
                    try {
                        if (this.callbackObject) {
                            this.callbackObject[this.callbackFunction](this.ajax.status, this.ajax.getAllResponseHeaders(), this.ajax.responseText, this.actionTrigger, this._getCustomHeaders())
                        } else {
                            this.callbackFunction(this.ajax.status, this.ajax.getAllResponseHeaders(), this.ajax.responseText, this.actionTrigger, this._getCustomHeaders())
                        }
                    } catch (error) {
                        e = error;
                        msg = "Ajax response error [" + this.actionTrigger + "] [" + this.url + "] [" + this.ajax.responseText + "]";
                        if (this.errorReporter) {
                            this.errorReporter(msg, e)
                        }
                    }
                }
            } else {
                triggerStatus = this._sendRequestTrigger();
                if (triggerStatus) {
                    if (typeof this._errorCallback === "function") {
                        this._errorCallback(this.ajax.status, this.actionTrigger)
                    }
                }
                return triggerStatus
            }
            this.ajax = null;
            this.updating = false;
            return true
        };
        AjaxJqObject.prototype._getCustomHeaders = function() {
            var headers;
            headers = {
                'X-GeoIP': this.ajax.getResponseHeader('X-GeoIP'),
                'X-utime': this.ajax.getResponseHeader('X-utime'),
                'X-ClientIP': this.ajax.getResponseHeader('X-ClientIP'),
                'Date': this.ajax.getResponseHeader('Date')
            };
            return headers
        };
        AjaxJqObject.prototype._log = function(that) {
            var dataToLog, dic;
            dic = this._dicGetter();
            dataToLog = {
                'url': that.url,
                'time': new Date(),
                'status': that.ajax.status,
                'statusText': that.ajax.statusText,
                'readyState': that.ajax.readyState,
                'requestAttempts': that._requestAttempts
            };
            return dic.get('Feed_Logger').log(dataToLog)
        };
        return AjaxJqObject
    })();
    if (typeof window !== "undefined" && window !== null) {
        if ((ref = window.cjs) != null) {
            if (ref.AjaxJqObject == null) {
                ref.AjaxJqObject = AjaxJqObject
            }
        }
    } else {
        if (exports.AjaxJqObject == null) {
            exports.AjaxJqObject = AjaxJqObject
        }
    }
}).call(this);
(function() {
    var ClientStorage_Driver_StorageAbstract;
    ClientStorage_Driver_StorageAbstract = (function() {
        ClientStorage_Driver_StorageAbstract.prototype.TTL_KEY = 'data_ttl';

        function ClientStorage_Driver_StorageAbstract() {
            this._driverAvailable = this._isDriverAvailable()
        }
        ClientStorage_Driver_StorageAbstract.prototype._getStorageDriver = function() {
            throw new Error('No driver')
        };
        ClientStorage_Driver_StorageAbstract.prototype.get = function(key) {
            if (key === this.TTL_KEY) {
                return null
            }
            if (!this._checkTtl(key)) {
                return null
            }
            return this._getStorageDriver().getItem(key)
        };
        ClientStorage_Driver_StorageAbstract.prototype.store = function(key, value, ttl) {
            if (key === this.TTL_KEY) {
                return false
            }
            this._getStorageDriver().setItem(key, value);
            this._dropTtl(key);
            this._setTtl(key, ttl);
            return true
        };
        ClientStorage_Driver_StorageAbstract.prototype.drop = function(key) {
            if (key === this.TTL_KEY) {
                return false
            }
            this._getStorageDriver().removeItem(key);
            this._dropTtl(key);
            return true
        };
        ClientStorage_Driver_StorageAbstract.prototype.isAvailable = function() {
            return this._driverAvailable
        };
        ClientStorage_Driver_StorageAbstract.prototype._isDriverAvailable = function() {
            var error, error1, testKey, testValue;
            testKey = 'locTest';
            testValue = 'locTest';
            try {
                this._getStorageDriver().setItem(testKey, testValue);
                if (this._getStorageDriver().getItem(testKey) !== testValue) {
                    return false
                }
                this._getStorageDriver().removeItem(testKey);
                return true
            } catch (error1) {
                error = error1;
                return false
            }
        };
        ClientStorage_Driver_StorageAbstract.prototype._checkTtl = function(key) {
            var ttlKeys;
            ttlKeys = this._loadTtlKeys();
            if ((ttlKeys != null ? ttlKeys[key] : void 0) == null) {
                return true
            }
            if (ttlKeys[key] < this._getTimestamp()) {
                return false
            }
            return true
        };
        ClientStorage_Driver_StorageAbstract.prototype._dropTtl = function(key) {
            var ttlKeys;
            ttlKeys = this._loadTtlKeys();
            if ((ttlKeys != null ? ttlKeys[key] : void 0) != null) {
                delete ttlKeys[key]
            }
            return this._storeTtlKeys(ttlKeys)
        };
        ClientStorage_Driver_StorageAbstract.prototype._setTtl = function(key, ttl) {
            var ttlKeys;
            if (!ttl) {
                return
            }
            ttlKeys = this._loadTtlKeys();
            ttlKeys[key] = Math.round(ttl) + this._getTimestamp();
            this._storeTtlKeys(ttlKeys);
            return true
        };
        ClientStorage_Driver_StorageAbstract.prototype._loadTtlKeys = function() {
            var error, error1, ttlJson, ttlKeys;
            ttlJson = this._getStorageDriver().getItem(this.TTL_KEY);
            try {
                if (ttlJson != null) {
                    ttlKeys = JSON.parse(ttlJson)
                }
            } catch (error1) {
                error = error1;
                ttlKeys = {}
            }
            if (ttlKeys == null) {
                ttlKeys = {}
            }
            return ttlKeys
        };
        ClientStorage_Driver_StorageAbstract.prototype._storeTtlKeys = function(ttlKeys) {
            var ttlJson;
            ttlJson = JSON.stringify(ttlKeys);
            this._getStorageDriver().setItem(this.TTL_KEY, ttlJson);
            return true
        };
        ClientStorage_Driver_StorageAbstract.prototype._getTimestamp = function() {
            return Math.round((new Date()).getTime() / 1000)
        };
        return ClientStorage_Driver_StorageAbstract
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('ClientStorage_Driver_StorageAbstract', ClientStorage_Driver_StorageAbstract)
}).call(this);
(function() {
    var ClientStorage_Driver_LocalStorage, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    ClientStorage_Driver_LocalStorage = (function(superClass) {
        extend(ClientStorage_Driver_LocalStorage, superClass);

        function ClientStorage_Driver_LocalStorage() {
            return ClientStorage_Driver_LocalStorage.__super__.constructor.apply(this, arguments)
        }
        ClientStorage_Driver_LocalStorage.prototype.DRIVER_NAME = 'locStorage';
        ClientStorage_Driver_LocalStorage.prototype._getStorageDriver = function() {
            return localStorage
        };
        return ClientStorage_Driver_LocalStorage
    })(cjs.dic.getClass('ClientStorage_Driver_StorageAbstract'));
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('ClientStorage_Driver_LocalStorage', ClientStorage_Driver_LocalStorage)
}).call(this);
(function() {
    var ClientStorage_Driver_LocalCookie;
    ClientStorage_Driver_LocalCookie = (function() {
        ClientStorage_Driver_LocalCookie.prototype.DRIVER_NAME = 'localCookie';
        ClientStorage_Driver_LocalCookie.prototype.TTL_KEY = 'data_ttl';

        function ClientStorage_Driver_LocalCookie() {
            this._p3pNeeded = typeof iframe_external !== 'undefined' && iframe_external;
            this._p3pAvailable = this._isBrowserP3pCompatible();
            this._driverAvailable = this._isDriverAvailable()
        }
        ClientStorage_Driver_LocalCookie.prototype.get = function(key, origin) {
            var forceP3p;
            origin = this._getOrigin(origin);
            forceP3p = this._getP3pIsForced(origin);
            if (!(!forceP3p || (forceP3p && this._p3pAvailable))) {
                throw 'Driver error'
            }
            return this._parseCookie(origin.cookie, key)
        };
        ClientStorage_Driver_LocalCookie.prototype.store = function(key, value, ttl, origin, path) {
            var cookie, expiredDate, forceP3p;
            origin = this._getOrigin(origin);
            forceP3p = this._getP3pIsForced(origin);
            if (!(!forceP3p || (forceP3p && this._p3pAvailable))) {
                throw 'Driver error'
            }
            if (value === null || value === '') {
                ttl = -86400
            }
            if (ttl == null) {
                ttl = 365 * 86400
            }
            expiredDate = new Date();
            expiredDate.setTime(expiredDate.getTime() + ttl * 1000);
            cookie = key + "=" + escape(value);
            if (ttl) {
                cookie += "; expires=" + expiredDate.toGMTString()
            }
            if (path != null) {
                cookie += '; path=' + path
            }
            if (typeof domain !== "undefined" && domain !== null) {
                cookie += '; domain=' + domain
            }
            origin.cookie = cookie;
            return true
        };
        ClientStorage_Driver_LocalCookie.prototype.drop = function(key) {
            return this.store(key, '')
        };
        ClientStorage_Driver_LocalCookie.prototype.isAvailable = function() {
            return this._driverAvailable
        };
        ClientStorage_Driver_LocalCookie.prototype._isDriverAvailable = function() {
            return !this._p3pNeeded || (this._p3pNeeded && this._p3pAvailable)
        };
        ClientStorage_Driver_LocalCookie.prototype._isBrowserP3pCompatible = function() {
            var sub, ver;
            if (navigator.userAgent && navigator.userAgent.indexOf("MSIE") !== -1) {
                sub = navigator.appVersion.substr(navigator.appVersion.indexOf("MSIE") + 5);
                ver = parseInt(sub.substr(0, sub.indexOf('.')));
                return ver >= 8
            }
            return true
        };
        ClientStorage_Driver_LocalCookie.prototype._getOrigin = function(origin) {
            if (typeof origin === 'undefined' || origin === 'self' || !this._p3p_needed) {
                origin = document
            }
            return origin
        };
        ClientStorage_Driver_LocalCookie.prototype._getP3pIsForced = function(origin) {
            var forceP3p;
            forceP3p = false;
            if (origin !== document || this._p3p_needed) {
                return forceP3p = true
            }
        };
        ClientStorage_Driver_LocalCookie.prototype._parseCookie = function(cookieString, key) {
            var cookie, cookies, i, j, name, parts, ref, result;
            result = key ? null : {};
            cookies = cookieString.split('; ');
            for (i = j = 0, ref = cookies.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
                parts = cookies[i].split('=');
                name = parts.shift();
                cookie = parts.join('=');
                if (key && key === name) {
                    result = this._decodeCookie(cookie);
                    break
                }
                if (!key) {
                    result[name] = this._decodeCookie(cookie)
                }
            }
            return result
        };
        ClientStorage_Driver_LocalCookie.prototype._decodeCookie = function(s) {
            if (s.indexOf('"') === 0) {
                s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\')
            }
            return s = unescape(s)
        };
        return ClientStorage_Driver_LocalCookie
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('ClientStorage_Driver_LocalCookie', ClientStorage_Driver_LocalCookie)
}).call(this);
(function() {
    var ClientStorage_Driver_DummyStorage, DummyStorage, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    ClientStorage_Driver_DummyStorage = (function(superClass) {
        extend(ClientStorage_Driver_DummyStorage, superClass);

        function ClientStorage_Driver_DummyStorage() {
            return ClientStorage_Driver_DummyStorage.__super__.constructor.apply(this, arguments)
        }
        ClientStorage_Driver_DummyStorage.prototype.DRIVER_NAME = 'dummyStorage';
        ClientStorage_Driver_DummyStorage.prototype._getStorageDriver = function() {
            return DummyStorage.getInstance()
        };
        return ClientStorage_Driver_DummyStorage
    })(cjs.dic.getClass('ClientStorage_Driver_StorageAbstract'));
    DummyStorage = (function() {
        DummyStorage._instance = null;
        DummyStorage.getInstance = function() {
            if (!this._instance) {
                this._instance = new this
            }
            return this._instance
        };

        function DummyStorage() {
            this._data = {}
        }
        DummyStorage.prototype.getItem = function(key) {
            if (typeof this._data[key] === 'undefined') {
                return null
            }
            return this._data[key]
        };
        DummyStorage.prototype.setItem = function(key, value) {
            value = value + "";
            this._data[key] = value;
            return void 0
        };
        DummyStorage.prototype.removeItem = function(key) {
            delete this._data[key];
            return void 0
        };
        return DummyStorage
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('ClientStorage_Driver_DummyStorage', ClientStorage_Driver_DummyStorage)
}).call(this);
(function() {
    var ClientStorage_Driver_IeUserData, IeUserData, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    ClientStorage_Driver_IeUserData = (function(superClass) {
        extend(ClientStorage_Driver_IeUserData, superClass);
        ClientStorage_Driver_IeUserData.prototype.DRIVER_NAME = 'ieUserData';

        function ClientStorage_Driver_IeUserData(utilBrowser) {
            this.utilBrowser = utilBrowser;
            ClientStorage_Driver_IeUserData.__super__.constructor.call(this)
        }
        ClientStorage_Driver_IeUserData.prototype._isDriverAvailable = function() {
            if (!(this.utilBrowser.is(this.utilBrowser.IE) && this.utilBrowser.version() < 9)) {
                return false
            }
            return ClientStorage_Driver_IeUserData.__super__._isDriverAvailable.call(this)
        };
        ClientStorage_Driver_IeUserData.prototype._getStorageDriver = function() {
            return IeUserData.getInstance()
        };
        return ClientStorage_Driver_IeUserData
    })(cjs.dic.getClass('ClientStorage_Driver_StorageAbstract'));
    IeUserData = (function() {
        IeUserData._instance = null;
        IeUserData.getInstance = function() {
            if (!this._instance) {
                this._instance = new this
            }
            return this._instance
        };
        IeUserData.prototype.STORAGE_NAME = "userDataStorage";

        function IeUserData() {
            this._initDriver()
        }
        IeUserData.prototype.getItem = function(key) {
            return this._storageExecuteFunction((function(_this) {
                return function() {
                    key = _this._normalizeKey(key);
                    return _this._deserialize(_this._storage.getAttribute(key))
                }
            })(this))
        };
        IeUserData.prototype.setItem = function(key, value) {
            this._storageExecuteFunction((function(_this) {
                return function() {
                    key = _this._normalizeKey(key);
                    value = value + "";
                    if (value == null) {
                        return _this.removeItem(key)
                    }
                    _this._storage.setAttribute(key, _this._serialize(value));
                    return _this._storage.save(IeUserData.prototype.STORAGE_NAME)
                }
            })(this));
            return void 0
        };
        IeUserData.prototype.removeItem = function(key) {
            this._storageExecuteFunction((function(_this) {
                return function() {
                    key = _this._normalizeKey(key);
                    _this._storage.removeAttribute(key);
                    return _this._storage.save(IeUserData.prototype.STORAGE_NAME)
                }
            })(this));
            return void 0
        };
        IeUserData.prototype._initDriver = function() {
            var error, scriptTag;
            try {
                scriptTag = 'script';
                this._storageContainer = new ActiveXObject('htmlfile');
                this._storageContainer.open();
                this._storageContainer.write('<' + scriptTag + '>document.w=window</' + scriptTag + '><iframe src="/favicon.ico"></iframe>');
                this._storageContainer.close();
                this._storageOwner = this._storageContainer.w.frames[0].document;
                this._storage = this._storageOwner.createElement('div');
                this._storageOwner.appendChild(this._storage);
                return this._storage.addBehavior('#default#userData')
            } catch (error) {
                throw new Error('IeStorage error')
            }
        };
        IeUserData.prototype._normalizeKey = function(key) {
            var r;
            r = new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]", "g");
            return key.replace(/^d/, '___$&').replace(r, '___')
        };
        IeUserData.prototype._serialize = function(value) {
            return JSON.stringify(value)
        };
        IeUserData.prototype._deserialize = function(value) {
            var e, error;
            if (typeof value !== 'string') {
                return void 0
            }
            try {
                return JSON.parse(value)
            } catch (error) {
                e = error;
                return value || void 0
            }
        };
        IeUserData.prototype._storageExecuteFunction = function(func) {
            var result;
            this._storage.load(IeUserData.prototype.STORAGE_NAME);
            result = func();
            return result
        };
        return IeUserData
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('ClientStorage_Driver_IeUserData', ClientStorage_Driver_IeUserData)
}).call(this);
(function() {
    var ClientStorage_Driver_SessionStorage, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    ClientStorage_Driver_SessionStorage = (function(superClass) {
        extend(ClientStorage_Driver_SessionStorage, superClass);

        function ClientStorage_Driver_SessionStorage() {
            return ClientStorage_Driver_SessionStorage.__super__.constructor.apply(this, arguments)
        }
        ClientStorage_Driver_SessionStorage.prototype.DRIVER_NAME = 'sessStorage';
        ClientStorage_Driver_SessionStorage.prototype._getStorageDriver = function() {
            return sessionStorage
        };
        return ClientStorage_Driver_SessionStorage
    })(cjs.dic.getClass('ClientStorage_Driver_StorageAbstract'));
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('ClientStorage_Driver_SessionStorage', ClientStorage_Driver_SessionStorage)
}).call(this);
(function() {
    var ClientStorage;
    ClientStorage = (function() {
        ClientStorage.INIT = function(ClientStorage_Driver_LocalStorage, ClientStorage_Driver_IeUserData, ClientStorage_Driver_LocalCookie, ClientStorage_Driver_SessionStorage, ClientStorage_Driver_DummyStorage) {
            var clientStorage;
            clientStorage = new ClientStorage();
            clientStorage.addDriver(ClientStorage_Driver_LocalStorage, cjs.dic.getClass('ClientStorage_Driver_IeUserData').prototype.DRIVER_NAME);
            clientStorage.addDriver(ClientStorage_Driver_IeUserData, cjs.dic.getClass('ClientStorage_Driver_LocalCookie').prototype.DRIVER_NAME);
            clientStorage.addDriver(ClientStorage_Driver_LocalCookie, cjs.dic.getClass('ClientStorage_Driver_DummyStorage').prototype.DRIVER_NAME);
            clientStorage.addDriver(ClientStorage_Driver_DummyStorage);
            clientStorage.addDriver(ClientStorage_Driver_SessionStorage, cjs.dic.getClass('ClientStorage_Driver_LocalCookie').prototype.DRIVER_NAME);
            clientStorage.migrate();
            return clientStorage
        };

        function ClientStorage(_dic) {
            this._dic = _dic != null ? _dic : cjs.dic;
            this.drivers = {}
        }
        ClientStorage.prototype.addDriver = function(driver, fallbackDriver) {
            var driverName;
            if (fallbackDriver == null) {
                fallbackDriver = null
            }
            driverName = driver.DRIVER_NAME;
            if (this.drivers[driverName] != null) {
                return false
            }
            this.drivers[driverName] = {
                'driver': driver,
                'available': driver.isAvailable(),
                'fallbackDriver': fallbackDriver
            };
            return true
        };
        ClientStorage.prototype.store = function(key, value, ttl, origin, path) {
            return this._store(null, key, value, ttl, origin, path)
        };
        ClientStorage.prototype.get = function(key, origin) {
            return this._get(null, key, origin)
        };
        ClientStorage.prototype.drop = function(key) {
            return this._drop(null, key)
        };
        ClientStorage.prototype.isDriverAvailable = function(driverName) {
            var ref, ref1;
            return ((ref = this.drivers) != null ? (ref1 = ref[driverName]) != null ? ref1.available : void 0 : void 0) === true
        };
        ClientStorage.prototype._store = function(driverName, key, value, ttl, origin, path) {
            var driver, error, error1;
            driver = this._getDriver(driverName);
            if (driver === false) {
                return false
            }
            try {
                return driver.store(key, value, ttl, origin, path)
            } catch (error1) {
                error = error1;
                this._disableDriver(driver.DRIVER_NAME);
                return this.store(key, value, ttl, origin, path)
            }
            return false
        };
        ClientStorage.prototype._get = function(driverName, key, origin) {
            var driver, error, error1;
            driver = this._getDriver(driverName);
            if (driver === false) {
                return null
            }
            try {
                return driver.get(key, origin)
            } catch (error1) {
                error = error1;
                this._disableDriver(driver.DRIVER_NAME);
                return this.get(key, origin)
            }
            return null
        };
        ClientStorage.prototype._drop = function(driverName, key) {
            var driver, error, error1;
            driver = this._getDriver(driverName);
            if (driver === false) {
                return false
            }
            try {
                return driver.drop(key)
            } catch (error1) {
                error = error1;
                this._disableDriver(driver.DRIVER_NAME);
                return this.drop(key)
            }
            return false
        };
        ClientStorage.prototype._getDriver = function(name) {
            if (!name) {
                name = this._dic.getClass('ClientStorage_Driver_LocalStorage').prototype.DRIVER_NAME
            }
            if (!this.drivers[name]) {
                return false
            }
            if (!this.drivers[name].available) {
                if (!this.drivers[name].fallbackDriver) {
                    return false
                }
                return this._getDriver(this.drivers[name].fallbackDriver)
            }
            return this.drivers[name].driver
        };
        ClientStorage.prototype._disableDriver = function(name) {
            if (!this.drivers[name]) {
                return false
            }
            this.drivers[name].available = false;
            return true
        };
        ClientStorage.prototype.migrate = function() {
            var cookieName, cookiePath, cookieValue, cookies, error, error1, fromDriver, paths, toDriver;
            fromDriver = this.drivers[this._dic.getClass('ClientStorage_Driver_LocalCookie').prototype.DRIVER_NAME].driver;
            toDriver = this.drivers[this._dic.getClass('ClientStorage_Driver_LocalStorage').prototype.DRIVER_NAME].driver;
            if (!(fromDriver.isAvailable() && toDriver.isAvailable())) {
                return false
            }
            try {
                paths = toDriver.get('paths-migrated-from-cookies') || '';
                cookiePath = '<' + document.location.pathname.replace(/\\/g, '/').replace(/\/[^\/]*$/, '') + '>';
                if (cookiePath === '<>') {
                    cookiePath = '</>'
                }
                if (paths.indexOf(cookiePath) !== -1) {
                    return false
                }
                cookies = fromDriver._parseCookie(document.cookie);
                for (cookieName in cookies) {
                    cookieValue = cookies[cookieName];
                    toDriver.store(cookieName, cookieValue);
                    fromDriver.drop(cookieName)
                }
                toDriver.store('paths-migrated-from-cookies', paths + cookiePath)
            } catch (error1) {
                error = error1;
                return false
            }
            return true
        };
        ClientStorage.prototype.store_cookie = function(key, value, ttl, origin, path) {
            return this._store(this._dic.getClass('ClientStorage_Driver_LocalCookie').prototype.DRIVER_NAME, key, value, ttl, origin, path)
        };
        ClientStorage.prototype.get_cookie = function(key, origin) {
            return this._get(this._dic.getClass('ClientStorage_Driver_LocalCookie').prototype.DRIVER_NAME, key, origin)
        };
        ClientStorage.prototype.store_in_session = function(key, value, ttl) {
            return this._store(this._dic.getClass('ClientStorage_Driver_SessionStorage').prototype.DRIVER_NAME, key, value, ttl)
        };
        ClientStorage.prototype.get_from_session = function(key) {
            return this._get(this._dic.getClass('ClientStorage_Driver_SessionStorage').prototype.DRIVER_NAME, key)
        };
        return ClientStorage
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('ClientStorage', ClientStorage.INIT, ['clientStorage', 'client_storage'])
}).call(this);
(function() {
    var TimezoneSwitcher, base, cjs;
    cjs = typeof window !== "undefined" && window !== null ? window.cjs : require('../generic/generic');
    TimezoneSwitcher = (function() {
        function TimezoneSwitcher(_storage, defaultTz, _timeFormatter, _changeTzCallback, actualTimestamp, actualElementJQselector, listElementJQselector, tzList, tzNameList, isActiveDST) {
            var loadedTz;
            this._storage = _storage;
            this._timeFormatter = _timeFormatter;
            this._changeTzCallback = _changeTzCallback != null ? _changeTzCallback : null;
            if (actualTimestamp == null) {
                actualTimestamp = 0
            }
            if (actualElementJQselector == null) {
                actualElementJQselector = ""
            }
            if (listElementJQselector == null) {
                listElementJQselector = ""
            }
            if (tzList == null) {
                tzList = []
            }
            if (tzNameList == null) {
                tzNameList = {}
            }
            if (isActiveDST == null) {
                isActiveDST = false
            }
            this._defaultTz = this.getDefaultTzUser(defaultTz);
            this.setActualTime(actualTimestamp, true);
            this.isDSTactive(isActiveDST);
            this.setActualElementJQselector(actualElementJQselector, true);
            this.setListElementJQselector(listElementJQselector, true);
            this.setTZlist(tzList, tzNameList, true);
            this._showGmt = true;
            this._tzListId = 'tzcontent';
            this._tzImageElementSelector = '#time-zone-line';
            this._tzStoreKey = 'ts_tz';
            this._tzStoreTtl = 360 * 24 * 60 * 60;
            this._userTz = this._defaultTz;
            loadedTz = this._storage.get(this._tzStoreKey);
            if (loadedTz != null) {
                this._userTz = parseFloat(loadedTz)
            }
            this._userHasDefaultTz = loadedTz == null;
            this._timeFormat = "d.m. H:i";
            this._toggleCallback = null;
            this._drawed = false;
            this._draw();
            this._updateInterval = setInterval((function(timezone) {
                return function() {
                    return timezone._redraw()
                }
            })(this), 2000)
        }
        TimezoneSwitcher.prototype.setDefaultTz = function(defaultTz) {
            this._defaultTz = this.getDefaultTzUser(defaultTz);
            if (this._userHasDefaultTz) {
                return this._userTz = this._defaultTz
            }
        };
        TimezoneSwitcher.prototype.getDefaultTzUser = function(defaultTz) {
            var _defaultTz, error, exception, i, len, ref, tz;
            try {
                _defaultTz = -1 * new Date().getTimezoneOffset() / 60;
                ref = this._tzList;
                for (i = 0, len = ref.length; i < len; i++) {
                    tz = ref[i];
                    if (tz === _defaultTz) {
                        return _defaultTz
                    }
                }
            } catch (error) {
                exception = error
            }
            return defaultTz
        };
        TimezoneSwitcher.prototype.setToggleCallback = function(toggleCallback) {
            if (toggleCallback == null) {
                toggleCallback = null
            }
            return this._toggleCallback = toggleCallback
        };
        TimezoneSwitcher.prototype.setActualTime = function(actualTimestamp, skipDrawing) {
            if (actualTimestamp == null) {
                actualTimestamp = 0
            }
            if (skipDrawing == null) {
                skipDrawing = false
            }
            if (actualTimestamp !== 0) {
                this._serverUserOffset = actualTimestamp - cjs.dic.get('util_date').getLocalUTime()
            }
            if (actualTimestamp === 0) {
                this._serverUserOffset = 0
            }
            if (!skipDrawing) {
                return this._draw()
            }
        };
        TimezoneSwitcher.prototype.setShowGmt = function(showGmt) {
            if (showGmt == null) {
                showGmt = true
            }
            this._showGmt = showGmt;
            return this._showGmt
        };
        TimezoneSwitcher.prototype.isDSTactive = function(isActiveDST) {
            if (isActiveDST == null) {
                isActiveDST = null
            }
            if (isActiveDST != null) {
                this._isActiveDST = isActiveDST
            }
            return this._isActiveDST
        };
        TimezoneSwitcher.prototype.getActualTime = function() {
            return this._serverUserOffset + cjs.dic.get('util_date').getLocalUTime()
        };
        TimezoneSwitcher.prototype.setActualElementJQselector = function(actualElementJQselector, skipDrawing) {
            if (skipDrawing == null) {
                skipDrawing = false
            }
            this._actualElementJQselector = actualElementJQselector;
            if (this._actualElementJQselector) {
                $(this._actualElementJQselector).parent().bind('click', {
                    'this': this
                }, function(e) {
                    return e.data["this"].toggle()
                })
            }
            if (!skipDrawing) {
                return this._draw()
            }
        };
        TimezoneSwitcher.prototype.setListElementJQselector = function(listElementJQselector, skipDrawing) {
            var ul;
            if (skipDrawing == null) {
                skipDrawing = false
            }
            this._listElementJQselector = listElementJQselector;
            if (this._listElementJQselector) {
                ul = $(document.createElement('ul'));
                ul.attr('id', this._tzListId);
                $(this._listElementJQselector).append(ul)
            }
            if (!skipDrawing) {
                return this._draw()
            }
        };
        TimezoneSwitcher.prototype.setTZlist = function(tzList, tzNameList, skipDrawing) {
            var i, len, name, newTz, newTzNameList, position, tz;
            if (tzList == null) {
                tzList = []
            }
            if (tzNameList == null) {
                tzNameList = {}
            }
            if (skipDrawing == null) {
                skipDrawing = false
            }
            if (this.isDSTactive()) {
                for (position = i = 0, len = tzList.length; i < len; position = ++i) {
                    tz = tzList[position];
                    if (tz % 1 !== 0) {
                        tzList[position] = tz + 1
                    }
                }
                tzList.sort(function(a, b) {
                    if (a > b) {
                        return 1
                    }
                    if (a < b) {
                        return -1
                    }
                    return 0
                });
                newTzNameList = {};
                for (tz in tzNameList) {
                    name = tzNameList[tz];
                    tz = parseFloat(tz);
                    newTz = this.isDSTactive() ? tz + 1 : tz;
                    newTzNameList[newTz] = name
                }
                tzNameList = newTzNameList
            }
            this._tzList = tzList;
            this._tzNameList = tzNameList;
            if (!skipDrawing) {
                return this._draw()
            }
        };
        TimezoneSwitcher.prototype.setTimeFormat = function(timeFormat, skipDrawing) {
            if (skipDrawing == null) {
                skipDrawing = false
            }
            this._timeFormat = timeFormat;
            if (!skipDrawing) {
                return this._draw()
            }
        };
        TimezoneSwitcher.prototype.setTimezone = function(timezone, skipDrawing) {
            var i, len, ref, tz;
            if (skipDrawing == null) {
                skipDrawing = false
            }
            if (timezone === this._userTz) {
                return false
            }
            ref = this._tzList;
            for (i = 0, len = ref.length; i < len; i++) {
                tz = ref[i];
                if (tz === timezone) {
                    this._userHasDefaultTz = false;
                    this._userTz = timezone;
                    this._storage.store(this._tzStoreKey, this._userTz, this._tzStoreTtl);
                    if (!skipDrawing) {
                        this._draw()
                    }
                    if (cjs.type(this._changeTzCallback) === 'function') {
                        this._changeTzCallback(this._userTz)
                    }
                    return true
                }
            }
        };
        TimezoneSwitcher.prototype.getTimezone = function() {
            return this._userTz
        };
        TimezoneSwitcher.prototype.getTimezoneHour = function() {
            return Math.floor(this._userTz)
        };
        TimezoneSwitcher.prototype.toggle = function() {
            var list;
            list = $(this._listElementJQselector + ' ul#' + this._tzListId);
            if (!($('#tzcontent').css('display') === "none" && list.hasClass('active'))) {
                list.toggleClass('active')
            }
            if (list.hasClass('active')) {
                list.show();
                cjs.dic.get('Helper_Window').closePopup('timezone')
            } else {
                list.hide()
            }
            if (cjs.type(this._toggleCallback) === 'function') {
                return this._toggleCallback(list.hasClass('active'))
            }
        };
        TimezoneSwitcher.prototype._tzString = function(timezone) {
            var timezoneInt, timezoneMinutes, timezoneString, timezoneTail;
            if (timezone == null) {
                timezone = this._userTz
            }
            if (this._tzNameList[timezone]) {
                timezoneTail = ', ' + this._tzNameList[timezone]
            } else {
                if (this._showGmt) {
                    timezoneInt = parseFloat(timezone);
                    timezoneMinutes = Math.round((timezone - parseFloat(timezone)) * 60);
                    timezoneString = timezoneInt + (timezoneMinutes > 0 ? ':' + (timezoneMinutes < 10 ? '0' : '') + timezoneMinutes : '');
                    timezoneTail = ', GMT' + (timezone < 0 ? '' : '+') + timezoneString
                } else {
                    timezoneTail = ''
                }
            }
            return this._timeFormatter(this._timeFormat, this.getActualTime(), timezone * 3600 * (-1)) + timezoneTail
        };
        TimezoneSwitcher.prototype._draw = function() {
            var a, i, len, li, ref, ref1, timezone, ul;
            if (!(this._actualElementJQselector && this._listElementJQselector && ((ref = this._tzList) != null ? ref.length : void 0))) {
                return false
            }
            ul = $(this._listElementJQselector + ' ul#' + this._tzListId);
            ul.find('li').remove();
            ref1 = this._tzList;
            for (i = 0, len = ref1.length; i < len; i++) {
                timezone = ref1[i];
                if (cjs.type(timezone) === 'number') {
                    li = $(document.createElement('li'));
                    a = $(document.createElement('a'));
                    a.attr('href', '#');
                    if (timezone === this._userTz) {
                        a.addClass('active')
                    }
                    if (timezone === this._defaultTz) {
                        a.addClass('tzdefault')
                    }
                    a.text(this._tzString(timezone));
                    a.bind('click', {
                        'this': this,
                        'timezone': timezone
                    }, function(e) {
                        e.data["this"].toggle();
                        e.preventDefault();
                        return e.data["this"].setTimezone(e.data.timezone)
                    });
                    li.append(a);
                    ul.append(li)
                }
            }
            ul.find('li:even').addClass('even');
            $(this._actualElementJQselector).text(this._tzString());
            $(this._tzImageElementSelector).css('left', Math.floor(70 + (this._userTz * 5)) + 'px');
            return this._drawed = true
        };
        TimezoneSwitcher.prototype._redraw = function() {
            var a, as, i, iter, len, ref, timezone;
            if (!this._drawed) {
                return false
            }
            as = $(this._listElementJQselector + ' ul#' + this._tzListId + ' a');
            iter = 0;
            ref = this._tzList;
            for (i = 0, len = ref.length; i < len; i++) {
                timezone = ref[i];
                if (cjs.type(timezone) === 'number') {
                    if (as[iter] != null) {
                        a = $(as[iter]);
                        if (a.text() !== this._tzString(timezone)) {
                            a.text(this._tzString(timezone))
                        }
                    }
                    iter++
                }
            }
            if ($(this._actualElementJQselector).text() !== this._tzString()) {
                return $(this._actualElementJQselector).text(this._tzString())
            }
        };
        return TimezoneSwitcher
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).TimezoneSwitcher == null) {
            base.TimezoneSwitcher = TimezoneSwitcher
        }
    } else {
        if (exports.TimezoneSwitcher == null) {
            exports.TimezoneSwitcher = TimezoneSwitcher
        }
    }
}).call(this);
(function() {
    var MyGames, base;
    MyGames = (function() {
        MyGames.prototype.LSID_DATA_KEY = 'mygames';

        function MyGames(_storage, _lsid, _name, _path, _changeCallback, _sportList, _dayGetter, _jQuery, _getMatchDayFunc, _projectId, _cfg, _getGmtOffsetFunc, _isNoDuelTournament, _eventsUpdatedStartTimeGetter, _dic) {
            this._storage = _storage;
            this._lsid = _lsid;
            this._name = _name;
            this._path = _path;
            this._changeCallback = _changeCallback;
            this._sportList = _sportList;
            this._dayGetter = _dayGetter;
            this._jQuery = _jQuery;
            this._getMatchDayFunc = _getMatchDayFunc;
            this._projectId = _projectId;
            this._cfg = _cfg;
            this._getGmtOffsetFunc = _getGmtOffsetFunc;
            this._isNoDuelTournament = _isNoDuelTournament;
            this._eventsUpdatedStartTimeGetter = _eventsUpdatedStartTimeGetter;
            this._dic = _dic != null ? _dic : cjs.dic;
            this._container = {};
            this._labl = {};
            this._noDuelTournaments = {};
            this._loaded = false;
            this._count = 0;
            this._sports = null;
            this._sports_count = null;
            this._expired = [];
            this._lastStorageUpdated = this._getStorageTimestamp();
            if (!this._lastStorageUpdated) {
                this._setStorageTimestamp()
            }
        }
        MyGames.prototype._getFutureDays = function() {
            var ref;
            if (((ref = this._cfg) != null ? ref.mygames_future_days : void 0) != null) {
                return parseInt(this._cfg.mygames_future_days)
            }
            return 0
        };
        MyGames.prototype._getPastDays = function() {
            var ref;
            if (((ref = this._cfg) != null ? ref.mygames_past_days : void 0) != null) {
                return parseInt(this._cfg.mygames_past_days)
            }
            return 0
        };
        MyGames.prototype._isOk = function(matchDay, matchStatusType) {
            if (matchDay > 0 && matchStatusType === 1 || matchDay < 0 && matchStatusType === 3) {
                return 1
            }
            return 0
        };
        MyGames.prototype._getExpireDate = function() {
            var local_date, local_date_start;
            local_date = new Date();
            local_date_start = Date.UTC(local_date.getFullYear(), local_date.getMonth(), local_date.getDate(), 0, 0, 0) / 1000 + this._getGmtOffsetFunc();
            return local_date_start + (24 * 60 * 60)
        };
        MyGames.prototype._isMyGameDataValid = function(myGameData) {
            var local_date;
            local_date = new Date();
            local_date = local_date.getTime() / 1000 + this._getGmtOffsetFunc();
            if (local_date < myGameData.m_expire_date) {
                return 1
            }
            return 0
        };
        MyGames.prototype.canBeGameAdded = function(fsDataIndex, fsLablId) {
            var dataHolder, eventItem;
            if (fsLablId == null) {
                fsLablId = null
            }
            dataHolder = this._dic.get('dataEventHolderProxy').findEventHolderByEventId(fsDataIndex);
            if (dataHolder === false) {
                return false
            }
            eventItem = dataHolder.getEvent(fsDataIndex);
            if ((fsLablId != null) && eventItem.getLeagueId() !== fsLablId) {
                return false
            }
            return this.canBeAdded(eventItem.getStartUTime(), eventItem.getEndUTime())
        };
        MyGames.prototype.canBeAdded = function(startTime, endTime) {
            return this.canBeAddedByDay(this._getMatchDayFunc(startTime, endTime))
        };
        MyGames.prototype.canBeAddedByDay = function(daysArray) {
            var day1, day2, futureDays, pastDays;
            if (!(daysArray != null ? daysArray.length : void 0)) {
                return false
            }
            if (this._jQuery.inArray(0, daysArray) !== -1) {
                return true
            }
            futureDays = this._getFutureDays();
            pastDays = this._getPastDays();
            if (daysArray.length === 1) {
                if (daysArray[0] <= futureDays && daysArray[0] >= -pastDays) {
                    return true
                }
                return false
            }
            day1 = daysArray[0];
            day2 = daysArray[daysArray.length - 1];
            if ((day1 <= futureDays && day1 >= -pastDays) || (day2 <= futureDays && day2 >= -pastDays)) {
                return true
            }
            return false
        };
        MyGames.prototype.canBeAllMygamesButtonAdded = function(fsLablId, games) {
            var dataHandler, dataIndex, ret;
            if (fsLablId == null) {
                fsLablId = null
            }
            if (games == null) {
                games = null
            }
            if (games != null) {
                for (dataIndex in games) {
                    if (this.canBeGameAdded(dataIndex, fsLablId)) {
                        return true
                    }
                }
                return false
            }
            dataHandler = this._dic.get('dataEventHolderProxy').getHandler();
            ret = false;
            dataHandler.each((function(_this) {
                return function(index, id) {
                    if (_this.canBeGameAdded(id, fsLablId)) {
                        ret = true;
                        return false
                    }
                }
            })(this));
            return ret
        };
        MyGames.prototype.add = function(dataIndex, onlyAddToContainer) {
            var dataHolder, eventItem, leagueId, matchDay, noDuel, redrawLivescore;
            if (onlyAddToContainer == null) {
                onlyAddToContainer = false
            }
            redrawLivescore = this._reloadStorageIfSyncNeeded();
            if (!this._loaded) {
                this.load()
            }
            if (this._container[dataIndex] == null) {
                dataHolder = this._dic.get('dataEventHolderProxy').findEventHolderByEventId(dataIndex);
                if (dataHolder !== false) {
                    eventItem = dataHolder.getEvent(dataIndex);
                    leagueId = eventItem.getLeagueId();
                    noDuel = this._isNoDuelTournament(leagueId);
                    matchDay = this._getMatchDay(this._getMatchDayFunc(eventItem.getStartUTime(), eventItem.getEndUTime()));
                    if (matchDay === 0) {
                        this._container[dataIndex] = {
                            sport_id: eventItem.getSportId(),
                            labl_id: leagueId,
                            m_day: matchDay,
                            m_ok: 0,
                            m_expire_date: this._getExpireDate(),
                            AD: eventItem.getStartUTime(),
                            AP: eventItem.getEndUTime(),
                            noDuel: noDuel,
                            mgGroup: 0
                        }
                    } else {
                        this._container[dataIndex] = eventItem.getData(true);
                        this._container[dataIndex].m_day = matchDay;
                        this._container[dataIndex].m_ok = this._isOk(this._container[dataIndex].m_day, this._container[dataIndex].AB);
                        this._container[dataIndex].m_expire_date = this._getExpireDate();
                        this._container[dataIndex].noDuel = noDuel;
                        this._addLabel(leagueId)
                    }
                    if (onlyAddToContainer) {
                        return
                    }
                    this._saveStats(leagueId, dataIndex.split('_')[2]);
                    this._count++;
                    this.store(true);
                    if (redrawLivescore) {
                        this._redrawLivescore()
                    }
                }
            }
            return true
        };
        MyGames.prototype.isGameFromTournament = function(dataIndex) {
            var dataHolder;
            dataHolder = this._dic.get('dataEventHolderProxy').findEventHolderByEventId(dataIndex);
            if (dataHolder === false) {
                return false
            }
            return this.isAddedWholeTournament(dataHolder.getEvent(dataIndex).getLeagueId())
        };
        MyGames.prototype.isAddedWholeTournament = function(fsLabelId) {
            return this._noDuelTournaments[fsLabelId] != null
        };
        MyGames.prototype.getMatchDayForTournament = function(fsLabelId) {
            if (!this.isAddedWholeTournament(fsLabelId)) {
                return false
            }
            return this._getMatchDay(this._getMatchDayFunc(this._noDuelTournaments[fsLabelId].AD, this._noDuelTournaments[fsLabelId].AP))
        };
        MyGames.prototype.addNoduelTournament = function(labelId) {
            var addedPlayers, first, maxAddedPlayers, redrawLivescore;
            redrawLivescore = this._reloadStorageIfSyncNeeded();
            addedPlayers = 0;
            maxAddedPlayers = cjs.Util.Config.get('app', 'noduel_events', 'mygames');
            first = true;
            this._dic.get('dataEventHolderProxy').getHandler().each((function(that) {
                return function(index, id) {
                    var eventItem, matchDay;
                    eventItem = this.getItem(id);
                    if (labelId !== eventItem.getLeagueId()) {
                        return
                    }
                    if (first) {
                        first = false;
                        matchDay = that._getMatchDay(that._getMatchDayFunc(eventItem.getStartUTime(), eventItem.getEndUTime()));
                        that._noDuelTournaments[labelId] = {
                            sport_id: eventItem.getSportId(),
                            m_day: matchDay,
                            m_ok: matchDay === 0 ? 0 : 1,
                            m_expire_date: that._getExpireDate(),
                            AD: eventItem.getStartUTime(),
                            AP: eventItem.getEndUTime()
                        }
                    }
                    if (!(addedPlayers < maxAddedPlayers)) {
                        return false
                    }
                    addedPlayers++;
                    return that.add(id, true)
                }
            })(this));
            this._saveStats(labelId);
            this._count++;
            this.store(true);
            if (redrawLivescore) {
                this._redrawLivescore()
            }
            return true
        };
        MyGames.prototype.removeAllEvents = function(labelId) {
            var fsDataIndex, gameData, redrawLivescore, ref, removedGames;
            redrawLivescore = this._reloadStorageIfSyncNeeded();
            if (!this._loaded) {
                this.load()
            }
            removedGames = [];
            ref = this._container;
            for (fsDataIndex in ref) {
                gameData = ref[fsDataIndex];
                if (labelId !== gameData.labl_id) {
                    continue
                }
                removedGames.push(fsDataIndex);
                if (this._container[fsDataIndex] != null) {
                    delete this._container[fsDataIndex]
                }
            }
            if (this._noDuelTournaments[labelId] != null) {
                delete this._noDuelTournaments[labelId];
                this._count--
            }
            this.store(true);
            if (redrawLivescore) {
                this._redrawLivescore()
            }
            return removedGames
        };
        MyGames.prototype.getCount = function() {
            var count, data, fsDataIndex, fsLablIndex, i, noduelTournaments, ref;
            if (!this._loaded) {
                this.load()
            }
            count = 0;
            noduelTournaments = {};
            for (fsLablIndex in this._noDuelTournaments) {
                noduelTournaments[fsLablIndex] = 1
            }
            ref = this._container;
            for (fsDataIndex in ref) {
                data = ref[fsDataIndex];
                if ((data.labl_id != null) && this.isAddedWholeTournament(data.labl_id)) {
                    continue
                }
                if (data.noDuel && data.labl_id) {
                    noduelTournaments[data.labl_id] = 1
                } else {
                    count++
                }
            }
            for (i in noduelTournaments) {
                count++
            }
            return count
        };
        MyGames.prototype.getSports = function() {
            var dataContainer, dataIndex, j, len, myGameSport, ref;
            if (this._sports != null) {
                return this._sports
            }
            if (!this._loaded) {
                this.load()
            }
            this._sports = {};
            this._sports_count = 0;
            ref = [this._container, this._noDuelTournaments];
            for (j = 0, len = ref.length; j < len; j++) {
                dataContainer = ref[j];
                for (dataIndex in dataContainer) {
                    myGameSport = dataContainer[dataIndex].sport_id;
                    if (!this._sportList.hasOwnProperty(myGameSport)) {
                        continue
                    }
                    if (!this._sports.hasOwnProperty(this._sportList[myGameSport])) {
                        this._sports_count++
                    }
                    this._sports[this._sportList[myGameSport]] = myGameSport
                }
            }
            return this._sports
        };
        MyGames.prototype.getFromStorage = function() {
            var myGamesStr;
            myGamesStr = this._storage.get(this._name);
            return this._jQuery.parseJSON(myGamesStr)
        };
        MyGames.prototype.getSportCount = function() {
            if (this._sports_count != null) {
                return this._sports_count
            }
            this.getSports();
            return this._sports_count
        };
        MyGames.prototype.check = function(dataIndex) {
            var dataHolder, eventItem, leagueId;
            if (!this._loaded) {
                this.load()
            }
            if (this._container[dataIndex] != null) {
                return true
            }
            dataHolder = this._dic.get('dataEventHolderProxy').findEventHolderByEventId(dataIndex);
            if (dataHolder === false) {
                return false
            }
            eventItem = dataHolder.getEvent(dataIndex);
            leagueId = eventItem.getLeagueId();
            if ((this._noDuelTournaments[leagueId] != null) && this._noDuelTournaments[leagueId].m_day === 0) {
                return true
            }
            return false
        };
        MyGames.prototype.remove = function(dataIndex) {
            var redrawLivescore;
            redrawLivescore = this._reloadStorageIfSyncNeeded();
            if (!this._loaded) {
                this.load()
            }
            if (this._container[dataIndex] != null) {
                delete this._container[dataIndex];
                this._count--;
                this.store(true)
            }
            if (redrawLivescore) {
                this._redrawLivescore()
            }
            return false
        };
        MyGames.prototype.toggle = function(dataIndex) {
            var ret;
            if (!this._loaded) {
                this.load()
            }
            if (this._container[dataIndex] != null) {
                ret = this.remove(dataIndex)
            } else {
                ret = this.add(dataIndex)
            }
            push_update_subscription();
            return ret
        };
        MyGames.prototype._remoteSync = function(myGamesData, noduelLablData) {
            return this._syncWithLsId(myGamesData, noduelLablData)
        };
        MyGames.prototype.load = function(update, disableLsidSync) {
            var _labl, _noDuelTournaments, addedPlayers, changed, count, countAdded, dataHandler, dataHolder, error, error1, error2, fsData, fsDataIndex, hasMygames, labIndex, labelData, labelId, labelIndex, labl, lablCount, lablCountAdded, lablData, lablId, lablStr, lastMatchDay, matchDay, maxAddedPlayers, myGame, myGames, myGamesStr, noDuelTournaments, noduelTournamentsStr, that, updateNoduelTournamentMatches;
            if (disableLsidSync == null) {
                disableLsidSync = false
            }
            this._loaded = true;
            myGamesStr = this._storage.get(this._name);
            lablStr = this._storage.get(this._name + "_labl");
            noduelTournamentsStr = this._storage.get(this._name + "_noduel");
            this._container = {};
            this._labl = {};
            this._noDuelTournaments = {};
            this._count = 0;
            lablCount = 0;
            lablCountAdded = 0;
            count = 0;
            changed = false;
            that = this;
            try {
                myGames = myGamesStr ? this._jQuery.parseJSON(myGamesStr) : {}
            } catch (error1) {
                error = error1;
                return
            }
            noDuelTournaments = {};
            if (noduelTournamentsStr !== null) {
                try {
                    noDuelTournaments = this._jQuery.parseJSON(noduelTournamentsStr)
                } catch (undefined) {}
            }
            if (!noDuelTournaments) {
                noDuelTournaments = {}
            }
            if (!disableLsidSync) {
                this._remoteSync(myGames, noDuelTournaments)
            }
            for (fsDataIndex in myGames) {
                fsData = myGames[fsDataIndex];
                if (fsData.labl_id) {
                    fsData.labl_id = this._cleanLabelId(fsData.labl_id)
                }
            }
            _noDuelTournaments = {};
            for (lablId in noDuelTournaments) {
                lablData = noDuelTournaments[lablId];
                _noDuelTournaments[this._cleanLabelId(lablId)] = lablData
            }
            noDuelTournaments = _noDuelTournaments;
            updateNoduelTournamentMatches = false;
            for (labelIndex in noDuelTournaments) {
                labelData = noDuelTournaments[labelIndex];
                count++;
                if (!this.canBeAdded(labelData.AD, labelData.AP)) {
                    changed = true;
                    continue
                }
                this._count++;
                matchDay = this._getMatchDay(this._getMatchDayFunc(labelData.AD, labelData.AP));
                lastMatchDay = labelData.m_day;
                if (matchDay !== lastMatchDay) {
                    labelData.m_day = matchDay;
                    if (matchDay === 0 || (lastMatchDay > 0 && matchDay < 0)) {
                        labelData.m_ok = 0
                    } else {
                        labelData.m_ok = 1
                    }
                    changed = true
                }
                if (labelData.m_ok === 1) {
                    if (!this._leagueHasMatches(labelIndex, myGames)) {
                        labelData.m_ok = 0
                    }
                    if (labelData.m_ok === 0) {
                        changed = true
                    }
                }
                if (matchDay !== 0 && labelData.m_ok === 0) {
                    updateNoduelTournamentMatches = true
                }
                this._noDuelTournaments[labelIndex] = this._jQuery.extend(true, {}, labelData)
            }
            hasMygames = false;
            for (myGame in myGames) {
                hasMygames = true;
                break
            }
            if (!(hasMygames || changed || updateNoduelTournamentMatches)) {
                return
            }
            labl = {};
            if (lablStr !== null) {
                try {
                    labl = this._jQuery.parseJSON(lablStr);
                    for (labIndex in labl) {
                        lablCount++
                    }
                } catch (error2) {
                    error = error2;
                    labl = {}
                }
            }
            _labl = {};
            for (lablId in labl) {
                lablData = labl[lablId];
                _labl[this._cleanLabelId(lablId)] = lablData
            }
            labl = _labl;
            if (update && this.canBeAddedByDay([this._dayGetter()])) {
                update = true
            } else {
                update = false
            }
            dataHolder = this._dic.get('dataEventHolderProxy').getHolder();
            this._jQuery.each(myGames, (function(that) {
                return function(hash, myGameData) {
                    var added, eventItem, eventUpdatedStartTime, mDay;
                    if (that._noDuelTournaments[myGameData.labl_id] == null) {
                        count++
                    }
                    if (hash.substr(0, 2) !== 'g_') {
                        return
                    }
                    if (!myGameData.AD) {
                        return
                    }
                    if (!myGameData.AP) {
                        myGameData.AP = null
                    }
                    eventUpdatedStartTime = that._eventsUpdatedStartTimeGetter()[hash];
                    if ((eventUpdatedStartTime != null) && (eventUpdatedStartTime.start_time !== myGameData.AD || eventUpdatedStartTime.end_time !== myGameData.AP)) {
                        myGameData = {
                            sport_id: myGameData.sport_id,
                            labl_id: myGameData.labl_id,
                            m_day: that._getMatchDay(that._getMatchDayFunc(eventUpdatedStartTime.start_time, eventUpdatedStartTime.end_time)),
                            m_ok: 0,
                            m_expire_date: that._getExpireDate(),
                            AD: eventUpdatedStartTime.start_time,
                            AP: eventUpdatedStartTime.end_time,
                            noDuel: myGameData.noDuel,
                            mgGroup: myGameData.mgGroup
                        };
                        changed = true
                    }
                    if (!that.canBeAdded(myGameData.AD, myGameData.AP)) {
                        return
                    }
                    matchDay = that._getMatchDay(that._getMatchDayFunc(myGameData.AD, myGameData.AP));
                    if ((that._noDuelTournaments[myGameData.labl_id] != null) && that._noDuelTournaments[myGameData.labl_id].m_ok === 0) {
                        return
                    }
                    if (matchDay > 0) {
                        if (matchDay !== myGameData.m_day) {
                            myGameData.m_day = matchDay;
                            changed = true
                        }
                    } else if (matchDay === 0 && myGameData.m_day > 0) {
                        myGameData = {
                            sport_id: myGameData.sport_id,
                            labl_id: myGameData.labl_id,
                            m_day: 0,
                            m_ok: 0,
                            m_expire_date: myGameData.m_expire_date,
                            AD: myGameData.AD,
                            AP: myGameData.AP,
                            noDuel: myGameData.noDuel,
                            mgGroup: myGameData.mgGroup
                        };
                        changed = true
                    } else if (matchDay < 0 && myGameData.m_day >= 0) {
                        myGameData.m_day = matchDay;
                        myGameData.m_ok = 0;
                        changed = true
                    } else if (matchDay < 0 && matchDay !== myGameData.m_day) {
                        myGameData.m_day = matchDay;
                        changed = true
                    }
                    added = that._addLabel(myGameData.labl_id, labl);
                    if (myGameData.m_ok) {
                        if (added === 1) {
                            lablCountAdded++
                        }
                        if (added === -1) {
                            myGameData.m_ok = 0;
                            changed = true
                        }
                    }
                    that._container[hash] = that._jQuery.extend(true, {}, myGameData);
                    if (that._noDuelTournaments[myGameData.labl_id] == null) {
                        that._count++
                    }
                    if (!update) {
                        return
                    }
                    if (!dataHolder.hasEvent(hash)) {
                        return
                    }
                    eventItem = dataHolder.getEvent(hash);
                    mDay = that._getMatchDay(that._getMatchDayFunc(eventItem.getStartUTime(), eventItem.getEndUTime()));
                    if (mDay === 0) {
                        that._container[hash] = {
                            sport_id: eventItem.getSportId(),
                            labl_id: eventItem.getLeagueId(),
                            m_day: 0,
                            m_ok: 0,
                            m_expire_date: myGameData.m_expire_date,
                            AD: eventItem.getStartUTime(),
                            AP: eventItem.getEndUTime(),
                            noDuel: myGameData.noDuel,
                            mgGroup: myGameData.mgGroup
                        };
                        changed = true
                    } else {
                        that._container[hash] = eventItem.getData(true);
                        that._container[hash].m_day = mDay;
                        that._container[hash].m_ok = that._isOk(that._container[hash].m_day, that._container[hash].AB);
                        that._container[hash].m_expire_date = myGameData.m_expire_date;
                        that._container[hash].noDuel = myGameData.noDuel;
                        that._container[hash].mgGroup = myGameData.mgGroup;
                        added = that._addLabel(that._container[hash].labl_id);
                        changed = true
                    }
                    if (that._expired[hash] != null) {
                        that._container[hash].m_expire_date = that._getExpireDate();
                        delete that._expired[hash]
                    }
                }
            })(this));
            if (updateNoduelTournamentMatches) {
                addedPlayers = {};
                maxAddedPlayers = cjs.Util.Config.get('app', 'noduel_events', 'mygames');
                dataHandler = this._dic.get('dataEventHolderProxy').getHandler();
                dataHandler.each((function(that) {
                    return function(index, id) {
                        var added, eventItem, labelId, leagueItem;
                        eventItem = this.getItem(id);
                        leagueItem = eventItem.getLeague();
                        labelId = leagueItem.getId();
                        if ((that._noDuelTournaments[labelId] == null) || that._noDuelTournaments[labelId].m_day === 0 || that._noDuelTournaments[labelId].m_ok === 1) {
                            return
                        }
                        if (addedPlayers[labelId] == null) {
                            addedPlayers[labelId] = 0
                        }
                        addedPlayers[labelId]++;
                        if (addedPlayers[labelId] === 1) {
                            that._noDuelTournaments[labelId].AD = eventItem.getStartUTime();
                            that._noDuelTournaments[labelId].AP = eventItem.getEndUTime();
                            that._noDuelTournaments[labelId].m_expire_date = that._getExpireDate()
                        }
                        if (addedPlayers[labelId] > maxAddedPlayers) {
                            return
                        }
                        that._container[id] = eventItem.getData(true);
                        that._container[id].m_ok = 1;
                        that._container[id].noDuel = true;
                        that._container[id].m_day = that._getMatchDay(that._getMatchDayFunc(eventItem.getStartUTime(), eventItem.getEndUTime()));
                        that._container[id].m_expire_date = that._getExpireDate();
                        added = that._addLabel(labelId);
                        return changed = true
                    }
                })(this));
                for (labelId in addedPlayers) {
                    countAdded = addedPlayers[labelId];
                    if (countAdded) {
                        this._noDuelTournaments[labelId].m_ok = 1
                    }
                }
            }
            if (!update && lablCountAdded !== lablCount) {
                changed = true
            }
            if (this._count) {
                this._changeCallback()
            }
            if (this._count !== count || changed) {
                return this.store()
            }
        };
        MyGames.prototype.getData = function() {
            var _ret;
            if (!this._loaded) {
                this.load()
            }
            _ret = {};
            this._jQuery.each(this._container, (function(that) {
                return function(hash, myGameData) {
                    if (myGameData.m_ok !== 1) {
                        return
                    }
                    _ret[hash] = that._jQuery.extend(true, {}, myGameData)
                }
            })(this));
            return _ret
        };
        MyGames.prototype.getLabels = function() {
            if (!this._loaded) {
                this.load()
            }
            return this._labl
        };
        MyGames.prototype.getNeededFeeds = function(today) {
            var _keys, _ret, neededFeeds;
            if (!this._loaded) {
                this.load()
            }
            _ret = [];
            _keys = [];
            neededFeeds = (function(that) {
                return function(dataContainer) {
                    that._jQuery.each(dataContainer, (function(that) {
                        return function(hash, myGameData) {
                            var key, ref, sportId, valid;
                            valid = true;
                            if (!(myGameData.m_ok === 0 || !(valid = that._isMyGameDataValid(myGameData)))) {
                                return
                            }
                            if (!valid) {
                                that._expired[hash] = true
                            }
                            if (today === 1) {
                                if (myGameData.m_day !== 0) {
                                    return
                                }
                            } else {
                                if (myGameData.m_day === 0) {
                                    return
                                }
                            }
                            sportId = (ref = that._dic.get('util_sport').getParentSport(myGameData.sport_id)) != null ? ref : myGameData.sport_id;
                            key = sportId + '|' + myGameData.m_day;
                            if (that._jQuery.inArray(key, _keys) !== -1) {
                                return
                            }
                            _ret.push({
                                sport_id: sportId,
                                day: myGameData.m_day
                            });
                            _keys.push(key)
                        }
                    })(that));
                    return true
                }
            })(this);
            neededFeeds(this._container);
            neededFeeds(this._noDuelTournaments);
            return _ret
        };
        MyGames.prototype.store = function(updateStorageTimestamp) {
            var fsDataToStore, fsLablNoduelTournamentsToStore, fsLablToStore, ref;
            if (updateStorageTimestamp == null) {
                updateStorageTimestamp = false
            }
            this._sports = null;
            this._sports_count = null;
            if ((ref = this._lsid) != null ? ref.loggedIn() : void 0) {
                this.remoteStore()
            }
            fsDataToStore = JSON.stringify(this._container);
            this._removeUnusedLabels();
            fsLablToStore = JSON.stringify(this._labl);
            fsLablNoduelTournamentsToStore = JSON.stringify(this._noDuelTournaments);
            if (this._storage.get(this._name) === fsDataToStore && this._storage.get(this._name + "_labl") === fsLablToStore && this._storage.get(this._name + "_noduel") === fsLablNoduelTournamentsToStore) {
                return
            }
            this._storage.store(this._name, fsDataToStore, 2 * 86400, 'self', this._path);
            this._storage.store(this._name + "_labl", fsLablToStore, 2 * 86400, 'self', this._path);
            this._storage.store(this._name + "_noduel", fsLablNoduelTournamentsToStore, 2 * 86400, 'self', this._path);
            if (updateStorageTimestamp) {
                this._setStorageTimestamp()
            }
            return this._changeCallback()
        };
        MyGames.prototype.addGamesToGroup = function(fsDataIdArr, groupKey, disableStore) {
            var count, fsDataId, groups, j, len;
            if (disableStore == null) {
                disableStore = false
            }
            groupKey = groupKey.toString();
            count = 0;
            for (j = 0, len = fsDataIdArr.length; j < len; j++) {
                fsDataId = fsDataIdArr[j];
                if (this._container[fsDataId] == null) {
                    continue
                }
                if (this.isGameFromTournament(fsDataId)) {
                    continue
                }
                if ((this._container[fsDataId].mgGroup == null) || this._container[fsDataId].mgGroup === '') {
                    this._container[fsDataId].mgGroup = 0
                }
                groups = this._container[fsDataId].mgGroup.toString().split(',');
                if (this._jQuery.inArray(groupKey, groups) === -1) {
                    groups.push(groupKey);
                    this._container[fsDataId].mgGroup = groups.join(',')
                }
                count++
            }
            if (count && !disableStore) {
                this.store(true)
            }
        };
        MyGames.prototype.removeGamesFromGroup = function(fsDataIdArr, groupKey) {
            var count, fsDataId, groups, j, len, pos;
            groupKey = groupKey.toString();
            count = 0;
            for (j = 0, len = fsDataIdArr.length; j < len; j++) {
                fsDataId = fsDataIdArr[j];
                if (this._container[fsDataId] == null) {
                    continue
                }
                if (this.isGameFromTournament(fsDataId)) {
                    continue
                }
                if ((this._container[fsDataId].mgGroup != null) && this._container[fsDataId].mgGroup !== '') {
                    groups = this._container[fsDataId].mgGroup.toString().split(',');
                    pos = this._jQuery.inArray(groupKey, groups);
                    if (pos !== -1) {
                        groups.splice(pos, 1);
                        this._container[fsDataId].mgGroup = groups.join(',')
                    }
                }
                count++
            }
            if (count) {
                this.store(true)
            }
        };
        MyGames.prototype.removeLabelFromGroup = function(leagueId, groupKey) {
            var groups, pos;
            groupKey = groupKey.toString();
            if (this._noDuelTournaments[leagueId] == null) {
                return
            }
            if ((this._noDuelTournaments[leagueId].mgGroup != null) && this._noDuelTournaments[leagueId].mgGroup !== '') {
                groups = this._noDuelTournaments[leagueId].mgGroup.toString().split(',');
                pos = this._jQuery.inArray(groupKey, groups);
                if (pos !== -1) {
                    groups.splice(pos, 1);
                    this._noDuelTournaments[leagueId].mgGroup = groups.join(',');
                    return this.store(true)
                }
            }
        };
        MyGames.prototype.getGameGroup = function(fsDataId) {
            var eventItem, ref;
            if (this.isGameFromTournament(fsDataId)) {
                eventItem = this._dic.get('dataEventHolderProxy').getHolder().getEvent(fsDataId);
                return this.getLabelGroup(eventItem.getLeagueId())
            }
            if (!((ref = this._container[fsDataId]) != null ? ref.mgGroup : void 0)) {
                return 0
            }
            return this._container[fsDataId].mgGroup
        };
        MyGames.prototype.getGamesGroups = function(fsDataIdArr) {
            var eventItem, fsDataId, group, groups, j, k, leagueId, len, len1, ref, ret;
            ret = {};
            for (j = 0, len = fsDataIdArr.length; j < len; j++) {
                fsDataId = fsDataIdArr[j];
                if (this.isGameFromTournament(fsDataId)) {
                    eventItem = this._dic.get('dataEventHolderProxy').getHolder().getEvent(fsDataId);
                    leagueId = eventItem.getLeagueId();
                    groups = (this._noDuelTournaments[leagueId].mgGroup != null) && this._noDuelTournaments[leagueId].mgGroup !== '' ? this._noDuelTournaments[leagueId].mgGroup : 0
                } else {
                    if (this._container[fsDataId] == null) {
                        continue
                    }
                    groups = (this._container[fsDataId].mgGroup != null) && this._container[fsDataId].mgGroup !== '' ? this._container[fsDataId].mgGroup : 0
                }
                groups = groups.toString().split(',');
                for (k = 0, len1 = groups.length; k < len1; k++) {
                    group = groups[k];
                    if (ret[group] == null) {
                        ret[group] = []
                    }
                    ret[group].push(fsDataId)
                }
            }
            return ret;
            if (this.isGameFromTournament(fsDataId)) {
                eventItem = this._dic.get('dataEventHolderProxy').getHolder().getEvent(fsDataId);
                return this.getLabelGroup(eventItem.getLeagueId())
            }
            if (!((ref = this._container[fsDataId]) != null ? ref.mgGroup : void 0)) {
                return 0
            }
            return this._container[fsDataId].mgGroup * 1
        };
        MyGames.prototype.getLabelGroup = function(fsLablId) {
            var ref;
            if (!((ref = this._noDuelTournaments[fsLablId]) != null ? ref.mgGroup : void 0)) {
                return 0
            }
            return this._noDuelTournaments[fsLablId].mgGroup * 1
        };
        MyGames.prototype.getLabelGroups = function(fsLablId) {
            var group, j, len, ref, ref1, ret;
            if (this._noDuelTournaments[fsLablId] == null) {
                return {}
            }
            if (!((ref = this._noDuelTournaments[fsLablId]) != null ? ref.mgGroup : void 0)) {
                return {
                    0: [fsLablId]
                }
            }
            ret = {};
            ref1 = this._noDuelTournaments[fsLablId].mgGroup.toString().split(',');
            for (j = 0, len = ref1.length; j < len; j++) {
                group = ref1[j];
                ret[group] = [fsLablId]
            }
            return ret
        };
        MyGames.prototype.addLabelToGroup = function(fsLablId, groupKey, disableStore) {
            var groups;
            if (disableStore == null) {
                disableStore = false
            }
            groupKey = groupKey.toString();
            if (!this.isAddedWholeTournament(fsLablId)) {
                return
            }
            groups = (this._noDuelTournaments[fsLablId].mgGroup != null) && this._noDuelTournaments[fsLablId].mgGroup !== '' ? this._noDuelTournaments[fsLablId].mgGroup : 0;
            groups = groups.toString().split(',');
            if (this._jQuery.inArray(groupKey, groups) === -1) {
                groups.push(groupKey);
                this._noDuelTournaments[fsLablId].mgGroup = groups.join(',')
            }
            if (!disableStore) {
                return this.store(true)
            }
        };
        MyGames.prototype._setStorageTimestamp = function() {
            if (this._isSyncBetweenTabsAllowed()) {
                this._lastStorageUpdated = (new Date()).getTime();
                return this._storage.store(this._name + "_ts", this._lastStorageUpdated, 2 * 86400, 'self', this._path)
            } else {
                return this._lastStorageUpdated = 0
            }
        };
        MyGames.prototype._getStorageTimestamp = function() {
            if (!this._isSyncBetweenTabsAllowed()) {
                return 0
            }
            return parseInt(this._storage.get(this._name + "_ts")) || 0
        };
        MyGames.prototype.remoteStore = function() {
            return this._remoteStore()
        };
        MyGames.prototype.drop = function() {
            this._container = {};
            this._labl = {};
            this._noDuelTournaments = {};
            return this.store()
        };
        MyGames.prototype._getMatchDay = function(matchDay) {
            if (!(matchDay != null ? matchDay.length : void 0)) {
                return -9999
            }
            if (this._jQuery.inArray(0, matchDay) !== -1) {
                return 0
            }
            if (matchDay.length === 1 || matchDay[0] > 0) {
                return matchDay[0]
            }
            return matchDay[matchDay.length - 1]
        };
        MyGames.prototype._addLabel = function(labelIndex, labelData) {
            var leagueHolder;
            if (labelData) {
                if (!labelData.hasOwnProperty(labelIndex)) {
                    return -1
                }
                if (this._labl.hasOwnProperty(labelIndex)) {
                    return 0
                }
                this._labl[labelIndex] = this._jQuery.extend(true, {}, labelData[labelIndex]);
                return 1
            } else {
                leagueHolder = this._dic.get('dataLeagueHolderProxy').getHolder();
                if (!leagueHolder.hasLeague(labelIndex)) {
                    return -1
                }
                if (this._labl.hasOwnProperty(labelIndex)) {
                    return 0
                }
                this._labl[labelIndex] = leagueHolder.getLeague(labelIndex).getData(true);
                return 1
            }
        };
        MyGames.prototype._isSyncBetweenTabsAllowed = function() {
            var ref;
            if ((ref = this._lsid) != null ? ref.loggedIn() : void 0) {
                return false
            }
            return cjs.clientStorage.isDriverAvailable(this._dic.getClass('ClientStorage_Driver_LocalStorage').prototype.DRIVER_NAME) || cjs.clientStorage.isDriverAvailable(this._dic.getClass('ClientStorage_Driver_LocalCookie').prototype.DRIVER_NAME)
        };
        MyGames.prototype._reloadStorageIfSyncNeeded = function() {
            var ref, storageTimestamp;
            if (!this._isSyncBetweenTabsAllowed()) {
                return false
            }
            storageTimestamp = this._getStorageTimestamp();
            if (this._lastStorageUpdated === storageTimestamp) {
                return false
            }
            this._lastStorageUpdated = storageTimestamp;
            this.load(false, true);
            if ((ref = this._lsid) != null ? ref.loggedIn() : void 0) {
                this.remoteStore()
            }
            return true
        };
        MyGames.prototype._startStorageSyncTimer = function(timeout) {
            if (timeout == null) {
                timeout = 500
            }
            if (!this._isSyncBetweenTabsAllowed()) {
                return
            }
            if (this._syncTimeoutId) {
                clearTimeout(this._syncTimeoutId)
            }
            return this._syncTimeoutId = setTimeout((function(_this) {
                return function(timeout) {
                    return function() {
                        if (_this._reloadStorageIfSyncNeeded()) {
                            _this._redrawLivescore()
                        }
                        return _this._startStorageSyncTimer(timeout)
                    }
                }
            })(this)(timeout), timeout)
        };
        MyGames.prototype._redrawLivescore = function() {
            this._runLocalStorageSyncCB();
            sort_fs_data();
            pgenerate(true, category, false, null, this._dic.get('util_enviroment').getSubCategory());
            if (tournamentSubPage) {
                showTournamentPage('results');
                return showTournamentPage('fixtures')
            } else if (tournament) {
                showTournamentPage('summary-results');
                return showTournamentPage('summary-fixtures')
            }
        };
        MyGames.prototype._runLocalStorageSyncCB = function() {
            return typeof this._localStorageSyncCb === "function" ? this._localStorageSyncCb() : void 0
        };
        MyGames.prototype.registerLocalStorageSyncCB = function(_localStorageSyncCb) {
            this._localStorageSyncCb = _localStorageSyncCb
        };
        MyGames.prototype._removeUnusedLabels = function() {
            var gameData, gameId, labelData, labelId, ref, ref1, results, usedLabels;
            usedLabels = {};
            ref = this._container;
            for (gameId in ref) {
                gameData = ref[gameId];
                if (gameData.labl_id != null) {
                    usedLabels[gameData.labl_id] = 1
                }
            }
            ref1 = this._noDuelTournaments;
            for (labelId in ref1) {
                labelData = ref1[labelId];
                usedLabels[labelId] = 1
            }
            results = [];
            for (labelId in this._labl) {
                if (usedLabels[labelId] == null) {
                    results.push(delete this._labl[labelId])
                } else {
                    results.push(void 0)
                }
            }
            return results
        };
        MyGames.prototype._syncWithLsId = function(myGamesData, noduelLablData) {
            var data, gameIndex, lablData, lablIndex, lsidMygamesData, lsidNoduelLablData, lsiddata, myGameData, ref, ref1, results;
            if (!((ref = this._lsid) != null ? ref.loggedIn() : void 0)) {
                return
            }
            lsidMygamesData = this._lsid.getData(this.LSID_DATA_KEY);
            lsiddata = (ref1 = lsidMygamesData != null ? lsidMygamesData.data : void 0) != null ? ref1 : {};
            lsidNoduelLablData = (lsidMygamesData != null ? lsidMygamesData.noduel : void 0) != null ? lsidMygamesData.noduel : {};
            for (lablIndex in noduelLablData) {
                data = noduelLablData[lablIndex];
                if (!lsidNoduelLablData.hasOwnProperty(lablIndex)) {
                    delete noduelLablData[lablIndex]
                }
            }
            for (lablIndex in lsidNoduelLablData) {
                data = lsidNoduelLablData[lablIndex];
                if (!noduelLablData.hasOwnProperty(lablIndex)) {
                    lablData = {
                        sport_id: parseInt(lablIndex.replace(/([0-9]+)_[a-zA-Z0-9]{8}/, '$1')),
                        m_day: this._getMatchDay(this._getMatchDayFunc(data.AD, data.AP)),
                        AD: data.AD,
                        m_ok: 0
                    };
                    if (data.AP) {
                        lablData.AP = data.AP
                    }
                    noduelLablData[lablIndex] = lablData
                }
                noduelLablData[lablIndex].mgGroup = data.MG
            }
            for (gameIndex in myGamesData) {
                data = myGamesData[gameIndex];
                if (!lsiddata.hasOwnProperty(gameIndex)) {
                    delete myGamesData[gameIndex]
                }
            }
            results = [];
            for (gameIndex in lsiddata) {
                data = lsiddata[gameIndex];
                if (!myGamesData.hasOwnProperty(gameIndex)) {
                    myGameData = {
                        sport_id: parseInt(gameIndex.replace(/g_([0-9]+)_[a-zA-Z0-9]{8}/, '$1')),
                        m_day: 0,
                        m_ok: 0,
                        AD: data.AD,
                        AP: null
                    };
                    if (data.AP) {
                        myGameData.AP = data.AP
                    }
                    if (data.labl_id) {
                        myGameData.labl_id = data.labl_id
                    }
                    if (data.LA) {
                        myGameData.labl_id = data.LA
                    }
                    myGameData.noDuel = data.LA != null;
                    myGameData.mgGroup = data.MG;
                    results.push(myGamesData[gameIndex] = myGameData)
                } else {
                    results.push(myGamesData[gameIndex].mgGroup = data.MG)
                }
            }
            return results
        };
        MyGames.prototype._remoteStoreChanges = function(getCountOnly) {
            var count, data, dataToStore, gameIndex, labelIndex, localGroup, lsidMygames, lsidMygamesData, lsidNoduelLablData, ref, ref1, ref2, remoteGroup;
            if (getCountOnly == null) {
                getCountOnly = false
            }
            count = 0;
            lsidMygames = this._lsid.getData(this.LSID_DATA_KEY);
            lsidMygamesData = (ref = lsidMygames != null ? lsidMygames.data : void 0) != null ? ref : {};
            lsidNoduelLablData = (lsidMygames != null ? lsidMygames.noduel : void 0) != null ? lsidMygames.noduel : {};
            ref1 = this._noDuelTournaments;
            for (labelIndex in ref1) {
                data = ref1[labelIndex];
                if (lsidNoduelLablData.hasOwnProperty(labelIndex)) {
                    remoteGroup = lsidNoduelLablData[labelIndex].MG || 0;
                    localGroup = data.mgGroup || 0;
                    if (remoteGroup === localGroup) {
                        continue
                    }
                }
                count++;
                if (!getCountOnly) {
                    dataToStore = {
                        AD: data.AD
                    };
                    if (data.AP) {
                        dataToStore.AP = data.AP
                    }
                    if (data.mgGroup) {
                        dataToStore.MG = data.mgGroup
                    }
                    this._lsid.storeData(dataToStore, this.LSID_DATA_KEY + '.noduel.' + labelIndex)
                }
            }
            for (labelIndex in lsidNoduelLablData) {
                data = lsidNoduelLablData[labelIndex];
                if (!this._noDuelTournaments.hasOwnProperty(labelIndex)) {
                    count++;
                    if (!getCountOnly) {
                        this._lsid.removeData(this.LSID_DATA_KEY + '.noduel.' + labelIndex)
                    }
                }
            }
            ref2 = this._container;
            for (gameIndex in ref2) {
                data = ref2[gameIndex];
                if (lsidMygamesData.hasOwnProperty(gameIndex)) {
                    remoteGroup = lsidMygamesData[gameIndex].MG || 0;
                    localGroup = data.mgGroup || 0;
                    if (remoteGroup === localGroup) {
                        continue
                    }
                }
                count++;
                if (!getCountOnly) {
                    dataToStore = {
                        AD: data.AD
                    };
                    if (data.noDuel || (this._noDuelTournaments[data.labl_id] != null)) {
                        dataToStore.LA = data.labl_id
                    }
                    if (data.mgGroup != null) {
                        dataToStore.MG = data.mgGroup
                    }
                    if (data.AP) {
                        dataToStore.AP = data.AP
                    }
                    this._lsid.storeData(dataToStore, this.LSID_DATA_KEY + '.data.' + gameIndex)
                }
            }
            for (gameIndex in lsidMygamesData) {
                data = lsidMygamesData[gameIndex];
                if (!this._container.hasOwnProperty(gameIndex)) {
                    count++;
                    if (!getCountOnly) {
                        this._lsid.removeData(this.LSID_DATA_KEY + '.data.' + gameIndex)
                    }
                }
            }
            if (getCountOnly) {
                return count
            }
            return count
        };
        MyGames.prototype._remoteStore = function() {
            var changes, data, dataToStore, gameIndex, labelIndex, ref, ref1;
            changes = this._remoteStoreChanges(true);
            if (changes === 0) {
                return
            }
            if (changes > 1) {
                dataToStore = {};
                ref = this._container;
                for (gameIndex in ref) {
                    data = ref[gameIndex];
                    if (!dataToStore.data) {
                        dataToStore.data = {}
                    }
                    dataToStore.data[gameIndex] = {
                        AD: data.AD
                    };
                    if (data.noDuel || (this._noDuelTournaments[data.labl_id] != null)) {
                        dataToStore.data[gameIndex].LA = data.labl_id
                    }
                    if (data.AP) {
                        dataToStore.data[gameIndex].AP = data.AP
                    }
                    if (data.mgGroup != null) {
                        dataToStore.data[gameIndex].MG = data.mgGroup
                    }
                }
                ref1 = this._noDuelTournaments;
                for (labelIndex in ref1) {
                    data = ref1[labelIndex];
                    if (!dataToStore.noduel) {
                        dataToStore.noduel = {}
                    }
                    dataToStore.noduel[labelIndex] = {
                        AD: data.AD
                    };
                    if (data.AP) {
                        dataToStore.noduel[labelIndex].AP = data.AP
                    }
                    if (data.mgGroup != null) {
                        dataToStore.noduel[labelIndex].MG = data.mgGroup
                    }
                }
                if (dataToStore.noduel || dataToStore.data) {
                    return this._lsid.storeMergedData(dataToStore, this.LSID_DATA_KEY)
                } else {
                    return this._lsid.removeData(this.LSID_DATA_KEY)
                }
            } else {
                return this._remoteStoreChanges()
            }
        };
        MyGames.prototype._saveStats = function(labelId, eventId) {
            var dataToSend, leagueHolder, leagueItem;
            if (!(this._cfg.fs_stats_enable === true && this._cfg.fs_stats_url_mygames)) {
                return
            }
            leagueHolder = this._dic.get('dataLeagueHolderProxy').getHolder();
            if (!leagueHolder.hasLeague(labelId)) {
                return
            }
            leagueItem = leagueHolder.getLeague(labelId);
            dataToSend = {
                sport_id: leagueItem.getSportId(),
                project_id: this._projectId,
                tournament_stage_id: leagueItem.getTournamentStageId()
            };
            if (eventId) {
                dataToSend.event_id = eventId
            }
            return this._jQuery.ajax({
                url: this._cfg.fs_stats_url_mygames,
                data: dataToSend,
                dataType: 'jsonp',
                jsonpCallback: 'jsonp_cb'
            })
        };
        MyGames.prototype._leagueHasMatches = function(labelId, myGamesData) {
            var fsDataIndex, myGameData;
            for (fsDataIndex in myGamesData) {
                myGameData = myGamesData[fsDataIndex];
                if (myGameData.labl_id === labelId) {
                    return true
                }
            }
            return false
        };
        MyGames.prototype._invalidateAllEvents = function() {
            var data, dataKey, fsDataIndex, j, len, newData, ref, ref1;
            newData = {};
            ref = this._container;
            for (fsDataIndex in ref) {
                data = ref[fsDataIndex];
                ref1 = ['AD', 'AP', 'labl_id', 'm_day', 'sport_id', 'm_expire_date'];
                for (j = 0, len = ref1.length; j < len; j++) {
                    dataKey = ref1[j];
                    if (newData[fsDataIndex] == null) {
                        newData[fsDataIndex] = {
                            m_ok: 0
                        }
                    }
                    newData[fsDataIndex][dataKey] = data[dataKey]
                }
            }
            this._container = newData;
            this._labl = {};
            return this.store(true)
        };
        MyGames.prototype._cleanLabelId = function(lablId) {
            return lablId.replace(/(.*)-.*/, '$1')
        };
        return MyGames
    })();
    if (typeof window !== "undefined" && window !== null) {
        if ((base = window.cjs).MyGames == null) {
            base.MyGames = MyGames
        }
    } else {
        if (exports.MyGames == null) {
            exports.MyGames = MyGames
        }
    }
}).call(this);
(function() {
    var MyGamesCheckboxes, ref;
    MyGamesCheckboxes = (function() {
        MyGamesCheckboxes.prototype.CLASS_CHECKED = 'tomyga';
        MyGamesCheckboxes.prototype.CLASS_UNCHECKED = 'tomyg';
        MyGamesCheckboxes.prototype.CLASS_CHECKED_INACTIVE = 'tomygai';

        function MyGamesCheckboxes(_mygamesObj, _util, _categoryGetter, _tournamentPageGetter, _participantPageGetter, _sudateGetter, _countryGetter, _projectTypeGetter, _isCustomGame, _jQuery, _dic, _myTeams, _sportIdGetter) {
            this._mygamesObj = _mygamesObj;
            this._util = _util != null ? _util : cjs.Util;
            this._categoryGetter = _categoryGetter != null ? _categoryGetter : function() {
                return category
            };
            this._tournamentPageGetter = _tournamentPageGetter != null ? _tournamentPageGetter : function() {
                return tournamentPage
            };
            this._participantPageGetter = _participantPageGetter != null ? _participantPageGetter : function() {
                return cjs.participantPage != null
            };
            this._sudateGetter = _sudateGetter != null ? _sudateGetter : function() {
                return sudate
            };
            this._countryGetter = _countryGetter != null ? _countryGetter : function() {
                return country
            };
            this._projectTypeGetter = _projectTypeGetter != null ? _projectTypeGetter : function() {
                return project_type_name
            };
            this._isCustomGame = _isCustomGame != null ? _isCustomGame : is_custom_game;
            this._jQuery = _jQuery != null ? _jQuery : $;
            this._dic = _dic != null ? _dic : cjs.dic;
            this._myTeams = _myTeams != null ? _myTeams : function() {
                return cjs.myTeams
            };
            this._sportIdGetter = _sportIdGetter != null ? _sportIdGetter : function() {
                return sport_id
            };
            this._iconsStatus = {};
            this.headerGames = {}
        }
        MyGamesCheckboxes.prototype.getIconsStatus = function() {
            return this._iconsStatus
        };
        MyGamesCheckboxes.prototype.getHeaderCheckboxHtml = function(fsLabelIndex) {
            var category, country, iconClass, leagueItem, positionClass, ret, sport, sudate;
            country = this._countryGetter();
            sudate = this._sudateGetter();
            sport = this._sportIdGetter();
            category = this._categoryGetter();
            ret = '';
            leagueItem = this._dic.get('dataLeagueHolderProxy').getHolder().getLeague(fsLabelIndex);
            if (this._projectTypeGetter() === '_ass' && !leagueItem.getValue('display')) {
                return ret
            }
            if (this._util.Config.get('app', 'mygames', 'enable') && ((((country && this._util.Sport.hasCategoryPage(sport)) || this._dic.get('page').isSeasonPage()) && this._mygamesObj.canBeAllMygamesButtonAdded(fsLabelIndex, this.getHeaderGames(fsLabelIndex))) || (!this._dic.get('page').isSeasonPage() && !this._dic.get('page').isCountryPage() && this._mygamesObj.canBeAddedByDay([sudate])))) {
                if (category * 1 === 5) {
                    iconClass = cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED
                } else if (this._leagueHasAnyCustomGames(fsLabelIndex)) {
                    iconClass = cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED
                } else {
                    iconClass = cjs.MyGamesCheckboxes.prototype.CLASS_UNCHECKED
                }
                positionClass = this.getMygamesIconPosition();
                ret = "<div class=\"dicons\"><span class=\"icons " + positionClass + "\"><span id=\"latomyg_" + fsLabelIndex + "\" class=\"" + iconClass + "\"></span></span></div>"
            }
            return ret
        };
        MyGamesCheckboxes.prototype.getTeamHeaderCheckboxHtml = function(teamIndex) {
            var category, eventId, events, iconClass, j, len, positionClass, ret;
            category = this._categoryGetter();
            ret = '';
            if (this._projectTypeGetter() === '_ass') {
                return ret
            }
            events = this._myTeams().getParticipantEvents(teamIndex);
            if (events.length === 0) {
                iconClass = ''
            } else {
                iconClass = cjs.MyGamesCheckboxes.prototype.CLASS_UNCHECKED;
                for (j = 0, len = events.length; j < len; j++) {
                    eventId = events[j];
                    if (this._isCustomGame(eventId)) {
                        iconClass = cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED;
                        break
                    }
                }
            }
            positionClass = this.getMygamesIconPosition();
            ret = "<div class=\"dicons\"><span class=\"icons " + positionClass + "\"><span id=\"tatomyg_" + teamIndex + "\" class=\"" + iconClass + "\"></span></span></div>";
            return ret
        };
        MyGamesCheckboxes.prototype.getGameCheckboxHtml = function(fsDataIndex) {
            var country, iconClass, positionClass, sport, sudate;
            if (!this._util.Config.get('app', 'mygames', 'enable')) {
                return ""
            }
            country = this._countryGetter();
            sport = this._sportIdGetter();
            sudate = this._sudateGetter();
            if (this._mygamesObj.canBeGameAdded(fsDataIndex) && ((country && this._util.Sport.hasCategoryPage(sport)) || this._dic.get('page').isSeasonPage() || (!this._dic.get('page').isSeasonPage() && !this._dic.get('page').isCountryPage() && this._mygamesObj.canBeAddedByDay([sudate])))) {
                iconClass = this._mygamesObj.isGameFromTournament(fsDataIndex) ? cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED_INACTIVE : this._mygamesObj.check(fsDataIndex) ? cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED : cjs.MyGamesCheckboxes.prototype.CLASS_UNCHECKED;
                positionClass = this.getMygamesIconPosition();
                this._iconsStatus[fsDataIndex] = true;
                return "<span class=\"icons " + positionClass + "\"><span class=\"" + iconClass + " icon0\"></span></span>"
            }
            return ""
        };
        MyGamesCheckboxes.prototype.updateGameCheckboxState = function(fsDataIndex) {
            var selector;
            selector = "#" + fsDataIndex + " span." + cjs.MyGamesCheckboxes.prototype.CLASS_UNCHECKED + ", #" + fsDataIndex + " span." + cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED + ", #" + fsDataIndex + " span." + cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED_INACTIVE;
            return this._jQuery(selector).each((function(_this) {
                return function(i, el) {
                    var $el, checkboxClass;
                    $el = _this._jQuery(el);
                    checkboxClass = _this._mygamesObj.isGameFromTournament(fsDataIndex) ? cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED_INACTIVE : _this._mygamesObj.check(fsDataIndex) ? cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED : cjs.MyGamesCheckboxes.prototype.CLASS_UNCHECKED;
                    $el.toggleClass(cjs.MyGamesCheckboxes.prototype.CLASS_UNCHECKED, checkboxClass === cjs.MyGamesCheckboxes.prototype.CLASS_UNCHECKED);
                    $el.toggleClass(cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED, checkboxClass === cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED);
                    $el.toggleClass(cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED_INACTIVE, checkboxClass === cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED_INACTIVE);
                    if (_this.getMygamesIconPosition() === 'left') {
                        return $el.parent().parent().toggleClass('mygame', checkboxClass !== cjs.MyGamesCheckboxes.prototype.CLASS_UNCHECKED)
                    }
                }
            })(this))
        };
        MyGamesCheckboxes.prototype.setHeaderCheckboxState = function($checkboxElement, state) {
            if (!$checkboxElement) {
                return
            }
            $checkboxElement.toggleClass(cjs.MyGamesCheckboxes.prototype.CLASS_UNCHECKED, !state);
            return $checkboxElement.toggleClass(cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED, state)
        };
        MyGamesCheckboxes.prototype.getHeaderCheckboxHeaderJqElement = function(fsLabelId, contextElement) {
            return this._jQuery(contextElement).find('[id="latomyg_' + fsLabelId + '"]')
        };
        MyGamesCheckboxes.prototype.getCheckboxState = function($element) {
            return $element.hasClass(cjs.MyGamesCheckboxes.prototype.CLASS_CHECKED)
        };
        MyGamesCheckboxes.prototype.getMygamesIconPosition = function() {
            if (this._util.Config.get('app', 'mygames', 'position') === 'left') {
                return 'left'
            } else {
                return 'right'
            }
        };
        MyGamesCheckboxes.prototype._leagueHasAnyCustomGames = function(leagueId) {
            var ret;
            ret = false;
            this._dic.get('dataEventHolderProxy').getHandler().each((function(that) {
                return function(index, id) {
                    var leagueItem;
                    leagueItem = this.getItem(id).getLeague();
                    if (leagueItem.getId() === leagueId && that._isCustomGame(id)) {
                        ret = true;
                        return false
                    }
                }
            })(this));
            return ret
        };
        MyGamesCheckboxes.prototype.setHeaderGames = function(fsLabelIndex, games) {
            return this.headerGames[fsLabelIndex] = games
        };
        MyGamesCheckboxes.prototype.getHeaderGames = function(fsLabelIndex) {
            if (this.headerGames[fsLabelIndex] != null) {
                return this.headerGames[fsLabelIndex]
            } else {
                return null
            }
        };
        return MyGamesCheckboxes
    })();
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.MyGamesCheckboxes = MyGamesCheckboxes
    }
}).call(this);
(function() {
    var MyGamesGroups, ref, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    MyGamesGroups = (function() {
        MyGamesGroups.prototype.INFO_BOX_STORAGE_KEY = 'mg_infobox';
        MyGamesGroups.prototype.INFO_BOX_TTL = 90 * 24 * 60 * 60;

        function MyGamesGroups(_mygamesObj, _conf, _util, _categoryGetter, _clientStorage, _tooltipGetter, _jQuery) {
            this._mygamesObj = _mygamesObj;
            this._conf = _conf;
            this._util = _util != null ? _util : cjs.Util;
            this._categoryGetter = _categoryGetter != null ? _categoryGetter : function() {
                return category
            };
            this._clientStorage = _clientStorage != null ? _clientStorage : clientStorage;
            this._tooltipGetter = _tooltipGetter != null ? _tooltipGetter : function() {
                return tt
            };
            this._jQuery = _jQuery != null ? _jQuery : $;
            this._listHidden = true;
            this._labelIndexToGroupKeyMap = {};
            this._temporaryDisabled = false;
            this._lastUsedDropDownMenuJqElementData = null
        }
        MyGamesGroups.prototype.setTemporaryDisabled = function(value) {
            return this._temporaryDisabled = value
        };
        MyGamesGroups.prototype.getGameDropDownHtml = function(fsDataIndex, placeholder) {
            if (!this.showOnPage()) {
                return ''
            }
            if (this._mygamesObj.isGameFromTournament(fsDataIndex)) {
                return ''
            }
            return this._getDropDown('g:' + fsDataIndex, placeholder)
        };
        MyGamesGroups.prototype.getHeaderDropDownHtml = function(fsLabelIndex) {
            var groupKey;
            if (!this.showOnPage()) {
                return ''
            }
            if (this._mygamesObj.isAddedWholeTournament(fsLabelIndex)) {
                groupKey = this._mygamesObj.getLabelGroup(fsLabelIndex)
            } else {
                groupKey = this._labelIndexToGroupKeyMap[fsLabelIndex]
            }
            return this._getDropDown('l:' + fsLabelIndex, groupKey)
        };
        MyGamesGroups.prototype.reset = function() {
            this._listHidden = true;
            this.setTemporaryDisabled(false);
            return this._setLastUsedDropDownMenuElementData(null)
        };
        MyGamesGroups.prototype.registerEvents = function() {
            var $on, dropDownSelector;
            if (!this._util.Config.get('app', 'mygames', 'groups', 'enable')) {
                return
            }
            $on = this._jQuery("div#fs, div#fs-results, div#fs-summary-results, div#fs-fixtures, div#fs-summary-fixtures");
            dropDownSelector = 'div.mg_dropdown';
            $on.on("click", "table " + dropDownSelector, (function(that) {
                return function(event) {
                    var $table, $target, $targetParent, $this, elementData;
                    $this = that._jQuery(this);
                    that._showOrHideDropDownList($this);
                    $target = that._jQuery(event.target);
                    $targetParent = $target.closest('div');
                    elementData = null;
                    if (!($target.is('div.move') || $target.is('div.copy') || $targetParent.is('div.move') || $targetParent.is('div.copy'))) {
                        $table = $this.closest('table');
                        elementData = {
                            'dataContext': $this.attr('data-context'),
                            'elementSelector': dropDownSelector,
                            'dataGroup': $table.attr('data-group'),
                            'groupClass': $table.attr('class')
                        }
                    }
                    return that._setLastUsedDropDownMenuElementData(elementData)
                }
            })(this));
            $on.on("click", "table div.mg_dropdown ul li div", (function(that) {
                return function(event) {
                    return that._dropDownItemListCallback.call(that, that._jQuery(this))
                }
            })(this));
            return $on.on("mouseenter", "table div.mg_dropdown_wrapper", (function(that) {
                return function(event) {
                    return that._jQuery(this).attr("title", that._util.trans('TRANS_MY_GAMES_SELECT_GROUP'))
                }
            })(this))
        };
        MyGamesGroups.prototype.showOnPage = function() {
            return this._util.Config.get('app', 'mygames', 'groups', 'enable') && this._categoryGetter() === 5 && this._conf.mygamesGroups === true && !this._temporaryDisabled
        };
        MyGamesGroups.prototype.getGameGroup = function(fsDataIndex) {
            if (!this.showOnPage()) {
                return 0
            }
            return this._mygamesObj.getGameGroup(fsDataIndex)
        };
        MyGamesGroups.prototype.mapLabelToGroup = function(fsLabelIndex, groupId) {
            return this._labelIndexToGroupKeyMap[fsLabelIndex] = groupId
        };
        MyGamesGroups.prototype.getGroupInfoBox = function() {
            var infoBoxHtml;
            if (!(this._util.Config.get('app', 'mygames', 'groups', 'enable') && this._categoryGetter() === 5)) {
                return ''
            }
            if (this._conf.mygamesGroups === true) {
                return ''
            }
            if (this._clientStorage.get(MyGamesGroups.prototype.INFO_BOX_STORAGE_KEY) === "1") {
                return ''
            }
            infoBoxHtml = "<div class=\"mg_group_info_box\"> <div class=\"mg_group_info_box_content\"> " + (this._util.trans('TRANS_MY_GAMES_GROUP_INFO_PART1')) + "<br /> <a href=\"#\" onclick=\"cjs.livescoreSettings.show(); return false;\">" + (this._util.trans('TRANS_MY_GAMES_GROUP_INFO_PART2')) + "</a> </div> <a class=\"mg_group_info_close\" href=\"#\" onclick=\"cjs.mygamesGroups.closeInfoBox(); return false;\"></a> </div>";
            return infoBoxHtml
        };
        MyGamesGroups.prototype.closeInfoBox = function() {
            this._jQuery('div.mg_group_info_box').remove();
            return this._clientStorage.store(MyGamesGroups.prototype.INFO_BOX_STORAGE_KEY, "1", MyGamesGroups.prototype.INFO_BOX_TTL)
        };
        MyGamesGroups.prototype.getGroupValue = function(groupKey) {
            return this._keyToValue(groupKey)
        };
        MyGamesGroups.prototype.showLastUsedDropDownMenu = function() {
            if (this._listHidden) {
                return
            }
            return setTimeout((function(_this) {
                return function() {
                    var $element, ed, selector;
                    ed = _this._getLastUsedDropDownMenuElementData();
                    if (ed != null) {
                        selector = "table." + ed.groupClass + "[data-group='" + ed.dataGroup + "']";
                        selector += " " + ed.elementSelector + "[data-context='" + ed.dataContext + "']";
                        $element = _this._jQuery(selector);
                        if ($element.length) {
                            return _this._showOrHideDropDownList($element)
                        }
                    }
                }
            })(this), 0)
        };
        MyGamesGroups.prototype._dropDownItemListCallback = function($element) {
            var $contextElement, $currentValueElement, $elements, changed, contextId, contextType, gamesToChange, groupKey, groupValue, oldGroup, ref;
            $contextElement = $element.parent().parent().parent();
            ref = $contextElement.data('context').split(':'), contextType = ref[0], contextId = ref[1];
            groupKey = $element.parent().data('key');
            groupValue = this._keyToValue(groupKey);
            changed = false;
            $currentValueElement = $contextElement.find('.mg_dropdown_selected');
            oldGroup = this._valueToKey($currentValueElement.html());
            if ($currentValueElement.html() === (groupValue + "")) {
                return
            }
            if (contextType === 'g') {
                $currentValueElement.html(groupValue);
                if ($element.data('action') === 'move') {
                    this._mygamesObj.addGamesToGroup([contextId], groupKey, true);
                    this._mygamesObj.removeGamesFromGroup([contextId], oldGroup)
                } else {
                    this._mygamesObj.addGamesToGroup([contextId], groupKey)
                }
                changed = true
            }
            if (contextType === 'l') {
                $currentValueElement.html(groupValue);
                if (this._mygamesObj.isAddedWholeTournament(contextId)) {
                    if ($element.data('action') === 'move') {
                        this._mygamesObj.addLabelToGroup(contextId, groupKey, true);
                        this._mygamesObj.removeLabelFromGroup(contextId, oldGroup)
                    } else {
                        this._mygamesObj.addLabelToGroup(contextId, groupKey)
                    }
                } else {
                    $elements = $contextElement.closest('thead').next('tbody').find('tr .mg_dropdown');
                    $elements.find('.mg_dropdown_selected').html(groupValue);
                    gamesToChange = $elements.map(function(i, el) {
                        return $(el).data('context').split(':')[1]
                    }).get();
                    if ($element.data('action') === 'move') {
                        this._mygamesObj.addGamesToGroup(gamesToChange, groupKey, true);
                        this._mygamesObj.removeGamesFromGroup(gamesToChange, oldGroup)
                    } else {
                        this._mygamesObj.addGamesToGroup(gamesToChange, groupKey)
                    }
                }
                changed = true
            }
            if (changed) {
                this.reset();
                return this._regenerateCallback()
            }
        };
        MyGamesGroups.prototype._isDropDownListHidden = function() {
            return this._listHidden
        };
        MyGamesGroups.prototype._hideDropDownList = function() {
            var $list;
            this._listHidden = true;
            $list = this._jQuery('#mg_dropdown_list');
            $list.hide();
            return $list.parent().removeClass('list_open')
        };
        MyGamesGroups.prototype._showDropDownList = function() {
            var $list;
            this._listHidden = false;
            $list = this._jQuery('#mg_dropdown_list');
            $list.show();
            return $list.parent().addClass('list_open')
        };
        MyGamesGroups.prototype._showOrHideDropDownList = function($element) {
            var hasDropDownList;
            if (typeof this._tooltipGetter === "function") {
                this._tooltipGetter().hide_all()
            }
            hasDropDownList = $element.find('#mg_dropdown_list').length === 1;
            if (hasDropDownList && !this._isDropDownListHidden()) {
                this._hideDropDownList();
                return
            } else if (hasDropDownList) {
                this._showDropDownList();
                return
            }
            this._hideDropDownList();
            $element.append(this._getDropDownList());
            return this._showDropDownList()
        };
        MyGamesGroups.prototype._getDropDownList = function() {
            var i, itemsHtml, j;
            if (!this._groupListElement) {
                itemsHtml = "";
                itemsHtml += "<li><div class=\"move\"><span>" + (this._util.trans('TRANS_MY_GAMES_MOVE_TO')) + "</span></div><div class=\"copy\"><span>" + (this._util.trans('TRANS_MY_GAMES_COPY_TO')) + "</span></div></li>";
                for (i = j = 0; j <= 9; i = ++j) {
                    itemsHtml += "<li data-key=\"" + i + "\"><div class=\"move\" data-action=\"move\"><span>" + (this._keyToValue(i)) + "</span></div><div class=\"copy\" data-action=\"copy\"><span>" + (this._keyToValue(i)) + "</span></div></li>"
                }
                this._groupListElement = this._jQuery('<ul>', {
                    "class": 'mg_dropdown_list',
                    id: 'mg_dropdown_list',
                    style: 'display: none',
                    html: itemsHtml
                });
                this._listHidden = true
            }
            return this._groupListElement
        };
        MyGamesGroups.prototype._getDropDown = function(context, selectedKey) {
            if (selectedKey == null) {
                selectedKey = '-'
            }
            return '<div data-context="' + context + '" class="mg_dropdown"><div class="mg_dropdown_wrapper"><span class="mg_dropdown_selected">' + this._keyToValue(selectedKey) + '</span><span class="down_arrow"></span></div></div>'
        };
        MyGamesGroups.prototype._keyToValue = function(key) {
            if (!key) {
                return '-'
            }
            return key
        };
        MyGamesGroups.prototype._valueToKey = function(value) {
            if (value === '-') {
                return 0
            }
            value = parseInt(value);
            if (indexOf.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], value) >= 0) {
                return value
            }
            return 0
        };
        MyGamesGroups.prototype._regenerateCallback = function() {
            return reloadIframeContent()
        };
        MyGamesGroups.prototype._setLastUsedDropDownMenuElementData = function(data) {
            return this._lastUsedDropDownMenuJqElementData = data
        };
        MyGamesGroups.prototype._getLastUsedDropDownMenuElementData = function() {
            return this._lastUsedDropDownMenuJqElementData
        };
        return MyGamesGroups
    })();
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.MyGamesGroups = MyGamesGroups
    }
}).call(this);
(function() {
    var WindowManager;
    WindowManager = (function() {
        function WindowManager(_$, utilTrans, util_enviroment) {
            this._$ = _$;
            this.utilTrans = utilTrans;
            this.util_enviroment = util_enviroment;
            this._dialogAutocloseTimeout = null;
            this._elementId = 'ls-manager';
            this._dialogPositionTop = 200;
            this._$((function(wm) {
                return function() {
                    return wm._$(window).bind('keyup', function(e) {
                        if (e.keyCode === 27) {
                            return wm.hideDialog()
                        }
                    })
                }
            })(this))
        }
        WindowManager.prototype.trans = function(key) {
            var ref;
            return (ref = this.utilTrans(key)) != null ? ref : "[X]" + key
        };
        WindowManager.prototype.setHigherTooltipZIndex = function(value) {
            var ref;
            if (value == null) {
                value = '2000'
            }
            return (ref = this.util_enviroment.getTooltipObject()) != null ? ref.setZIndex(value) : void 0
        };
        WindowManager.prototype.setOnHideDialogCallback = function(_onHideDialogCallback) {
            this._onHideDialogCallback = _onHideDialogCallback != null ? _onHideDialogCallback : function() {}
        };
        WindowManager.prototype.getElementId = function() {
            return this._elementId
        };
        WindowManager.prototype.showMessage = function(msg, err, time, animTime) {
            var message, msgDiv;
            if (err == null) {
                err = false
            }
            if (time == null) {
                time = 4
            }
            if (animTime == null) {
                animTime = 0.2
            }
            msgDiv = this._$(document.createElement('div'));
            msgDiv.addClass(this._elementId + "-messages");
            message = this._$(document.createElement('div'));
            message.addClass("message");
            if (err) {
                message.addClass("err")
            }
            message.html(msg);
            msgDiv.append(message);
            return this.showDialog(msgDiv, null, time)
        };
        WindowManager.prototype.showDialog = function(content, callback, autoCloseTime) {
            var close, contentWrap, contentWrapClone, dialogLeft, doneCallback, hide, mask, myWindow, myWindowClone;
            if (content == null) {
                content = ""
            }
            if (callback == null) {
                callback = null
            }
            if (autoCloseTime == null) {
                autoCloseTime = null
            }
            doneCallback = (function(wm) {
                return function() {
                    if (typeof callback === "function") {
                        callback()
                    }
                    return wm.formFocus(wm._$("#" + wm._elementId + "-window div.selected form"))
                }
            })(this);
            myWindow = this._$("#" + this._elementId + "-window");
            close = "<a id=\"" + this._elementId + "-window-close\" class=\"close\" href=\"#\" title=\"" + (this.trans('closeWindow')) + "\"></a>";
            hide = (function(wm) {
                return function(e) {
                    if (e != null) {
                        e.preventDefault()
                    }
                    wm.hideDialog();
                    return wm.hideLoading
                }
            })(this);
            clearTimeout(this._dialogAutocloseTimeout);
            if (autoCloseTime) {
                this._dialogAutocloseTimeout = setTimeout(hide, autoCloseTime * 1000)
            }
            if (myWindow.length) {
                myWindowClone = myWindow.clone();
                myWindowClone.css({
                    'visibility': 'hidden'
                });
                contentWrapClone = myWindowClone.children(".content-wrap");
                contentWrapClone.html(content);
                contentWrapClone.css({
                    'opacity': '0'
                });
                contentWrap = myWindow.children(".content-wrap");
                contentWrap.css({
                    'width': contentWrap.width(),
                    'height': contentWrap.height()
                });
                contentWrap.animate({
                    'opacity': '0'
                }, function() {
                    return myWindow.animate({
                        'left': dialogLeft
                    })
                });
                $('body').append(myWindowClone);
                dialogLeft = (contentWrap.width() - contentWrapClone.width()) / 2;
                dialogLeft = "+=" + dialogLeft;
                return contentWrap.animate({
                    'height': contentWrapClone.height(),
                    'width': contentWrapClone.width()
                }, (function(wm) {
                    return function() {
                        wm._$(this).replaceWith(contentWrapClone);
                        myWindowClone.remove();
                        contentWrapClone.animate({
                            'opacity': '1'
                        });
                        doneCallback();
                        return wm.fixedDialog()
                    }
                })(this))
            } else {
                mask = this._$(document.createElement('div'));
                mask.attr({
                    'id': this._elementId + "-window-mask",
                    'class': "ls-manager-window-mask"
                });
                this._$('body').prepend(mask);
                myWindow = this._$(document.createElement('div'));
                myWindow.attr({
                    'id': this._elementId + "-window",
                    'class': "ls-manager-window"
                });
                contentWrap = document.createElement('div');
                this._$(contentWrap).addClass('content-wrap').html(content);
                myWindow.append(close);
                myWindow.append(contentWrap);
                this._$('body').prepend(myWindow);
                this.repositionDialog();
                myWindow.css({
                    'opacity': '0'
                });
                myWindow.show();
                mask.fadeTo(200, 0.6, (function(wm) {
                    return function() {
                        doneCallback();
                        return myWindow.animate({
                            'opacity': '1'
                        }, 300, function() {
                            return wm.fixedDialog()
                        })
                    }
                })(this));
                mask.click(hide);
                return myWindow.find('.close').click(hide)
            }
        };
        WindowManager.prototype.repositionDialog = function() {
            var myWindow;
            if (this._repositionDialogBinded == null) {
                this._$(window).resize((function(myObj) {
                    return function() {
                        return myObj.repositionDialog()
                    }
                })(this))
            }
            this._repositionDialogBinded = true;
            myWindow = this._$("#" + this._elementId + "-window");
            myWindow.css({
                'top': this._dialogPositionTop,
                'left': Math.max(this._$('body').width() / 2 - myWindow.width() / 2, 0)
            });
            return this.fixedDialog()
        };
        WindowManager.prototype.fixedDialog = function() {
            var myWindow;
            myWindow = this._$("#" + this._elementId + "-window");
            myWindow.removeClass('long');
            if ((this._$(window).height() < myWindow.height() + 200) || this._$(window).width() < myWindow.width() || /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent)) {
                return myWindow.addClass('long')
            }
        };
        WindowManager.prototype.hideDialog = function() {
            var ref;
            this._repositionDialogBinded = false;
            this._$("#" + this._elementId + "-window").remove();
            this._$("#" + this._elementId + "-window-mask").remove();
            if ((ref = this.util_enviroment.getTooltipObject()) != null) {
                ref.revertZIndex()
            }
            return typeof this._onHideDialogCallback === "function" ? this._onHideDialogCallback() : void 0
        };
        WindowManager.prototype.showLoading = function() {
            var loading;
            loading = this._$(document.createElement('div'));
            loading.attr('id', this._elementId + "-loading");
            loading.addClass('preload');
            loading.append(this._$(document.createElement('span')).text('Loading ...'));
            return this._$("#" + this._elementId + "-window").prepend(loading)
        };
        WindowManager.prototype.hideLoading = function() {
            return this._$("#" + this._elementId + "-loading").remove()
        };
        WindowManager.prototype.formFocus = function(form) {
            return this._$(form).find('input:not(:disabled)').each((function(jquery) {
                return function() {
                    if (this.type === 'text' || this.type === 'password') {
                        jquery(this).focus();
                        return false
                    }
                    return true
                }
            })(this._$))
        };
        WindowManager.prototype.setDialogPositionTop = function(_dialogPositionTop) {
            this._dialogPositionTop = _dialogPositionTop
        };
        return WindowManager
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('WindowManager', WindowManager, ['windowManager'])
}).call(this);
(function() {
    var SearchWindow_History;
    SearchWindow_History = (function() {
        SearchWindow_History.CLIENT_STORAGE_KEY = 'search_user_history_%LANG%';
        SearchWindow_History.MAX_STORED_ITEMS = 10;

        function SearchWindow_History(clientStorage, utilConfig) {
            this.clientStorage = clientStorage;
            this.utilConfig = utilConfig
        }
        SearchWindow_History.prototype.getAllItems = function() {
            return this._localStoreRead()
        };
        SearchWindow_History.prototype.getItemData = function(index) {
            var items;
            items = this.getAllItems();
            if (items[index] == null) {
                return null
            }
            return items[index]
        };
        SearchWindow_History.prototype.storeItem = function(item) {
            return this._localStoreWrite(item)
        };
        SearchWindow_History.prototype._localStoreWrite = function(newItem) {
            var count, data, hash, i, item, len, newHash, storageData;
            storageData = this._localStoreRead();
            data = [];
            newHash = newItem.type + '-' + newItem.id;
            data.push(newItem);
            count = 1;
            for (i = 0, len = storageData.length; i < len; i++) {
                item = storageData[i];
                hash = item.type + '-' + item.id;
                if (hash === newHash) {
                    continue
                }
                if (count >= SearchWindow_History.MAX_STORED_ITEMS) {
                    break
                }
                data.push(item);
                count++
            }
            return this.clientStorage.store(this._getStorageKey(), JSON.stringify(data))
        };
        SearchWindow_History.prototype._localStoreRead = function() {
            var storageData;
            storageData = this.clientStorage.get(this._getStorageKey());
            try {
                storageData = JSON.parse(storageData)
            } catch (undefined) {}
            if (storageData === null) {
                storageData = []
            }
            return storageData
        };
        SearchWindow_History.prototype._getStorageKey = function() {
            return SearchWindow_History.CLIENT_STORAGE_KEY.replace('%LANG%', this.utilConfig.get('app', 'project', 'id'))
        };
        return SearchWindow_History
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('SearchWindow_History', SearchWindow_History)
}).call(this);
(function() {
    var SearchWindow_ProjectHistory;
    SearchWindow_ProjectHistory = (function() {
        SearchWindow_ProjectHistory.URL = 'sl_/';
        SearchWindow_ProjectHistory.CLIENT_STORAGE_KEY = 'search_project_history';
        SearchWindow_ProjectHistory.CLIENT_STORAGE_TTL = 3600;

        function SearchWindow_ProjectHistory(util_enviroment, clientStorage, _$) {
            var storageData;
            this.util_enviroment = util_enviroment;
            this.clientStorage = clientStorage;
            this._$ = _$;
            storageData = this.clientStorage.get(SearchWindow_ProjectHistory.CLIENT_STORAGE_KEY);
            try {
                this._items = JSON.parse(storageData)
            } catch (undefined) {}
        }
        SearchWindow_ProjectHistory.prototype.getAllItems = function(callback) {
            if (this._items !== null) {
                callback(this._items);
                return
            }
            return this._loadRemoteData(callback)
        };
        SearchWindow_ProjectHistory.prototype.getItemData = function(index) {
            var ref;
            if (((ref = this._items) != null ? ref[index] : void 0) == null) {
                return null
            }
            return this._items[index]
        };
        SearchWindow_ProjectHistory.prototype._loadRemoteData = function(callback) {
            var cb, req;
            cb = (function(callback, obj) {
                return function(data) {
                    obj._items = data;
                    return callback(obj._items)
                }
            })(callback, this);
            req = {
                url: this.util_enviroment.getRequestUrl(SearchWindow_ProjectHistory.URL),
                dataType: 'json',
                success: (function(obj, cb) {
                    return function(data, textStatus, jqXHR) {
                        return cb.call(obj, data, jqXHR.status)
                    }
                })(this, cb),
                error: (function(obj, cb) {
                    return function(jqXHR, textStatus, errorThrown) {
                        return cb.call(obj, [], jqXHR.status)
                    }
                })(this, cb)
            };
            return this._$.ajax(req)
        };
        return SearchWindow_ProjectHistory
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('SearchWindow_ProjectHistory', SearchWindow_ProjectHistory)
}).call(this);
(function() {
    var SearchWindow, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    SearchWindow = (function() {
        SearchWindow.MIN_QUERY_CHARS = 3;
        SearchWindow.TIMEOUT = 300;
        SearchWindow.FORM_ELEMENT_QUERY_ID = 'search-form-query';
        SearchWindow.FORM_ELEMENT_SELECT_ID = 'search-form-select';
        SearchWindow.FORM_ELEMENT_SUBMIT_ID = 'search-form-submit-button';
        SearchWindow.RESULTS_ID = 'search-results';
        SearchWindow.RESULT_TYPE_TOURNAMENT_TEMPLATE = 'tournament_templates';
        SearchWindow.RESULT_TYPE_PARTICIPANT = 'participants';
        SearchWindow.STAT_SUBTYPE_TEAM_CLICK = 1;
        SearchWindow.STAT_SUBTYPE_LEAGUE_CLICK = 2;

        function SearchWindow(searchWindowManager, windowManager, utilTrans, util_list, util_sport, util_enviroment, util_string, util_url, util_config, SearchWindow_History, SearchWindow_ProjectHistory, _$) {
            var dialogTop;
            this.searchWindowManager = searchWindowManager;
            this.windowManager = windowManager;
            this.utilTrans = utilTrans;
            this.util_list = util_list;
            this.util_sport = util_sport;
            this.util_enviroment = util_enviroment;
            this.util_string = util_string;
            this.util_url = util_url;
            this.util_config = util_config;
            this.SearchWindow_History = SearchWindow_History;
            this.SearchWindow_ProjectHistory = SearchWindow_ProjectHistory;
            this._$ = _$;
            if (!this.searchWindowManager) {
                throw Error('SearchWindowManager must be set.')
            }
            this.searchWindowManager.setOnHideDialogCallback((function(_this) {
                return function() {
                    return _this._isVisible = false
                }
            })(this));
            this._isVisible = false;
            this._timeoutId = null;
            dialogTop = this.util_config.get('app', 'sphinxsearch', 'dialog', 'top');
            if (dialogTop != null) {
                this.searchWindowManager.setDialogPositionTop(dialogTop)
            }
            this._showResults = true;
            this._registerLinkCallbacks();
            this._requestUrl = this.util_config.get('app', 'sphinxsearch', 'client_server')
        }
        SearchWindow.prototype.open = function() {
            var $content, callback, content;
            if (cjs.isBrowserDeprecated(true)) {
                $content = window.createUnsupportedBrowserDialogContent();
                return this.windowManager.showDialog($content)
            } else {
                this._init();
                content = this._createContent();
                callback = (function(_this) {
                    return function() {
                        _this._bindSearchingQueries();
                        _this.searchWindowManager.setHigherTooltipZIndex();
                        _this._$("#" + SearchWindow.FORM_ELEMENT_SELECT_ID).focus();
                        _this._$("#" + SearchWindow.FORM_ELEMENT_QUERY_ID).focus();
                        _this._isVisible = true;
                        return _this.SearchWindow_ProjectHistory.getAllItems(function(data) {
                            var html, index, item, j, len, rows;
                            rows = '';
                            for (index = j = 0, len = data.length; j < len; index = ++j) {
                                item = data[index];
                                rows += _this._createResultRowHtml('P_' + index, item)
                            }
                            if (!rows) {
                                return ''
                            }
                            html = '<div class="search-result-wrapper"><table><thead><tr><th>' + _this.utilTrans('TRANS_SEARCH_MOST_POPULAR_SEARCHES') + '</th></tr></thead><tbody>' + rows + '</tbody></table></div>';
                            return _this._$('#search-results-project-history').html(html)
                        })
                    }
                })(this);
                return this.searchWindowManager.showDialog(content, callback)
            }
        };
        SearchWindow.prototype.isVisible = function() {
            return this._isVisible
        };
        SearchWindow.prototype.showNoLoggedInMessage = function() {
            var $lsidWindow, $lsidWindowMask, $wmWindowMask, base, newTop, newZIndex, wmElementId;
            if (typeof(base = this._loginClient)._showMessage === "function") {
                base._showMessage(this.utilTrans('TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER'), true)
            }
            wmElementId = this.searchWindowManager.getElementId();
            $wmWindowMask = this._$("#" + wmElementId + "-window-mask");
            newZIndex = parseInt($wmWindowMask.css('z-index')) + 2;
            $lsidWindowMask = this._$("#lsid-window-mask");
            $lsidWindowMask.css({
                'z-index': "" + newZIndex
            });
            newZIndex += 1;
            $lsidWindow = this._$("#lsid-window");
            newTop = parseInt($lsidWindow.css('top')) + 100;
            return $lsidWindow.css({
                'z-index': "" + newZIndex,
                'top': newTop + "px"
            })
        };
        SearchWindow.prototype.onResponse = function(data) {
            var html;
            if (!this._showResults) {
                return
            }
            this._data = this._prepareResponseDataToFinalData(data);
            html = this._createResultsHtml();
            return this._setResultsHtml(html)
        };
        SearchWindow.prototype._init = function() {
            this.util_enviroment.getTooltipObject(function() {
                if (!window.tt) {
                    return window.tt = new tooltip()
                }
            });
            this._feedRequest = this.util_enviroment.getFeedRequestObject();
            if (this.util_config.get('app', 'myteams', 'enable')) {
                this._myTeams = this.util_enviroment.getMyTeamsObject(function() {
                    if (cjs.myTeams == null) {
                        window.myTeamsInit(1);
                        return cjs.myTeams.delegateTooltips()
                    }
                })
            }
            if (window.my_leagues_init != null) {
                this._myLeagues = this.util_enviroment.getMyLeaguesObject(function() {
                    if (cjs.myLeagues == null) {
                        window.my_leagues_init(1, {}, true);
                        return cjs.myLeagues.delegateTooltips()
                    }
                })
            }
            return this._loginClient = this.util_enviroment.getLoginClientObject()
        };
        SearchWindow.prototype._bindSearchingQueries = function() {
            this._$("#" + SearchWindow.FORM_ELEMENT_QUERY_ID).unbind('input, keyup').bind('input, keyup', (function(_this) {
                return function(e) {
                    var query;
                    query = _this._$(e.currentTarget).val();
                    if (query !== '') {
                        $('#search-results-history, #search-results-project-history').hide()
                    } else {
                        $('#search-results-history, #search-results-project-history').show()
                    }
                    return _this._sendRequest(query, true)
                }
            })(this));
            this._$("#" + SearchWindow.FORM_ELEMENT_SUBMIT_ID).unbind('click').bind('click', (function(_this) {
                return function(e) {
                    var query;
                    query = _this._$("#" + SearchWindow.FORM_ELEMENT_QUERY_ID).val();
                    return _this._sendRequest(query, true)
                }
            })(this));
            this._$("#" + SearchWindow.FORM_ELEMENT_QUERY_ID).unbind('focus').bind('focus', (function(_this) {
                return function(e) {
                    return _this._$('#search-input-wrapper').addClass('has-focus')
                }
            })(this));
            this._$("#" + SearchWindow.FORM_ELEMENT_QUERY_ID).unbind('blur').bind('blur', (function(_this) {
                return function(e) {
                    return _this._$('#search-input-wrapper').removeClass('has-focus')
                }
            })(this));
            this._$("#" + SearchWindow.FORM_ELEMENT_SELECT_ID).unbind('change').bind('change', (function(_this) {
                return function(e) {
                    var query;
                    query = _this._$("#" + SearchWindow.FORM_ELEMENT_QUERY_ID).val();
                    _this._$('#search-input-wrapper .search-input-sport-selected').html(_this._$('#search-form-select option:selected').text());
                    return _this._sendRequest(query)
                }
            })(this));
            this._$("#" + SearchWindow.FORM_ELEMENT_SELECT_ID).unbind('mouseenter').bind('mouseenter', (function(_this) {
                return function(e) {
                    return _this._$('#search-input-wrapper .search-input-sport-wrapper').addClass('has-hover')
                }
            })(this));
            return this._$("#" + SearchWindow.FORM_ELEMENT_SELECT_ID).unbind('mouseleave').bind('mouseleave', (function(_this) {
                return function(e) {
                    return _this._$('#search-input-wrapper .search-input-sport-wrapper').removeClass('has-hover')
                }
            })(this))
        };
        SearchWindow.prototype._sendRequest = function(query, useTimeout) {
            var requestConfig;
            if (useTimeout == null) {
                useTimeout = false
            }
            this._showResults = true;
            if (query.length < SearchWindow.MIN_QUERY_CHARS) {
                this._showResults = false;
                this._setResultsHtml(this._getDefaultText());
                return
            } else if (!/^[^<>\/=\[\]]+$/i.test(query)) {
                return
            }
            requestConfig = {
                url: this._requestUrl,
                data: {
                    q: encodeURIComponent(query),
                    l: this.util_config.get('app', 'lang', 'dc'),
                    s: this._getSelectedSportId(),
                    f: '1;1',
                    pid: this.util_config.get('app', 'project', 'id'),
                    sid: this.util_enviroment.getProjectTypeId()
                },
                dataType: 'jsonp',
                cache: true,
                jsonp: false
            };
            clearTimeout(this._timeoutId);
            return this._timeoutId = setTimeout((function(_this) {
                return function() {
                    return _this._$.ajax(requestConfig)
                }
            })(this), useTimeout ? SearchWindow.TIMEOUT : 0)
        };
        SearchWindow.prototype._setResultsHtml = function(html) {
            return this._$("#" + SearchWindow.RESULTS_ID).html(html)
        };
        SearchWindow.prototype._getDefaultText = function() {
            return this.utilTrans('TRANS_SEARCH_DEFAULT_TEXT_EMPTY_QUERY', [SearchWindow.MIN_QUERY_CHARS])
        };
        SearchWindow.prototype._createContent = function() {
            var html;
            html = this._createTabsMenuHtml();
            html += this._createContentHtml();
            return html
        };
        SearchWindow.prototype._createTabsMenuHtml = function() {
            return "<ul class=\"tabs-menu\">\n	<li class=\"li0 selected\">\n		<span><a class=\"unclickable\" href=\"#\" onclick=\"return false;\">" + (this.utilTrans('TRANS_SEARCH_TITLE')) + "</a></span>\n	</li>\n</ul>"
        };
        SearchWindow.prototype._createContentHtml = function() {
            return "<div class=\"contents\">\n	<div class=\"content\">\n		<form id=\"search-form\" onsubmit=\"return false;\">\n			<div>\n				<div class=\"search-form-label-wrapper\">\n					" + (this._createInputTextHtml()) + "\n				</div>\n			</div>\n		</form>\n		<div id=\"" + SearchWindow.RESULTS_ID + "\">" + (this._getDefaultText()) + "</div>\n		<div id=\"search-results-history\">\n			<div class=\"search-result-wrapper\">" + (this._createHistoryResultsHtml()) + "</div>\n		</div>\n		<div id=\"search-results-project-history\">\n		</div>\n	</div>\n</div>"
        };
        SearchWindow.prototype._createInputTextHtml = function() {
            var defaultValue, placeholderAttr, stylePart;
            defaultValue = this.utilTrans('TRANS_SEARCH_INSERT_TEXT');
            placeholderAttr = 'placeholder="' + defaultValue + '"';
            stylePart = this._getSportsForSelectBox().length === 1 ? ' style="display: none;"' : '';
            return "<div id=\"search-input-wrapper\">\n	<div class=\"search-input-submit\" id=\"" + SearchWindow.FORM_ELEMENT_SUBMIT_ID + "\">\n		" + (this.utilTrans('TRANS_SEARCH_ACTION')) + "\n	</div>\n	<span class=\"search-input-sport-wrapper\"" + stylePart + ">\n		<span class=\"search-input-sport-selected\">\n			" + (this.utilTrans('TRANS_SEARCH_ALL_SPORTS')) + "\n		</span>\n		<span class=\"search-input-sport-downarrow\"></span>\n		" + (this._createSportSelectBoxHtml()) + "\n	</span>\n	<div class=\"search-input-outer\">\n		<div class=\"search-input-inner\">\n			<input id=\"" + SearchWindow.FORM_ELEMENT_QUERY_ID + "\" type=\"text\" " + placeholderAttr + " autofocus=true />\n		</div>\n	</div>\n</div>\n"
        };
        SearchWindow.prototype._createSportSelectBoxHtml = function() {
            var html, j, len, sport, sports;
            sports = this._getSportsForSelectBox();
            html = '<select id="' + SearchWindow.FORM_ELEMENT_SELECT_ID + '">';
            html += '<option value="0" selected="selected">' + this.utilTrans('TRANS_SEARCH_ALL_SPORTS') + '</option>';
            for (j = 0, len = sports.length; j < len; j++) {
                sport = sports[j];
                html += '<option value="' + sport['id'] + '">' + sport['name'] + '</option>'
            }
            html += '</select>';
            return html
        };
        SearchWindow.prototype._createResultsHtml = function() {
            var html, indexTableTagOpen, indexType, isPlayer, item, j, lastIndexType, lastIsPlayer, lastSportId, len, originalSportName, ref1, ref2, ref3, sortedIndex, sortedIndexes, sportDivTagOpen, sportId, tableHeadTxt, translatedSportName;
            sortedIndexes = this._getSortedIndexes();
            if (!(((ref1 = this._data) != null ? ref1.results : void 0) && this._data.results.length)) {
                return this.utilTrans('TRANS_SEARCH_NO_RESULTS')
            }
            html = '';
            lastSportId = -1;
            lastIndexType = '';
            lastIsPlayer = null;
            sportDivTagOpen = false;
            indexTableTagOpen = false;
            for (j = 0, len = sortedIndexes.length; j < len; j++) {
                sortedIndex = sortedIndexes[j];
                item = this._data.results[sortedIndex.index];
                sportId = item['sport_id'];
                indexType = item['type'];
                isPlayer = (ref2 = item['participant_type_id'], indexOf.call(this._getPlayerParticipantTypes(), ref2) >= 0);
                if (sportId !== lastSportId) {
                    if (indexTableTagOpen) {
                        html += '</tbody></table>'
                    }
                    if (sportDivTagOpen) {
                        html += '</div>'
                    }
                    sportDivTagOpen = true;
                    lastSportId = sportId;
                    lastIndexType = '';
                    originalSportName = this.util_sport.getOriginalNameFromId(sportId);
                    translatedSportName = this.util_sport.getTranslatedName(null, originalSportName);
                    html += '<div class="search-result-wrapper">';
                    html += '<div class="sport-label ' + originalSportName + '"><span class="sport-icon ' + originalSportName + '"></span>' + translatedSportName + '</div>'
                }
                if (indexType !== lastIndexType || isPlayer !== lastIsPlayer) {
                    if (indexTableTagOpen) {
                        html += '</tbody></table>'
                    }
                    lastIndexType = indexType;
                    indexTableTagOpen = true;
                    lastIsPlayer = isPlayer;
                    if (indexType === SearchWindow.RESULT_TYPE_TOURNAMENT_TEMPLATE) {
                        tableHeadTxt = this.utilTrans('TRANS_SEARCH_COMPETITIONS')
                    } else {
                        tableHeadTxt = this.util_enviroment.getSearchParticipantTitle(sportId, isPlayer)
                    }
                    html += '<table><thead><tr><th>' + tableHeadTxt + '</th></tr></thead><tbody>'
                }
                html += this._createResultRowHtml('M_' + sortedIndex.index, item)
            }
            if (indexTableTagOpen) {
                html += '</tbody></table>'
            }
            if (sportDivTagOpen) {
                html += '</div>'
            }
            if (((ref3 = this._data) != null ? ref3.more : void 0) != null) {
                html += '<div class="more-results-wrapper">' + this.utilTrans('TRANS_SEARCH_MORE_RESULTS_AVAILABLE_TEXT') + '</div>'
            }
            return html
        };
        SearchWindow.prototype._createResultRowHtml = function(ref, indexItemData) {
            var countryName, flagId, indexItemId, indexName, itemTitle, linkUrl, logoUrl, myFavouriteKey, onclickFunc, participantTypeId, ref1, ref2, ref3, ref4, ref5, sportId, toggleIconHtml;
            if (!(indexItemData != null ? indexItemData.id : void 0)) {
                return ''
            }
            indexItemId = indexItemData.id;
            indexName = indexItemData.type;
            sportId = indexItemData.sport_id;
            participantTypeId = indexItemData.participant_type_id;
            logoUrl = (ref1 = indexItemData['logo_url']) != null ? ref1 : null;
            myFavouriteKey = (ref2 = indexItemData['favourite_key']) != null ? ref2 : null;
            flagId = (ref3 = indexItemData['flag_id']) != null ? ref3 : null;
            itemTitle = (ref4 = indexItemData['title']) != null ? ref4 : '';
            countryName = (ref5 = indexItemData['country_name']) != null ? ref5 : '';
            linkUrl = this._createLinkUrl(indexItemId, indexName, participantTypeId);
            toggleIconHtml = '';
            onclickFunc = "cjs.dic.get('SearchWindow').linkClickCB('" + ref + "');";
            if (indexName === SearchWindow.RESULT_TYPE_TOURNAMENT_TEMPLATE) {
                toggleIconHtml = this._createToggleToMyLeaguesHtml(myFavouriteKey, ref)
            } else {
                toggleIconHtml = this._createToggleToMyTeamsHtml(myFavouriteKey, ref)
            }
            if (toggleIconHtml == null) {
                toggleIconHtml = ''
            }
            return '<tr> <td> <a href="' + linkUrl + '" onclick="' + onclickFunc + '">' + this._createFlagOrTeamLogoHtml(logoUrl, flagId, countryName) + '<span>' + itemTitle + '</span> </a>' + toggleIconHtml + '</td> </tr>'
        };
        SearchWindow.prototype._createHistoryResultsHtml = function() {
            var index, item, j, len, ref1, rows;
            rows = '';
            ref1 = this.SearchWindow_History.getAllItems();
            for (index = j = 0, len = ref1.length; j < len; index = ++j) {
                item = ref1[index];
                rows += this._createResultRowHtml('H_' + index, item)
            }
            if (!rows) {
                return ''
            }
            return '<table><thead><tr><th>' + this.utilTrans('TRANS_SEARCH_LAST_SEARCH') + '</th></tr></thead><tbody>' + rows + '</tbody></table>'
        };
        SearchWindow.prototype._createFlagOrTeamLogoHtml = function(logoUrl, flagId, countryName) {
            var title;
            if (logoUrl) {
                return "<span style=\"background-image: url(" + logoUrl + ")\" class=\"team-logo\"></span>"
            } else if (flagId) {
                title = '';
                if (countryName) {
                    title = "title=\"" + countryName + "\""
                }
                return "<span " + title + " class=\"flag fl_" + flagId + "\"></span>"
            }
            return ''
        };
        SearchWindow.prototype._createToggleToMyTeamsHtml = function(participantKey, ref) {
            var base, noLoggedInCallbackStr;
            if (!(this._myTeams && participantKey)) {
                return ''
            }
            noLoggedInCallbackStr = "function() { cjs.dic.get('SearchWindow').showNoLoggedInMessage(); }";
            return '<div class="tomyteams">' + (typeof(base = this._myTeams).getToggleIcon === "function" ? base.getToggleIcon(participantKey, noLoggedInCallbackStr, null, null, "cjs.dic.get('SearchWindow').linkClickCB('" + ref + "');") : void 0) + '</div>'
        };
        SearchWindow.prototype._createToggleToMyLeaguesHtml = function(labelKey, ref) {
            var base, sportId;
            if (!(this._myLeagues && labelKey)) {
                return ''
            }
            sportId = parseInt(labelKey.replace(/([0-9]+)_(.*)/, '$1'));
            if (this.util_sport.isCategorySport(sportId)) {
                labelKey = this._myLeagues.encodeLabelKey(labelKey)
            }
            return typeof(base = this._myLeagues).getToggleIcon === "function" ? base.getToggleIcon(null, labelKey, null, "cjs.dic.get('SearchWindow').linkClickCB('" + ref + "');") : void 0
        };
        SearchWindow.prototype._createLinkUrl = function(indexItemId, indexName, participantTypeId) {
            var langPart, redirectType, redirectorTypes, url;
            url = this.util_url.getLocationOrigin();
            redirectorTypes = this.util_config.get('app', 'redirector', 'types');
            if (indexName === SearchWindow.RESULT_TYPE_TOURNAMENT_TEMPLATE) {
                redirectType = redirectorTypes['tournament_template']
            } else if (indexName === SearchWindow.RESULT_TYPE_PARTICIPANT) {
                if (indexOf.call(this._getPlayerParticipantTypes(), participantTypeId) >= 0) {
                    redirectType = redirectorTypes['player']
                } else {
                    redirectType = redirectorTypes['participant']
                }
            } else {
                return '#'
            }
            if (langPart = this.util_url.getLanguagePart()) {
                url += "/" + langPart
            }
            url += "/?r=" + redirectType + ":" + indexItemId;
            return url
        };
        SearchWindow.prototype._getPlayerParticipantTypes = function() {
            return [this.util_list.getParticipantTypes().PLAYER, this.util_list.getParticipantTypes().GOALKEEPER, this.util_list.getParticipantTypes().DEFENDER, this.util_list.getParticipantTypes().MIDFIELDER, this.util_list.getParticipantTypes().FORWARD]
        };
        SearchWindow.prototype._getSportsForSelectBox = function() {
            var all, id, ref1, sport, sportName, sports;
            all = [];
            sport = this.util_list.getSports();
            sports = this.util_sport.getAllTranslatedSports();
            for (id in sports) {
                sportName = sports[id];
                if ((ref1 = parseInt(id)) === sport.MOTORSPORT_AUTO_RACING || ref1 === sport.MOTORSPORT_MOTO_RACING) {
                    continue
                }
                all.push({
                    'id': id,
                    'name': sportName
                })
            }
            all.sort(function(a, b) {
                return a['name'].localeCompare(b['name'])
            });
            return all
        };
        SearchWindow.prototype.saveStat = function(type, sportId, entryId) {
            var dataToSend, statUrl, subtypeId;
            if (!this.util_config.get('app', 'fs_stats', 'enable')) {
                return
            }
            statUrl = this.util_config.get('app', 'fs_stats', 'url', 'search_stats');
            subtypeId = SearchWindow['STAT_SUBTYPE_' + type];
            if (!(statUrl && sportId && subtypeId && entryId)) {
                return
            }
            dataToSend = {
                sport_id: sportId,
                project_id: this.util_config.get('app', 'project', 'id'),
                entry_id: entryId,
                subtype_id: subtypeId
            };
            return this._$.ajax({
                url: statUrl,
                data: dataToSend,
                dataType: 'jsonp',
                jsonpCallback: 'jsonp_cb'
            })
        };
        SearchWindow.prototype.linkClickCB = function(key) {
            var cb, data, index, j, len, ref1, ref2, results, type;
            key = key + "";
            ref1 = key.split('_'), type = ref1[0], index = ref1[1];
            switch (type) {
                case 'M':
                    if (!((this._data.results[index] != null) && this._data.results[index])) {
                        return
                    }
                    data = this._data.results[index];
                    break;
                case 'H':
                    data = this.SearchWindow_History.getItemData(index);
                    if ((data != null ? data.id : void 0) == null) {
                        return
                    }
                    break;
                case 'P':
                    return;
                default:
                    return
            }
            ref2 = this._linkCB;
            results = [];
            for (j = 0, len = ref2.length; j < len; j++) {
                cb = ref2[j];
                results.push(typeof cb === "function" ? cb(data) : void 0)
            }
            return results
        };
        SearchWindow.prototype._registerLinkCallbacks = function() {
            this._linkCB = [];
            this._linkCB.push((function(_this) {
                return function(data) {
                    if (data.type === SearchWindow.RESULT_TYPE_PARTICIPANT) {
                        return _this.saveStat('TEAM_CLICK', data.sport_id, data.id)
                    } else {
                        return _this.saveStat('LEAGUE_CLICK', data.sport_id, data.id)
                    }
                }
            })(this));
            return this._linkCB.push((function(_this) {
                return function(data) {
                    return _this.SearchWindow_History.storeItem(data)
                }
            })(this))
        };
        SearchWindow.prototype._getSortedIndexes = function() {
            var i, indexes, item, j, len, rank, ref1, ref2, ref3, sortKey;
            indexes = [];
            ref1 = this._data.results;
            for (i = j = 0, len = ref1.length; j < len; i = ++j) {
                item = ref1[i];
                sortKey = "S" + this.util_string.lPad(this.util_enviroment.getSearchSportOrder(item.sport_id), 3, 0);
                sortKey += item.type === SearchWindow.RESULT_TYPE_TOURNAMENT_TEMPLATE ? 1 : 2;
                sortKey += (ref2 = item.participant_type_id, indexOf.call(this._getPlayerParticipantTypes(), ref2) >= 0) ? 2 : 1;
                rank = 9999999999 - ((ref3 = item.rank) != null ? ref3 : 0);
                sortKey += this.util_string.lPad(rank, 10, 0);
                sortKey += this.util_string.lPad(i, 4, 0);
                indexes.push({
                    index: i,
                    sortKey: sortKey
                })
            }
            return indexes.sort(function(a, b) {
                if (a.sortKey === b.sortKey) {
                    return 0
                } else if (a.sortKey > b.sortKey) {
                    return 1
                }
                return -1
            })
        };
        SearchWindow.prototype._prepareResponseDataToFinalData = function(data) {
            var baseImageDataUrl, favouriteKey, id, item, j, len, ref1, replaceSuperTemplateId, superTemplateDefinition;
            baseImageDataUrl = this.util_url.getBaseImageData();
            superTemplateDefinition = this.util_enviroment.getSuperTemplateDefinition();
            replaceSuperTemplateId = function(type, replacePattern, superTemplateId) {
                var ref1;
                if (((ref1 = superTemplateDefinition[superTemplateId]) != null ? ref1[type] : void 0) != null) {
                    return superTemplateDefinition[superTemplateId][type]
                }
                return replacePattern
            };
            if (data['results'] != null) {
                ref1 = data['results'];
                for (id = j = 0, len = ref1.length; j < len; id = ++j) {
                    item = ref1[id];
                    if ((item['logo_url'] != null) && item['logo_url']) {
                        if (/%%EMPTY_LOGO%%/.test(item['logo_url'])) {
                            item['logo_url'] = item['logo_url'].replace('%%EMPTY_LOGO%%', this.util_url.getEmptyTeamLogo())
                        } else {
                            item['logo_url'] = baseImageDataUrl + item['logo_url']
                        }
                    }
                    if ((item['favourite_key'] != null) && item['favourite_key']) {
                        favouriteKey = item['favourite_key'].replace(/%%([0-9]+)%%/, function(replacePattern, superTemplateId) {
                            return superTemplateId
                        });
                        item['favourite_key'] = favouriteKey
                    }
                    if ((item['flag_id'] != null) && item['flag_id'] && typeof item['flag_id'] === 'string') {
                        item['flag_id'] = item['flag_id'].replace(/%%([0-9]+)%%/, function(replacePattern, superTemplateId) {
                            return replaceSuperTemplateId('flag', replacePattern, superTemplateId)
                        })
                    }
                }
            }
            return data
        };
        SearchWindow.prototype._getSelectedSportId = function() {
            var sportId, sports;
            sports = this._getSportsForSelectBox();
            if (sports.length === 1) {
                return sports[0].id
            }
            return sportId = this._$("#" + SearchWindow.FORM_ELEMENT_SELECT_ID).val()
        };
        return SearchWindow
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('SearchWindow', SearchWindow)
}).call(this);
(function() {
    var SearchWindowManager, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    SearchWindowManager = (function(superClass) {
        extend(SearchWindowManager, superClass);

        function SearchWindowManager(_$) {
            this._$ = _$;
            SearchWindowManager.__super__.constructor.call(this, this._$);
            this._elementId = 'ls-search'
        }
        return SearchWindowManager
    })(cjs.dic.getClass('WindowManager'));
    cjs.dic.registerClass('SearchWindowManager', SearchWindowManager, ['searchWindowManager'])
}).call(this);
(function() {
    var LsidWindowManager, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    LsidWindowManager = (function(superClass) {
        extend(LsidWindowManager, superClass);

        function LsidWindowManager(_$) {
            this._$ = _$;
            LsidWindowManager.__super__.constructor.call(this, this._$);
            this._elementId = 'lsid'
        }
        return LsidWindowManager
    })(cjs.dic.getClass('WindowManager'));
    cjs.dic.registerClass('LsidWindowManager', LsidWindowManager, ['lsidWindowManager'])
}).call(this);
(function() {
    var TopLeagues, base;
    TopLeagues = (function() {
        function TopLeagues(_dic) {
            this._dic = _dic != null ? _dic : cjs.dic
        }
        TopLeagues.prototype.isTop = function(labelId, labelKey) {
            var ZH, leagueHandler, leagueHolder;
            if (labelKey == null) {
                labelKey = null
            }
            leagueHolder = this._dic.get('dataLeagueHolderProxy').getHolder();
            leagueHandler = this._dic.get('dataLeagueHolderProxy').getHandler();
            if (!labelId) {
                ZH = labelKey.replace(/[0-9]+_/, '');
                leagueHandler.each(function(index, id) {
                    var leagueItem;
                    leagueItem = this.getItem(id);
                    if (leagueItem.getTournamentTemplateKey() === ZH) {
                        labelId = id;
                        return false
                    }
                })
            }
            if (!leagueHolder.hasLeague(labelId)) {
                return false
            }
            if (leagueHolder.getLeague(labelId).isTop()) {
                return true
            }
            return false
        };
        TopLeagues.prototype.isEditable = function() {
            return false
        };
        TopLeagues.prototype.getAll = function() {
            var leagueHandler, leagues;
            leagues = [];
            leagueHandler = this._dic.get('dataLeagueHolderProxy').getHandler();
            leagueHandler.each(function(index, id) {
                var leagueItem;
                leagueItem = this.getItem(id);
                if (leagueItem.isTop()) {
                    return leagues.push(id)
                }
            });
            return leagues
        };
        return TopLeagues
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).TopLeagues == null) {
            base.TopLeagues = TopLeagues
        }
    } else {
        if (exports.TopLeagues == null) {
            exports.TopLeagues = TopLeagues
        }
    }
}).call(this);
(function() {
    var TableSlider, base;
    TableSlider = (function() {
        function TableSlider(settings, jQuery) {
            this.jQuery = jQuery;
            this.table = settings.table;
            this.tableHeight = null;
            this.tableTheadHeight = this.table.find('thead').height();
            this.fixedColumns = settings.fixedColumns;
            this.fixedColumnsTable = null;
            this.fixedColumnsWidth = null;
            this.fixedColumnsWrap = null;
            this.scrollColumnsWrap = null;
            this.navigationOneStepDistance = 150;
            this.navigationOneStepSpeed = 250;
            this.navigationLeftArrow = null;
            this.navigationRightArrow = null;
            this.windowWidth = null;
            this.windowHeight = null;
            this.scrollTop = null;
            this.navigationBar = null;
            this.navigationBarOffset = 25;
            this.currentLeftPosition = 0;
            this.window = this.jQuery(window)
        }
        TableSlider.prototype.init = function() {
            var columns, fixedColumnsWrap, scrollColumnsWrap, wrap;
            columns = this.getFixedColumns();
            this.fixedColumnsTable = this.createTable(columns);
            this.jQuery(this.fixedColumnsTable).addClass(this.jQuery(this.table).get(0).className);
            this.jQuery(this.table).find(columns.join(',')).addClass('ts-hidden-fixed-column');
            wrap = this.jQuery("<div class='ts-table-wrap'>");
            this.jQuery(this.table).wrap(wrap);
            this.jQuery(this.table).closest('.ts-table-wrap').prepend(this.fixedColumnsTable);
            fixedColumnsWrap = this.jQuery('<div class="ts-table-fixed-columns-wrap">');
            this.jQuery(this.fixedColumnsTable).wrap(fixedColumnsWrap);
            this.fixedColumnsWrap = this.jQuery(this.fixedColumnsTable).closest('.ts-table-fixed-columns-wrap');
            scrollColumnsWrap = this.jQuery('<div class="ts-table-scroll-columns-wrap">');
            this.jQuery(this.table).wrap(scrollColumnsWrap);
            this.scrollColumnsWrap = this.jQuery(this.table).closest('.ts-table-scroll-columns-wrap');
            this.tableHeight = this.table.height();
            this.addNavigation();
            this.addWindowResizeHandler();
            this.addWindowScrollHandler();
            return this.keepNavigationBarVisible()
        };
        TableSlider.prototype.addWindowResizeHandler = function() {
            this.windowWidth = this.window.width();
            this.windowHeight = this.window.height();
            return this.window.resize((function(context) {
                return function() {
                    if (context.jQuery(context.table).is(':visible')) {
                        context.windowHeight = context.window.height();
                        context.keepNavigationBarVisible();
                        if (context.windowWidth !== context.window.width()) {
                            context.updateFixedColumns();
                            context.windowWidth = context.window.width();
                            context.resetNavigation();
                            return context.checkNavigationArrows()
                        }
                    }
                }
            })(this))
        };
        TableSlider.prototype.addWindowScrollHandler = function() {
            this.scrollTop = this.window.scrollTop();
            return this.window.scroll((function(context) {
                return function() {
                    return context.keepNavigationBarVisible()
                }
            })(this))
        };
        TableSlider.prototype.keepNavigationBarVisible = function() {
            var barTop, tableHeight, tableTop, tbodyTop, viewHeight, windowHeight;
            if (!this.table.is(':visible')) {
                return
            }
            tableHeight = this.tableHeight - this.tableTheadHeight;
            tbodyTop = this.table.offset().top + this.tableTheadHeight;
            windowHeight = this.window.height();
            tableTop = tbodyTop - this.window.scrollTop();
            if (tableTop > 0) {
                viewHeight = windowHeight - tableTop
            } else {
                viewHeight = tableHeight + tableTop
            }
            if (viewHeight > tableHeight) {
                viewHeight = tableHeight
            }
            if (viewHeight > windowHeight) {
                viewHeight = windowHeight
            }
            if (viewHeight < 0) {
                return
            }
            barTop = viewHeight / 2 - (tableTop < 0 ? tableTop : 0);
            barTop += 20;
            if (barTop < 40) {
                barTop = 40
            }
            if (barTop > tableHeight) {
                barTop = tableHeight
            }
            return this.navigationBar.css('top', barTop)
        };
        TableSlider.prototype.updateFixedColumns = function(keepCurrentLeftPosition) {
            var clonedColumns, columns, newFixedColunnsTable;
            if (keepCurrentLeftPosition == null) {
                keepCurrentLeftPosition = false
            }
            columns = this.getFixedColumns();
            clonedColumns = this.jQuery(this.table).find(columns.join(','));
            this.jQuery(clonedColumns).removeClass('ts-hidden-fixed-column');
            this.jQuery(this.fixedColumnsTable).addClass('ts-hidden-table');
            this.fixedColumnsWidth = null;
            this.getColumnsWidth(columns);
            this.jQuery(this.fixedColumnsTable).removeClass('ts-hidden-table');
            this.jQuery(clonedColumns).addClass('ts-hidden-fixed-column');
            newFixedColunnsTable = this.createTable(columns);
            this.jQuery(this.fixedColumnsTable).replaceWith(newFixedColunnsTable);
            this.fixedColumnsTable = newFixedColunnsTable;
            if (keepCurrentLeftPosition) {
                this.setLeft(this.currentLeftPosition)
            } else {
                this.resetNavigation()
            }
            this.checkNavigationArrows();
            return this.keepNavigationBarVisible()
        };
        TableSlider.prototype.createTable = function(columns) {
            var table, width;
            table = this.jQuery(this.table).clone();
            this.jQuery(table).removeAttr('id').removeAttr('style');
            this.jQuery(table).find('td:not(' + columns.join(',') + '),th:not(' + columns.join(',') + ')').remove();
            width = this.getColumnsWidth(columns);
            this.jQuery(table).find('td,th').each((function(context) {
                return function() {
                    return context.jQuery(this).css('width', width[context.jQuery(this).index()] + "px").removeClass('ts-hidden-fixed-column')
                }
            })(this));
            this.jQuery(table).find('th a').removeAttr('onclick').unbind().click((function(context) {
                return function(e) {
                    e.preventDefault();
                    return context.jQuery(context.table).find('th:eq(' + context.jQuery(this).closest('th').index() + ') a').click()
                }
            })(this));
            this.jQuery(table).css('width', 'auto');
            return table
        };
        TableSlider.prototype.getColumnsWidth = function(columns) {
            var column, firstColumn, i, len, width;
            if (this.fixedColumnsWidth !== null) {
                return this.fixedColumnsWidth
            }
            width = [];
            firstColumn = null;
            for (i = 0, len = columns.length; i < len; i++) {
                column = columns[i];
                firstColumn = this.jQuery(this.table).find(column).last();
                if (!width[this.jQuery(firstColumn).index()]) {
                    width[this.jQuery(firstColumn).index()] = this.jQuery(firstColumn).width()
                }
            }
            this.fixedColumnsWidth = width;
            return this.fixedColumnsWidth
        };
        TableSlider.prototype.getFixedColumns = function() {
            return this.fixedColumns
        };
        TableSlider.prototype.addNavigation = function() {
            this.jQuery(this.scrollColumnsWrap).find('table:eq(0)').css('margin-left', '0px');
            this.navigationBar = this.jQuery('<span class="ts-navigation-bar"></span>');
            this.navigationLeftArrow = this.jQuery('<span class="ts-left-arrow"></span>');
            this.navigationRightArrow = this.jQuery('<span class="ts-right-arrow"></span>');
            this.jQuery(this.navigationLeftArrow).click((function(context) {
                return function() {
                    return context.moveLeft()
                }
            })(this));
            this.jQuery(this.navigationRightArrow).click((function(context) {
                return function() {
                    return context.moveRight()
                }
            })(this));
            this.checkNavigationArrows();
            this.navigationBar.append(this.navigationLeftArrow).append(this.navigationRightArrow);
            return this.jQuery(this.scrollColumnsWrap).append(this.navigationBar)
        };
        TableSlider.prototype.resetNavigation = function() {
            this.currentLeftPosition = 0;
            return this.jQuery(this.scrollColumnsWrap).find('table:eq(0)').stop().css('margin-left', '0px')
        };
        TableSlider.prototype.setLeft = function(left) {
            this.jQuery(this.scrollColumnsWrap).find('table:eq(0)').stop().css('margin-left', left + 'px');
            this.checkNavigationArrows();
            this.currentLeftPosition = parseInt(left);
            return this.fixLeftPostion()
        };
        TableSlider.prototype.moveLeft = function() {
            var l;
            l = this.getNavigationStep('left');
            return this.jQuery(this.scrollColumnsWrap).find('table:eq(0)').stop().animate({
                'margin-left': '+=' + l + 'px'
            }, this.navigationOneStepSpeed, (function(context) {
                return function() {
                    context.checkNavigationArrows();
                    return context.currentLeftPosition = parseInt(context.jQuery(this).css('margin-left'))
                }
            })(this))
        };
        TableSlider.prototype.moveRight = function() {
            var r;
            r = this.getNavigationStep('right');
            return this.jQuery(this.scrollColumnsWrap).find('table:eq(0)').stop().animate({
                'margin-left': '-=' + r + 'px'
            }, this.navigationOneStepSpeed, (function(context) {
                return function() {
                    context.checkNavigationArrows();
                    return context.currentLeftPosition = parseInt(context.jQuery(this).css('margin-left'))
                }
            })(this))
        };
        TableSlider.prototype.checkNavigationArrows = function() {
            if (this.getNavigationStep('left') > 0) {
                this.navigationLeftArrow.removeClass('disabled')
            } else {
                this.navigationLeftArrow.addClass('disabled')
            }
            if (this.getNavigationStep('right') > 0) {
                return this.navigationRightArrow.removeClass('disabled')
            } else {
                return this.navigationRightArrow.addClass('disabled')
            }
        };
        TableSlider.prototype.fixLeftPostion = function() {
            var currentLeft, scrollColumnsWrapWidth, table, tableWidth;
            table = this.jQuery(this.scrollColumnsWrap).find('table:eq(0)');
            tableWidth = this.jQuery(table).outerWidth();
            scrollColumnsWrapWidth = this.jQuery(this.scrollColumnsWrap).outerWidth();
            currentLeft = parseInt(this.jQuery(table).css('margin-left'));
            if (currentLeft > 0) {
                return this.jQuery(this.scrollColumnsWrap).find('table:eq(0)').stop().css('margin-left', '0px')
            } else if (currentLeft + tableWidth < scrollColumnsWrapWidth) {
                return this.jQuery(this.scrollColumnsWrap).find('table:eq(0)').stop().css('margin-left', (scrollColumnsWrapWidth - tableWidth) + 'px')
            }
        };
        TableSlider.prototype.getNavigationStep = function(direction) {
            var currentLeft, scrollColumnsWrapWidth, table, tableWidth;
            table = this.jQuery(this.scrollColumnsWrap).find('table:eq(0)');
            tableWidth = this.jQuery(table).outerWidth();
            scrollColumnsWrapWidth = this.jQuery(this.scrollColumnsWrap).outerWidth();
            currentLeft = parseInt(this.jQuery(table).css('margin-left'));
            if (direction === 'left') {
                if (currentLeft === 0) {
                    return 0
                } else if (currentLeft + this.navigationOneStepDistance >= 0) {
                    return -1 * currentLeft
                } else {
                    return this.navigationOneStepDistance
                }
            }
            if (direction === 'right') {
                if (scrollColumnsWrapWidth + -1 * currentLeft + this.navigationOneStepDistance < tableWidth) {
                    return this.navigationOneStepDistance
                } else {
                    return -1 * (scrollColumnsWrapWidth + -1 * currentLeft - tableWidth)
                }
            }
        };
        return TableSlider
    })();
    if (typeof window !== "undefined" && window !== null ? window.cjs : void 0) {
        if ((base = window.cjs).TableSlider == null) {
            base.TableSlider = TableSlider
        }
    } else {
        if (exports.TableSlider == null) {
            exports.TableSlider = TableSlider
        }
    }
}).call(this);
(function() {
    var LoginClient, base;
    LoginClient = (function() {
        LoginClient.prototype.dialogs = {
            shared: {
                content: null,
                showTrigger: null,
                dialogClass: null
            },
            forgottenPassword: {
                content: null,
                showTrigger: null,
                dialogClass: null
            },
            login: {
                content: null,
                showTrigger: null,
                dialogClass: null
            },
            passwordChange: {
                content: null,
                showTrigger: null,
                dialogClass: null
            },
            registration: {
                content: null,
                showTrigger: null,
                dialogClass: null
            },
            socialRegistration: {
                content: null,
                showTrigger: null,
                dialogClass: null
            },
            settings: {
                content: null,
                showTrigger: null,
                dialogClass: null
            },
            verification: {
                content: null,
                showTrigger: null,
                dialogClass: null
            }
        };
        LoginClient.prototype.respCodes = {
            done: 'XY1'
        };
        LoginClient.prototype.errorCodes = {
            loginMissmatch: 'XE1',
            captchaMissmatch: 'XE2',
            registrationDuplicate: 'XE3',
            registrationNotConfirmed: 'XE4',
            verificationFail: 'XE5',
            loginProviderNotImplemented: 'XE6',
            loginProviderNeedsEmail: 'XE7'
        };
        LoginClient.prototype.emptyNickname = '_____';
        LoginClient.prototype.mailRegexp = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
        LoginClient.prototype.passwordRegexp = /^.{5,}$/;
        LoginClient.prototype.nicknameRegexp = /^([A-Za-z0-9_\-\.]){5,}$/;
        LoginClient.prototype.nonemptyRegexp = /^.*([^\s]+).*$/;
        LoginClient.prototype.verificationCodeRegexp = /^[a-f0-9]{40}$/;
        LoginClient.prototype._dataStorePrefix = 'lsid_';
        LoginClient.prototype._dataStorageKey = 'innerData';
        LoginClient.prototype._dataStorageSignKey = 'innerDataSign';
        LoginClient.prototype._persistDataTtl = 365 * 86400;
        LoginClient.prototype._nonpersistDataTtl = 7 * 86400;
        LoginClient.prototype._requestTimeout = 3000;
        LoginClient.prototype._requestLongTimeout = 30000;
        LoginClient.prototype._dataAutosyncInterval = 10000;
        LoginClient.prototype._dataAutosyncBrowserInterval = 1000;
        LoginClient.prototype._dataAutosyncRequestInterval = 5 * 60000;
        LoginClient.prototype.isFunction = function(fnct) {
            return Object.prototype.toString.call(fnct) === "[object Function]"
        };
        LoginClient.prototype.objectsDiff = function(objA, objB) {
            var diff, j, len1, objDiff, objDiffs, p;
            diff = [];
            for (p in objA) {
                if (typeof objB[p] === "undefined") {
                    diff.push("+|" + p);
                    continue
                }
                if (objA[p]) {
                    switch (typeof objA[p]) {
                        case "object":
                            objDiffs = this.objectsDiff(objA[p], objB[p]);
                            if (objDiffs.length) {
                                diff.push("*|" + p)
                            }
                            for (j = 0, len1 = objDiffs.length; j < len1; j++) {
                                objDiff = objDiffs[j];
                                diff.push("*|" + p + ";" + objDiff)
                            }
                            break;
                        case "function":
                            if (objA[p].toString() !== objB[p].toString()) {
                                if (objDiffs.length) {
                                    diff.push("*|" + p)
                                }
                            }
                            break;
                        default:
                            if (objA[p] !== objB[p]) {
                                diff.push("*|" + p)
                            }
                    }
                } else {
                    if (objB[p]) {
                        diff.push("*|" + p)
                    }
                }
            }
            for (p in objB) {
                if (typeof objA[p] === "undefined") {
                    diff.push("-|" + p)
                }
            }
            return diff
        };
        LoginClient.prototype.objectClone = function(obj) {
            var attr, copy, i, len;
            if (null === obj || "object" !== typeof obj) {
                return obj
            }
            if (obj instanceof Date) {
                copy = new Date();
                copy.setTime(obj.getTime());
                return copy
            }
            if (obj instanceof Array) {
                copy = [];
                i = 0;
                len = obj.length;
                while (i < len) {
                    copy[i] = this.objectClone(obj[i]);
                    i++
                }
                return copy
            }
            if (obj instanceof Object) {
                copy = {};
                for (attr in obj) {
                    if (obj.hasOwnProperty(attr)) {
                        copy[attr] = this.objectClone(obj[attr])
                    }
                }
                return copy
            }
            throw new Error("Unable to copy obj! Its type isn't supported.")
        };

        function LoginClient(_storage, _url, _namespace, _projectIdent, _dic, _socialAPI, trans, _tansportCoding, _getGeoIp, _getTime, _$, _elementId, _keepHashInLocation, _dialogHideDisabled) {
            var key, label, proxyUrl, service, serviceName;
            this._storage = _storage;
            this._url = _url;
            this._namespace = _namespace;
            this._projectIdent = _projectIdent;
            this._dic = _dic;
            this._socialAPI = _socialAPI != null ? _socialAPI : {};
            if (trans == null) {
                trans = {}
            }
            this._tansportCoding = _tansportCoding != null ? _tansportCoding : null;
            this._getGeoIp = _getGeoIp != null ? _getGeoIp : null;
            this._getTime = _getTime != null ? _getTime : function() {
                return (new Date()).getTime()
            };
            this._$ = _$ != null ? _$ : $;
            this._elementId = _elementId != null ? _elementId : "lsid";
            this._keepHashInLocation = _keepHashInLocation != null ? _keepHashInLocation : false;
            this._dialogHideDisabled = _dialogHideDisabled != null ? _dialogHideDisabled : false;
            if (!this.isFunction(this._tansportCoding)) {
                this._tansportCoding = null
            }
            if (!this.isFunction(this._getGeoIp)) {
                this._getGeoIp = null
            }
            if (this._url.substr(-1) !== '/') {
                this._url += '/'
            }
            this._socialAPIenabled = {};
            proxyUrl = this._url.substring(6, this._url.length - 1);
            if (proxyUrl.indexOf(":") !== -1) {
                proxyUrl = proxyUrl.substr(0, proxyUrl.indexOf(":"))
            }
            this._socialAPI.settings.oauth_proxy = this._url.substr(0, 6) + proxyUrl + ':8443/';
            if (this._socialAPI.services != null) {
                for (serviceName in this._socialAPI.services) {
                    service = this._socialAPI.services[serviceName];
                    if (service.id != null) {
                        this._socialAPIenabled[serviceName] = true
                    }
                }
            }
            this._requestData = null;
            this._requestForm = null;
            this._persistent = null;
            this._email = null;
            this._nickname = null;
            this._hash = null;
            this._data = {};
            this._submittedForms = {};
            this._callbacks = {};
            this._dialogAutocloseTimeout = null;
            this._loadData();
            this._dataAutosyncIntervalId = null;
            this._dataAutosyncLastDataEdit = 0;
            this._dataAutosyncLastSync = parseInt(this._read('dataAutosyncRequest'));
            this._dataAutosyncBrowserIntervalId = null;
            this._browserDataSign = this._read(this._dataStorageSignKey);
            this._utilConfig = this._dic.get('utilConfig');
            this._trans = {};
            for (key in trans) {
                label = trans[key];
                this._trans[key] = label
            }
            this._$((function(lsid) {
                return function() {
                    lsid._transportForm = lsid._$("#" + lsid._elementId + "-remember-login-form").get(0);
                    if (lsid._transportForm) {
                        lsid._transportFormEmail = lsid._$(lsid._transportForm).find('#email');
                        lsid._transportFormPasswd = lsid._$(lsid._transportForm).find('#passwd')
                    }
                    lsid._display();
                    lsid._hashExecute();
                    if (!lsid._dialogHideDisabled) {
                        lsid._$(window).bind('hashchange', function() {
                            return lsid._hashExecute()
                        });
                        lsid._$(window).bind('keyup', function(e) {
                            if (e.keyCode === 27) {
                                return lsid._hideDialog('key')
                            }
                        })
                    }
                    lsid._startDataAutosync();
                    return lsid._startDataAutosyncBrowser()
                }
            })(this))
        }
        LoginClient.prototype._loadData = function() {
            this._data = this.loggedIn() ? JSON.parse(this._read(this._dataStorageKey)) : {};
            if (!this._data) {
                this._data = {}
            }
            this._email = this._read('email');
            this._nickname = this._read('nickname');
            return this._hash = this._read('hash')
        };
        LoginClient.prototype.email = function(email) {
            if (email == null) {
                email = null
            }
            if ((email != null) && this._email !== email) {
                this._email = email;
                this._store('email', this._email)
            }
            if (this._email === null) {
                this._email = this._read('email')
            }
            return this._email
        };
        LoginClient.prototype.nickname = function(nickname) {
            if (nickname == null) {
                nickname = null
            }
            if ((nickname != null) && this._nickname !== nickname) {
                this._nickname = nickname;
                this._store('nickname', this._nickname)
            }
            if (this._nickname === null) {
                this._nickname = this._read('nickname')
            }
            return this._nickname
        };
        LoginClient.prototype.namespace = function() {
            return this._namespace
        };
        LoginClient.prototype.hash = function(hash) {
            if (hash == null) {
                hash = null
            }
            if ((hash != null) && this._hash !== hash) {
                this._hash = hash;
                this._store('hash', this._hash)
            }
            if (this._hash === null) {
                this._hash = this._read('hash')
            }
            return this._hash
        };
        LoginClient.prototype.persistent = function(persistent) {
            if (typeof persistent !== 'undefined') {
                this._persistent = persistent;
                this._storage.store(this._dataStorePrefix + 'persistent', (this._persistent ? 1 : 0), (this._persistent ? this._persistDataTtl : this._nonpersistDataTtl))
            }
            if (this._persistent === null) {
                this._persistent = parseInt(this._storage.get(this._dataStorePrefix + 'persistent'))
            }
            return this._persistent
        };
        LoginClient.prototype.trans = function(key) {
            if (!this._trans.hasOwnProperty(key)) {
                return "[X]" + key
            }
            return this._trans[key]
        };
        LoginClient.prototype.getIdent = function() {
            if (!(this.loggedIn() && typeof window.btoa === 'function')) {
                return null
            }
            return window.btoa(this.email() + this.namespace())
        };
        LoginClient.prototype._store = function(key, data) {
            var ttl;
            ttl = this.persistent() ? this._persistDataTtl : this._nonpersistDataTtl;
            key = this._dataStorePrefix + key;
            if (this.persistent()) {
                return this._storage.store(key, data, ttl)
            } else {
                return this._storage.store_in_session(key, data, ttl)
            }
        };
        LoginClient.prototype._read = function(key) {
            key = this._dataStorePrefix + key;
            if (this.persistent()) {
                return this._storage.get(key)
            } else {
                return this._storage.get_from_session(key)
            }
        };
        LoginClient.prototype._drop = function(key) {
            if (this['_' + key] != null) {
                this['_' + key] = null
            }
            key = this._dataStorePrefix + key;
            if (this.persistent()) {
                return this._storage.drop(key)
            } else {
                return this._storage.store_in_session(key, '', -5000)
            }
        };
        LoginClient.prototype._hashExecute = function() {
            var cmd, cmdRegexp, elemsContent, hash, params, parsedHash;
            hash = location.hash;
            if (/%7B%22/.test(hash) || /\{%22/.test(hash)) {
                hash = decodeURIComponent(hash)
            }
            cmdRegexp = /\[lsid:([a-zA-Z]+)(:(\{.*\}))*\]/;
            if (cmdRegexp.test(hash)) {
                parsedHash = hash.match(cmdRegexp);
                cmd = parsedHash[1];
                params = parsedHash[3] != null ? JSON.parse(parsedHash[3]) : null;
                if (!this._keepHashInLocation) {
                    location.hash = hash.replace(cmdRegexp, '!')
                }
                switch (cmd) {
                    case "login":
                        return this.showDialog('login');
                    case "registration":
                        return this.showDialog('registration');
                    case "forgottenPassword":
                        return this.showDialog('forgottenPassword');
                    case "verification":
                        if (((params != null ? params.r : void 0) != null) && params.r === this.respCodes.done) {
                            return this._verificationOkProceed((params.m != null) && this.mailRegexp.test(params.m) ? params.m : void 0)
                        }
                        if (!(((params != null ? params.m : void 0) != null) && (params.c != null) && this._verification({
                                "email": {
                                    "value": params.m
                                },
                                "verificationcode": {
                                    "value": params.c
                                }
                            }))) {
                            elemsContent = ((params != null ? params.m : void 0) != null) && params.m ? [{
                                "selector": "#email",
                                "functionName": "val",
                                "params": [params.m]
                            }] : [];
                            if ((params.err != null) && params.err === this.errorCodes.verificationFail) {
                                elemsContent.push({
                                    "selector": ".verification .error-box",
                                    "functionName": "append",
                                    "params": ['<span class="err-msg">' + this.trans('verificationCodeError') + '</span>']
                                });
                                elemsContent.push({
                                    "selector": ".verification .error-box",
                                    "functionName": "show",
                                    "params": []
                                })
                            }
                            return this.showDialog('verification', elemsContent)
                        }
                        break;
                    case "passwordChange":
                        if (((params != null ? params.m : void 0) != null) && (params.c != null) && this.mailRegexp.test(params.m) && this.verificationCodeRegexp.test(params.c)) {
                            elemsContent = [{
                                "selector": "#email",
                                "functionName": "val",
                                "params": [params.m]
                            }, {
                                "selector": ".passwordchange form",
                                "functionName": "append",
                                "params": ['<input type="hidden" value="' + params.c + '" id="code" name="code">']
                            }, {
                                "selector": ".passwordchange .password-form-element",
                                "functionName": "remove",
                                "params": []
                            }];
                            return this.showDialog('passwordChange', elemsContent)
                        }
                        if (params) {
                            return this._showMessage(this.trans('verificationPassChangeCodeError'), true)
                        }
                        if (this.loggedIn()) {
                            return this.showDialog('passwordChange')
                        }
                }
            }
        };
        LoginClient.prototype._display = function() {
            var content, loginDiv;
            loginDiv = this._$("#" + this._elementId);
            if (!loginDiv.length) {
                loginDiv = this._$(document.createElement('div'));
                loginDiv.attr('id', this._elementId);
                this._$('body').prepend(loginDiv)
            }
            content = this._$(document.createElement('div'));
            content.attr('id', this._elementId + "-content");
            if (this.loggedIn()) {
                content.html('<div class="user lsid-rounded-box black"><span class="icon"></span><span class="email">' + (this.nickname() === this.emptyNickname ? this.email() : this.nickname()) + '</span><span class="buttons"><span class="wrapper"><span id="settings" class="icon" title="' + this.trans('settings') + '"></span></span><span class="wrapper"><span id="signOut" class="icon" title="' + this.trans('signOut') + '"></span></span></span></div>');
                content.find('#signOut').click((function(lsid) {
                    return function() {
                        var error, error1;
                        try {
                            lsid._logout()
                        } catch (error1) {
                            error = error1
                        }
                        return false
                    }
                })(this));
                content.find('#settings').click((function(lsid) {
                    return function() {
                        var error, error1;
                        try {
                            lsid.showDialog('settings')
                        } catch (error1) {
                            error = error1
                        }
                        return false
                    }
                })(this))
            } else {
                content.html('<div class="buttons">' + (this._socialAPIenabled.facebook != null ? '<div id="signInFB" class="lsid-rounded-box blue"><span class="icon FB"></span>' + this.trans('signInFB') + '</div>' : '') + '<div id="signIn" class="lsid-rounded-box black" ' + (this._utilConfig.get('app', 'google_analytics', 'event_tracking') ? 'onclick = "e_t.track_click(\'web-click\', \'login\');return false;" ' : '') + '>' + this.trans('signIn') + '</div><div id="registration" class="lsid-rounded-box" ' + (this._utilConfig.get('app', 'google_analytics', 'event_tracking') ? 'onclick = "e_t.track_click(\'web-click\', \'registration\');return false;" ' : '') + '>' + this.trans('registration') + '</div>' + '</div>');
                content.find('#signIn').click((function(lsid) {
                    return function(e) {
                        var error, error1;
                        e.preventDefault();
                        try {
                            lsid.showDialog('login')
                        } catch (error1) {
                            error = error1
                        }
                        return false
                    }
                })(this));
                content.find('#registration').click((function(lsid) {
                    return function(e) {
                        var error, error1;
                        e.preventDefault();
                        try {
                            lsid.showDialog('registration')
                        } catch (error1) {
                            error = error1
                        }
                        return false
                    }
                })(this));
                content.find('#signInFB').click((function(lsid) {
                    return function(e) {
                        var error, error1;
                        e.preventDefault();
                        try {
                            lsid._loginUsingProvider("facebook")
                        } catch (error1) {
                            error = error1;
                            cerr(error)
                        }
                        return false
                    }
                })(this))
            }
            loginDiv.find("#" + this._elementId + "-content").remove();
            return loginDiv.append(content)
        };
        LoginClient.prototype._showMessage = function(msg, err, time, animTime) {
            var message, msgDiv;
            if (err == null) {
                err = false
            }
            if (time == null) {
                time = 4
            }
            if (animTime == null) {
                animTime = 0.2
            }
            msgDiv = this._$(document.createElement('div'));
            msgDiv.addClass(this._elementId + "-messages");
            message = this._$(document.createElement('div'));
            message.addClass("message");
            if (err) {
                message.addClass("err")
            }
            message.html(msg);
            msgDiv.append(message);
            return this._showDialog(msgDiv, null, time)
        };
        LoginClient.prototype._showDialog = function(content, callback, autoCloseTime, useDialogWindowClass, dialogName) {
            var close, contentWrap, contentWrapClone, dialogLeft, doneCallback, hide, mask, maxZIndex, myWindow, myWindowClone;
            if (content == null) {
                content = ""
            }
            if (callback == null) {
                callback = null
            }
            if (autoCloseTime == null) {
                autoCloseTime = null
            }
            if (useDialogWindowClass == null) {
                useDialogWindowClass = true
            }
            if (dialogName == null) {
                dialogName = null
            }
            doneCallback = (function(lsid) {
                return function() {
                    if (typeof callback === "function") {
                        callback()
                    }
                    return lsid.formFocus(lsid._$("#" + lsid._elementId + "-window div.selected form"))
                }
            })(this);
            myWindow = this._$("#" + this._elementId + "-window");
            if (this._dialogHideDisabled) {
                close = "";
                hide = function() {}
            } else {
                close = "<a id=\"" + this._elementId + "-window-close\" class=\"close\" href=\"#\" title=\"" + (this.trans('closeWindow')) + "\"></a>";
                hide = (function(_this) {
                    return function(method) {
                        if (method == null) {
                            method = null
                        }
                        return function(e) {
                            if (e != null) {
                                e.preventDefault()
                            }
                            _this._hideDialog(method);
                            return _this._hideLoading()
                        }
                    }
                })(this)
            }
            clearTimeout(this._dialogAutocloseTimeout);
            if (autoCloseTime) {
                this._dialogAutocloseTimeout = setTimeout((function() {
                    return hide('timeout')()
                }), autoCloseTime * 1000)
            }
            if (myWindow.length) {
                mask = this._$("#" + this._elementId + "-window-mask");
                if (dialogName) {
                    myWindow.attr("data-window-name", dialogName);
                    mask.attr("data-window-name", dialogName)
                } else {
                    mask.removeAttr("data-window-name");
                    myWindow.removeAttr("data-window-name")
                }
                myWindowClone = myWindow.clone();
                myWindowClone.css({
                    'visibility': 'hidden'
                });
                contentWrapClone = myWindowClone.children(".content-wrap");
                contentWrapClone.html(content);
                contentWrapClone.css({
                    'opacity': '0'
                });
                contentWrap = myWindow.children(".content-wrap");
                contentWrap.css({
                    'width': contentWrap.width(),
                    'height': contentWrap.height()
                });
                contentWrap.animate({
                    'opacity': '0'
                }, function() {
                    return myWindow.animate({
                        'left': dialogLeft
                    })
                });
                $('body').append(myWindowClone);
                dialogLeft = (contentWrap.width() - contentWrapClone.width()) / 2;
                dialogLeft = "+=" + dialogLeft;
                return contentWrap.animate({
                    'height': contentWrapClone.height(),
                    'width': contentWrapClone.width()
                }, (function(lsid) {
                    return function() {
                        lsid._$(this).replaceWith(contentWrapClone);
                        myWindowClone.remove();
                        contentWrapClone.animate({
                            'opacity': '1'
                        });
                        doneCallback();
                        return lsid._fixedDialog()
                    }
                })(this))
            } else {
                maxZIndex = this._dic.get('util_element').findHighestZindex() + 1;
                mask = this._$(document.createElement('div'));
                mask.attr('id', this._elementId + "-window-mask");
                if (dialogName) {
                    mask.attr("data-window-name", dialogName)
                }
                mask.css({
                    'z-index': maxZIndex
                });
                this._$('body').prepend(mask);
                myWindow = this._$(document.createElement('div'));
                myWindow.attr('id', this._elementId + "-window");
                if (dialogName) {
                    myWindow.attr("data-window-name", dialogName)
                }
                myWindow.css({
                    'z-index': maxZIndex + 1
                });
                if (useDialogWindowClass && this._dialogWindowClass) {
                    myWindow.addClass(this._dialogWindowClass)
                }
                contentWrap = document.createElement('div');
                this._$(contentWrap).addClass('content-wrap').html(content);
                myWindow.append(close);
                myWindow.append(contentWrap);
                this._$('body').prepend(myWindow);
                this._repositionDialog();
                myWindow.css({
                    'opacity': '0'
                });
                myWindow.show();
                mask.fadeTo(200, 0.6, (function(lsid) {
                    return function() {
                        doneCallback();
                        return myWindow.animate({
                            'opacity': '1'
                        }, 300, function() {
                            return lsid._fixedDialog()
                        })
                    }
                })(this));
                mask.click((function(e) {
                    return hide("clickout")(e)
                }));
                return myWindow.find('.close').click((function(e) {
                    return hide("button")(e)
                }))
            }
        };
        LoginClient.prototype._showDialogTrigger = function(dialogName) {
            var ref;
            if ((((ref = this.dialogs[dialogName]) != null ? ref.showTrigger : void 0) != null) && this.isFunction(this.dialogs[dialogName].showTrigger)) {
                return this.dialogs[dialogName].showTrigger(this)
            }
        };
        LoginClient.prototype._repositionDialog = function() {
            var myWindow;
            if (this._repositionDialogBinded == null) {
                this._$(window).resize((function(myObj) {
                    return function() {
                        return myObj._repositionDialog()
                    }
                })(this))
            }
            this._repositionDialogBinded = true;
            myWindow = this._$("#" + this._elementId + "-window");
            myWindow.css({
                'top': 200,
                'left': Math.max(this._$(window).width() / 2 - myWindow.width() / 2, 0)
            });
            return this._fixedDialog()
        };
        LoginClient.prototype._fixedDialog = function() {
            var myWindow;
            myWindow = this._$("#" + this._elementId + "-window");
            myWindow.removeClass('long');
            if ((this._$(window).height() < myWindow.height() + 200) || this._$(window).width() < myWindow.width() || /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent)) {
                return myWindow.addClass('long')
            }
        };
        LoginClient.prototype._hideDialog = function(method) {
            var dialogName;
            if (method == null) {
                method = null
            }
            dialogName = this._$("#" + this._elementId + "-window-mask").attr("data-window-name");
            if (dialogName) {
                this._runCallback('hideDialog', {
                    'dialogName': dialogName,
                    'method': method
                })
            }
            this._repositionDialogBinded = false;
            this._$("#" + this._elementId + "-window").remove();
            return this._$("#" + this._elementId + "-window-mask").remove()
        };
        LoginClient.prototype._showLoading = function() {
            var loading;
            loading = this._$(document.createElement('div'));
            loading.attr('id', this._elementId + "-loading");
            loading.addClass('preload');
            loading.append(this._$(document.createElement('span')).text('Loading ...'));
            return this._$("#" + this._elementId + "-window").prepend(loading)
        };
        LoginClient.prototype._hideLoading = function() {
            return this._$("#" + this._elementId + "-loading").remove()
        };
        LoginClient.prototype._transportAutocomplete = function(form) {
            var e, error1;
            if (!this._transportForm) {
                return false
            }
            if (this._$.browser.mozzila != null) {
                return false
            }
            try {
                this._$(this._transportForm).find('div').html('');
                this._$(this._transportForm).find("div").append(this._$(form).find('#email').clone());
                this._$(this._transportForm).find("div").append(this._$(form).find('#passwd').clone());
                this._$(this._transportForm).find("div").append(this._$(form).find('#login').clone());
                this._transportForm.submit();
                return true
            } catch (error1) {
                e = error1;
                return false
            }
        };
        LoginClient.prototype._request = function(callback, url, data, longTimeout) {
            var req;
            if (callback == null) {
                callback = (function() {
                    return null
                })
            }
            if (data == null) {
                data = null
            }
            if (longTimeout == null) {
                longTimeout = false
            }
            if (url.substr(-1) !== '/') {
                url += '/'
            }
            req = {
                url: this._url + url,
                timeout: longTimeout ? this._requestLongTimeout : this._requestTimeout,
                dataType: 'jsonp',
                jsonpCallback: 'lsid' + Math.random().toString().substr(-8),
                success: (function(obj, callback) {
                    return function(data, textStatus, jqXHR) {
                        if (jqXHR.status === 200) {
                            return callback.call(obj, data)
                        } else {
                            return callback.call(obj, data, jqXHR.status)
                        }
                    }
                })(this, callback),
                error: (function(obj, callback) {
                    return function(jqXHR, textStatus, errorThrown) {
                        return callback.call(obj, null, jqXHR.status)
                    }
                })(this, callback)
            };
            if (data != null) {
                data.namespace = this._namespace
            }
            if (this._tansportCoding && (data != null)) {
                data = {
                    lsidcc: this._tansportCoding(data)
                }
            }
            if (data != null) {
                req.data = data
            }
            return this._$.ajax(req)
        };
        LoginClient.prototype._addErrorToForm = function(form, elementSelector, message, hideErrorMessageBox) {
            var errMsgBox;
            if (hideErrorMessageBox == null) {
                hideErrorMessageBox = false
            }
            errMsgBox = this._$(form).find('.error-box');
            if (hideErrorMessageBox) {
                this._hideErrorMessageBox(form)
            }
            return (errMsgBox.length ? errMsgBox : this._$(form).find('elementSelector').parent()).append('<span class="err-msg">' + message + '</span>')
        };
        LoginClient.prototype._showErrorMessageBox = function(form) {
            return this._$(form).find('.error-box').show()
        };
        LoginClient.prototype._hideErrorMessageBox = function(form) {
            return this._$(form).find('.error-box').hide()
        };
        LoginClient.prototype._registration = function(form) {
            var captchaVal, err, newCaptcha, prePassCheckErrCount, user;
            if (this._submittedForms.registrationVerificationLogin) {
                return
            }
            this._$(form).find('.err-msg').remove();
            this._$(form).find('.err-input').removeClass('err-input');
            this._hideErrorMessageBox(form);
            err = 0;
            newCaptcha = false;
            if (typeof grecaptcha !== "undefined" && grecaptcha !== null) {
                newCaptcha = true
            }
            user = {
                email: form.email.value,
                password: form.passwd.value,
                nickname: this.emptyNickname,
                project: this._projectIdent,
                termsofservice: form.termsofservice.checked,
                cX: newCaptcha ? grecaptcha.getResponse() : null,
                cCh: !newCaptcha ? Recaptcha.get_challenge() : null,
                cR: !newCaptcha ? Recaptcha.get_response() : null
            };
            if (!this.mailRegexp.test(user.email)) {
                this._$(form).find('#email').addClass('err-input');
                this._addErrorToForm(form, '#email', this.trans('emailError'));
                err++
            }
            prePassCheckErrCount = err;
            if (!this.passwordRegexp.test(user.password)) {
                this._$(form).find('#passwd').addClass('err-input');
                this._addErrorToForm(form, '#passwd', this.trans('passwordError'));
                err++
            } else {
                if (!newCaptcha && (user.password !== form.passwdagain.value)) {
                    this._$(form).find('#passwd').addClass('err-input');
                    this._$(form).find('#passwdagain').addClass('err-input');
                    this._addErrorToForm(form, '#passwdagain', this.trans('passwordMissmatchError'));
                    err++
                }
            }
            if (prePassCheckErrCount < err) {
                form.passwd.value = '';
                form.passwdagain.value = ''
            }
            if (newCaptcha) {
                captchaVal = user.cX
            } else {
                captchaVal = user.cR
            }
            if (!this.nonemptyRegexp.test(captchaVal)) {
                this._$(form).find('#recaptcha_response_field').addClass('err-input');
                this._addErrorToForm(form, '#recaptcha_response_field', this.trans('captchaEmptyError'));
                err++
            }
            if (!form.termsofservice.checked) {
                this._$(form).find('#termsofservice').addClass('err-input');
                this._addErrorToForm(form, '#termsofservice', this.trans('termsError'));
                err++
            }
            if (!err) {
                this._submittedForms.registrationVerificationLogin = true;
                if (this._getGeoIp) {
                    user.geoIp = this._getGeoIp()
                }
                this._requestForm = form;
                this._registrationRequest(user);
                return true
            } else {
                this._showErrorMessageBox(form);
                return false
            }
        };
        LoginClient.prototype._registrationRequest = function(user) {
            this._showLoading();
            this._requestData = user;
            return this._request(this._registrationResponse, 'registration', user, true)
        };
        LoginClient.prototype._registrationResponse = function(data, err) {
            var captchaRegenerate;
            if (err == null) {
                err = null
            }
            delete this._submittedForms.registrationVerificationLogin;
            this._hideLoading();
            if (err || (data == null)) {
                this.showTechnicalError();
                return false
            }
            if (data.err != null) {
                captchaRegenerate = function() {
                    if ((typeof Recaptcha !== "undefined" && Recaptcha !== null ? Recaptcha.reload : void 0) != null) {
                        return Recaptcha.reload()
                    }
                };
                switch (data.err) {
                    case this.errorCodes.captchaMissmatch:
                        captchaRegenerate();
                        this._$(this._requestForm).find('#recaptcha_response_field').addClass('err-input');
                        this._addErrorToForm(this._requestForm, '#recaptcha_response_field', this.trans('captchaError'));
                        this._showErrorMessageBox(this._requestForm);
                        break;
                    case this.errorCodes.registrationDuplicate:
                        captchaRegenerate();
                        this._$(this._requestForm).find('#email').addClass('err-input');
                        this._addErrorToForm(this._requestForm, '#email', this.trans('emailUsedError'));
                        this._$(this._requestForm).find('#recaptcha_response_field').addClass('err-input');
                        this._addErrorToForm(this._requestForm, '#recaptcha_response_field', this.trans('captchaRetypeError'));
                        this._showErrorMessageBox(this._requestForm);
                        break;
                    default:
                        this._hideDialog()
                }
                return false
            }
            if ((data.r != null) && data.r === this.respCodes.done) {
                this._registrationOkMessage(this._requestData.email);
                this._requestData = null;
                this._display();
                this._runCallback('registration');
                return true
            }
            this.showTechnicalError();
            return false
        };
        LoginClient.prototype._registrationOkMessage = function(email) {
            var header, message, msgDiv;
            msgDiv = this._$(document.createElement('div'));
            msgDiv.addClass(this._elementId + "-messages");
            header = this._$(document.createElement('div'));
            header.addClass("header-message");
            msgDiv.append(header);
            message = this._$(document.createElement('div'));
            message.addClass("message");
            message.html(this.trans('registrationOk').replace('%s', email));
            msgDiv.append(message);
            message = this._$(document.createElement('div'));
            message.addClass("message");
            message.addClass("info");
            message.html(this.trans('registrationOkNote'));
            msgDiv.append(message);
            return this._showDialog(msgDiv)
        };
        LoginClient.prototype._verification = function(form) {
            var err, user;
            if (this._submittedForms.registrationVerificationLogin) {
                return
            }
            this._$(form).find('.err-msg').remove();
            this._$(form).find('.err-input').removeClass('err-input');
            this._hideErrorMessageBox(form);
            err = 0;
            user = {
                m: form.email.value,
                c: form.verificationcode.value
            };
            if (!this.mailRegexp.test(user.m)) {
                this._$(form).find('#email').addClass('err-input');
                this._addErrorToForm(form, '#email', this.trans('emailError'));
                err++
            }
            if (!this.verificationCodeRegexp.test(user.c)) {
                form.verificationcode.value = '';
                this._$(form).find('#verificationcode').addClass('err-input');
                this._addErrorToForm(form, '#verificationcode', this.trans('verificationCodeError'));
                err++
            }
            if (!err) {
                this._submittedForms.registrationVerificationLogin = true;
                this._requestForm = form;
                this._verificationRequest(user);
                return true
            } else {
                this._showErrorMessageBox(form);
                return false
            }
        };
        LoginClient.prototype._verificationRequest = function(user) {
            this._showLoading();
            this._requestData = user;
            return this._request(this._verificationResponse, 'verification', user, true)
        };
        LoginClient.prototype._verificationOkProceed = function(email) {
            var loginJq, message, msgDiv;
            if (email == null) {
                email = null
            }
            msgDiv = this._$(document.createElement('div'));
            msgDiv.addClass(this._elementId + "-messages");
            message = this._$(document.createElement('div'));
            message.addClass("message");
            message.text(this.trans('verificationOk'));
            msgDiv.append(message);
            loginJq = [{
                "selector": "#login-form",
                "functionName": "prepend",
                "params": [msgDiv]
            }];
            if (email) {
                loginJq.push({
                    "selector": "#login-form #email",
                    "functionName": "val",
                    "params": [email]
                })
            }
            loginJq.push({
                "selector": "#login-form #passwd",
                "functionName": "focus",
                "params": []
            });
            return this.showDialog('login', loginJq)
        };
        LoginClient.prototype._verificationResponse = function(data, err) {
            var email, ref, ref1, ref2;
            if (err == null) {
                err = null
            }
            delete this._submittedForms.registrationVerificationLogin;
            this._hideLoading();
            if (err || (data == null)) {
                this.showTechnicalError();
                return false
            }
            if (data.err != null) {
                switch (data.err) {
                    case this.errorCodes.verificationFail:
                        if (((ref = this._requestForm) != null ? ref.verification : void 0) != null) {
                            if ((ref1 = this._requestForm) != null ? (ref2 = ref1.verificationcode) != null ? ref2.value : void 0 : void 0) {
                                this._requestForm.verificationcode.value = ''
                            }
                            this._$(this._requestForm).find('#verificationcode').addClass('err-input');
                            this._addErrorToForm(this._requestForm, '#verificationcode', this.trans('verificationCodeError'));
                            this._showErrorMessageBox(this._requestForm)
                        } else {
                            this._showMessage(this.trans('verificationCodeError'), true)
                        }
                        break;
                    default:
                        this._hideDialog()
                }
                return false
            }
            if ((data.r != null) && data.r === this.respCodes.done) {
                email = this._requestData.m;
                this._requestData = null;
                this._requestForm = null;
                this._verificationOkProceed(email);
                return true
            }
            this.showTechnicalError();
            return false
        };
        LoginClient.prototype._login = function(form) {
            var err, user;
            if (this._submittedForms.registrationVerificationLogin) {
                return
            }
            this._$(form).find('.lsid-messages').remove();
            this._$(form).find('.err-msg').remove();
            this._$(form).find('.err-input').removeClass('err-input');
            this._hideErrorMessageBox(form);
            err = 0;
            user = {
                email: form.email.value,
                password: form.passwd.value
            };
            if (form.persistentlogin.checked) {
                user.persistent = 1
            }
            if (!this.mailRegexp.test(user.email)) {
                this._$(form).find('#email').addClass('err-input');
                this._addErrorToForm(form, '#email', this.trans('emailError'));
                err++
            }
            if (!this.passwordRegexp.test(user.password)) {
                this._$(form).find('#passwd').addClass('err-input');
                this._addErrorToForm(form, '#passwd', this.trans('passwordError'));
                form.passwd.value = '';
                err++
            }
            if (!err) {
                this._submittedForms.registrationVerificationLogin = true;
                this._transportAutocomplete(form);
                this._requestForm = form;
                this.persistent(user.persistent != null ? 1 : 0);
                return this._loginRequest(user)
            } else {
                return this._showErrorMessageBox(form)
            }
        };
        LoginClient.prototype._loginRequest = function(user) {
            this._showLoading();
            this._requestData = user;
            return this._request(this._loginResponse, 'login', user, true)
        };
        LoginClient.prototype._loginResponse = function(data, err) {
            var ref, ref1;
            if (err == null) {
                err = null
            }
            delete this._submittedForms.registrationVerificationLogin;
            this._hideLoading();
            if (err || (data == null)) {
                this.showTechnicalError();
                return false
            }
            if (data.err != null) {
                switch (data.err) {
                    case this.errorCodes.loginMissmatch:
                        if ((ref = this._requestForm) != null ? (ref1 = ref.passwd) != null ? ref1.value : void 0 : void 0) {
                            this._requestForm.passwd.value = ''
                        }
                        this._addErrorToForm(this._requestForm, '#email', this.trans('errSignIn'));
                        this._showErrorMessageBox(this._requestForm);
                        break;
                    case this.errorCodes.registrationNotConfirmed:
                        this._showMessage(this.trans('errSignInConfirm'), true, 100000);
                        break;
                    case this.errorCodes.loginProviderNeedsEmail:
                        this.showDialog('socialRegistration', [{
                            "selector": "form#registration-mail-form",
                            "functionName": "submit",
                            "params": [(function(lsid) {
                                return function(e) {
                                    if (e != null) {
                                        e.preventDefault()
                                    }
                                    lsid._loginUsingProviderWOemail(this);
                                    return false
                                }
                            })(this)]
                        }]);
                        break;
                    default:
                        this._hideDialog()
                }
                return false
            }
            if (data.nickname && data.hash) {
                if (data.email != null) {
                    this.email(data.email)
                }
                this._requestData = null;
                this._requestForm = null;
                this.nickname(data.nickname);
                this.hash(data.hash);
                if (data.data != null) {
                    this._data = data.data
                }
                this._storeDataLocal();
                this._showMessage(this.trans('signInOK'));
                this._display();
                this._startDataAutosync();
                this._runCallback('login');
                return true
            }
            this.showTechnicalError();
            return false
        };
        LoginClient.prototype._loginUsingProvider = function(provider, popup) {
            var options;
            if (popup == null) {
                popup = true
            }
            if (this._socialAPIenabled[provider]) {
                options = {
                    network: provider,
                    display: popup ? 'popup' : 'none',
                    scope: 'email'
                };
                return this._socialAPI.login(provider, options, (function(lsid) {
                    return function(response) {
                        var ref, user;
                        if (((ref = response.authResponse) != null ? ref.access_token : void 0) == null) {
                            return lsid._hideDialog()
                        }
                        user = {
                            accessToken: response.authResponse.access_token,
                            provider: provider
                        };
                        return lsid._socialAPI(provider).api('/me', function(response) {
                            if (response.id == null) {
                                return
                            }
                            lsid.persistent(true);
                            user.id = response.id;
                            if (response.email != null) {
                                user.email = response.email
                            } else {
                                user.email = user.id + "@" + user.provider + "-livesport.eu";
                                if (response.name != null) {
                                    user.nickname = response.name
                                }
                                user.no_email = true
                            }
                            user.project = lsid._projectIdent;
                            if (lsid._getGeoIp) {
                                user.geoIp = lsid._getGeoIp()
                            }
                            return lsid._loginRequestUsingProvider(user)
                        })
                    }
                })(this))
            }
        };
        LoginClient.prototype._loginRequestUsingProvider = function(user) {
            this._showLoading();
            this._requestData = user;
            return this._request(this._loginResponse, 'loginusingprovider', user, true)
        };
        LoginClient.prototype._loginUsingProviderWOemail = function(form) {
            var err;
            if (this._submittedForms.loginUsingProviderWOemail) {
                return
            }
            if (this._requestData == null) {
                return this._hideDialog()
            }
            this._$(form).find('.err-msg').remove();
            this._$(form).find('.err-input').removeClass('err-input');
            this._hideErrorMessageBox(form);
            err = 0;
            this._requestData.realEmail = form.email.value;
            if (!this.mailRegexp.test(this._requestData.realEmail)) {
                this._$(form).find('#email').addClass('err-input');
                this._addErrorToForm(form, '#email', this.trans('emailError'));
                err++
            }
            if (!err) {
                this._submittedForms.loginUsingProviderWOemail = true;
                return this._loginRequestUsingProviderWOemail(this._requestData)
            } else {
                return this._showErrorMessageBox(form)
            }
        };
        LoginClient.prototype._loginUsingProviderWOemailResponse = function(data, err) {
            var message, msgDiv;
            if (err == null) {
                err = null
            }
            delete this._submittedForms.loginUsingProviderWOemail;
            this._hideLoading();
            if (err || (data == null)) {
                this.showTechnicalError();
                return false
            }
            if ((data.r != null) && data.r === this.respCodes.done) {
                msgDiv = this._$(document.createElement('div'));
                msgDiv.addClass(this._elementId + "-messages");
                message = this._$(document.createElement('div'));
                message.addClass("message");
                message.html(this.trans('registrationOk').replace('%s', this._requestData.realEmail));
                msgDiv.append(message);
                message = this._$(document.createElement('div'));
                message.addClass("message");
                message.addClass("info");
                message.html(this.trans('registrationOkNote'));
                msgDiv.append(message);
                this._showDialog(msgDiv);
                this._requestData = null;
                this._display();
                return true
            }
            this.showTechnicalError();
            return false
        };
        LoginClient.prototype._loginRequestUsingProviderWOemail = function(user) {
            this._showLoading();
            this._requestData = user;
            return this._request(this._loginUsingProviderWOemailResponse, 'loginusingproviderwoemail', user, true)
        };
        LoginClient.prototype._logoutProcess = function() {
            var user;
            this._drop(this._dataStorageKey);
            user = {
                email: this.email(),
                hash: this.hash()
            };
            this._drop('email');
            this._drop('nickname');
            this._drop('hash');
            this._browserDataSign = Math.random() + "";
            this._store(this._dataStorageSignKey, this._browserDataSign);
            this._display();
            if (!(user.email || user.hash)) {
                return
            }
            return this._logoutRequest(user)
        };
        LoginClient.prototype._logout = function() {
            if (confirm(this.trans('signOutConfirm'))) {
                this._logoutProcess();
                return this._showMessage(this.trans('signOutOk'))
            }
        };
        LoginClient.prototype._logoutHashMismatch = function() {
            this._logoutProcess();
            return this._showMessage(this.trans('serverLogout'), true, 10)
        };
        LoginClient.prototype._logoutRequest = function(user) {
            this._request(null, 'logout', user);
            return this._runCallback('logout')
        };
        LoginClient.prototype._forgottenPassword = function(form) {
            var err, user;
            this._$(form).find('.err-msg').remove();
            this._$(form).find('.err-input').removeClass('err-input');
            this._hideErrorMessageBox(form);
            err = 0;
            user = {
                email: form.email.value,
                p: this._projectIdent
            };
            if (!this.mailRegexp.test(user.email)) {
                this._$(form).find('#email').addClass('err-input');
                this._addErrorToForm(form, '#email', this.trans('emailError'));
                err++
            }
            if (!err) {
                this._requestForm = form;
                return this._forgottenPasswordRequest(user)
            } else {
                return this._showErrorMessageBox(form)
            }
        };
        LoginClient.prototype._forgottenPasswordRequest = function(user) {
            this._requestData = user;
            return this._request(this._forgottenPasswordResponse, 'forgottenpassword', user)
        };
        LoginClient.prototype._forgottenPasswordResponse = function(data, err) {
            if (err == null) {
                err = null
            }
            if (err || (data == null)) {
                this.showTechnicalError();
                return false
            }
            if ((data.r != null) && data.r === this.respCodes.done) {
                this._requestData = null;
                this._requestForm = null;
                this._showMessage(this.trans('forgottenPasswordSendOk'));
                return true
            }
            this.showTechnicalError();
            return false
        };
        LoginClient.prototype._passwordChange = function(form) {
            var err, prePassCheckErrCount, ref, user;
            this._$(form).find('.err-msg').remove();
            this._$(form).find('.err-input').removeClass('err-input');
            this._hideErrorMessageBox(form);
            err = 0;
            user = {
                email: form.email.value,
                newpassword: form.newpasswd.value
            };
            if ((((ref = form.code) != null ? ref.value : void 0) != null) && this.verificationCodeRegexp.test(form.code.value)) {
                user.code = form.code.value
            }
            if (form.passwd != null) {
                user.password = form.passwd.value
            }
            if ((user.password == null) && (user.code == null)) {
                this._showMessage(this.trans('verificationPassChangeCodeError'), true)
            }
            if ((user.password != null) && !this.passwordRegexp.test(user.password)) {
                this._$(form).find('#passwd').addClass('err-input');
                this._addErrorToForm(form, '#passwd', this.trans('passwordError'));
                form.passwd.value = ''
            }
            prePassCheckErrCount = err;
            if (!this.passwordRegexp.test(user.newpassword)) {
                this._$(form).find('#newpasswd').addClass('err-input');
                this._addErrorToForm(form, '#newpasswd', this.trans('passwordError'));
                err++
            } else {
                if (user.newpassword !== form.passwdagain.value) {
                    this._$(form).find('#newpasswd').addClass('err-input');
                    this._$(form).find('#passwdagain').addClass('err-input');
                    this._addErrorToForm(form, '#passwdagain', this.trans('passwordMissmatchError'));
                    err++
                }
            }
            if (prePassCheckErrCount < err) {
                form.newpasswd.value = '';
                form.passwdagain.value = ''
            }
            if (!err) {
                this._requestForm = form;
                return this._passwordChangeRequest(user)
            } else {
                return this._showErrorMessageBox(form)
            }
        };
        LoginClient.prototype._passwordChangeRequest = function(user) {
            this._requestData = user;
            return this._request(this._passwordChangeResponse, 'passwordchange', user)
        };
        LoginClient.prototype._passwordChangeResponse = function(data, err) {
            var ref, ref1;
            if (err == null) {
                err = null
            }
            if (err || (data == null)) {
                this.showTechnicalError();
                return false
            }
            if (data.err != null) {
                switch (data.err) {
                    case this.errorCodes.verificationFail:
                        if (this._requestData.password) {
                            if ((ref = this._requestForm) != null ? (ref1 = ref.passwd) != null ? ref1.value : void 0 : void 0) {
                                this._requestForm.passwd.value = ''
                            }
                            this._$(this._requestForm).find('#passwd').addClass('err-input');
                            this._addErrorToForm(this._requestForm, '#passwd', this.trans('passwordChangeFail'));
                            this._showErrorMessageBox(this._requestForm)
                        } else {
                            this._showMessage(this.trans('verificationPassChangeCodeError'), true)
                        }
                        break;
                    default:
                        this._hideDialog()
                }
                return false
            }
            if ((data.r != null) && data.r === this.respCodes.done) {
                this._requestData = null;
                this._requestForm = null;
                this._showMessage(this.trans('passwordChangeOk'));
                return true
            }
            this.showTechnicalError();
            return false
        };
        LoginClient.prototype._reloadDataRemote = function() {
            var user;
            if (!this.loggedIn()) {
                return null
            }
            user = {
                email: this.email(),
                hash: this.hash()
            };
            return this._request(this._reloadDataRemoteResponse, 'getdata', user, true)
        };
        LoginClient.prototype._reloadDataRemoteResponse = function(data, err) {
            var dataDiff, dataDiffs, diffParts, j, len1, results;
            if (err == null) {
                err = null
            }
            if (data == null) {
                return
            }
            if (data.err != null) {
                return this._logoutHashMismatch()
            }
            if ((data.r != null) && data.r === this.respCodes.done) {
                dataDiffs = this.objectsDiff(data.data, this._data);
                if (dataDiffs.length) {
                    this._data = data.data;
                    this._storeDataLocal();
                    this._runCallback('dataSyncChange');
                    results = [];
                    for (j = 0, len1 = dataDiffs.length; j < len1; j++) {
                        dataDiff = dataDiffs[j];
                        if (dataDiff.indexOf(';') !== -1) {
                            continue
                        }
                        diffParts = dataDiff.split('|');
                        if (diffParts[1] != null) {
                            results.push(this._runCallback("dataSyncChange/" + diffParts[1], diffParts[0]))
                        } else {
                            results.push(void 0)
                        }
                    }
                    return results
                }
            }
        };
        LoginClient.prototype._dataAutosync = function(force) {
            var timestamp;
            if (force == null) {
                force = false
            }
            if (!this.loggedIn()) {
                return clearInterval(this._dataAutosyncIntervalId)
            }
            timestamp = this._getTime();
            if (!force) {
                if ((this._dataAutosyncLastDataEdit + this._requestTimeout) > timestamp) {
                    return
                }
                if ((this._dataAutosyncLastSync + this._dataAutosyncRequestInterval) > timestamp) {
                    return
                }
            }
            this._store('dataAutosyncRequest', timestamp);
            this._dataAutosyncLastSync = timestamp;
            return this._reloadDataRemote()
        };
        LoginClient.prototype._startDataAutosync = function() {
            this._dataAutosync();
            return setTimeout((function(lsid) {
                return function() {
                    return lsid._dataAutosyncIntervalId = setInterval(function() {
                        return lsid._dataAutosync()
                    }, lsid._dataAutosyncInterval)
                }
            })(this), Math.floor(Math.random() * this._dataAutosyncRequestInterval))
        };
        LoginClient.prototype._dataAutosyncBrowser = function() {
            var dataDiffs, oldData;
            if (this._browserDataSign === this._read(this._dataStorageSignKey)) {
                return
            }
            this._browserDataSign = this._read(this._dataStorageSignKey);
            oldData = this._$.extend({}, this._data, true);
            this._loadData();
            dataDiffs = this.objectsDiff(this._data, oldData);
            this._display();
            if (this.loggedIn()) {
                if (dataDiffs.length) {
                    return this._runAutosyncCallbacks(dataDiffs)
                } else {
                    return this._runCallback('login')
                }
            } else {
                return this._runCallback('logout')
            }
        };
        LoginClient.prototype._runAutosyncCallbacks = function(dataDiffs) {
            var dataDiff, diffParts, j, len1, results;
            results = [];
            for (j = 0, len1 = dataDiffs.length; j < len1; j++) {
                dataDiff = dataDiffs[j];
                if (dataDiff.indexOf(';') !== -1) {
                    continue
                }
                diffParts = dataDiff.split('|');
                if (diffParts[1] != null) {
                    results.push(this._runCallback("dataSyncChange/" + diffParts[1], diffParts[0]))
                } else {
                    results.push(void 0)
                }
            }
            return results
        };
        LoginClient.prototype._startDataAutosyncBrowser = function() {
            return this._dataAutosyncBrowserIntervalId = setInterval((function(_this) {
                return function() {
                    return _this._dataAutosyncBrowser()
                }
            })(this), this._dataAutosyncBrowserInterval)
        };
        LoginClient.prototype._storeDataLocal = function() {
            this._store(this._dataStorageKey, JSON.stringify(this._data));
            this._browserDataSign = Math.random() + "";
            return this._store(this._dataStorageSignKey, this._browserDataSign)
        };
        LoginClient.prototype._storeDataRemote = function(user, confirmCallback, failCallback) {
            return this._request(this._storeRemoveDataRemoteResponseCreate(confirmCallback, failCallback), 'storedata', user)
        };
        LoginClient.prototype._storeMergedDataRemote = function(user, confirmCallback, failCallback) {
            return this._request(this._storeRemoveDataRemoteResponseCreate(confirmCallback, failCallback), 'storemergeddata', user)
        };
        LoginClient.prototype._removeDataRemote = function(user, confirmCallback, failCallback) {
            return this._request(this._storeRemoveDataRemoteResponseCreate(confirmCallback, failCallback), 'removedata', user)
        };
        LoginClient.prototype._storeRemoveDataRemoteResponseCreate = function(confirmCallback, failCallback) {
            if (!this.isFunction(confirmCallback)) {
                confirmCallback = function() {}
            }
            if (!this.isFunction(failCallback)) {
                failCallback = function() {}
            }
            return function(data, err) {
                if (err == null) {
                    err = null
                }
                if (err || (data == null)) {
                    this._runAsyncCallback(failCallback);
                    return false
                }
                if (data.err != null) {
                    this._logoutHashMismatch();
                    this._runAsyncCallback(failCallback);
                    return false
                }
                if ((data.r != null) && data.r === this.respCodes.done) {
                    this._runAsyncCallback(confirmCallback);
                    return true
                }
            }
        };
        LoginClient.prototype.showTechnicalError = function() {
            return this._showMessage(this.trans('errTechnical'), true)
        };
        LoginClient.prototype.showDialog = function(dialogName, elemsSettings) {
            var callback, ref, ref1;
            if (elemsSettings == null) {
                elemsSettings = []
            }
            if ((((ref = this.dialogs[dialogName]) != null ? ref.content : void 0) != null) && this.dialogs[dialogName].content) {
                callback = (function(lsid, dialogName) {
                    return function() {
                        lsid._showDialogTrigger(dialogName);
                        return lsid._runJqueryOnElems(elemsSettings)
                    }
                })(this, dialogName);
                this._showDialog(this.dialogs[dialogName].content, callback, null, true, dialogName)
            } else {
                this._showDialogTrigger(dialogName)
            }
            if (!((((ref1 = this.dialogs[dialogName]) != null ? ref1.content : void 0) != null) && this.dialogs[dialogName].content || dialogName === 'shared')) {
                return this.showDialog('shared', elemsSettings)
            }
        };
        LoginClient.prototype.loginFill = function(form) {
            if (!form) {
                return false
            }
            this._$(form).find("#email").replaceWith(this._transportFormEmail);
            this._$(form).find("#passwd").replaceWith(this._transportFormPasswd);
            return true
        };
        LoginClient.prototype.formFocus = function(form) {
            return this._$(form).find('input:not(:disabled)').each((function(jquery) {
                return function() {
                    if (this.type === 'text' || this.type === 'password') {
                        jquery(this).focus();
                        return false
                    }
                    return true
                }
            })(this._$))
        };
        LoginClient.prototype._runJqueryOnElems = function(elemsSettings) {
            var elemSetting, j, len1, results;
            if (elemsSettings == null) {
                elemsSettings = []
            }
            results = [];
            for (j = 0, len1 = elemsSettings.length; j < len1; j++) {
                elemSetting = elemsSettings[j];
                if (!((elemSetting.selector != null) && (elemSetting.functionName != null) && (elemSetting.params != null))) {
                    continue
                }
                if ($()[elemSetting.functionName] != null) {
                    results.push($()[elemSetting.functionName].apply($(elemSetting.selector), elemSetting.params))
                } else {
                    results.push(void 0)
                }
            }
            return results
        };
        LoginClient.prototype._runAsyncCallback = function(callback, params) {
            if (params == null) {
                params = []
            }
            if (!this.isFunction(callback)) {
                callback = function() {}
            }
            return setTimeout((function(lsid, callbackFunction) {
                return function() {
                    return callbackFunction.apply(lsid, params)
                }
            })(this, callback), 0)
        };
        LoginClient.prototype._runCallback = function(triggerName, param) {
            var callback, j, len1, ref, results;
            if (triggerName == null) {
                triggerName = ''
            }
            if (param == null) {
                param = null
            }
            if (this._callbacks[triggerName] != null) {
                ref = this._callbacks[triggerName];
                results = [];
                for (j = 0, len1 = ref.length; j < len1; j++) {
                    callback = ref[j];
                    results.push(this._runAsyncCallback(callback, [param]))
                }
                return results
            }
        };
        LoginClient.prototype.loggedIn = function() {
            return this.email() && this.nickname && this.hash()
        };
        LoginClient.prototype.getData = function(key) {
            var dataPart, j, keyPart, keyParts, len1;
            if (key == null) {
                key = false
            }
            if (!this.loggedIn()) {
                return null
            }
            if (!key) {
                return this._data
            }
            dataPart = this._data;
            keyParts = key.split('.');
            for (j = 0, len1 = keyParts.length; j < len1; j++) {
                keyPart = keyParts[j];
                if (dataPart == null) {
                    break
                }
                dataPart = dataPart[keyPart] != null ? dataPart[keyPart] : null
            }
            return dataPart
        };
        LoginClient.prototype.storeData = function(data, key, confirmCallback, failCallback, onlyLocal) {
            var dataPart, depth, failCallbackDataRollback, j, keyPart, keyParts, len1, prevKeyPart, storeDepth, user;
            if (data == null) {
                data = {}
            }
            if (key == null) {
                key = false
            }
            if (onlyLocal == null) {
                onlyLocal = false
            }
            if (!this.loggedIn()) {
                return null
            }
            this._dataAutosyncLastDataEdit = this._getTime();
            this._dataAutosyncBrowser();
            user = {
                email: this.email(),
                hash: this.hash(),
                data: JSON.stringify(data),
                key: key
            };
            if (!key) {
                this._data = data
            } else {
                dataPart = null;
                keyParts = key.split('.');
                storeDepth = keyParts.length - 1;
                if (storeDepth === 0) {
                    this._data[key] = data
                } else {
                    for (depth = j = 0, len1 = keyParts.length; j < len1; depth = ++j) {
                        keyPart = keyParts[depth];
                        if (dataPart == null) {
                            if (this._data[keyPart] == null) {
                                this._data[keyPart] = {}
                            }
                            prevKeyPart = keyPart;
                            dataPart = this._data
                        } else {
                            if (dataPart[prevKeyPart][keyPart] == null) {
                                dataPart[prevKeyPart][keyPart] = {}
                            }
                            if (storeDepth === depth) {
                                dataPart[prevKeyPart][keyPart] = data
                            }
                            dataPart = dataPart[prevKeyPart];
                            prevKeyPart = keyPart
                        }
                    }
                }
            }
            if (!onlyLocal) {
                failCallbackDataRollback = function() {
                    return this.removeData(key, failCallback, null, true)
                };
                this._storeDataRemote(user, confirmCallback, failCallbackDataRollback)
            }
            this._storeDataLocal();
            if (onlyLocal && this.isFunction(confirmCallback)) {
                confirmCallback()
            }
            return true
        };
        LoginClient.prototype._removeDataTree = function(key, data) {
            var actualKey, anyKey, deletedKey, firstDotIndex, restOfKey;
            if (data == null) {
                data = {
                    part: this._data
                }
            }
            if (key == null) {
                return
            }
            firstDotIndex = key.indexOf('.');
            if (firstDotIndex === -1) {
                delete data.part[key];
                return key
            } else {
                actualKey = key.substring(0, firstDotIndex);
                if (data.part[actualKey] == null) {
                    return key
                }
                restOfKey = key.substring(firstDotIndex + 1);
                deletedKey = this._removeDataTree(restOfKey, {
                    part: data.part[actualKey]
                });
                for (anyKey in data.part[actualKey]) {
                    return deletedKey
                }
                delete data.part[actualKey];
                return actualKey + '.' + deletedKey
            }
        };
        LoginClient.prototype.tryDataAutosync = function(lastSyncObject) {
            var lastSyncTimestamp;
            lastSyncTimestamp = 0;
            if (typeof lastSyncObject === "number") {
                lastSyncTimestamp = lastSyncObject
            } else if ((lastSyncObject.hash != null) && (lastSyncObject.time != null)) {
                if (this.hash() === lastSyncObject.hash) {
                    return
                }
                lastSyncTimestamp = lastSyncObject.time
            }
            if (this._dataAutosyncLastSync < lastSyncTimestamp) {
                return this._dataAutosync(true)
            }
        };
        LoginClient.prototype.removeData = function(key, confirmCallback, failCallback, onlyLocal) {
            var dataForRollback, failCallbackDataRollback, firstDotIndex, keyForRollback, removedTree, user;
            if (key == null) {
                key = false
            }
            if (onlyLocal == null) {
                onlyLocal = false
            }
            if (!this.loggedIn()) {
                return null
            }
            this._dataAutosyncLastDataEdit = this._getTime();
            this._dataAutosyncBrowser();
            keyForRollback = key;
            dataForRollback = this.getData(key);
            if (!key) {
                this._data = {}
            } else {
                removedTree = this._removeDataTree(key);
                if (removedTree) {
                    firstDotIndex = removedTree.indexOf('.');
                    if (firstDotIndex !== -1) {
                        removedTree = removedTree.substring(firstDotIndex);
                        key = key.replace(RegExp(removedTree + "$"), '')
                    }
                }
            }
            user = {
                email: this.email(),
                hash: this.hash(),
                key: key
            };
            if (!onlyLocal) {
                failCallbackDataRollback = function() {
                    return this.storeData(dataForRollback, keyForRollback, failCallback, null, true)
                };
                this._removeDataRemote(user, confirmCallback, failCallbackDataRollback)
            }
            this._storeDataLocal();
            if (onlyLocal && this.isFunction(confirmCallback)) {
                confirmCallback()
            }
            return true
        };
        LoginClient.prototype.removeOnlyRemoteUserData = function(key) {
            var user;
            if (!key) {
                return
            }
            user = {
                email: this.email(),
                hash: this.hash(),
                key: key
            };
            return this._removeDataRemote(user, (function() {}), (function() {}))
        };
        LoginClient.prototype.storeMergedData = function(data, key) {
            var dataDiff, dataDiffObj, diff, j, keyDiff, len1, oldData, user;
            if (data == null) {
                data = {}
            }
            if (key == null) {
                key = false
            }
            if (!this.loggedIn()) {
                return null
            }
            this._dataAutosyncLastDataEdit = this._getTime();
            this._dataAutosyncBrowser();
            user = {
                email: this.email(),
                hash: this.hash(),
                dataDiff: {
                    merge: {},
                    unmerge: []
                },
                key: key
            };
            if (!key) {
                dataDiff = this.objectsDiff(data, this._data);
                this._data = data
            } else {
                oldData = this.getData(key);
                if (oldData == null) {
                    return this.storeData(data, key)
                }
                dataDiff = this.objectsDiff(data, oldData)
            }
            this.storeData(data, key, null, null, true);
            dataDiffObj = {};
            for (j = 0, len1 = dataDiff.length; j < len1; j++) {
                diff = dataDiff[j];
                dataDiffObj[diff] = diff.substr(2).replace(/;[\+\-\*]\|/g, ".")
            }
            for (keyDiff in dataDiffObj) {
                if (keyDiff.indexOf("*") !== -1) {
                    keyDiff = keyDiff.replace(/(^|;)[^;]+$/, "");
                    delete dataDiffObj[keyDiff]
                }
            }
            for (keyDiff in dataDiffObj) {
                diff = dataDiffObj[keyDiff];
                if (keyDiff.indexOf('-|') !== -1) {
                    user.dataDiff.unmerge.push(diff)
                } else {
                    user.dataDiff.merge[diff] = this.getData(key ? key + '.' + diff : diff)
                }
            }
            user.dataDiff = JSON.stringify(user.dataDiff);
            this._storeMergedDataRemote(user, null, null);
            return true
        };
        LoginClient.prototype.registerCallback = function(triggerName, callback) {
            if (triggerName == null) {
                triggerName = ''
            }
            if (!this.isFunction(callback)) {
                return false
            }
            if (this._callbacks[triggerName] == null) {
                this._callbacks[triggerName] = []
            }
            return this._callbacks[triggerName].push(callback)
        };
        LoginClient.prototype.unregisterCallback = function(triggerName) {
            if (this._callbacks[triggerName] != null) {
                return this._callbacks[triggerName] = []
            }
        };
        LoginClient.prototype._setDialogWindowClass = function(_dialogWindowClass) {
            this._dialogWindowClass = _dialogWindowClass
        };
        return LoginClient
    })();
    if (typeof window !== "undefined" && window !== null) {
        if (window.ls == null) {
            window.ls = {}
        }
        window.lsid = function() {
            return 0
        };
        if ((base = window.ls).LoginClient == null) {
            base.LoginClient = LoginClient
        }
    } else {
        if (exports.LoginClient == null) {
            exports.LoginClient = LoginClient
        }
    }
}).call(this);
(function() {
    var RegistrationLoginClient, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    RegistrationLoginClient = (function(superClass) {
        extend(RegistrationLoginClient, superClass);
        RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY = 'registration-form';

        function RegistrationLoginClient() {
            RegistrationLoginClient.__super__.constructor.apply(this, arguments);
            this._setDialogWindowClass('registration');
            if (this.isEventTrackingEnabled()) {
                this._eventTracking = this._dic.get('utilEnviroment').getEventTrackingObject()
            }
        }
        RegistrationLoginClient.prototype.isEventTrackingEnabled = function() {
            return this._utilConfig.get('app', 'google_analytics', 'event_tracking') && typeof event_tracking === 'function'
        };
        RegistrationLoginClient.prototype._addErrorToForm = function(form, elementSelector, message, hideErrorMessageBox) {
            var $div;
            if (hideErrorMessageBox == null) {
                hideErrorMessageBox = false
            }
            if (hideErrorMessageBox) {
                this._hideErrorMessageBox(form)
            }
            $div = $('<div>').attr({
                'class': 'err-msg-wrapper'
            });
            $div.html(message);
            return this._$(form).find(elementSelector).after($div)
        };
        RegistrationLoginClient.prototype._registration = function(form, grecaptchaWidgetId) {
            var err, prePassCheckErrCount, user;
            if (this._submittedForms.registrationVerificationLogin) {
                return
            }
            this._hideErrorMessageBox(form);
            err = 0;
            user = {
                email: form.email.value,
                password: form.passwd.value,
                nickname: this.emptyNickname,
                project: this._projectIdent,
                termsofservice: form.termsofservice.checked,
                cX: grecaptcha.getResponse(grecaptchaWidgetId)
            };
            grecaptcha.reset(grecaptchaWidgetId);
            if (!this.mailRegexp.test(user.email)) {
                this._$(form).find('#email').addClass('err-input');
                this._addErrorToForm(form, '#email', this.trans('emailError'));
                err++
            }
            prePassCheckErrCount = err;
            if (!this.passwordRegexp.test(user.password)) {
                this._$(form).find('#passwd').addClass('err-input');
                this._addErrorToForm(form, '#passwd', this.trans('passwordError'));
                err++
            }
            if (prePassCheckErrCount < err) {
                form.passwd.value = ''
            }
            if (!this.nonemptyRegexp.test(user.cX)) {
                this._$(form).find('#recaptcha_response_field').addClass('err-input');
                this._addErrorToForm(form, '#recaptcha_response_field', this.trans('captchaEmptyError'));
                err++
            }
            if (!err) {
                this._submittedForms.registrationVerificationLogin = true;
                if (this._getGeoIp) {
                    user.geoIp = this._getGeoIp()
                }
                this._requestForm = form;
                this._registrationRequest(user);
                return true
            } else {
                this._showErrorMessageBox(form);
                return false
            }
        };
        RegistrationLoginClient.prototype._passwordChange = function(form) {
            var err, prePassCheckErrCount, ref, user;
            this._$(form).find('.err-msg').remove();
            this._$(form).find('.err-input').removeClass('err-input');
            this._hideErrorMessageBox(form);
            err = 0;
            user = {
                email: form.email.value,
                newpassword: form.newpasswd.value
            };
            if ((((ref = form.code) != null ? ref.value : void 0) != null) && this.verificationCodeRegexp.test(form.code.value)) {
                user.code = form.code.value
            }
            if (form.passwd != null) {
                user.password = form.passwd.value
            }
            if ((user.password == null) && (user.code == null)) {
                this._showMessage(this.trans('verificationPassChangeCodeError'), true)
            }
            if ((user.password != null) && !this.passwordRegexp.test(user.password)) {
                this._$(form).find('#passwd').addClass('err-input');
                this._addErrorToForm(form, '#passwd', this.trans('passwordError'));
                form.passwd.value = ''
            }
            prePassCheckErrCount = err;
            if (!this.passwordRegexp.test(user.newpassword)) {
                this._$(form).find('#newpasswd').addClass('err-input');
                this._addErrorToForm(form, '#newpasswd', this.trans('passwordError'));
                err++
            }
            if (prePassCheckErrCount < err) {
                form.newpasswd.value = ''
            }
            if (!err) {
                this._requestForm = form;
                return this._passwordChangeRequest(user)
            } else {
                return this._showErrorMessageBox(form)
            }
        };
        RegistrationLoginClient.prototype._hideErrorMessageBox = function(form) {
            return this._$(form).find('.err-msg-wrapper').remove()
        };
        RegistrationLoginClient.prototype._showErrorMessageBox = function(form) {};
        RegistrationLoginClient.prototype._showMessage = function(msg, err, time, animTime) {
            var header, message, msgDiv;
            if (err == null) {
                err = false
            }
            if (time == null) {
                time = 4
            }
            if (animTime == null) {
                animTime = 0.2
            }
            msgDiv = this._$(document.createElement('div'));
            msgDiv.addClass(this._elementId + "-messages");
            header = this._$(document.createElement('div'));
            header.addClass("header-message");
            if (err) {
                header.addClass("err")
            }
            msgDiv.append(header);
            message = this._$(document.createElement('div'));
            message.addClass("message");
            if (err) {
                message.addClass("err")
            }
            message.html(msg);
            msgDiv.append(message);
            return this._showDialog(msgDiv, null, time)
        };
        RegistrationLoginClient.prototype._registrationOkMessage = function(email) {
            var createMessageBlock, header, message, msgDiv;
            createMessageBlock = (function(_this) {
                return function(text, extraClass) {
                    var message;
                    if (extraClass == null) {
                        extraClass = ''
                    }
                    message = _this._$(document.createElement('div'));
                    message.addClass("message");
                    if (extraClass) {
                        message.addClass(extraClass)
                    }
                    message.html(text);
                    return message
                }
            })(this);
            msgDiv = this._$(document.createElement('div'));
            msgDiv.addClass(this._elementId + "-messages");
            header = this._$(document.createElement('div'));
            header.addClass("header-message");
            msgDiv.append(header);
            message = createMessageBlock(this.trans('registrationOkLabel'), 'headline');
            msgDiv.append(message);
            message = createMessageBlock(this.trans('registrationOkInfo1').replace('%s', email));
            msgDiv.append(message);
            message = createMessageBlock(this.trans('registrationOkInfo2'));
            msgDiv.append(message);
            return this._showDialog(msgDiv, null, null, true, 'registration-ok-message')
        };
        RegistrationLoginClient.prototype._verificationOkProceed = function(email) {
            var loginJq, message, msgDiv;
            if (email == null) {
                email = null
            }
            msgDiv = this._$(document.createElement('div'));
            msgDiv.addClass(this._elementId + "-messages");
            msgDiv.addClass("reg-version-two");
            message = this._$(document.createElement('div'));
            message.addClass("message");
            message.text(this.trans('verificationOk'));
            msgDiv.append(message);
            loginJq = [{
                "selector": "#login-content",
                "functionName": "prepend",
                "params": [msgDiv]
            }];
            if (email) {
                loginJq.push({
                    "selector": "#login-form #email",
                    "functionName": "val",
                    "params": [email]
                })
            }
            loginJq.push({
                "selector": "#login-form #passwd",
                "functionName": "focus",
                "params": []
            });
            return this.showDialog('login', loginJq)
        };
        RegistrationLoginClient.prototype.showDialog = function(dialogName, elemsSettings) {
            if (elemsSettings == null) {
                elemsSettings = []
            }
            RegistrationLoginClient.__super__.showDialog.apply(this, arguments);
            if (this.isEventTrackingEnabled()) {
                return this._setEventTrackAttributes()
            }
        };
        RegistrationLoginClient.prototype._successLoginCallback = function() {
            var base;
            if (this.isEventTrackingEnabled()) {
                return typeof(base = this._eventTracking).track_click === "function" ? base.track_click(this.GA_EVENT_TRACKING_CATEGORY, 'log-login-no-errors') : void 0
            }
        };
        RegistrationLoginClient.prototype._successRegistrationCallback = function() {
            var base;
            if (this.isEventTrackingEnabled()) {
                return typeof(base = this._eventTracking).track_click === "function" ? base.track_click(this.GA_EVENT_TRACKING_CATEGORY, 'reg-signup-no-errors') : void 0
            }
        };
        RegistrationLoginClient.prototype._setEventTrackAttributes = function() {
            if (!this._callbackRegistred) {
                this._callbackRegistred = true;
                this.registerCallback('login', this._successLoginCallback);
                this.registerCallback('registration', this._successRegistrationCallback);
                this.registerCallback('hideDialog', (function(_this) {
                    return function(param) {
                        var base, base1, eventMethod;
                        eventMethod = '';
                        if (param.method) {
                            eventMethod = '-' + param.method
                        }
                        if (param.dialogName === 'registration') {
                            if (typeof(base = _this._eventTracking).track_click === "function") {
                                base.track_click(RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY, 'reg-close-form' + eventMethod)
                            }
                        }
                        if (param.dialogName === 'login') {
                            return typeof(base1 = _this._eventTracking).track_click === "function" ? base1.track_click(RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY, 'log-close-form' + eventMethod) : void 0
                        }
                    }
                })(this))
            }
            $('#registration-log-in-link a, #login-log-in-link a').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY, 'reg-login-click') : void 0
                }
            })(this));
            $('#terms-link a').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY, 'reg-terms') : void 0
                }
            })(this));
            $('#lsid-window #registration').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY, 'reg-signup-click') : void 0
                }
            })(this));
            $('#lsid-window #login').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY, 'log-login-click') : void 0
                }
            })(this));
            return $('#lsid-window .lost-password').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY, 'log-forgot-pass') : void 0
                }
            })(this))
        };
        return RegistrationLoginClient
    })(ls.LoginClient);
    if (typeof window !== "undefined" && window !== null) {
        if (window.ls == null) {
            window.ls = {}
        }
        window.lsid = function() {
            return 0
        };
        window.ls.LoginClient = RegistrationLoginClient
    } else {
        exports.LoginClient = RegistrationLoginClient
    }
}).call(this);
(function() {
    var base, base1, base2, twoWayCrypt, urlDecode, urlEncode;
    twoWayCrypt = function(data, key) {
        var i, iter, j, mod, output, ref;
        iter = 0;
        mod = key.length;
        output = '';
        for (i = j = 0, ref = data.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            output += String.fromCharCode(key.charCodeAt(i % mod) ^ data.charCodeAt(i))
        }
        return output
    };
    urlEncode = function(data) {
        var code, i, j, transportKey;
        transportKey = '';
        for (i = j = 1; j <= 8; i = ++j) {
            code = Math.floor(Math.random() * 113 - 15);
            transportKey += String.fromCharCode(code)
        }
        return encodeURIComponent(transportKey + twoWayCrypt(JSON.stringify(data), transportKey))
    };
    urlDecode = function(data) {
        var crypted, transportKey;
        data = decodeURIComponent(data);
        crypted = data.substr(8);
        transportKey = data.substr(0, 8);
        return JSON.parse(twoWayCrypt(crypted, transportKey))
    };
    if (typeof window !== "undefined" && window !== null) {
        if (window.ls == null) {
            window.ls = {}
        }
        if ((base = window.ls).twoWayCrypt == null) {
            base.twoWayCrypt = twoWayCrypt
        }
        if ((base1 = window.ls).urlEncode == null) {
            base1.urlEncode = urlEncode
        }
        if ((base2 = window.ls).urlDecode == null) {
            base2.urlDecode = urlDecode
        }
    } else {
        if (exports.twoWayCrypt == null) {
            exports.twoWayCrypt = twoWayCrypt
        }
        if (exports.urlEncode == null) {
            exports.urlEncode = urlEncode
        }
        if (exports.urlDecode == null) {
            exports.urlDecode = urlDecode
        }
    }
}).call(this);
var captchaOnLoad;
(function() {
    var grecaptchaWidgetCanBeLoaded = false;
    var grecaptchaWidgetId;
    var hasFacebook = true;
    var hasTwitter = true;
    var hasGoogle = true;
    var hasSocials = hasFacebook || hasGoogle;
    $("head").append('<script type="text/javascript" src="https://www.google.com/recaptcha/api.js?hl=en&onload=captchaOnLoad&render=explicit"></script>');
    var delegateSocialButtons = function(lsid) {
        $("#lsid-main-dialog .contents div.facebook").off('click').on('click', function(dialogObj) {
            return function(e) {
                if (typeof e != 'undefined') {
                    e.preventDefault()
                }
                lsid._loginUsingProvider("facebook");
                return false
            }
        }(this));
        $("#lsid-main-dialog .contents div.twitter").off('click').on('click', function(dialogObj) {
            return function(e) {
                if (typeof e != 'undefined') {
                    e.preventDefault()
                }
                lsid._loginUsingProvider("twitter");
                return false
            }
        }(this));
        $("#lsid-main-dialog .contents div.google").off('click').on('click', function(dialogObj) {
            return function(e) {
                if (typeof e != 'undefined') {
                    e.preventDefault()
                }
                lsid._loginUsingProvider("google");
                return false
            }
        }(this))
    };
    var delegateDialog = function(name, selector, lsid) {
        $(selector).off('click').on('click', function(dialogObj) {
            return function(e) {
                if (typeof e != 'undefined') {
                    e.preventDefault()
                }
                lsid.showDialog(name);
                return false
            }
        }(this))
    };
    var toggleShowPasswordButton = function($showButton, isPasswdType) {
        var label = isPasswdType ? 'Hide' : 'Show';
        $showButton.toggleClass('on', isPasswdType);
        $showButton.html(label)
    };
    var delegateShowPassword = function() {
        $('.password-form-element span.show, .newpassword-form-element span.show').off('click').on('click', function() {
            var $showButton = $(this);
            var $password = $showButton.next('#passwd, #newpasswd');
            var isPasswdType = $password.attr('type') === 'password';
            $password.attr('type', isPasswdType ? 'text' : 'password');
            toggleShowPasswordButton($showButton, isPasswdType)
        })
    };
    var delegateShowPasswordButton = function() {
        var $elements = $('.password-form-element #passwd, .newpassword-form-element #newpasswd');
        $elements.each(function() {
            var $password = $(this);
            if ($password.val()) {
                var $showButton = $password.prev('span.show');
                toggleShowPasswordButton($showButton, false);
                $showButton.css('display', 'inline')
            }
        });
        $elements.unbind('input', 'keyup').bind('input', 'keyup', function(e) {
            var password = $(e.currentTarget).val();
            var $showButton = $(this).siblings('span.show');
            $showButton.toggle(password.length > 0)
        })
    };
    var delegateGeoIp = function() {
        if (typeof cjs != 'undefined' && typeof cjs.prepareGeoIP == 'function') {
            cjs.prepareGeoIP()
        }
    };
    var delegateLoginFill = function(lsid) {
        var $form = $("#login-form");
        lsid.loginFill($form.get(0));
        $form.find('#passwd').attr('type', 'password')
    };
    var dialogHtml = new Array();
    dialogHtml.push('<div id="lsid-main-dialog">', '<div class="contents">', '<div class="registration selected">', '<h1>Sign up for Free</h1>', '<div class="content">', '<div class="form">', '<form id="registration-form" method="post" action="">', (hasSocials ? '<div class="social-buttons border-bottom">' : ''), (hasFacebook ? '<a href="#fb"><div id="#registration-fb" class="facebook"><span class="icon"></span>FACEBOOK</div></a>' : ''), (hasTwitter ? '<a href="#google"><div id="#registration-google" class="google"><span class="icon"></span>GOOGLE+</div></a>' : ''), (hasGoogle ? '<a href="#twiter"><div id="#registration-twitter" class="twitter"><span class="icon"></span>TWITTER</div></a>' : ''), (hasSocials ? '</div>' : ''), '<div class="email-form-element border-bottom">', '<input type="text" style="display: none;"/>', '<input type="text" id="email" name="email" tabindex="1" placeholder="Email" />', '</div>', '<div class="password-form-element border-bottom">', '<span class="show">Show</span>', '<input type="password" id="passwd" name="passwd" tabindex="2" placeholder="Password"/>', '</div>', '<div class="password-confirm-form-element">', '<input type="hidden" id="passwdagain" name="passwdagain">', '<input type="checkbox" id="termsofservice" name="termsofservice" checked="checked" style="visibility: hidden; display: none;" />', '</div>', '<div class="captcha">', '<div id="recaptcha_response_field" class="g-recaptcha captcha-preload"><span>Loading ...</span></div>', '', '</div>', '<div class="sign-up-form-element">', '<input type="submit" value="Sign Up" id="registration" name="registration"/>', '<div id="registration-log-in-link" class="log-in">', '<div class="content">or <a href=\"/#[lsid:login]\">Log In</a></div>', '</div>', '<div id="terms-link" class="terms">By creating an account you agree to our <a href=\"/terms/\" target=\"_blank\">Terms of Use</a></div>', '</div>', '</form>', '</div>', '<div id="benefits-link" class="benefits">', '<ul>', '<li><span class="sync"></span><span class="content">Keep your preferences synced across all your devices </span></li>', '<li><span class="favorite"></span><span class="content">Follow your favourite leagues & teams easier</span></li>', '<li><span class="features"></span><span class="content">Stay up to date with all new features</span></li>', '</ul>', '', '</div>', '<div class="devices"></div>', '</div>', '</div>', '</div>', '</div>');
    ls.LoginClient.prototype.dialogs.registration.content = dialogHtml.join('');
    ls.LoginClient.prototype.dialogs.registration.showTrigger = function(lsid) {
        grecaptchaWidgetCanBeLoaded = true;
        $("#registration-form .sign-up-form-element").hide()
    };
    var grecaptchaWidgetIdGetter = function() {
        return grecaptchaWidgetId
    };
    captchaOnLoad = function() {
        $("#registration-form .sign-up-form-element").show();
        ls.LoginClient.prototype.dialogs.registration.showTrigger = function(lsid, disableGrecaptchaReload) {
            var recaptchaElementId = "recaptcha_response_field";
            $("#" + recaptchaElementId).removeClass('captchaPreload').hide().empty().css({
                "transform": "scale(0.78)",
                "transform-origin": "0 0",
                "-webkit-transform": "scale(0.78)",
                "-webkit-transform-origin": "0 0"
            }).show();
            if (grecaptchaWidgetCanBeLoaded || !disableGrecaptchaReload) {
                grecaptchaWidgetId = grecaptcha.render(recaptchaElementId, {
                    "sitekey": "6LdnlAoTAAAAAIzaLLR8ezPKKnLeM2LozP6OQKj_"
                })
            }
            delegateSocialButtons(lsid);
            delegateDialog("login", "#registration-log-in-link a", lsid);
            delegateShowPassword();
            delegateShowPasswordButton();
            delegateGeoIp();
            $("#registration-form").off('submit').on('submit', function(e) {
                if (typeof e != 'undefined') {
                    e.preventDefault()
                }
                lsid._registration(this, grecaptchaWidgetIdGetter());
                return false
            });
            grecaptchaWidgetCanBeLoaded = false;
            $(document).ready(function() {
                $("#email").focus()
            })
        };
        if ($("#lsid-window").is(":visible")) {
            ls.LoginClient.prototype.dialogs.registration.showTrigger(ls.loginClient, true)
        }
    };
    dialogHtml = new Array();
    dialogHtml.push('<div class="lsid-messages">', '<div class="header-message err"></div>', '<div class="message err">Your activation code is not valid.</div>', '</div>');
    ls.LoginClient.prototype.dialogs.verification.content = dialogHtml.join('');
    var dialogHtml = new Array();
    dialogHtml.push('<div id="lsid-main-dialog">', '<div class="contents">', '<div class="login selected">', '<h1>Login</h1>', '<div class="content" id="login-content">', '<div class="form">', '<form id="login-form" method="post" action="">', (hasSocials ? '<div class="social-buttons border-bottom">' : ''), (hasFacebook ? '<a id="#login-fb" href="#fb"><div class="facebook"><span class="icon"></span>FACEBOOK</div></a>' : ''), (hasTwitter ? '<a id="#login-google" href="#google"><div class="google"><span class="icon"></span>GOOGLE+</div></a>' : ''), (hasGoogle ? '<a id="#login-twitter" href="#twiter"><div class="twitter"><span class="icon"></span>TWITTER</div></a>' : ''), (hasSocials ? '</div>' : ''), '<div class="email-form-element border-bottom">', '<input type="text" style="display: none;"/>', '<input type="text" id="email" name="email" tabindex="1" placeholder="Email" />', '</div>', '<div class="password-form-element border-bottom">', '<span class="show">Show</span>', '<input type="password" id="passwd" name="passwd" tabindex="2" placeholder="Password"/>', '</div>', '<div class="password-confirm-form-element">', '<input type="hidden" id="passwdagain" name="passwdagain">', '<input type="checkbox" id="persistentlogin" name="persistentlogin" checked="checked" style="visibility: hidden; display: none;" />', '</div>', '<div class="sign-up-form-element">', '<input type="submit" value="Log In" id="login" name="login"/>', '<div id="login-log-in-link" class="log-in">', '<div class="content">or <a href=\"#[lsid:registration]\">Sign Up</a></div>', '</div>', '<div class="terms"><a href="/#[lsid:forgottenPassword]" class="lost-password">Forgot your password?</a></div>', '</div>', '</form>', '</div>', '</div>', '</div>', '</div>', '</div>');
    ls.LoginClient.prototype.dialogs.login.content = dialogHtml.join('');
    ls.LoginClient.prototype.dialogs.login.showTrigger = function(lsid) {
        delegateSocialButtons(lsid);
        delegateDialog("registration", "#login-log-in-link a", lsid);
        delegateDialog("forgottenPassword", "#login-form .sign-up-form-element .terms a", lsid);
        delegateLoginFill(lsid);
        delegateShowPassword();
        delegateShowPasswordButton();
        $(document).ready(function() {
            $("#email").focus()
        });
        $("#login-form").off('submit').on('submit', function(e) {
            if (typeof e != 'undefined') {
                e.preventDefault()
            }
            lsid._login(this);
            return false
        })
    };
    var dialogHtml = new Array();
    dialogHtml.push('<div id="lsid-main-dialog">', '<div class="contents">', '<div class="forgottenPassword selected">', '<h1>Reset Password</h1>', '<div class="content">', '<div class="text">Don\'t worry. Just enter your email address below and we\'ll send you some instructions.</div>', '<div class="form">', '<form id="forgotten-password-form" method="post" action="">', '<div class="email-form-element border-bottom">', '<input type="text" style="display: none;"/>', '<input type="text" id="email" name="email" tabindex="1" placeholder="Email" />', '</div>', '<div class="sign-up-form-element">', '<input type="submit" value="Send" id="send" name="send"/>', '</div>', '</form>', '</div>', '</div>', '</div>', '</div>', '</div>');
    ls.LoginClient.prototype.dialogs.forgottenPassword.content = dialogHtml.join('');
    ls.LoginClient.prototype.dialogs.forgottenPassword.showTrigger = function(lsid) {
        delegateDialog("login", "#forgotten-password-form .sign-up-form-element .terms a", lsid);
        $("#forgotten-password-form").off('submit').on('submit', function(e) {
            if (typeof e != 'undefined') {
                e.preventDefault()
            }
            lsid._forgottenPassword(this);
            return false
        });
        $(document).ready(function() {
            $("#email").focus()
        })
    };
    dialogHtml = new Array();
    dialogHtml.push('<div class="contents">', '<div class="passwordchange selected">', '<h1>Change password</h1>', '<div class="content">', '<div class="form">', '<form id="passwordchange-form" method="post" action="">', '<div class="password-form-element border-bottom">', '<input type="text" style="display: none;"/>', '<span class="show">Show</span>', '<input type="password" id="passwd" name="passwd" tabindex="1" placeholder="Current password">', '</div>', '<div class="newpassword-form-element border-bottom">', '<span class="show">Show</span>', '<input type="password" id="newpasswd" name="newpasswd" tabindex="2" placeholder="New password">', '</div>', '<div class="sign-up-form-element">', '<input type="submit" value="Change settings" id="passwordchange" name="settings" tabindex="3">', '</div>', '</form>', '</div>', '</div>', '</div>', '</div>');
    ls.LoginClient.prototype.dialogs.passwordChange.content = dialogHtml.join('');
    ls.LoginClient.prototype.dialogs.passwordChange.showTrigger = function(lsid) {
        var form = $("form#passwordchange-form");
        if (!form.find("input#email").length) form.append('<input type="hidden" value="' + lsid._email + '" id="email" name="email">');
        form.submit(function(e) {
            if (typeof e != 'undefined') {
                e.preventDefault()
            }
            lsid._passwordChange(this);
            return false
        });
        delegateShowPassword();
        delegateShowPasswordButton();
        $(document).ready(function() {
            $("#passwd").focus()
        })
    };
    dialogHtml = new Array();
    dialogHtml.push('<div class="contents">', '<div class="settings selected">', '<h1>Change password</h1>', '<div class="content">', '<div class="form">', '<form id="settings-form" method="post" action="">', '<div class="password-form-element border-bottom">', '<input type="text" style="display: none;"/>', '<span class="show">Show</span>', '<input type="password" id="passwd" name="passwd" tabindex="1" placeholder="Current password">', '</div>', '<div class="newpassword-form-element border-bottom">', '<span class="show">Show</span>', '<input type="password" id="newpasswd" name="newpasswd" tabindex="2" placeholder="New password">', '</div>', '<div class="sign-up-form-element">', '<input type="submit" value="Change settings" id="settings" name="settings" tabindex="3">', '</div>', '</form>', '</div>', '</div>', '</div>', '</div>');
    ls.LoginClient.prototype.dialogs.settings.content = dialogHtml.join('');
    ls.LoginClient.prototype.dialogs.settings.showTrigger = function(lsid) {
        var form = $("form#settings-form");
        if (!form.find("input#email").length) form.append('<input type="hidden" value="' + lsid._email + '" id="email" name="email">');
        form.submit(function(e) {
            if (typeof e != 'undefined') {
                e.preventDefault()
            }
            lsid._passwordChange(this);
            return false
        });
        delegateShowPassword();
        delegateShowPasswordButton();
        $(document).ready(function() {
            $("#passwd").focus()
        })
    }
})();
(function() {
    var MyLeaguesMenu, base;
    MyLeaguesMenu = (function() {
        MyLeaguesMenu.prototype.BANNER_POSITION = 10;
        MyLeaguesMenu.prototype.ITEMS_LIMIT_BANNER_POSITION = 12;

        function MyLeaguesMenu(_storage, _myLeagues, _dataUrl, emptyContent, _dic) {
            var _data;
            this._storage = _storage;
            this._myLeagues = _myLeagues;
            this._dataUrl = _dataUrl;
            this._dic = _dic != null ? _dic : cjs.dic;
            this._$ = this._dic.get('$');
            this._ulId = 'my-leagues-list';
            this._headCountSelector = '.my-leagues .head .count';
            this._dataKey = 'myLeaguesMenu_' + this._dic.get('utilConfig').get('app', 'lang', 'web');
            _data = this._storage.get(this._dataKey);
            if (_data === '[]') {
                _data = '{}'
            }
            this._storage.drop('myLeaguesMenu');
            this._data = _data ? JSON.parse(_data) : this._$.extend({}, this._myLeagues._topLeagues, true);
            this._requestedDataList = {};
            this._empty = "<li class=\"last myLeagueInfo\">" + (emptyContent.replace('[*]', '<span class="toggleMyLeague"></span>')) + "</li>";
            this._loading = '<li><div class="menu_loading">&nbsp;</div></li>';
            this.draw()
        }
        MyLeaguesMenu.prototype._getListItem = function(data) {
            if (!/\/$/.test(data.url)) {
                data.url = data.url + '/'
            }
            if ((data.title != null) && (data.url != null) && (data.flagId != null) && (data.name != null)) {
                return $("<li title=\"" + data.title + "\"><a href=\"" + data.url + "\"><span class=\"flag fl_" + data.flagId + "\"></span>" + data.name + "</a></li>")
            } else {
                return null
            }
        };
        MyLeaguesMenu.prototype._now = function() {
            return Math.round((new Date()).getTime() / 1000)
        };
        MyLeaguesMenu.prototype._request = function(callback, url, trigger) {
            var req;
            if (callback == null) {
                callback = (function() {
                    return null
                })
            }
            if (trigger == null) {
                trigger = null
            }
            req = {
                url: this._dataUrl + url,
                dataType: 'json',
                success: (function(obj, callback) {
                    return function(data, textStatus, jqXHR) {
                        if (jqXHR.status === 200) {
                            return callback.call(obj, data, trigger)
                        } else {
                            return callback.call(obj, data, trigger, jqXHR.status)
                        }
                    }
                })(this, callback),
                error: (function(obj, callback) {
                    return function(jqXHR, textStatus, errorThrown) {
                        return callback.call(obj, {}, trigger, jqXHR.status)
                    }
                })(this, callback)
            };
            return this._$.ajax(req)
        };
        MyLeaguesMenu.prototype._loadData = function(dataKey) {
            if (this._requestedDataList.hasOwnProperty(dataKey)) {
                return
            }
            this._requestedDataList[dataKey] = true;
            return this._request(this._loadDataResponse, dataKey, dataKey)
        };
        MyLeaguesMenu.prototype._loadDataResponse = function(data, trigger, err) {
            if (err == null) {
                err = null
            }
            delete this._requestedDataList[trigger];
            if (err !== null || err === 0) {
                this._myLeagues.toggleTop(trigger);
                return
            }
            data.from = this._now();
            this._data[trigger] = data;
            this.draw();
            return this._storage.store(this._dataKey, JSON.stringify(this._data))
        };
        MyLeaguesMenu.prototype._deleteListItems = function() {
            return this._$("#" + this._ulId + " li").not('.banner').remove()
        };
        MyLeaguesMenu.prototype._drawEmpty = function() {
            this._deleteListItems();
            this._$("" + this._headCountSelector).text('(0)');
            this._$("#" + this._ulId).prepend(this._empty);
            if (this._$("#" + this._ulId + " li.banner").is(":empty")) {
                return this._$("#" + this._ulId + " li.banner").addClass("empty-banner").addClass("last-item-banner")
            }
        };
        MyLeaguesMenu.prototype.draw = function() {
            var cacheValidation, count, dataKey, i, len, li, menuOrder, ul;
            this._deleteListItems();
            menuOrder = this._myLeagues.getTopLabelKeys();
            if (!menuOrder.length) {
                return this._drawEmpty()
            }
            menuOrder.sort((function(data) {
                return function(a, b) {
                    var sportA, sportB;
                    if (!data.hasOwnProperty(a)) {
                        return -1
                    }
                    if (!data.hasOwnProperty(b)) {
                        return 1
                    }
                    sportA = a.split('_')[0];
                    sportB = b.split('_')[0];
                    if (sportA < sportB) {
                        return -1
                    }
                    if (sportA > sportB) {
                        return 1
                    }
                    if (data[a].menuOrder < data[b].menuOrder) {
                        return -1
                    }
                    if (data[a].menuOrder > data[b].menuOrder) {
                        return 1
                    }
                    return 0
                }
            })(this._data));
            ul = this._$(document.createElement('ul'));
            cacheValidation = this._now() - (60 * 60 * 24);
            for (i = 0, len = menuOrder.length; i < len; i++) {
                dataKey = menuOrder[i];
                if (this._data.hasOwnProperty(dataKey)) {
                    li = this._getListItem(this._data[dataKey]);
                    if (li != null) {
                        li.prepend(this._myLeagues.getToggleIcon(null, dataKey));
                        ul.append(li)
                    } else {
                        this._data[dataKey].from = 0
                    }
                    if (!(this._data[dataKey].from > cacheValidation)) {
                        this._loadData(dataKey)
                    }
                } else {
                    this._loadData(dataKey)
                }
            }
            count = ul.find('li').length;
            this._$("#" + this._ulId + " li.banner").removeClass('empty-banner').removeClass('last-item-banner');
            if (li) {
                li.addClass('last');
                if (this._$("#" + this._ulId + " li.banner").height() === 0) {
                    this._$("#" + this._ulId + " li.banner").addClass('empty-banner')
                }
                if (count >= this.ITEMS_LIMIT_BANNER_POSITION) {
                    this._$("#" + this._ulId).prepend(ul.find('li').slice(0, this.BANNER_POSITION));
                    this._$("#" + this._ulId).append(ul.find('li'))
                } else {
                    this._$("#" + this._ulId).prepend(ul.html());
                    this._$("#" + this._ulId + " li.banner").addClass('last-item-banner')
                }
            } else {
                this._$("#" + this._ulId).prepend(this._loading)
            }
            return this._$("" + this._headCountSelector).text("(" + count + ")")
        };
        return MyLeaguesMenu
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).MyLeaguesMenu == null) {
            base.MyLeaguesMenu = MyLeaguesMenu
        }
    } else {
        if (exports.MyLeaguesMenu == null) {
            exports.MyLeaguesMenu = MyLeaguesMenu
        }
    }
}).call(this);
(function() {
    var MyLeaguesAnimation, base;
    MyLeaguesAnimation = (function() {
        MyLeaguesAnimation.prototype.easing = 'ease';
        MyLeaguesAnimation.prototype.duration = 1250;
        MyLeaguesAnimation.prototype.shorterDuration = 500;
        MyLeaguesAnimation.prototype.additionalTablesSelector = '.table-link-more-games, .noduel-info';

        function MyLeaguesAnimation(isMovingTop, $origTable, transition, transitionProperty, tooltip, lablId) {
            this.isMovingTop = isMovingTop;
            this.$origTable = $origTable;
            this.transition = transition;
            this.transitionProperty = transitionProperty;
            this.tooltip = tooltip;
            this.lablId = lablId;
            this.border = null;
            this.$wrapper = null;
            this.$phOut = null;
            this.$gameRows = null;
            this.$outWrapper = null
        }
        MyLeaguesAnimation.prototype.pre = function() {
            var $outTable, $table, origTablePos;
            this.stripMovingTable(this.$origTable);
            if (this.isMovingTop) {
                this.border = this.getBorder();
                origTablePos = this.$origTable.position();
                this.$wrapper = $('<div/>').css({
                    zIndex: 1e20,
                    opacity: 1,
                    position: 'absolute',
                    overflow: 'hidden',
                    width: this.$origTable.outerWidth(),
                    height: this.$origTable.outerHeight(),
                    top: origTablePos.top,
                    left: origTablePos.left,
                    boxShadow: '0px 0px 15px rgba(0, 0, 0, 1)',
                    borderBottom: this.border
                });
                $table = this.$origTable.clone();
                $table.find('thead tr.league').removeClass("l_" + this.lablId).addClass('primary-top');
                $table.appendTo(this.$wrapper);
                this.appendAdditionalRowsToWrapper(this.$origTable, this.$wrapper);
                this.transition(this.$wrapper, 'top', this.duration, this.easing);
                this.transition(this.$wrapper, 'opacity', this.shorterDuration, 'linear', this.duration);
                this.$phOut = $('<div class=ph-out />').css({
                    width: '100%',
                    height: this.$wrapper.height()
                });
                this.$phOut.insertBefore(this.$origTable);
                this.transition(this.$phOut, 'height', this.duration, this.easing)
            } else {
                $outTable = this.$origTable.clone();
                $outTable.find('thead tr.league').removeClass("l_" + this.lablId);
                $outTable.css('zIndex', 0);
                this.$outWrapper = $('<div/>');
                this.$outWrapper.append($outTable);
                this.$outWrapper.insertBefore(this.$origTable);
                this.$outWrapper.height(this.$origTable.outerHeight());
                this.appendAdditionalRowsToWrapper(this.$origTable, this.$outWrapper);
                this.transition(this.$outWrapper.find('tbody tr'), 'background-color', this.shorterDuration, 'linear', this.duration)
            }
            this.$gameRows = $('#fs tr[id^="g_"], #fs tr[id^="x_"]');
            return this.transition(this.$gameRows, 'background-color', this.shorterDuration, 'linear', this.duration)
        };
        MyLeaguesAnimation.prototype.post = function($newTable) {
            var $inTable, $inWrapper, $phIn, $placeholders, $tables, inWrapperHeight, phInHeight, tableTop;
            this.tooltip.hide_all();
            if (this.isMovingTop) {
                this.$phOut.nextUntil(':visible:not(.ph-out)', '.ph-out').empty();
                if (this.$phOut.prevUntil(':visible:not(.ph-out)', '.ph-out').length === 0) {
                    this.appendFakeBorder(this.$phOut, this.border)
                }
                this.$phOut.height(0);
                setTimeout(((function(_this) {
                    return function() {
                        return _this.$phOut.remove()
                    }
                })(this)), this.duration);
                tableTop = $newTable.position().top;
                $placeholders = $newTable.prevUntil(':visible:not(.ph-in)', '.ph-in');
                if ($placeholders.length) {
                    tableTop = $placeholders.last().position().top;
                    $placeholders.each(function() {
                        return tableTop += $(this).next('table').outerHeight()
                    })
                }
                $tables = $newTable.next(this.additionalTablesSelector).addBack();
                phInHeight = 0;
                $tables.each(function() {
                    return phInHeight += $(this).outerHeight()
                });
                $phIn = $('<div class=ph-in />').css({
                    width: '100%',
                    height: 0
                });
                $phIn.insertBefore($newTable);
                this.transition($phIn, 'height', this.duration, this.easing);
                $phIn.height(phInHeight);
                setTimeout((function() {
                    return $phIn.remove()
                }), this.duration);
                $phIn.nextUntil(':visible:not(.ph-in)', '.ph-in').empty();
                if ($phIn.prevUntil(':visible:not(.ph-in)', '.ph-in').length === 0) {
                    this.appendFakeBorder($phIn, this.border)
                }
                this.$wrapper.appendTo($newTable.parent());
                $tables.hide();
                setTimeout(((function(_this) {
                    return function() {
                        return _this.$wrapper.css({
                            top: tableTop,
                            opacity: 0
                        })
                    }
                })(this)), 0);
                setTimeout(((function(_this) {
                    return function() {
                        $phIn.remove();
                        $tables.show();
                        return setTimeout((function() {
                            return _this.$wrapper.remove()
                        }), _this.shorterDuration)
                    }
                })(this)), this.duration)
            } else {
                $inTable = $newTable.clone();
                $inTable.css('zIndex', 0);
                $inTable.find('tr').css('opacity', 1);
                this.stripMovingTable($inTable);
                $tables = $newTable.next(this.additionalTablesSelector).addBack();
                $inWrapper = $('<div/>').height($newTable.outerHeight());
                $inWrapper.append($inTable);
                this.appendAdditionalRowsToWrapper($newTable, $inWrapper);
                inWrapperHeight = $inWrapper.outerHeight();
                $inWrapper.insertAfter($newTable);
                $inWrapper.height(0);
                $inWrapper.css('overflow', 'hidden');
                $tables.hide();
                setTimeout(((function(_this) {
                    return function() {
                        _this.transition(_this.$outWrapper, 'height', _this.duration, _this.easing);
                        _this.$outWrapper.height(0);
                        _this.transition($inWrapper, 'height', _this.duration, _this.easing);
                        $inWrapper.height(inWrapperHeight);
                        return setTimeout((function() {
                            $inWrapper.remove();
                            $tables.show();
                            return _this.$outWrapper.remove()
                        }), _this.duration)
                    }
                })(this)), 0)
            }
            return setTimeout(((function(_this) {
                return function() {
                    return _this.removeGameRowsTransition()
                }
            })(this)), this.duration + this.shorterDuration)
        };
        MyLeaguesAnimation.prototype.cancel = function() {
            if (this.isMovingTop) {
                this.$phOut.remove()
            } else {
                this.$outWrapper.remove()
            }
            return this.removeGameRowsTransition()
        };
        MyLeaguesAnimation.prototype.removeGameRowsTransition = function() {
            return this.$gameRows.css(this.transitionProperty(), '')
        };
        MyLeaguesAnimation.prototype.getBorder = function() {
            var $blankLineTd, $tableTd, css;
            css = '';
            $blankLineTd = $('#fs .blank-line td');
            $tableTd = $('div#fs tr[id^="g_"] td:first-child');
            if ($blankLineTd.length) {
                css = ($blankLineTd.height()) + "px solid " + ($blankLineTd.css('backgroundColor'))
            } else if ($tableTd.length) {
                css = ($tableTd.css('borderLeftWidth')) + " solid " + ($tableTd.css('borderLeftColor'))
            }
            return css
        };
        MyLeaguesAnimation.prototype.appendFakeBorder = function($element, border) {
            return $element.append($('<div/>').css({
                margin: 0,
                padding: 0,
                width: '100%',
                height: 0,
                borderTop: border
            }))
        };
        MyLeaguesAnimation.prototype.stripMovingTable = function($element) {
            $element.removeAttr('title').find('[title]').removeAttr('title');
            return $element.removeAttr('onclick').find('[onclick]').removeAttr('onclick')
        };
        MyLeaguesAnimation.prototype.appendAdditionalRowsToWrapper = function($table, $wrapper) {
            return $table.next(this.additionalTablesSelector).each(function() {
                var $additionalTable;
                $additionalTable = $(this);
                $additionalTable.clone().appendTo($wrapper);
                return $wrapper.height("+=" + ($additionalTable.outerHeight()))
            })
        };
        return MyLeaguesAnimation
    })();
    if (typeof window !== "undefined" && window !== null) {
        if ((base = window.cjs).MyLeaguesAnimation == null) {
            base.MyLeaguesAnimation = MyLeaguesAnimation
        }
    } else {
        if (exports.MyLeaguesAnimation == null) {
            exports.MyLeaguesAnimation = MyLeaguesAnimation
        }
    }
}).call(this);
(function() {
    var MyLeagues, base;
    MyLeagues = (function() {
        MyLeagues.prototype.isFunction = function(fnct) {
            return Object.prototype.toString.call(fnct === "[object Function]")
        };

        function MyLeagues(_lsid, _topLeagues, _defaultTopLeagues, _topLeaguesGetter, _contextId, _showLoginNeedMsgOnly, _addMyleagueStr, _removeMyleagueStr, _loginNeededStr, _$, _dic) {
            this._lsid = _lsid;
            this._topLeagues = _topLeagues != null ? _topLeagues : {};
            this._defaultTopLeagues = _defaultTopLeagues;
            this._topLeaguesGetter = _topLeaguesGetter;
            this._contextId = _contextId;
            this._showLoginNeedMsgOnly = _showLoginNeedMsgOnly;
            this._addMyleagueStr = _addMyleagueStr;
            this._removeMyleagueStr = _removeMyleagueStr;
            this._loginNeededStr = _loginNeededStr;
            this._$ = _$ != null ? _$ : $;
            this._dic = _dic != null ? _dic : cjs.dic;
            this._callbacks = {};
            this._dataKey = 'myLeagues';
            this._toggleButtonClass = 'toggleMyLeague';
            this._unconfirmedToggles = {};
            this._tooltipGetter = this._dic.get('util_enviroment').getTooltipObject;
            this.util_element = this._dic.get('util_element');
            this._parentSelectorsForTooltip = {
                '#ls-search-window': true,
                '#fscountry': true,
                '.tournament-page #my-leagues-list': false,
                '.tournament-page': true
            };
            this._superTemplateDefinition = this._dic.get('util_enviroment').getSuperTemplateDefinition()
        }
        MyLeagues.prototype._getLabelKey = function(labelId) {
            var labelKey, leagueHolder, leagueItem, sportId;
            leagueHolder = this._dic.get('dataLeagueHolderProxy').findLeagueHolderByLeagueId(labelId);
            if (leagueHolder === false) {
                return null
            }
            leagueItem = leagueHolder.getLeague(labelId);
            sportId = parseInt(leagueItem.getValue('sport_id'));
            labelKey = sportId + "_" + (leagueItem.getTournamentTemplateKey());
            return labelKey
        };
        MyLeagues.prototype.encodeLabelKey = function(labelKey) {
            var encodedLabelKey;
            encodedLabelKey = labelKey.replace(/^([0-9]+)_([0-9]+)_(.*)$/, (function(_this) {
                return function(full, sportId, superTemplateId, tail) {
                    var categoryId;
                    if ((_this._superTemplateDefinition[superTemplateId] != null) && (_this._superTemplateDefinition[superTemplateId]['category_id'] != null)) {
                        categoryId = _this._superTemplateDefinition[superTemplateId]['category_id']
                    } else {
                        categoryId = 10 * superTemplateId
                    }
                    return sportId + '_' + categoryId + '_' + tail
                }
            })(this));
            return encodedLabelKey
        };
        MyLeagues.prototype.decodeLabelKey = function(labelKey) {
            var decodedLabelKey;
            decodedLabelKey = labelKey.replace(/^([0-9]+)_([0-9]+)_(.*)$/, (function(_this) {
                return function(full, sportId, categoryKey, tail) {
                    var item, ref, superTemplateId;
                    sportId = parseInt(sportId);
                    if (_this._dic.get('util_sport').isCategorySport(sportId)) {
                        if (categoryKey.length === 4) {
                            categoryKey = parseInt(categoryKey);
                            ref = _this._superTemplateDefinition;
                            for (superTemplateId in ref) {
                                item = ref[superTemplateId];
                                if (parseInt(item['sport_id']) === sportId && parseInt(item['category_id']) === categoryKey) {
                                    return sportId + '_' + superTemplateId + '_' + tail
                                }
                            }
                            return ''
                        } else if (categoryKey.length > 4 && categoryKey.substr(-1) === '0') {
                            return sportId + '_' + categoryKey.substr(0, categoryKey.length - 1) + '_' + tail
                        } else {
                            return ''
                        }
                    } else {
                        return sportId + '_' + categoryKey + '_' + tail
                    }
                }
            })(this));
            return decodedLabelKey
        };
        MyLeagues.prototype._getDataKey = function(labelKey) {
            var context;
            if (labelKey != null) {
                context = labelKey.replace(/^([0-9]+)_.*/, '$1')
            }
            if (!context) {
                context = this._contextId
            }
            return this._dataKey + "." + context
        };
        MyLeagues.prototype._getToggleConfirmCallback = function(labelKey) {
            return (function(myLeagues) {
                return function() {
                    return delete myLeagues._unconfirmedToggles[labelKey]
                }
            })(this)
        };
        MyLeagues.prototype._getToggleRollbackCallback = function(labelKey, adding) {
            if (adding == null) {
                adding = false
            }
            return (function(myLeagues) {
                return function() {
                    if (myLeagues._lsid.loggedIn()) {
                        myLeagues._lsid.showTechnicalError()
                    }
                    myLeagues._runCallback((adding ? 'remove' : 'add'), [labelKey]);
                    return myLeagues.reloadToggleIcons(labelKey)
                }
            })(this)
        };
        MyLeagues.prototype._createCallbackGroup = function(callbacks, params) {
            var myLeagues;
            if (callbacks == null) {
                callbacks = []
            }
            if (params == null) {
                params = []
            }
            myLeagues = this;
            return function() {
                var callback, i, len, results;
                if (!params.length) {
                    params = arguments
                }
                results = [];
                for (i = 0, len = callbacks.length; i < len; i++) {
                    callback = callbacks[i];
                    results.push(setTimeout((function(callbackFunction) {
                        return function() {
                            return callbackFunction.apply(myLeagues, params)
                        }
                    })(callback), 0))
                }
                return results
            }
        };
        MyLeagues.prototype._runCallback = function(triggerName, params) {
            if (triggerName == null) {
                triggerName = ''
            }
            if (this._callbacks[triggerName] != null) {
                return this._createCallbackGroup(this._callbacks[triggerName], params)()
            }
        };
        MyLeagues.prototype.registerCallback = function(triggerName, callback) {
            if (triggerName == null) {
                triggerName = ''
            }
            if (!this.isFunction(callback)) {
                return false
            }
            if (this._callbacks[triggerName] == null) {
                this._callbacks[triggerName] = []
            }
            return this._callbacks[triggerName].push(callback)
        };
        MyLeagues.prototype.isTop = function(labelId, labelKey) {
            var topLeagues;
            if (labelId == null) {
                labelId = null
            }
            if (labelKey == null) {
                labelKey = null
            }
            if (labelKey == null) {
                labelKey = this._getLabelKey(labelId)
            }
            if (!labelKey) {
                return false
            }
            topLeagues = this._lsid.getData(this._getDataKey(labelKey));
            if (topLeagues != null) {
                return topLeagues.hasOwnProperty(labelKey)
            }
            if (this._topLeagues.hasOwnProperty(labelKey)) {
                return true
            }
            return this._defaultTopLeagues.isTop(labelId, labelKey)
        };
        MyLeagues.prototype.getLabelIdsForKey = function(labelKey) {
            var ZH, labelIds, sportId;
            sportId = labelKey.replace(/([0-9]+)_(.*)/, '$1');
            ZH = labelKey.replace(/([0-9]+)_(.*)/, '$2');
            labelIds = {};
            this._dic.get('dataLeagueHolderProxy').eachHandler(function(scopeName, leagueHandler) {
                return leagueHandler.each(function(index, id) {
                    var leagueItem;
                    leagueItem = this.getItem(id);
                    if (leagueItem.getValue('sport_id') === sportId && leagueItem.getTournamentTemplateKey() === ZH) {
                        return labelIds[id] = id
                    }
                })
            });
            return this._dic.get('util_object').keys(labelIds)
        };
        MyLeagues.prototype.getTopLabelKeys = function() {
            var dataKey, i, len, sportId, sportIds, topLabelKey, topLabelKeys, topLeagues, used, utilSport;
            utilSport = this._dic.get('util_sport');
            sportId = utilSport.getMainSport(this._contextId);
            if (utilSport.isGroupSport(sportId)) {
                sportIds = utilSport.getSportIdsInParentSport(sportId)
            } else {
                sportIds = [sportId]
            }
            topLabelKeys = [];
            used = false;
            for (i = 0, len = sportIds.length; i < len; i++) {
                sportId = sportIds[i];
                dataKey = this._dataKey + "." + sportId;
                topLeagues = this._lsid.getData(dataKey);
                if ((topLeagues != null ? topLeagues.used : void 0) != null) {
                    used = true
                }
                if (topLeagues == null) {
                    continue
                }
                for (topLabelKey in topLeagues) {
                    if (topLabelKey !== 'used') {
                        topLabelKeys.push(topLabelKey)
                    }
                }
            }
            if (topLabelKeys.length === 0 && !used) {
                for (topLabelKey in this._topLeagues) {
                    if (topLabelKey !== 'used') {
                        topLabelKeys.push(topLabelKey)
                    }
                }
            }
            return topLabelKeys
        };
        MyLeagues.prototype.isEditable = function() {
            return true
        };
        MyLeagues.prototype.getToggleIcon = function(labelId, labelKey, strObj, appendJs) {
            var iconClass, iconTitle;
            if (labelId == null) {
                labelId = null
            }
            if (labelKey == null) {
                labelKey = null
            }
            if (strObj == null) {
                strObj = 'cjs.myLeagues'
            }
            if (appendJs == null) {
                appendJs = ''
            }
            if (labelKey == null) {
                labelKey = this._getLabelKey(labelId)
            }
            if (!labelKey) {
                return ''
            }
            iconClass = this._toggleButtonClass;
            if (this.isTop(labelId, labelKey)) {
                iconClass += ' active';
                iconTitle = this._removeMyleagueStr
            } else {
                iconTitle = this._addMyleagueStr
            }
            return "<span class=\"" + iconClass + " " + labelKey + "\" title=\"" + iconTitle + "\" data-label-key=\"" + labelKey + "\" onclick=\"" + strObj + ".toggleTop('" + labelKey + "', event);" + appendJs + " return false;\"></span>"
        };
        MyLeagues.prototype.reloadToggleIcons = function(labelKey) {
            return this._$("." + this._toggleButtonClass + "." + labelKey).replaceWith(this.getToggleIcon(null, labelKey))
        };
        MyLeagues.prototype.toggleTop = function(labelKey, event) {
            var confirmToggleCallback, dataKey, elementIndex, elementSelector, labelKeySportId, loginJq, msgDiv, searchWindow, topLabelKey, topLeagueToggler, topLeagues;
            if (event == null) {
                event = null
            }
            if (event) {
                elementSelector = this.util_element.createSelectorFromEvent(event, ['active'])
            }
            elementIndex = this.util_element.getIndexFromSelectorAndEvent(elementSelector, event);
            if (!this._lsid.loggedIn()) {
                if (this._showLoginNeedMsgOnly) {
                    this._lsid._showMessage(this._loginNeededStr, true)
                } else {
                    msgDiv = this._$(document.createElement('div'));
                    msgDiv.addClass("lsid-messages");
                    if (this._dic.get('util_config').get('app', 'registration', 'version') === 2) {
                        msgDiv.addClass("reg-version-two")
                    }
                    msgDiv.append(this._$(document.createElement('div')).addClass("message").addClass("err").html(this._loginNeededStr));
                    if (this._dic.get('util_config').get('app', 'registration', 'version') === 2) {
                        loginJq = [{
                            "selector": "#login-content",
                            "functionName": "prepend",
                            "params": [msgDiv]
                        }]
                    } else {
                        loginJq = [{
                            "selector": "#login-form",
                            "functionName": "prepend",
                            "params": [msgDiv]
                        }]
                    }
                    if (this._dic.exists('SearchWindow')) {
                        searchWindow = this._dic.get('SearchWindow')
                    }
                    if (searchWindow != null ? searchWindow.isVisible() : void 0) {
                        searchWindow.showNoLoggedInMessage()
                    } else {
                        this._lsid.showDialog('login', loginJq)
                    }
                }
                return false
            }
            if (!labelKey) {
                return false
            }
            if (this._unconfirmedToggles.hasOwnProperty(labelKey) || this._unconfirmedToggles.hasOwnProperty('ALL')) {
                return false
            }
            this._unconfirmedToggles[labelKey] = true;
            confirmToggleCallback = this._getToggleConfirmCallback(labelKey);
            dataKey = this._getDataKey(labelKey);
            topLeagues = false;
            topLeagueToggler = (function(_this) {
                return function(topLeagues) {
                    var $element;
                    if (topLeagues == null) {
                        topLeagues = null
                    }
                    if (elementSelector) {
                        _this._tooltipGetter().hide(_this._$(elementSelector).get(elementIndex))
                    }
                    if (_this.isTop(null, labelKey)) {
                        _this._remove(labelKey, dataKey, topLeagues, confirmToggleCallback)
                    } else {
                        _this._add(labelKey, dataKey, topLeagues, confirmToggleCallback)
                    }
                    _this.reloadToggleIcons(labelKey);
                    if (_this._tooltipOnElementCanBeDisplayed(elementSelector)) {
                        $element = _this._$(elementSelector);
                        if ($element.length) {
                            return _this._tooltipGetter().show($element.get(elementIndex), event, true)
                        }
                    }
                }
            })(this);
            if (this._lsid.getData(dataKey) == null) {
                topLeagues = {};
                for (topLabelKey in this._topLeagues) {
                    topLeagues[topLabelKey] = true
                }
                this._unconfirmedToggles['ALL'] = true;
                confirmToggleCallback = this._getToggleConfirmCallback('ALL');
                delete this._unconfirmedToggles[labelKey];
                labelKeySportId = labelKey.replace(/^([0-9]+)_.*/, '$1');
                if (("" + this._contextId) === labelKeySportId) {
                    topLeagueToggler(topLeagues)
                } else {
                    this._topLeaguesGetter(labelKeySportId, topLeagueToggler)
                }
            } else {
                topLeagueToggler(topLeagues)
            }
            return true
        };
        MyLeagues.prototype._add = function(labelKey, dataKey, topLeagues, confirmToggleCallback) {
            var toggleRollbackCallback;
            toggleRollbackCallback = this._getToggleRollbackCallback(labelKey, true);
            if (topLeagues) {
                topLeagues[labelKey] = true;
                topLeagues.used = true;
                this._lsid.storeData(topLeagues, dataKey, confirmToggleCallback, this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]))
            } else {
                this._lsid.storeData(true, dataKey + "." + labelKey, confirmToggleCallback, this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]))
            }
            return this._runCallback('add', [labelKey])
        };
        MyLeagues.prototype._remove = function(labelKey, dataKey, topLeagues, confirmToggleCallback) {
            var toggleRollbackCallback;
            toggleRollbackCallback = this._getToggleRollbackCallback(labelKey);
            if (topLeagues) {
                delete topLeagues[labelKey];
                topLeagues.used = true;
                this._lsid.storeData(topLeagues, dataKey, confirmToggleCallback, this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]))
            } else {
                this._lsid.removeData(dataKey + "." + labelKey, confirmToggleCallback, this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]))
            }
            return this._runCallback('remove', [labelKey])
        };
        MyLeagues.prototype._tooltipOnElementCanBeDisplayed = function(elementSelector) {
            var hasParent, isAllowed, parentSelector, ref;
            ref = this._parentSelectorsForTooltip;
            for (parentSelector in ref) {
                isAllowed = ref[parentSelector];
                hasParent = this._$(elementSelector).parents(parentSelector).length > 0;
                if (hasParent) {
                    return isAllowed
                }
            }
            return false
        };
        MyLeagues.prototype.delegateTooltips = function() {
            var mouseenter, mouseleave;
            mouseenter = (function(_this) {
                return function(e) {
                    var ref;
                    if (((ref = e.relatedTarget) != null ? ref.parentNode : void 0) != null) {
                        return _this._tooltipGetter().show(e.currentTarget, e, true)
                    }
                }
            })(this);
            mouseleave = (function(_this) {
                return function(e) {
                    return _this._tooltipGetter().hide(e.currentTarget)
                }
            })(this);
            this._$('body').delegate("." + this._toggleButtonClass, 'mouseenter', mouseenter);
            return this._$('body').delegate("." + this._toggleButtonClass, 'mouseleave', mouseleave)
        };
        return MyLeagues
    })();
    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).MyLeagues == null) {
            base.MyLeagues = MyLeagues
        }
    } else {
        if (exports.MyLeagues == null) {
            exports.MyLeagues = MyLeagues
        }
    }
}).call(this);
(function() {
    var MyTeamsMenu;
    MyTeamsMenu = (function() {
        MyTeamsMenu.prototype.UL_ID = 'my-teams-list';
        MyTeamsMenu.prototype.HEAD_COUNT_SELECTOR = '.my-teams .head .count';
        MyTeamsMenu.prototype.LOGO_FILENAME_MIN_LENGTH = 16;
        MyTeamsMenu.prototype.PARTICIPANT_NAME_MAX_CHARS = 17;

        function MyTeamsMenu(myTeams, util_enviroment, util_trans, util_string, util_sport, util_url, HtmlTemplate, $) {
            this.myTeams = myTeams;
            this.util_enviroment = util_enviroment;
            this.util_trans = util_trans;
            this.util_string = util_string;
            this.util_sport = util_sport;
            this.util_url = util_url;
            this.HtmlTemplate = HtmlTemplate;
            this.$ = $;
            this._sportId = this.util_sport.getId();
            this._data = null;
            this._loadData();
            this.myTeams.registerCallback('dataLoaded', (function(_this) {
                return function() {
                    return _this.reload()
                }
            })(this));
            this.myTeams.registerCallback('remove', (function(_this) {
                return function() {
                    return _this.reload()
                }
            })(this));
            this.draw()
        }
        MyTeamsMenu.prototype._loadData = function() {
            return this._data = this.myTeams.getParticipantsData(this._sportId)
        };
        MyTeamsMenu.prototype._drawCount = function(count) {
            return this.$("" + this.HEAD_COUNT_SELECTOR).text(count != null ? '(' + count + ')' : '')
        };
        MyTeamsMenu.prototype._drawEmpty = function() {
            var html, htmlTemplates;
            this._drawCount(0);
            htmlTemplates = this.util_enviroment.getHtmlTemplate();
            html = this.HtmlTemplate.render(htmlTemplates.TPL_MY_TEAMS_MY_TEAMS_MENU_EMPTY, {
                htmlContent: this.util_trans('TRANS_MY_TEAMS_LEFT_MENU_TEXT').replace('[*]', '<span class="toggleMyTeam"></span>')
            });
            return this.$("#" + this.UL_ID).html(html)
        };
        MyTeamsMenu.prototype._drawLoading = function() {
            var html, htmlTemplates;
            this._drawCount(null);
            htmlTemplates = this.util_enviroment.getHtmlTemplate();
            html = this.HtmlTemplate.render(htmlTemplates.TPL_MY_TEAMS_MY_TEAMS_MENU_LOADING, {});
            return this.$("#" + this.UL_ID).html(html)
        };
        MyTeamsMenu.prototype.reload = function() {
            this._loadData();
            return this.draw()
        };
        MyTeamsMenu.prototype.draw = function() {
            var data, html, htmlTemplates, i, len, participantData, participantKey, templateData, tmpData;
            if (this._data == null) {
                return this._drawEmpty()
            }
            tmpData = this.$.extend(true, {}, this._data);
            data = [];
            for (participantKey in tmpData) {
                participantData = tmpData[participantKey];
                participantData['participantKey'] = participantKey;
                data.push(participantData)
            }
            if (this.myTeams.getCount(this._sportId) !== data.length) {
                return this._drawLoading()
            } else if (data.length === 0) {
                return this._drawEmpty()
            }
            data.sort((function(data, utilString) {
                return function(a, b) {
                    if (!a.hasOwnProperty('name')) {
                        return -1
                    }
                    if (!b.hasOwnProperty('name')) {
                        return 1
                    }
                    return utilString.compare(a.name, b.name)
                }
            })(data, this.util_string));
            templateData = [];
            for (i = 0, len = data.length; i < len; i++) {
                participantData = data[i];
                participantKey = participantData['participantKey'];
                templateData.push({
                    logo: this.getLogo(participantKey),
                    countryId: this.getCountryId(participantKey),
                    title: this.getTitle(participantKey),
                    url: this.getUrl(participantKey),
                    name: this.util_string.shorterText(this.getName(participantKey), this.PARTICIPANT_NAME_MAX_CHARS),
                    htmlToggleIcon: this.myTeams.getToggleIcon(participantKey)
                })
            }
            htmlTemplates = this.util_enviroment.getHtmlTemplate();
            html = this.HtmlTemplate.render(htmlTemplates.TPL_MY_TEAMS_MY_TEAMS_MENU, {
                items: templateData
            });
            this._drawCount(templateData.length);
            return this.$("#" + this.UL_ID).html(html)
        };
        MyTeamsMenu.prototype.getCountryId = function(participantKey) {
            return this._getDataValue(participantKey, 'countryId')
        };
        MyTeamsMenu.prototype.getName = function(participantKey) {
            return this._getDataValue(participantKey, 'name')
        };
        MyTeamsMenu.prototype.getTitle = function(participantKey) {
            return this._getDataValue(participantKey, 'title')
        };
        MyTeamsMenu.prototype.getUrl = function(participantKey) {
            return this._getDataValue(participantKey, 'url')
        };
        MyTeamsMenu.prototype.getLogo = function(participantKey) {
            var baseImageDataUrl, logo;
            logo = this._getDataValue(participantKey, 'logo');
            if (logo === 'team') {
                return this.util_url.getEmptyTeamLogo()
            } else if ((logo != null ? logo.length : void 0) > this.LOGO_FILENAME_MIN_LENGTH) {
                baseImageDataUrl = this.util_url.getBaseImageData();
                return "" + baseImageDataUrl + logo
            }
            return null
        };
        MyTeamsMenu.prototype._getDataValue = function(participantKey, value) {
            var ref;
            if (((ref = this._data[participantKey]) != null ? ref[value] : void 0) != null) {
                return this._data[participantKey][value]
            } else {
                return null
            }
        };
        return MyTeamsMenu
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('MyTeamsMenu', MyTeamsMenu, ['myTeamsMenu'])
}).call(this);
(function() {
    var MyTeams, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    MyTeams = (function() {
        MyTeams.prototype.DATA_KEY = 'myTeams';
        MyTeams.prototype.EVENTS_KEY = 'events2';
        MyTeams.prototype.PARTICIPANTS_KEY = 'participants2';
        MyTeams.prototype.DATA_AUTOSYNC_KEY = 'dataAutosyncParticipantRequest2';
        MyTeams.prototype.DATA_AUTOSYNC_INTERVAL = 86400000;
        MyTeams.prototype.TOGGLE_BUTTON_CLASS = 'toggleMyTeam';
        MyTeams.prototype.FEED_ACTION = 'my-teams-events-data-merged';

        function MyTeams(util_enviroment, util_browser, util_trans, util_config, util_page, util_object, util_sport, dataEventHolderProxy, dataLeagueHolderProxy, dataParticipantHolder, clientStorage, $, DicProxy) {
            this.util_enviroment = util_enviroment;
            this.util_browser = util_browser;
            this.util_trans = util_trans;
            this.util_config = util_config;
            this.util_page = util_page;
            this.util_object = util_object;
            this.util_sport = util_sport;
            this.dataEventHolderProxy = dataEventHolderProxy;
            this.dataLeagueHolderProxy = dataLeagueHolderProxy;
            this.dataParticipantHolder = dataParticipantHolder;
            this.clientStorage = clientStorage;
            this.$ = $;
            this.DicProxy = DicProxy;
            this._lsid = this.util_enviroment.getLoginClientObject();
            this._cutAndSaveAllLsidData(this._lsid.getData(this._getDataKeyAll()));
            this._contextId = this.util_sport.getId();
            this._showLoginNeedMsgOnly = this.util_browser.isDeprecated(true);
            this._callbacks = {};
            this._dataAutosyncLastSync = this._read(this.DATA_AUTOSYNC_KEY);
            if (!this._dataAutosyncLastSync) {
                this._dataAutosyncLastSync = {}
            }
            this._dataAutosyncIntervalId = null;
            this._unconfirmedToggles = {};
            this._loadData();
            this.startDataAutosync()
        }
        MyTeams.prototype.reload = function() {
            this._loadData();
            return this.restartDataAutosync()
        };
        MyTeams.prototype._loadData = function() {
            this._participants = this._read(this.PARTICIPANTS_KEY);
            if (!this._participants) {
                this._participants = {}
            }
            this._events = this._read(this.EVENTS_KEY);
            if (!this._events) {
                return this._events = {}
            }
        };
        MyTeams.prototype.stopDataAutosync = function() {
            if (this._dataAutosyncIntervalId != null) {
                return clearInterval(this._dataAutosyncIntervalId)
            }
        };
        MyTeams.prototype.startDataAutosync = function() {
            this._dataAutosync();
            return this._dataAutosyncIntervalId = setInterval((function(_this) {
                return function() {
                    return _this._dataAutosync()
                }
            })(this), this.DATA_AUTOSYNC_INTERVAL)
        };
        MyTeams.prototype.restartDataAutosync = function() {
            this.stopDataAutosync();
            return this.startDataAutosync()
        };
        MyTeams.prototype._isParticipantInSync = function(participantKey, timestamp) {
            var ref;
            if (!timestamp) {
                timestamp = this._now()
            }
            return (((ref = this._dataAutosyncLastSync) != null ? ref[participantKey] : void 0) != null) && (this._dataAutosyncLastSync[participantKey] + this.DATA_AUTOSYNC_INTERVAL > timestamp)
        };
        MyTeams.prototype._getParticipantId = function(participantKey) {
            return participantKey.replace(/^[0-9]+_/, '')
        };
        MyTeams.prototype._dataAutosync = function() {
            var i, len, participantIds, participantKey, participantKeysAll;
            participantIds = [];
            participantKeysAll = this.getSelectedParticipantKeysAll();
            if (participantKeysAll != null) {
                for (i = 0, len = participantKeysAll.length; i < len; i++) {
                    participantKey = participantKeysAll[i];
                    if (!this._isParticipantInSync(participantKey, this._now())) {
                        participantIds.push(this._getParticipantId(participantKey))
                    }
                }
            }
            if (participantIds.length > 0) {
                return this._dataAutosyncRequest(participantIds)
            }
        };
        MyTeams.prototype._dataAutosyncRequest = function(participantIds) {
            var feedRequest, maximumCount;
            if (!participantIds.length) {
                return false
            }
            maximumCount = this.util_config.get('app', 'myteams', 'maximum_count');
            if (this._isOverMaximumCount(participantIds.length, maximumCount)) {
                participantIds.splice(maximumCount - participantIds.length)
            }
            feedRequest = this.util_enviroment.getFeedRequestObject();
            return this.DicProxy.onReady((function(_this) {
                return function() {
                    return feedRequest.execute(_this.FEED_ACTION, null, function(responseStatus, responseHeaders, responseContent, responseTrigger, responseCustomHeaders) {
                        return _this._dataAutosyncCallback(responseStatus, responseHeaders, responseContent, responseTrigger, responseCustomHeaders, participantIds)
                    }, {
                        participantIds: participantIds
                    })
                }
            })(this))
        };
        MyTeams.prototype.reloadParticipants = function(participantIds) {
            var i, len, participantKey, participantKeysAll;
            if (participantIds == null) {
                participantIds = null
            }
            if (participantIds == null) {
                participantIds = [];
                participantKeysAll = this.getSelectedParticipantKeysAll();
                if (participantKeysAll != null) {
                    for (i = 0, len = participantKeysAll.length; i < len; i++) {
                        participantKey = participantKeysAll[i];
                        participantIds.push(this._getParticipantId(participantKey))
                    }
                }
            }
            if (participantIds.length > 0) {
                this._dataAutosyncRequest(participantIds);
                return true
            }
            return false
        };
        MyTeams.prototype._getSportIdByEventId = function(eventId) {
            var part;
            if (eventId == null) {
                return null
            }
            part = eventId.match(/^g_([0-9]+)_.*/);
            if ((part != null ? part[1] : void 0) != null) {
                return parseInt(part[1])
            } else {
                return null
            }
        };
        MyTeams.prototype._getDataKey = function(participantKey) {
            var context;
            if (participantKey != null) {
                context = participantKey.replace(/^([0-9]+)_.*/, '$1')
            }
            if (!context) {
                context = this._contextId
            }
            return this._getDataKeyBySport(context)
        };
        MyTeams.prototype._getDataKeyBySport = function(context) {
            return this.DATA_KEY + "." + context
        };
        MyTeams.prototype._getDataKeyAll = function() {
            return this.DATA_KEY
        };
        MyTeams.prototype._getToggleConfirmCallback = function(participantKey) {
            return (function(myTeams) {
                return function() {
                    return delete myTeams._unconfirmedToggles[participantKey]
                }
            })(this)
        };
        MyTeams.prototype._getToggleRollbackCallback = function(participantKey, adding) {
            if (adding == null) {
                adding = false
            }
            return (function(myTeams) {
                return function() {
                    if (myTeams._lsid.loggedIn()) {
                        myTeams._lsid.showTechnicalError()
                    }
                    myTeams._runCallback((adding ? 'remove' : 'add'), [participantKey]);
                    return myTeams.reloadToggleIcons(participantKey)
                }
            })(this)
        };
        MyTeams.prototype.isSelected = function(participantKey) {
            var selectedTeams;
            selectedTeams = this._lsid.getData(this._getDataKey(participantKey));
            if (selectedTeams != null) {
                return selectedTeams.hasOwnProperty(participantKey)
            }
            return false
        };
        MyTeams.prototype.getParticipantData = function(participantKey) {
            var ref, sport, sportId;
            ref = this._participants;
            for (sportId in ref) {
                sport = ref[sportId];
                if (sport[participantKey] != null) {
                    return sport[participantKey]
                }
            }
            return null
        };
        MyTeams.prototype.getParticipantsData = function(sportId) {
            var data, participantData, participantKey, participants;
            if (!this._lsid.loggedIn()) {
                return null
            }
            participants = this._participants[sportId] != null ? this._participants[sportId] : {};
            data = {};
            for (participantKey in participants) {
                participantData = participants[participantKey];
                if (this.isSelected(participantKey)) {
                    data[participantKey] = participantData
                }
            }
            return data
        };
        MyTeams.prototype.getParticipantsDataAll = function() {
            var participant, participantKey, participants, ref, sport, sportId;
            if (!this._lsid.loggedIn()) {
                return null
            }
            participants = {};
            ref = this._participants;
            for (sportId in ref) {
                sport = ref[sportId];
                for (participantKey in sport) {
                    participant = sport[participantKey];
                    participants[participantKey] = participant
                }
            }
            return participants
        };
        MyTeams.prototype.getParticipantsEvents = function() {
            var data, events, participantKey, ref;
            if (!this._lsid.loggedIn()) {
                return {}
            }
            data = {};
            ref = this._events;
            for (participantKey in ref) {
                events = ref[participantKey];
                if (this.isSelected(participantKey)) {
                    data[participantKey] = events
                }
            }
            return data
        };
        MyTeams.prototype.getSports = function() {
            var eventKey, events, i, len, participantKey, participantsEvents, sports;
            sports = {};
            participantsEvents = this.getParticipantsEvents();
            for (participantKey in participantsEvents) {
                events = participantsEvents[participantKey];
                for (i = 0, len = events.length; i < len; i++) {
                    eventKey = events[i];
                    sports[eventKey.split('_')[1]] = true
                }
            }
            return Object.getOwnPropertyNames(sports)
        };
        MyTeams.prototype.getParticipantEvents = function(participantKey) {
            var events;
            events = this.getParticipantsEvents();
            if ((events[participantKey] != null) && events[participantKey].length > 0) {
                return events[participantKey]
            } else {
                return []
            }
        };
        MyTeams.prototype.getSelectedParticipantKeysAll = function(contextId) {
            var selectedParticipantKey, selectedParticipantKeys, selectedTeams, sportId, sports;
            if (contextId == null) {
                contextId = null
            }
            sports = this._lsid.getData(this._getDataKeyAll());
            if (sports === null) {
                return null
            }
            sports = this._cutAndSaveAllLsidData(sports);
            selectedParticipantKeys = [];
            for (sportId in sports) {
                selectedTeams = sports[sportId];
                if (contextId && parseInt(sportId) !== contextId) {
                    continue
                }
                for (selectedParticipantKey in selectedTeams) {
                    if (selectedParticipantKey !== 'used') {
                        selectedParticipantKeys.push(selectedParticipantKey)
                    }
                }
            }
            return selectedParticipantKeys
        };
        MyTeams.prototype.getToggleIcon = function(participantKey, noLoggedInCallbackStr, selected, strObj, appendJs) {
            var iconClass, iconClasses, iconTitle;
            if (noLoggedInCallbackStr == null) {
                noLoggedInCallbackStr = null
            }
            if (selected == null) {
                selected = null
            }
            if (strObj == null) {
                strObj = 'cjs.myTeams'
            }
            if (appendJs == null) {
                appendJs = ''
            }
            iconClasses = [this.TOGGLE_BUTTON_CLASS];
            if (selected == null) {
                selected = this.isSelected(participantKey)
            }
            if (selected) {
                iconClasses.push('active');
                iconTitle = this.util_trans('TRANS_MY_TEAMS_REMOVE')
            } else {
                iconTitle = this.util_trans('TRANS_MY_TEAMS_ADD')
            }
            noLoggedInCallbackStr = noLoggedInCallbackStr != null ? ", " + noLoggedInCallbackStr : '';
            iconClasses.push(participantKey);
            iconClass = iconClasses.join(' ');
            return "<span class=\"" + iconClass + "\" title=\"" + iconTitle + "\" onclick=\"tt.hide(this); " + strObj + ".toggle('" + participantKey + "'" + noLoggedInCallbackStr + ");" + appendJs + " event.stopPropagation();\"></span>"
        };
        MyTeams.prototype.reloadToggleIcons = function(participantKey) {
            var i, keys, len, results;
            if ((participantKey != null) && participantKey) {
                this.$("." + this.TOGGLE_BUTTON_CLASS + "." + participantKey).removeClass('active');
                return this.$("." + this.TOGGLE_BUTTON_CLASS + "." + participantKey).replaceWith(this.getToggleIcon(participantKey))
            } else {
                this.$("." + this.TOGGLE_BUTTON_CLASS).removeClass('active');
                keys = this.getSelectedParticipantKeysAll();
                if ((keys != null) && keys.length) {
                    results = [];
                    for (i = 0, len = keys.length; i < len; i++) {
                        participantKey = keys[i];
                        results.push(this.$("." + this.TOGGLE_BUTTON_CLASS + "." + participantKey).replaceWith(this.getToggleIcon(participantKey)))
                    }
                    return results
                }
            }
        };
        MyTeams.prototype.toggle = function(participantKey, noLoggedInCallback) {
            if (noLoggedInCallback == null) {
                noLoggedInCallback = null
            }
            if (!this._lsid.loggedIn()) {
                return this._toggleWhenNotLoggedIn(noLoggedInCallback)
            }
            if (!participantKey) {
                return false
            }
            return this._toggleWhenLoggedIn(participantKey)
        };
        MyTeams.prototype._toggleWhenNotLoggedIn = function(callback) {
            var loginJq, msgDiv;
            if (callback == null) {
                callback = null
            }
            if (this._showLoginNeedMsgOnly) {
                this._lsid._showMessage(this.util_trans('TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER'), true)
            } else {
                if (callback != null) {
                    callback();
                    return false
                }
                if (this.util_page.isFullPage()) {
                    msgDiv = this.$('<div>');
                    msgDiv.addClass("lsid-messages");
                    if (this.util_config.get('app', 'registration', 'version') === 2) {
                        msgDiv.addClass("reg-version-two")
                    }
                    msgDiv.append(this.$('<div>').addClass("message").addClass("err").html(this.util_trans('TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER')));
                    if (this.util_config.get('app', 'registration', 'version') === 2) {
                        loginJq = [{
                            "selector": "#login-content",
                            "functionName": "prepend",
                            "params": [msgDiv]
                        }]
                    } else {
                        loginJq = [{
                            "selector": "#login-form",
                            "functionName": "prepend",
                            "params": [msgDiv]
                        }]
                    }
                    this._lsid.showDialog('login', loginJq)
                } else {
                    this._lsid._showMessage(this.util_trans('TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER'), true)
                }
            }
            return false
        };
        MyTeams.prototype._toggleWhenLoggedIn = function(participantKey) {
            var confirmToggleCallback, dataKey, selectedTeamToggler, selectedTeams;
            if ((participantKey == null) || this._unconfirmedToggles.hasOwnProperty(participantKey)) {
                return false
            }
            this._unconfirmedToggles[participantKey] = true;
            confirmToggleCallback = this._getToggleConfirmCallback(participantKey);
            dataKey = this._getDataKey(participantKey);
            selectedTeams = false;
            selectedTeamToggler = (function(_this) {
                return function(selectedTeams) {
                    var toggleRollbackCallback;
                    if (selectedTeams == null) {
                        selectedTeams = null
                    }
                    if (_this.isSelected(participantKey)) {
                        toggleRollbackCallback = _this._getToggleRollbackCallback(participantKey);
                        if (selectedTeams) {
                            selectedTeams.used = true;
                            _this._lsid.storeData(selectedTeams, dataKey, confirmToggleCallback, _this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]))
                        } else {
                            _this._lsid.removeData(dataKey + "." + participantKey, confirmToggleCallback, _this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]))
                        }
                        _this._runCallback('remove', [participantKey])
                    } else {
                        if (_this._isOverMaximumCount(_this.getCount() + 1)) {
                            _this._lsid._showMessage(_this.util_trans('TRANS_MY_TEAMS_LIMIT_REACHED'), true);
                            _this._unconfirmedToggles = {};
                            return
                        }
                        toggleRollbackCallback = _this._getToggleRollbackCallback(participantKey, true);
                        if (selectedTeams) {
                            selectedTeams[participantKey] = true;
                            selectedTeams.used = true;
                            _this._lsid.storeData(selectedTeams, dataKey, confirmToggleCallback, _this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]))
                        } else {
                            _this._lsid.storeData(true, dataKey + "." + participantKey, confirmToggleCallback, _this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]))
                        }
                        _this.reloadParticipants([_this._getParticipantId(participantKey)]);
                        _this._runCallback('add', [participantKey])
                    }
                    return _this.reloadToggleIcons(participantKey)
                }
            })(this);
            if (this._lsid.getData(dataKey) == null) {
                selectedTeams = {};
                delete this._unconfirmedToggles[participantKey]
            }
            selectedTeamToggler(selectedTeams);
            return true
        };
        MyTeams.prototype.delegateTooltips = function() {
            var mouseenter, mouseleave, ttGetter;
            ttGetter = this.util_enviroment.getTooltipObject;
            mouseenter = function(event) {
                return ttGetter().show(this, event)
            };
            mouseleave = function() {
                return ttGetter().hide(this)
            };
            this.$('body').delegate("." + this.TOGGLE_BUTTON_CLASS, 'mouseenter', mouseenter);
            this.$('body').delegate("." + this.TOGGLE_BUTTON_CLASS, 'click', mouseleave);
            return this.$('body').delegate("." + this.TOGGLE_BUTTON_CLASS, 'mouseleave', mouseleave)
        };
        MyTeams.prototype._dataAutosyncCallback = function(responseStatus, responseHeaders, responseContent, responseTrigger, responseCustomHeaders, requestParticipantIds) {
            var eventId, eventScope, i, isMyGamesScope, j, leagueScope, len, len1, parse, participant, participantId, participantKey, ref, ref1, responseParticipantIds, sportId, sportIds, waste;
            responseParticipantIds = [];
            parse = this.util_enviroment.getParse();
            eventScope = this.dataEventHolderProxy.getScope();
            leagueScope = this.dataLeagueHolderProxy.getScope();
            isMyGamesScope = eventScope === this.dataEventHolderProxy.SCOPE_MYGAMES;
            if (!isMyGamesScope) {
                this.dataEventHolderProxy.setScope(this.dataEventHolderProxy.SCOPE_TEMPORARY);
                this.dataLeagueHolderProxy.setScope(this.dataLeagueHolderProxy.SCOPE_TEMPORARY)
            }
            parse(responseContent, false, false, this.FEED_ACTION);
            if (!isMyGamesScope) {
                this.dataEventHolderProxy.getHolder().reinit();
                this.dataLeagueHolderProxy.getHolder().reinit();
                this.dataEventHolderProxy.setScope(eventScope);
                this.dataLeagueHolderProxy.setScope(leagueScope)
            }
            ref = this.dataParticipantHolder.getAllContainerIds();
            for (i = 0, len = ref.length; i < len; i++) {
                participantId = ref[i];
                participant = this.dataParticipantHolder.getParticipant(participantId);
                sportId = participant.getSportId();
                sportIds = sportId instanceof Array ? sportId : [sportId];
                for (j = 0, len1 = sportIds.length; j < len1; j++) {
                    sportId = sportIds[j];
                    participantKey = sportId + '_' + participantId;
                    this._dataAutosyncLastSync[participantKey] = this._now();
                    responseParticipantIds[this._getParticipantId(participantKey)] = true;
                    if (this._participants[sportId] == null) {
                        this._participants[sportId] = {}
                    }
                    this._participants[sportId][participantKey] = {
                        'countryId': participant.getCountryId(),
                        'title': participant.getTitle(),
                        'name': participant.getShortName(),
                        'url': participant.getUrl(),
                        'logo': participant.getTableImage(),
                        'sportId': participant.getSportId()
                    };
                    this._events[participantKey] = [];
                    ref1 = participant.getEventIds();
                    for (eventId in ref1) {
                        waste = ref1[eventId];
                        if (this._getSportIdByEventId(eventId) === sportId) {
                            this._events[participantKey].push(eventId)
                        }
                    }
                }
            }
            this._cleanSelectedParticipants(requestParticipantIds, responseParticipantIds);
            this._store(this.DATA_AUTOSYNC_KEY, this._dataAutosyncLastSync);
            this._store(this.PARTICIPANTS_KEY, this._participants);
            this._store(this.EVENTS_KEY, this._events);
            this.dataEventHolderProxy.getHandler().resetIds();
            this.dataLeagueHolderProxy.getHandler().resetIds();
            return this._runCallback('dataLoaded')
        };
        MyTeams.prototype._read = function(key) {
            key = this.DATA_KEY + '_' + key;
            return JSON.parse(this.clientStorage.get(key))
        };
        MyTeams.prototype._store = function(key, value) {
            key = this.DATA_KEY + '_' + key;
            return this.clientStorage.store(key, JSON.stringify(value))
        };
        MyTeams.prototype._drop = function(key) {
            key = this.DATA_KEY + '_' + key;
            return this.clientStorage.drop(key)
        };
        MyTeams.prototype.printToggleIcons = function() {
            return this.$('div[id^=\"tomyteams_\"]').each((function(_this) {
                return function(index, obj) {
                    var participant;
                    participant = _this.$(obj).attr('id').match('^tomyteams_([0-9]+_[a-zA-Z0-9]+)');
                    if (participant != null) {
                        return _this.$(obj).append(_this.getToggleIcon(participant[1]))
                    }
                }
            })(this))
        };
        MyTeams.prototype.registerCallback = function(triggerName, callback) {
            if (this._callbacks[triggerName] == null) {
                this._callbacks[triggerName] = []
            }
            return this._callbacks[triggerName].push(callback)
        };
        MyTeams.prototype._createCallbackGroup = function(callbacks, params) {
            var myTeams;
            if (callbacks == null) {
                callbacks = []
            }
            if (params == null) {
                params = []
            }
            myTeams = this;
            return function() {
                var callback, i, len, results;
                if (!params.length) {
                    params = arguments
                }
                results = [];
                for (i = 0, len = callbacks.length; i < len; i++) {
                    callback = callbacks[i];
                    results.push(setTimeout((function(callbackFunction) {
                        return function() {
                            return callbackFunction.apply(myTeams, params)
                        }
                    })(callback), 0))
                }
                return results
            }
        };
        MyTeams.prototype._runCallback = function(triggerName, params) {
            if (triggerName == null) {
                triggerName = ''
            }
            if (this._callbacks[triggerName] != null) {
                this._createCallbackGroup(this._callbacks[triggerName], params)();
                return true
            }
            return false
        };
        MyTeams.prototype._now = function() {
            return (new Date()).getTime()
        };
        MyTeams.prototype._cutAndSaveAllLsidData = function(data) {
            var currentCount, newData, selectedParticipantKey, selectedTeams, sportId, value;
            if (data == null) {
                return {}
            }
            currentCount = 0;
            newData = {};
            for (sportId in data) {
                selectedTeams = data[sportId];
                for (selectedParticipantKey in selectedTeams) {
                    value = selectedTeams[selectedParticipantKey];
                    if (/^([0-9]+)_.*/.test(selectedParticipantKey)) {
                        currentCount++
                    }
                    if (this._isOverMaximumCount(currentCount)) {
                        this._drop(this.DATA_AUTOSYNC_KEY);
                        this._dataAutosyncLastSync = {};
                        this._drop(this.PARTICIPANTS_KEY);
                        this._participants = {};
                        this._drop(this.EVENTS_KEY);
                        this._events = {};
                        this._lsid.storeData(newData, this._getDataKeyAll());
                        return newData
                    }
                    if (newData[sportId] == null) {
                        newData[sportId] = {}
                    }
                    newData[sportId][selectedParticipantKey] = value
                }
            }
            return data
        };
        MyTeams.prototype._isOverMaximumCount = function(count, maximumCount) {
            if (maximumCount == null) {
                maximumCount = this.util_config.get('app', 'myteams', 'maximum_count')
            }
            if (maximumCount == null) {
                return false
            }
            return count > maximumCount
        };
        MyTeams.prototype.getCount = function(sportId) {
            var participantKeysAll;
            if (sportId == null) {
                sportId = null
            }
            participantKeysAll = this.getSelectedParticipantKeysAll(sportId);
            if (participantKeysAll != null) {
                return participantKeysAll.length
            } else {
                return 0
            }
        };
        MyTeams.prototype.eventExists = function(eventId) {
            var events, participantId, ref;
            ref = this.getParticipantsEvents();
            for (participantId in ref) {
                events = ref[participantId];
                if (indexOf.call(events, eventId) >= 0) {
                    return true
                }
            }
            return false
        };
        MyTeams.prototype._cleanSelectedParticipants = function(requestParticipantIds, responseParticipantIds) {
            var i, j, len, len1, lsidParticipantKey, lsidParticipantKeys, participantId;
            if (!(typeof requestParticipantIds === 'object' && typeof responseParticipantIds === 'object')) {
                return false
            }
            lsidParticipantKeys = this.getSelectedParticipantKeysAll();
            for (i = 0, len = requestParticipantIds.length; i < len; i++) {
                participantId = requestParticipantIds[i];
                if (!((responseParticipantIds[participantId] != null) || responseParticipantIds[participantId])) {
                    for (j = 0, len1 = lsidParticipantKeys.length; j < len1; j++) {
                        lsidParticipantKey = lsidParticipantKeys[j];
                        if (this._getParticipantId(lsidParticipantKey) === participantId) {
                            this.toggle(lsidParticipantKey)
                        }
                    }
                }
            }
            return true
        };
        return MyTeams
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('MyTeams', MyTeams, ['myTeams'])
}).call(this);
(function() {
    var ScrollToTop, base, cjs;
    cjs = typeof window !== "undefined" && window !== null ? window.cjs : require('../generic/generic');
    ScrollToTop = (function() {
        function ScrollToTop(_text, _jQuery, _minScrollHeight, _trackGaEvents, _gaEventTracker) {
            this._text = _text;
            this._jQuery = _jQuery;
            this._minScrollHeight = _minScrollHeight != null ? _minScrollHeight : 100;
            this._trackGaEvents = _trackGaEvents != null ? _trackGaEvents : false;
            this._gaEventTracker = _gaEventTracker != null ? _gaEventTracker : null;
            this._initialized = false
        }
        ScrollToTop.prototype.init = function(bindTo, appendTo) {
            var element;
            if (this._initialized) {
                return false
            }
            element = this._getElement();
            this._bind(this._jQuery(bindTo), this._getElement());
            this._jQuery(appendTo).append(element);
            this._initialized = true;
            return true
        };
        ScrollToTop.prototype._getElement = function() {
            var span;
            if (this._element) {
                return this._element
            }
            span = this._jQuery('<span>');
            if (this._text) {
                span.html(this._text)
            }
            this._element = this._jQuery('<div>', {
                id: 'scroll-to-top',
                style: 'display: none;',
                html: span,
                click: (function(that) {
                    return function() {
                        if ((that._trackGaEvents != null) && (that._gaEventTracker != null)) {
                            that._gaEventTracker.track_click('navigation', 'scroll-to-top')
                        }
                        that._jQuery('html, body').animate({
                            scrollTop: 0
                        }, 500)
                    }
                })(this)
            });
            return this._element
        };
        ScrollToTop.prototype._bind = function(bindTo, element) {
            bindTo.on('scroll touchmove', (function(that, bindTo, element) {
                return function(e) {
                    if (that._jQuery(window).scrollTop() < that._minScrollHeight) {
                        element.hide()
                    } else {
                        element.show()
                    }
                }
            })(this, bindTo, element));
            $('a[href="#top"]').on('click', function() {
                element.click();
                return false
            })
        };
        return ScrollToTop
    })();
    if (typeof window !== "undefined" && window !== null) {
        if ((base = window.cjs).ScrollToTop == null) {
            base.ScrollToTop = ScrollToTop
        }
    } else {
        if (exports.ScrollToTop == null) {
            exports.ScrollToTop = ScrollToTop
        }
    }
}).call(this);
! function() {
    "use strict";

    function t(o) {
        if (!o) throw new Error("No options passed to Waypoint constructor");
        if (!o.element) throw new Error("No element option passed to Waypoint constructor");
        if (!o.handler) throw new Error("No handler option passed to Waypoint constructor");
        this.key = "waypoint-" + e, this.options = t.Adapter.extend({}, t.defaults, o), this.element = this.options.element, this.adapter = new t.Adapter(this.element), this.callback = o.handler, this.axis = this.options.horizontal ? "horizontal" : "vertical", this.enabled = this.options.enabled, this.triggerPoint = null, this.group = t.Group.findOrCreate({
            name: this.options.group,
            axis: this.axis
        }), this.context = t.Context.findOrCreateByElement(this.options.context), t.offsetAliases[this.options.offset] && (this.options.offset = t.offsetAliases[this.options.offset]), this.group.add(this), this.context.add(this), i[this.key] = this, e += 1
    }
    var e = 0,
        i = {};
    t.prototype.queueTrigger = function(t) {
        this.group.queueTrigger(this, t)
    }, t.prototype.trigger = function(t) {
        this.enabled && this.callback && this.callback.apply(this, t)
    }, t.prototype.destroy = function() {
        this.context.remove(this), this.group.remove(this), delete i[this.key]
    }, t.prototype.disable = function() {
        return this.enabled = !1, this
    }, t.prototype.enable = function() {
        return this.context.refresh(), this.enabled = !0, this
    }, t.prototype.next = function() {
        return this.group.next(this)
    }, t.prototype.previous = function() {
        return this.group.previous(this)
    }, t.invokeAll = function(t) {
        var e = [];
        for (var o in i) e.push(i[o]);
        for (var n = 0, r = e.length; r > n; n++) e[n][t]()
    }, t.destroyAll = function() {
        t.invokeAll("destroy")
    }, t.disableAll = function() {
        t.invokeAll("disable")
    }, t.enableAll = function() {
        t.invokeAll("enable")
    }, t.refreshAll = function() {
        t.Context.refreshAll()
    }, t.viewportHeight = function() {
        return window.innerHeight || document.documentElement.clientHeight
    }, t.viewportWidth = function() {
        return document.documentElement.clientWidth
    }, t.adapters = [], t.defaults = {
        context: window,
        continuous: !0,
        enabled: !0,
        group: "default",
        horizontal: !1,
        offset: 0
    }, t.offsetAliases = {
        "bottom-in-view": function() {
            return this.context.innerHeight() - this.adapter.outerHeight()
        },
        "right-in-view": function() {
            return this.context.innerWidth() - this.adapter.outerWidth()
        }
    }, window.Waypoint = t
}(),
    function() {
        "use strict";

        function t(t) {
            window.setTimeout(t, 1e3 / 60)
        }

        function e(t) {
            this.element = t, this.Adapter = n.Adapter, this.adapter = new this.Adapter(t), this.key = "waypoint-context-" + i, this.didScroll = !1, this.didResize = !1, this.oldScroll = {
                x: this.adapter.scrollLeft(),
                y: this.adapter.scrollTop()
            }, this.waypoints = {
                vertical: {},
                horizontal: {}
            }, t.waypointContextKey = this.key, o[t.waypointContextKey] = this, i += 1, this.createThrottledScrollHandler(), this.createThrottledResizeHandler()
        }
        var i = 0,
            o = {},
            n = window.Waypoint,
            r = window.onload;
        e.prototype.add = function(t) {
            var e = t.options.horizontal ? "horizontal" : "vertical";
            this.waypoints[e][t.key] = t, this.refresh()
        }, e.prototype.checkEmpty = function() {
            var t = this.Adapter.isEmptyObject(this.waypoints.horizontal),
                e = this.Adapter.isEmptyObject(this.waypoints.vertical);
            t && e && (this.adapter.off(".waypoints"), delete o[this.key])
        }, e.prototype.createThrottledResizeHandler = function() {
            function t() {
                e.handleResize(), e.didResize = !1
            }
            var e = this;
            this.adapter.on("resize.waypoints", function() {
                e.didResize || (e.didResize = !0, n.requestAnimationFrame(t))
            })
        }, e.prototype.createThrottledScrollHandler = function() {
            function t() {
                e.handleScroll(), e.didScroll = !1
            }
            var e = this;
            this.adapter.on("scroll.waypoints", function() {
                (!e.didScroll || n.isTouch) && (e.didScroll = !0, n.requestAnimationFrame(t))
            })
        }, e.prototype.handleResize = function() {
            n.Context.refreshAll()
        }, e.prototype.handleScroll = function() {
            var t = {},
                e = {
                    horizontal: {
                        newScroll: this.adapter.scrollLeft(),
                        oldScroll: this.oldScroll.x,
                        forward: "right",
                        backward: "left"
                    },
                    vertical: {
                        newScroll: this.adapter.scrollTop(),
                        oldScroll: this.oldScroll.y,
                        forward: "down",
                        backward: "up"
                    }
                };
            for (var i in e) {
                var o = e[i],
                    n = o.newScroll > o.oldScroll,
                    r = n ? o.forward : o.backward;
                for (var s in this.waypoints[i]) {
                    var a = this.waypoints[i][s],
                        l = o.oldScroll < a.triggerPoint,
                        h = o.newScroll >= a.triggerPoint,
                        p = l && h,
                        u = !l && !h;
                    (p || u) && (a.queueTrigger(r), t[a.group.id] = a.group)
                }
            }
            for (var c in t) t[c].flushTriggers();
            this.oldScroll = {
                x: e.horizontal.newScroll,
                y: e.vertical.newScroll
            }
        }, e.prototype.innerHeight = function() {
            return this.element == this.element.window ? n.viewportHeight() : this.adapter.innerHeight()
        }, e.prototype.remove = function(t) {
            delete this.waypoints[t.axis][t.key], this.checkEmpty()
        }, e.prototype.innerWidth = function() {
            return this.element == this.element.window ? n.viewportWidth() : this.adapter.innerWidth()
        }, e.prototype.destroy = function() {
            var t = [];
            for (var e in this.waypoints)
                for (var i in this.waypoints[e]) t.push(this.waypoints[e][i]);
            for (var o = 0, n = t.length; n > o; o++) t[o].destroy()
        }, e.prototype.refresh = function() {
            var t, e = this.element == this.element.window,
                i = e ? void 0 : this.adapter.offset(),
                o = {};
            this.handleScroll(), t = {
                horizontal: {
                    contextOffset: e ? 0 : i.left,
                    contextScroll: e ? 0 : this.oldScroll.x,
                    contextDimension: this.innerWidth(),
                    oldScroll: this.oldScroll.x,
                    forward: "right",
                    backward: "left",
                    offsetProp: "left"
                },
                vertical: {
                    contextOffset: e ? 0 : i.top,
                    contextScroll: e ? 0 : this.oldScroll.y,
                    contextDimension: this.innerHeight(),
                    oldScroll: this.oldScroll.y,
                    forward: "down",
                    backward: "up",
                    offsetProp: "top"
                }
            };
            for (var r in t) {
                var s = t[r];
                for (var a in this.waypoints[r]) {
                    var l, h, p, u, c, d = this.waypoints[r][a],
                        f = d.options.offset,
                        w = d.triggerPoint,
                        y = 0,
                        g = null == w;
                    d.element !== d.element.window && (y = d.adapter.offset()[s.offsetProp]), "function" == typeof f ? f = f.apply(d) : "string" == typeof f && (f = parseFloat(f), d.options.offset.indexOf("%") > -1 && (f = Math.ceil(s.contextDimension * f / 100))), l = s.contextScroll - s.contextOffset, d.triggerPoint = y + l - f, h = w < s.oldScroll, p = d.triggerPoint >= s.oldScroll, u = h && p, c = !h && !p, !g && u ? (d.queueTrigger(s.backward), o[d.group.id] = d.group) : !g && c ? (d.queueTrigger(s.forward), o[d.group.id] = d.group) : g && s.oldScroll >= d.triggerPoint && (d.queueTrigger(s.forward), o[d.group.id] = d.group)
                }
            }
            return n.requestAnimationFrame(function() {
                for (var t in o) o[t].flushTriggers()
            }), this
        }, e.findOrCreateByElement = function(t) {
            return e.findByElement(t) || new e(t)
        }, e.refreshAll = function() {
            for (var t in o) o[t].refresh()
        }, e.findByElement = function(t) {
            return o[t.waypointContextKey]
        }, window.onload = function() {
            r && r(), e.refreshAll()
        }, n.requestAnimationFrame = function(e) {
            var i = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || t;
            i.call(window, e)
        }, n.Context = e
    }(),
    function() {
        "use strict";

        function t(t, e) {
            return t.triggerPoint - e.triggerPoint
        }

        function e(t, e) {
            return e.triggerPoint - t.triggerPoint
        }

        function i(t) {
            this.name = t.name, this.axis = t.axis, this.id = this.name + "-" + this.axis, this.waypoints = [], this.clearTriggerQueues(), o[this.axis][this.name] = this
        }
        var o = {
                vertical: {},
                horizontal: {}
            },
            n = window.Waypoint;
        i.prototype.add = function(t) {
            this.waypoints.push(t)
        }, i.prototype.clearTriggerQueues = function() {
            this.triggerQueues = {
                up: [],
                down: [],
                left: [],
                right: []
            }
        }, i.prototype.flushTriggers = function() {
            for (var i in this.triggerQueues) {
                var o = this.triggerQueues[i],
                    n = "up" === i || "left" === i;
                o.sort(n ? e : t);
                for (var r = 0, s = o.length; s > r; r += 1) {
                    var a = o[r];
                    (a.options.continuous || r === o.length - 1) && a.trigger([i])
                }
            }
            this.clearTriggerQueues()
        }, i.prototype.next = function(e) {
            this.waypoints.sort(t);
            var i = n.Adapter.inArray(e, this.waypoints),
                o = i === this.waypoints.length - 1;
            return o ? null : this.waypoints[i + 1]
        }, i.prototype.previous = function(e) {
            this.waypoints.sort(t);
            var i = n.Adapter.inArray(e, this.waypoints);
            return i ? this.waypoints[i - 1] : null
        }, i.prototype.queueTrigger = function(t, e) {
            this.triggerQueues[e].push(t)
        }, i.prototype.remove = function(t) {
            var e = n.Adapter.inArray(t, this.waypoints);
            e > -1 && this.waypoints.splice(e, 1)
        }, i.prototype.first = function() {
            return this.waypoints[0]
        }, i.prototype.last = function() {
            return this.waypoints[this.waypoints.length - 1]
        }, i.findOrCreate = function(t) {
            return o[t.axis][t.name] || new i(t)
        }, n.Group = i
    }(),
    function() {
        "use strict";

        function t(t) {
            this.$element = e(t)
        }
        var e = window.jQuery,
            i = window.Waypoint;
        e.each(["innerHeight", "innerWidth", "off", "offset", "on", "outerHeight", "outerWidth", "scrollLeft", "scrollTop"], function(e, i) {
            t.prototype[i] = function() {
                var t = Array.prototype.slice.call(arguments);
                return this.$element[i].apply(this.$element, t)
            }
        }), e.each(["extend", "inArray", "isEmptyObject"], function(i, o) {
            t[o] = e[o]
        }), i.adapters.push({
            name: "jquery",
            Adapter: t
        }), i.Adapter = t
    }(),
    function() {
        "use strict";

        function t(t) {
            return function() {
                var i = [],
                    o = arguments[0];
                return t.isFunction(arguments[0]) && (o = t.extend({}, arguments[1]), o.handler = arguments[0]), this.each(function() {
                    var n = t.extend({}, o, {
                        element: this
                    });
                    "string" == typeof n.context && (n.context = t(this).closest(n.context)[0]), i.push(new e(n))
                }), i
            }
        }
        var e = window.Waypoint;
        window.jQuery && (window.jQuery.fn.waypoint = t(window.jQuery)), window.Zepto && (window.Zepto.fn.waypoint = t(window.Zepto))
    }();
! function() {
    "use strict";

    function t(s) {
        this.options = e.extend({}, i.defaults, t.defaults, s), this.element = this.options.element, this.$element = e(this.element), this.createWrapper(), this.createWaypoint()
    }
    var e = window.jQuery,
        i = window.Waypoint;
    t.prototype.createWaypoint = function() {
        var t = this.options.handler;
        this.waypoint = new i(e.extend({}, this.options, {
            element: this.wrapper,
            handler: e.proxy(function(e) {
                var i = this.options.direction.indexOf(e) > -1,
                    s = i ? this.$element.outerHeight(!0) : "";
                this.$wrapper.height(s), this.$element.toggleClass(this.options.stuckClass, i), t && t.call(this, e)
            }, this)
        }))
    }, t.prototype.createWrapper = function() {
        this.options.wrapper && this.$element.wrap(this.options.wrapper), this.$wrapper = this.$element.parent(), this.wrapper = this.$wrapper[0]
    }, t.prototype.destroy = function() {
        this.$element.parent()[0] === this.wrapper && (this.waypoint.destroy(), this.$element.removeClass(this.options.stuckClass), this.options.wrapper && this.$element.unwrap())
    }, t.defaults = {
        wrapper: '<div class="sticky-wrapper" />',
        stuckClass: "stuck",
        direction: "down right"
    }, i.Sticky = t
}();
(function() {
    var BannerScroll, base;
    if (typeof window === "undefined" || window === null) {
        (typeof global !== "undefined" && global !== null ? global : window).cjs = require('../generic/generic')
    }
    BannerScroll = (function() {
        BannerScroll.prototype.POSITION_FIXED = 'fixed';
        BannerScroll.prototype.POSITION_ABSOLUTE = 'absolute';
        BannerScroll.prototype.POSITION_STATIC = 'static';

        function BannerScroll(wrapElement, jQuery) {
            this.wrapElement = wrapElement;
            this.jQuery = jQuery;
            this.originWrapElement = this.jQuery(this.wrapElement).clone();
            this.position = null;
            this.originTop = this.getOffsetTop();
            this.isManaged = false;
            this.remanageCallback = function() {};
            this.remanageCallbackEmpty = true
        }
        BannerScroll.prototype.getOriginWrapElement = function() {
            return this.originWrapElement
        };
        BannerScroll.prototype.getPosition = function() {
            return this.position
        };
        BannerScroll.prototype.resetPosition = function() {
            this.jQuery(this.getWrapElement()).css('top', '');
            this.jQuery(this.getWrapElement()).removeClass("fixed-position");
            this.jQuery(this.getWrapElement()).removeClass("absolute-position");
            this.jQuery(this.getWrapElement()).addClass("static-position");
            return this.position = this.POSITION_STATIC
        };
        BannerScroll.prototype.getWrapElement = function() {
            return this.wrapElement
        };
        BannerScroll.prototype.setToFixedPosition = function() {
            this.setRemanageCallback((function(context) {
                return function() {
                    context.setToFixedPosition()
                }
            })(this));
            if (!this.getIsManaged()) {
                return
            }
            this.resetPosition();
            this.setPosition(this.POSITION_FIXED);
            return this.jQuery(this.getWrapElement()).addClass("fixed-position")
        };
        BannerScroll.prototype.setToStaticPosition = function() {
            this.setRemanageCallback((function(context) {
                return function() {
                    context.setToStaticPosition()
                }
            })(this));
            if (!this.getIsManaged()) {
                return
            }
            this.resetPosition();
            this.setPosition(this.POSITION_STATIC);
            return this.jQuery(this.getWrapElement()).removeClass("fixed-position")
        };
        BannerScroll.prototype.setToAbsolutePosition = function(top) {
            top = this._calculateAbsoluteTopPosition(top);
            this.jQuery(this.getWrapElement()).css('left', '');
            this.resetPosition();
            this.jQuery(this.getWrapElement()).addClass("absolute-position");
            this.setPosition(this.POSITION_ABSOLUTE);
            return this.jQuery(this.getWrapElement()).css("top", top + "px")
        };
        BannerScroll.prototype.setToAbsolutePositionAnimated = function(top, callback) {
            var $wrapElement, cb;
            top = top + 10;
            $wrapElement = this.jQuery(this.getWrapElement());
            $wrapElement.css('left', '');
            $wrapElement.removeClass("static-position");
            $wrapElement.addClass("absolute-position");
            this.setPosition(this.POSITION_ABSOLUTE);
            top = this._calculateAbsoluteTopPosition(top);
            cb = function() {
                return typeof callback === "function" ? callback() : void 0
            };
            $wrapElement.css("top", top + "px");
            return cb()
        };
        BannerScroll.prototype._calculateAbsoluteTopPosition = function(top) {
            if (this.getWrapElement().parent().css('position') === 'relative' || this.getWrapElement().parent().css('position') === 'absolute') {
                top -= this.getWrapElement().parent().offset().top
            }
            return top
        };
        BannerScroll.prototype.getOffsetTop = function() {
            return this.jQuery(this.getWrapElement()).offset().top
        };
        BannerScroll.prototype.getHeight = function() {
            return this.jQuery(this.getWrapElement()).outerHeight(true)
        };
        BannerScroll.prototype.setPosition = function(position) {
            this.position = position
        };
        BannerScroll.prototype.getIsAbsolutePosition = function() {
            return this.position === this.POSITION_ABSOLUTE
        };
        BannerScroll.prototype.getIsFixedPosition = function() {
            return this.position === this.POSITION_FIXED
        };
        BannerScroll.prototype.getIsStaticPosition = function() {
            return this.position === this.POSITION_STATIC
        };
        BannerScroll.prototype.getIsManaged = function() {
            return this.isManaged
        };
        BannerScroll.prototype.setIsManaged = function(isManaged) {
            this.isManaged = isManaged
        };
        BannerScroll.prototype.remanage = function() {
            this.setIsManaged(true);
            return this.callRemanageCallback()
        };
        BannerScroll.prototype.setRemanageCallback = function(remanageCallback) {
            this.remanageCallback = remanageCallback;
            return this.remanageCallbackEmpty = false
        };
        BannerScroll.prototype.getRemanageCallbackEmpty = function() {
            return this.remanageCallbackEmpty
        };
        BannerScroll.prototype.callRemanageCallback = function() {
            this.remanageCallbackEmpty = true;
            return this.remanageCallback()
        };
        return BannerScroll
    })();
    if (typeof window !== "undefined" && window !== null ? window.cjs : void 0) {
        if ((base = window.cjs).BannerScroll == null) {
            base.BannerScroll = BannerScroll
        }
    } else {
        if (exports.BannerScroll == null) {
            exports.BannerScroll = BannerScroll
        }
    }
}).call(this);
(function() {
    var BannerScrollManager, base;
    if (typeof window === "undefined" || window === null) {
        (typeof global !== "undefined" && global !== null ? global : window).cjs = require('../generic/generic')
    }
    BannerScrollManager = (function() {
        function BannerScrollManager(jQuery, _isMobileDeviceGetter, _waypointGetter) {
            this.jQuery = jQuery;
            this._isMobileDeviceGetter = _isMobileDeviceGetter != null ? _isMobileDeviceGetter : (function() {
                return false
            });
            this._waypointGetter = _waypointGetter != null ? _waypointGetter : (function() {
                return null
            });
            this.banners = []
        }
        BannerScrollManager.prototype.addBanner = function(banner) {
            return this.banners.push(banner)
        };
        BannerScrollManager.prototype.getBanners = function() {
            return this.banners
        };
        BannerScrollManager.prototype.isMobileDevice = function() {
            return this._isMobileDeviceGetter()
        };
        BannerScrollManager.prototype.manage = function() {
            var banner, i, len, ref;
            ref = this.banners;
            for (i = 0, len = ref.length; i < len; i++) {
                banner = ref[i];
                this.manageBanner(banner)
            }
        };
        BannerScrollManager.prototype.manageBanner = function(banner) {
            if (banner.bannerObject.getIsManaged()) {
                return
            }
            banner.bannerObject.setIsManaged(true);
            if (banner.stopElementsOnUpHitTopOfView != null) {
                this.manageStopElementsOnUpHitTopOfView(banner)
            }
            if (banner.startElementsOnDownHitTopOfView != null) {
                this.manageStartElementsOnDownHitTopOfView(banner)
            }
            if (!this.isMobileDevice()) {
                if (banner.stopElementsOnHitByBottom != null) {
                    this.manageStopElementsOnHitByBottom(banner)
                }
            } else {
                this.manageMobileAnimation(banner)
            }
            if (banner.fullBannerHeightVisibleOrDisable === true && (banner.minWindowHeight === void 0 || banner.minWindowHeight < banner.bannerObject.getHeight())) {
                banner.minWindowHeight = banner.bannerObject.getHeight()
            }
            if (banner.minWindowHeight != null) {
                this.manageMinWindowHeight(banner)
            }
            if (!this.isMobileDevice() && (banner.leftPositionHandleElement != null)) {
                this.manageLeftPosition(banner)
            }
            this.manageMinWindowHeightOnResize(banner)
        };
        BannerScrollManager.prototype.manageLeftPosition = function(banner) {
            var m;
            m = function(b, context) {
                if (b.bannerObject.getPosition() !== cjs.BannerScroll.prototype.POSITION_ABSOLUTE) {
                    context.jQuery(b.bannerObject.getWrapElement()).css('left', context.jQuery(banner.leftPositionHandleElement).offset().left - context.jQuery(window).scrollLeft())
                }
            };
            m(banner, this);
            this.jQuery(window).scroll((function(b, context) {
                return function() {
                    return m(b, context)
                }
            })(banner, this))
        };
        BannerScrollManager.prototype.unmanageBanner = function(banner) {
            return banner.bannerObject.setManaged(false)
        };
        BannerScrollManager.prototype.manageMinWindowHeight = function(banner) {
            this.jQuery(window).resize((function(b, context) {
                return function() {
                    return context.manageMinWindowHeightOnResize(b)
                }
            })(banner, this))
        };
        BannerScrollManager.prototype.manageMinWindowHeightOnResize = function(banner) {
            var currentPosition, offsetTop;
            if (this.jQuery(window).height() < banner.minWindowHeight && banner.bannerObject.getIsManaged()) {
                currentPosition = banner.bannerObject.getPosition();
                if (currentPosition === null) {
                    banner.bannerObject.setIsManaged(false);
                    return
                }
                offsetTop = banner.bannerObject.getOffsetTop();
                banner.bannerObject.setToStaticPosition();
                banner.bannerObject.setRemanageCallback((function(banner, currentPosition, offsetTop) {
                    return function() {
                        switch (currentPosition) {
                            case cjs.BannerScroll.prototype.POSITION_FIXED:
                                return banner.bannerObject.setToFixedPosition();
                            case cjs.BannerScroll.prototype.POSITION_STATIC:
                                return banner.bannerObject.setToStaticPosition();
                            case cjs.BannerScroll.prototype.POSITION_ABSOLUTE:
                                return banner.bannerObject.setToAbsolutePosition(offsetTop)
                        }
                    }
                })(banner, currentPosition, offsetTop));
                banner.bannerObject.setIsManaged(false)
            } else if (this.jQuery(window).height() > banner.minWindowHeight && !banner.bannerObject.getIsManaged()) {
                banner.bannerObject.remanage()
            }
            return this.jQuery(window).scroll()
        };
        BannerScrollManager.prototype.manageStopElementsOnUpHitTopOfView = function(banner) {
            var element, i, len, ref, results;
            ref = banner.stopElementsOnUpHitTopOfView;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                element = ref[i];
                results.push(this.jQuery(element).waypoint((function(that, banner) {
                    return function(direction) {
                        if (direction === 'up') {
                            that.jQuery(banner.bannerObject.getWrapElement()).stop();
                            return banner.bannerObject.setToStaticPosition()
                        }
                    }
                })(this, banner)))
            }
            return results
        };
        BannerScrollManager.prototype.manageStartElementsOnDownHitTopOfView = function(banner) {
            var element, i, len, ref, results;
            ref = banner.startElementsOnDownHitTopOfView;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                element = ref[i];
                results.push(this.jQuery(element).waypoint((function(context, banner) {
                    return function(direction) {
                        var offsetTop;
                        if (direction === 'down' && context.canMove(banner)) {
                            if (!context.isMobileDevice()) {
                                banner.bannerObject.setToFixedPosition();
                                return context.correctPosition(banner)
                            } else if (banner.bannerObject.getIsManaged()) {
                                offsetTop = context._getOffsetTopForAbsolutePosition(banner);
                                return banner.bannerObject.setToAbsolutePositionAnimated(offsetTop)
                            }
                        }
                    }
                })(this, banner)))
            }
            return results
        };
        BannerScrollManager.prototype.manageStopElementsOnHitByBottom = function(banner) {
            var element, i, len, ref, results;
            ref = banner.stopElementsOnHitByBottom;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                element = ref[i];
                results.push(this.jQuery(window).scroll((function(stopElementOnHitByBottom, context, banner) {
                    return function() {
                        if (banner.bannerObject.getIsFixedPosition()) {
                            if (context.jQuery(stopElementOnHitByBottom).offset().top <= (banner.bannerObject.getOffsetTop() + banner.bannerObject.getHeight())) {
                                banner.bannerObject.setToAbsolutePosition(context.jQuery(stopElementOnHitByBottom).offset().top - banner.bannerObject.getHeight());
                                return context.correctPosition(banner)
                            }
                        } else if (banner.bannerObject.getIsAbsolutePosition() && context.jQuery(stopElementOnHitByBottom).offset().top > (context.jQuery(window).scrollTop() + banner.bannerObject.getHeight())) {
                            return banner.bannerObject.setToFixedPosition()
                        }
                    }
                })(element, this, banner)))
            }
            return results
        };
        BannerScrollManager.prototype.manageMobileAnimation = function(banner) {
            var offsetTop, timer;
            timer = 0;
            offsetTop = banner.bannerObject.getOffsetTop();
            return this.jQuery(window).scroll((function(that, banner) {
                return function() {
                    clearTimeout(timer);
                    return timer = setTimeout(function() {
                        if (!banner.bannerObject.getIsAbsolutePosition()) {
                            return
                        }
                        offsetTop = that._getOffsetTopForAbsolutePosition(banner);
                        return banner.bannerObject.setToAbsolutePositionAnimated(offsetTop)
                    }, 250)
                }
            })(this, banner))
        };
        BannerScrollManager.prototype.canMove = function(banner) {
            var element, i, len, ref;
            if (banner.stopElementsOnHitByBottom) {
                ref = banner.stopElementsOnHitByBottom;
                for (i = 0, len = ref.length; i < len; i++) {
                    element = ref[i];
                    if (this.jQuery(element).offset().top <= (banner.bannerObject.getOffsetTop() + banner.bannerObject.getHeight())) {
                        return false
                    }
                }
            }
            return true
        };
        BannerScrollManager.prototype.correctPosition = function(banner) {
            var element, i, len, ref, results;
            if (banner.stopElementsOnHitByBottom) {
                ref = banner.stopElementsOnHitByBottom;
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                    element = ref[i];
                    if (this.jQuery(element).offset().top < (banner.bannerObject.getOffsetTop() + banner.bannerObject.getHeight())) {
                        results.push(banner.bannerObject.setToAbsolutePosition(this.jQuery(element).offset().top - banner.bannerObject.getHeight()))
                    } else {
                        results.push(void 0)
                    }
                }
                return results
            }
        };
        BannerScrollManager.prototype.correctPositionsOfAllBanners = function() {
            var banner, i, len, ref, results;
            ref = this.getBanners();
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                banner = ref[i];
                results.push(this.correctPosition(banner))
            }
            return results
        };
        BannerScrollManager.prototype._getBottomBoundaryOffsetTop = function(banner) {
            var element, elementOffsetTop, i, len, minOffsetTop, ref;
            minOffsetTop = this.jQuery('body').height();
            if (banner.stopElementsOnHitByBottom) {
                ref = banner.stopElementsOnHitByBottom;
                for (i = 0, len = ref.length; i < len; i++) {
                    element = ref[i];
                    elementOffsetTop = this.jQuery(element).offset().top;
                    if (elementOffsetTop < minOffsetTop) {
                        minOffsetTop = elementOffsetTop
                    }
                }
            }
            return minOffsetTop
        };
        BannerScrollManager.prototype._getOffsetTopForAbsolutePosition = function(banner) {
            var bottomBoundary, offsetTop;
            offsetTop = this.jQuery(window).scrollTop();
            bottomBoundary = this._getBottomBoundaryOffsetTop(banner);
            if (bottomBoundary < offsetTop + banner.bannerObject.getHeight()) {
                offsetTop = bottomBoundary - banner.bannerObject.getHeight()
            }
            return offsetTop
        };
        BannerScrollManager.prototype.refreshWaypoints = function() {
            var Waypoint, base;
            Waypoint = this._waypointGetter();
            if (Waypoint != null) {
                return typeof Waypoint.refreshAll === "function" ? Waypoint.refreshAll() : void 0
            } else {
                return typeof(base = this.jQuery).waypoints === "function" ? base.waypoints('refresh') : void 0
            }
        };
        return BannerScrollManager
    })();
    if (typeof window !== "undefined" && window !== null ? window.cjs : void 0) {
        if ((base = window.cjs).BannerScrollManager == null) {
            base.BannerScrollManager = BannerScrollManager
        }
    } else {
        if (exports.BannerScrollManager == null) {
            exports.BannerScrollManager = BannerScrollManager
        }
    }
}).call(this);
(function() {
    var FeaturePromotion, base;
    FeaturePromotion = (function() {
        FeaturePromotion.prototype.STORAGE_KEY = "feature_promo";

        function FeaturePromotion(_data, _transClose, _timeout, _jQuery, _storage, _cnf) {
            this._data = _data;
            this._transClose = _transClose != null ? _transClose : 'Close Window';
            this._timeout = _timeout != null ? _timeout : 24 * 60 * 60;
            this._jQuery = _jQuery != null ? _jQuery : $;
            this._storage = _storage != null ? _storage : clientStorage;
            this._cnf = _cnf != null ? _cnf : {
                left_x: -5,
                left_y: -5,
                top_x: 2,
                top_y: -11
            };
            this._debug = 0;
            this._featuresDisplayed = [];
            this._lastDisplayedTs = this._timestamp();
            this._loadStorage()
        }
        FeaturePromotion.prototype.setLoginClientCB = function(_loginClientCB) {
            this._loginClientCB = _loginClientCB
        };
        FeaturePromotion.prototype.showNext = function(showCb, sportId) {
            var _fSportId, feature, id, key, lc, loggedIn, ref, ret, ts, viewType;
            if (sportId == null) {
                sportId = sport_id
            }
            ts = this._timestamp();
            ref = this._data;
            for (key in ref) {
                feature = ref[key];
                id = feature.id;
                _fSportId = parseInt(feature.sport_id);
                if ((_fSportId !== 0 && _fSportId !== sportId) || this._jQuery.inArray(id, this._featuresDisplayed) !== -1) {
                    continue
                }
                if (parseInt(feature.publish_limit) !== 0 && !((parseInt(feature.publish_from) < ts && ts < parseInt(feature.publish_to)))) {
                    continue
                }
                viewType = parseInt(feature.view_type);
                if (viewType !== 0 && (this._loginClientCB != null)) {
                    lc = this._loginClientCB();
                    if (lc == null) {
                        continue
                    }
                    loggedIn = lc.loggedIn();
                    if (viewType === 1 && !loggedIn || viewType === 2 && loggedIn) {
                        continue
                    }
                }
                if (this._debug === 0 && this._lastDisplayedTs + this._timeout > this._timestamp()) {
                    break
                }
                ret = this.showFeature(key, showCb);
                if (ret) {
                    this._featuresDisplayed.push(id);
                    this._lastDisplayedTs = this._timestamp();
                    if (!this._debug) {
                        break
                    }
                }
            }
            return null
        };
        FeaturePromotion.prototype.debug = function(showCb, sportId) {
            if (sportId == null) {
                sportId = sport_id
            }
            this._debug = 1;
            this._featuresDisplayed = [];
            if (!showCb) {
                showCb = (function(_this) {
                    return function(el) {
                        return _this._jQuery('div.container > .content').append(el)
                    }
                })(this)
            }
            return this.showNext(showCb, sportId)
        };
        FeaturePromotion.prototype.showFeature = function(key, showCb) {
            var arrowEl, arrowLeft, arrowTop, close, el, left, parentWidth, top, width;
            left = parseInt(this._data[key].coordinate_x);
            top = parseInt(this._data[key].coordinate_y);
            arrowEl = this._jQuery('<span>', {
                "class": "fp_arrow_" + (parseInt(this._data[key].display_type) === 1 ? "left" : "top")
            });
            el = this._jQuery('<div>', {
                "class": "fp_wrapper",
                css: {
                    display: 'none'
                }
            });
            el.append(arrowEl);
            close = this._jQuery('<span>', {
                "class": "fp_close",
                click: (function(_this) {
                    return function() {
                        if (!_this._debug) {
                            _this._saveStorage()
                        }
                        return el.remove()
                    }
                })(this)
            });
            el.append(close);
            width = parseInt(this._data[key].width);
            if (!width) {
                width = 200
            }
            el.append(this._jQuery('<div>', {
                "class": "fp_content",
                html: this._data[key].content,
                css: {
                    width: width
                }
            }));
            showCb(el);
            if (parseInt(this._data[key].display_type) === 1) {
                top = top + this._cnf.left_y;
                left = left + this._cnf.left_x;
                arrowTop = 0;
                arrowEl.css('top', arrowTop);
                el.css('top', top - arrowTop - arrowEl.height() / 2);
                el.css('left', left + arrowEl.width())
            } else {
                top = top + this._cnf.top_y;
                left = left + this._cnf.top_x;
                parentWidth = el.parent().outerWidth();
                if (left / parentWidth < 1 / 3) {
                    arrowLeft = 0
                } else if (left / parentWidth < 2 / 3) {
                    arrowLeft = el.outerWidth() / 2 - arrowEl.width() / 2 - 5
                } else {
                    arrowLeft = el.outerWidth() - arrowEl.width() - 10
                }
                arrowEl.css('left', arrowLeft);
                el.css('top', top + arrowEl.height());
                el.css('left', left - arrowLeft - arrowEl.width() / 2)
            }
            el.show();
            return true
        };
        FeaturePromotion.prototype._timestamp = function() {
            return Math.ceil((new Date()).getTime() / 1000)
        };
        FeaturePromotion.prototype._loadStorage = function() {
            var data, error, error1, str;
            str = this._storage.get(this.STORAGE_KEY);
            try {
                data = str ? this._jQuery.parseJSON(str) : {}
            } catch (error1) {
                error = error1;
                data = {}
            }
            if ((data.d == null) || (data.t == null)) {
                data.d = this._featuresDisplayed;
                data.t = this._lastDisplayedTs;
                this._saveStorage()
            }
            this._lastDisplayedTs = data.t;
            this._featuresDisplayed = data.d;
            return true
        };
        FeaturePromotion.prototype._saveStorage = function() {
            this._storage.store(this.STORAGE_KEY, JSON.stringify({
                d: this._featuresDisplayed,
                t: this._lastDisplayedTs
            }), null, 'self', '/');
            return true
        };
        return FeaturePromotion
    })();
    if (typeof window !== "undefined" && window !== null) {
        if ((base = window.cjs).FeaturePromotion == null) {
            base.FeaturePromotion = FeaturePromotion
        }
    } else {
        if (exports.FeaturePromotion == null) {
            exports.FeaturePromotion = FeaturePromotion
        }
    }
}).call(this);
(function() {
    var Detail_TimeCounter, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    Detail_TimeCounter = (function() {
        Detail_TimeCounter.config = {
            allowed: [cjs.constants.sport.SOCCER, cjs.constants.sport.BANDY, cjs.constants.sport.RUGBY_LEAGUE, cjs.constants.sport.RUGBY_UNION, cjs.constants.sport.AUSSIE_RULES],
            hasSeconds: [cjs.constants.sport.SOCCER]
        };

        function Detail_TimeCounter(inject, jQuery) {
            if (inject == null) {
                inject = {}
            }
            this.jQuery = jQuery != null ? jQuery : $;
            this.sportIdGetter = inject.sportIdGetter, this.pageUtimeGetter = inject.pageUtimeGetter, this.gameStageUtimeGetter = inject.gameStageUtimeGetter, this.hasLiveCenterGetter = inject.hasLiveCenterGetter, this.eventStageIdGetter = inject.eventStageIdGetter, this.isRugby7Getter = inject.isRugby7Getter
        }
        Detail_TimeCounter.prototype.setTime = function() {
            var clockTimerJq, time;
            clockTimerJq = this._getClockTimerJq();
            if (!clockTimerJq.length) {
                return false
            }
            if ((time = this.getTime()) === false) {
                return false
            }
            clockTimerJq.find('span[id^="part-top"]').html(time);
            if (!this._hasSeconds()) {
                this._addMinuteTicker(clockTimerJq)
            }
            return true
        };
        Detail_TimeCounter.prototype.getTime = function() {
            var content, part, partDuration, ref;
            if (ref = this.sportIdGetter(), indexOf.call(Detail_TimeCounter.config.allowed, ref) < 0) {
                return false
            }
            part = this._getGamePart();
            if (!part) {
                return false
            }
            partDuration = this._getSportPartDuration(part);
            if (!partDuration) {
                return false
            }
            content = this._getTimerContent(part, partDuration);
            if (content === false) {
                return false
            }
            return content
        };
        Detail_TimeCounter.prototype.start = function() {
            var ref;
            if (ref = this.sportIdGetter(), indexOf.call(Detail_TimeCounter.config.allowed, ref) < 0) {
                return false
            }
            return this.counterInterval = setInterval((function(_this) {
                return function() {
                    return _this.setTime()
                }
            })(this), 1000)
        };
        Detail_TimeCounter.prototype.stop = function() {
            if (this.counterInterval != null) {
                return clearInterval(this.counterInterval)
            }
        };
        Detail_TimeCounter.prototype._getTimerContent = function(part, partDuration) {
            var hasSeconds, minutes, minutesDiff, seconds, time;
            minutes = (this.pageUtimeGetter() - this.gameStageUtimeGetter()) / 60;
            seconds = (this.pageUtimeGetter() - this.gameStageUtimeGetter()) % 60;
            if (seconds < 0) {
                seconds = 0
            }
            minutes = minutes < 0 ? 0 : Math.floor(minutes);
            minutes += (function() {
                switch (part) {
                    case 'secondHalf':
                        return this._getSportPartDuration('firstHalf');
                    case 'extraTime':
                        return this._getSportPartDuration('secondHalf');
                    default:
                        return 0
                }
            }).call(this);
            minutesDiff = this.sportIdGetter() === cjs.constants.sport.SOCCER && (part === 'firstHalf' || part === 'secondHalf' || part === 'extraTime') ? minutes - partDuration : 0;
            hasSeconds = this._hasSeconds();
            if (!hasSeconds) {
                minutes += 1
            }
            time = minutes;
            if (!hasSeconds && minutes > partDuration) {
                time = partDuration + '+'
            }
            if (hasSeconds) {
                if (minutesDiff >= 10) {
                    time = partDuration + '+'
                } else {
                    time = minutes + ':' + this._addZero(seconds)
                }
            }
            return time
        };
        Detail_TimeCounter.prototype._getClockTimerJq = function() {
            return this.jQuery('#atomclock')
        };
        Detail_TimeCounter.prototype._getSportPartDuration = function(part) {
            var ref, ref1, ref2;
            switch (part) {
                case 'firstHalf':
                    if ((ref = this.sportIdGetter()) === cjs.constants.sport.SOCCER || ref === cjs.constants.sport.BANDY) {
                        return 45
                    } else if (this.sportIdGetter() === cjs.constants.sport.RUGBY_UNION && this.isRugby7Getter()) {
                        return 7
                    } else {
                        return 40
                    }
                    break;
                case 'secondHalf':
                    if ((ref1 = this.sportIdGetter()) === cjs.constants.sport.SOCCER || ref1 === cjs.constants.sport.BANDY) {
                        return 90
                    } else if (this.sportIdGetter() === cjs.constants.sport.RUGBY_UNION && this.isRugby7Getter()) {
                        return 14
                    } else {
                        return 80
                    }
                    break;
                case 'firstQuarter':
                case 'secondQuarter':
                case 'thirdQuarter':
                case 'fourthQuarter':
                    if ((ref2 = this.sportIdGetter()) === cjs.constants.sport.AUSSIE_RULES) {
                        return 20
                    }
                    break;
                case 'extraTime':
                    if (this.sportIdGetter() === cjs.constants.sport.SOCCER) {
                        return 120
                    } else {
                        return 0
                    }
                    break;
                default:
                    return 0
            }
        };
        Detail_TimeCounter.prototype._addMinuteTicker = function(element) {
            if (this.jQuery('#atomcounter').length) {
                return
            }
            return element.append(this.jQuery('<span>', {
                id: 'atomcounter',
                "class": 'blink',
                html: '&nbsp;'
            }))
        };
        Detail_TimeCounter.prototype._getGamePart = function() {
            var eventStageId;
            eventStageId = this.eventStageIdGetter();
            if (eventStageId === cjs.constants.event_stage.FIRST_HALF) {
                return 'firstHalf'
            }
            if (eventStageId === cjs.constants.event_stage.SECOND_HALF) {
                return 'secondHalf'
            }
            if (eventStageId === cjs.constants.event_stage.FIRST_QUARTER) {
                return 'firstQuarter'
            }
            if (eventStageId === cjs.constants.event_stage.SECOND_QUARTER) {
                return 'secondQuarter'
            }
            if (eventStageId === cjs.constants.event_stage.THIRD_QUARTER) {
                return 'thirdQuarter'
            }
            if (eventStageId === cjs.constants.event_stage.FOURTH_QUARTER) {
                return 'fourthQuarter'
            }
            if (eventStageId === cjs.constants.event_stage.EXTRA_TIME) {
                return 'extraTime'
            }
        };
        Detail_TimeCounter.prototype._hasSeconds = function() {
            var ref;
            return this.hasLiveCenterGetter() && (ref = this.sportIdGetter(), indexOf.call(Detail_TimeCounter.config.hasSeconds, ref) >= 0)
        };
        Detail_TimeCounter.prototype._addZero = function(str) {
            if (/^[0-9]{1}$/.test(str)) {
                str = '0' + str
            }
            return str
        };
        return Detail_TimeCounter
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Detail_TimeCounter = Detail_TimeCounter
}).call(this);
(function() {
    var Detail_Tabs, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    Detail_Tabs = (function() {
        Detail_Tabs.prototype.list = [{
            id: 'summary',
            "class": 'li0',
            tab: 'summary',
            trans: '',
            eventTracking: ['detail-bookmark-click', 'match-summary']
        }, {
            id: 'odds-comparison',
            "class": 'li1',
            tab: 'odds-comparison',
            trans: 'TRANS_DETAIL_BOOKMARK_ODDS_COMPARISON',
            eventTracking: ['detail-bookmark-click', 'odds-comparison']
        }, {
            id: 'head-2-head',
            "class": 'li2',
            tab: 'head-2-head',
            trans: 'TRANS_DETAIL_BOOKMARK_H2H',
            eventTracking: ['detail-bookmark-click', 'h2h']
        }, {
            id: 'live-table',
            "class": 'li3',
            tab: 'live',
            trans: 'TRANS_DETAIL_BOOKMARK_LIVE_TABLE',
            eventTracking: ['detail-bookmark-click', 'stats-detail']
        }, {
            id: 'standings',
            "class": 'li4',
            tab: 'standings',
            trans: 'TRANS_DETAIL_BOOKMARK_STANDINGS_TABLE',
            eventTracking: ['detail-bookmark-click', 'stats-detail']
        }, {
            id: 'draw',
            "class": 'li4',
            tab: 'draw',
            trans: 'TRANS_DETAIL_BOOKMARK_STANDINGS_DRAW',
            openStats: true,
            eventTracking: ['detail-bookmark-click', 'stats-detail']
        }, {
            id: 'highlights',
            "class": 'li6',
            tab: 'highlights',
            trans: 'TRANS_DETAIL_BOOKMARK_VIDEO_HIGHLIGHTS',
            eventTracking: ['detail-bookmark-click', 'video-detail']
        }];
        Detail_Tabs.prototype.listSport = {
            'american-football': [{
                id: 'timeline',
                "class": 'li0',
                tab: 'summary',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2',
                eventTracking: ['detail-bookmark-click', 'match-summary']
            }, {
                id: 'statistics',
                "class": 'li1',
                tab: 'statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'match-statistics']
            }, {
                id: 'history',
                "class": 'li5',
                tab: 'match-history',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_HISTORY',
                eventTracking: ['detail-bookmark-click', 'match-history']
            }],
            'aussie-rules': [{
                id: 'timeline',
                "class": 'li0',
                tab: 'summary',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2',
                eventTracking: ['detail-bookmark-click', 'match-summary']
            }, {
                id: 'statistics',
                "class": 'li1',
                tab: 'statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'match-statistics']
            }, {
                id: 'lineups',
                "class": 'li2',
                tab: 'lineups',
                trans: 'TRANS_DETAIL_BOOKMARK_LINEUPS',
                eventTracking: ['detail-bookmark-click', 'lineups']
            }, {
                id: 'player-statistics',
                "class": 'li1',
                tab: 'player-statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'player-statistics']
            }, {
                id: 'history',
                "class": 'li2',
                tab: 'match-history',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_HISTORY',
                eventTracking: ['detail-bookmark-click', 'match-history']
            }],
            baseball: [{
                id: 'timeline',
                "class": 'li0',
                tab: 'summary',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2',
                eventTracking: ['detail-bookmark-click', 'match-summary']
            }, {
                id: 'statistics',
                "class": 'li1',
                tab: 'statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'match-statistics']
            }, {
                id: 'lineups',
                "class": 'li2',
                tab: 'lineups',
                trans: 'TRANS_DETAIL_BOOKMARK_LINEUPS',
                eventTracking: ['detail-bookmark-click', 'lineups']
            }, {
                id: 'player-statistics',
                "class": 'li3',
                tab: 'player-statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'player-statistics']
            }],
            basketball: [{
                id: 'timeline',
                "class": 'li0',
                tab: 'summary',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2',
                eventTracking: ['detail-bookmark-click', 'match-summary']
            }, {
                id: 'statistics',
                "class": 'li1',
                tab: 'statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'match-statistics']
            }, {
                id: 'lineups',
                "class": 'li2',
                tab: 'lineups',
                trans: 'TRANS_DETAIL_BOOKMARK_LINEUPS',
                eventTracking: ['detail-bookmark-click', 'lineups']
            }, {
                id: 'player-statistics',
                "class": 'li1',
                tab: 'player-statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'player-statistics']
            }, {
                id: 'history',
                "class": 'li2',
                tab: 'match-history',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_HISTORY',
                eventTracking: ['detail-bookmark-click', 'match-history']
            }],
            cricket: [{
                id: 'timeline',
                "class": 'li0',
                tab: 'summary',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2',
                eventTracking: ['detail-bookmark-click', 'match-summary']
            }, {
                id: 'player-statistics',
                "class": 'li1',
                tab: 'player-statistics',
                trans: ['TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS_CRICKET', 'TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS'],
                eventTracking: ['detail-bookmark-click', 'player-statistics']
            }, {
                id: 'statistics',
                "class": 'li2',
                tab: 'statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'match-statistics']
            }, {
                id: 'lineups',
                "class": 'li3',
                tab: 'lineups',
                trans: 'TRANS_DETAIL_BOOKMARK_LINEUPS',
                eventTracking: ['detail-bookmark-click', 'lineups']
            }],
            darts: [{
                id: 'timeline',
                "class": 'li0',
                tab: 'summary',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2',
                eventTracking: ['detail-bookmark-click', 'match-summary']
            }, {
                id: 'history',
                "class": 'li5',
                tab: 'match-history',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_HISTORY_DARTS',
                eventTracking: ['detail-bookmark-click', 'match-history']
            }],
            hockey: [{
                id: 'timeline',
                "class": 'li0',
                tab: 'summary',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2',
                eventTracking: ['detail-bookmark-click', 'match-summary']
            }, {
                id: 'statistics',
                "class": 'li1',
                tab: 'statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'match-statistics']
            }, {
                id: 'lineups',
                "class": 'li2',
                tab: 'lineups',
                trans: 'TRANS_DETAIL_BOOKMARK_LINEUPS',
                eventTracking: ['detail-bookmark-click', 'lineups']
            }, {
                id: 'player-statistics',
                "class": 'li1',
                tab: 'player-statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'player-statistics']
            }, {
                id: 'commentary',
                "class": 'li3',
                tab: 'commentary',
                trans: 'TRANS_DETAIL_BOOKMARK_LIVE_COMMENTARY',
                eventTracking: ['detail-bookmark-click', 'live-comentary']
            }, {
                id: 'live-table',
                "class": 'li4',
                tab: 'live',
                trans: 'TRANS_DETAIL_BOOKMARK_LIVE_TABLE',
                eventTracking: ['detail-bookmark-click', 'live-table']
            }],
            'rugby-league': [{
                id: 'timeline',
                "class": 'li0',
                tab: 'summary',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2',
                eventTracking: ['detail-bookmark-click', 'match-summary']
            }, {
                id: 'statistics',
                "class": 'li1',
                tab: 'statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'match-statistics']
            }, {
                id: 'lineups',
                "class": 'li2',
                tab: 'lineups',
                trans: 'TRANS_DETAIL_BOOKMARK_LINEUPS',
                eventTracking: ['detail-bookmark-click', 'lineups']
            }, {
                id: 'player-statistics',
                "class": 'li1',
                tab: 'player-statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'player-statistics']
            }, {
                id: 'history',
                "class": 'li2',
                tab: 'match-history',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_HISTORY',
                eventTracking: ['detail-bookmark-click', 'match-history']
            }],
            'rugby-union': [{
                id: 'timeline',
                "class": 'li0',
                tab: 'summary',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2',
                eventTracking: ['detail-bookmark-click', 'match-summary']
            }, {
                id: 'statistics',
                "class": 'li1',
                tab: 'statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'match-statistics']
            }, {
                id: 'lineups',
                "class": 'li2',
                tab: 'lineups',
                trans: 'TRANS_DETAIL_BOOKMARK_LINEUPS',
                eventTracking: ['detail-bookmark-click', 'lineups']
            }, {
                id: 'player-statistics',
                "class": 'li1',
                tab: 'player-statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'player-statistics']
            }, {
                id: 'history',
                "class": 'li2',
                tab: 'match-history',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_HISTORY',
                eventTracking: ['detail-bookmark-click', 'match-history']
            }],
            soccer: [{
                id: 'timeline',
                "class": 'li0',
                tab: 'summary',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2',
                eventTracking: ['detail-bookmark-click', 'match-summary']
            }, {
                id: 'statistics',
                "class": 'li1',
                tab: 'statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'match-statistics']
            }, {
                id: 'lineups',
                "class": 'li2',
                tab: 'lineups',
                trans: 'TRANS_DETAIL_BOOKMARK_LINEUPS',
                eventTracking: ['detail-bookmark-click', 'lineups']
            }, {
                id: 'player-statistics',
                "class": 'li1',
                tab: 'player-statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'player-statistics']
            }, {
                id: 'commentary',
                "class": 'li3',
                tab: 'commentary',
                trans: 'TRANS_DETAIL_BOOKMARK_LIVE_COMMENTARY',
                eventTracking: ['detail-bookmark-click', 'live-comentary']
            }, {
                id: 'live-table',
                "class": 'li4',
                tab: 'live',
                trans: 'TRANS_DETAIL_BOOKMARK_LIVE_TABLE',
                eventTracking: ['detail-bookmark-click', 'live-table']
            }],
            handball: [{
                id: 'timeline',
                "class": 'li0',
                tab: 'summary',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2',
                eventTracking: ['detail-bookmark-click', 'match-summary']
            }, {
                id: 'lineups',
                "class": 'li2',
                tab: 'lineups',
                trans: 'TRANS_DETAIL_BOOKMARK_LINEUPS',
                eventTracking: ['detail-bookmark-click', 'lineups']
            }, {
                id: 'history',
                "class": 'li2',
                tab: 'match-history',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_HISTORY',
                eventTracking: ['detail-bookmark-click', 'match-history']
            }],
            volleyball: [{
                id: 'timeline',
                "class": 'li0',
                tab: 'summary',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2',
                eventTracking: ['detail-bookmark-click', 'match-summary']
            }, {
                id: 'lineups',
                "class": 'li2',
                tab: 'lineups',
                trans: 'TRANS_DETAIL_BOOKMARK_LINEUPS',
                eventTracking: ['detail-bookmark-click', 'lineups']
            }],
            tennis: [{
                id: 'timeline',
                "class": 'li0',
                tab: 'summary',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2',
                eventTracking: ['detail-bookmark-click', 'match-summary']
            }, {
                id: 'statistics',
                "class": 'li1',
                tab: 'statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_STATISTICS',
                eventTracking: ['detail-bookmark-click', 'match-statistics']
            }, {
                id: 'history',
                "class": 'li5',
                tab: 'match-history',
                trans: 'TRANS_DETAIL_BOOKMARK_MATCH_HISTORY_TENNIS',
                eventTracking: ['detail-bookmark-click', 'match-history']
            }],
            golf: [{
                id: 'timeline',
                "class": 'li0',
                tab: 'summary',
                trans: 'TRANS_DETAIL_BOOKMARK_ROUND_RESULTS',
                displayTab: 'summary-player-card',
                eventTracking: ['detail-bookmark-click', 'match-summary']
            }, {
                id: 'player-statistics',
                "class": 'li1',
                tab: 'player-statistics',
                trans: 'TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS_GOLF',
                eventTracking: ['detail-bookmark-click', 'player-statistics']
            }]
        };
        Detail_Tabs.prototype.feedIndex = {
            '': 'summary',
            OD: 'odds-comparison',
            HI: 'highlights',
            HH: 'head-2-head',
            LI: 'lineups',
            ST: 'statistics',
            PS: 'player-statistics',
            MH: 'match-history',
            LC: 'commentary',
            LT: 'live-table',
            TA: 'standings',
            DR: 'draw'
        };

        function Detail_Tabs(util, $, util_list, util_sport, Helper_HighlightRestriction) {
            this.util = util;
            this.$ = $;
            this.util_list = util_list;
            this.util_sport = util_sport;
            this.Helper_HighlightRestriction = Helper_HighlightRestriction;
            this.sport = this.util.Enviroment.getSport();
            this.sportId = this.util.Enviroment.getSportId();
            this.participantEncodedIds = this.util.Enviroment.getParticipantEncodedIds();
            this.tournamentStageEncodedId = this.util.Enviroment.getTournamentStageEncodedId();
            this.tournamentEncodedId = this.util.Enviroment.getTournamentEncodedId();
            this.data = this.util.Enviroment.getFsDetail();
            this.eventTracking = this.util.Config.get('app', 'google_analytics', 'event_tracking');
            this.detailVersion = this.util.Config.get('app', 'detail', 'version');
            this._sportList = this.util_list.getSports();
            this._afterTabShowCallbacks = []
        }
        Detail_Tabs.prototype._getHtml = function() {
            var html, ref, secondRowClass, tabs;
            tabs = [];
            if (this.data['DX'] != null) {
                tabs = this.data['DX'].split(',');
                if (tabs.length > 0 && tabs[0] !== '') {
                    tabs.unshift('')
                }
            }
            html = [];
            html.push('<div style="position: relative;">');
            html.push(this._createRow(this.list, tabs));
            html.push('</div><div class="color-spacer"></div>');
            if (this._hasTwoLevels() && (this.listSport[this.sport] != null)) {
                if (((ref = this.listSport[this.sport][0]) != null ? ref['displayTab'] : void 0) != null) {
                    html.push('<div id="detail-before-submenu-bookmark">');
                    html.push(this._createContent(this.listSport[this.sport][0]['displayTab']));
                    html.push('</div>')
                }
                secondRowClass = this.util.Page.isDetailParticipantPage() ? 'detail-submenu-bookmark-golf' : 'detail-submenu-bookmark';
                html.push('<div id="detail-submenu-bookmark" class="' + secondRowClass + '" style="display: none;"><div class="spacer-block">&nbsp;</div>');
                html.push(this._createRow(this.listSport[this.sport], tabs));
                html.push('<div class="color-spacer"></div></div>')
            }
            return html.join('')
        };
        Detail_Tabs.prototype._createRow = function(list, tabs) {
            var approvalTabs, extraSpacer, html, j, k, l, len, len1, len2, len3, m, newFeature, openStats, ref, t, tCount, ta, transItem;
            html = [];
            html.push('<ul class="ifmenu">');
            extraSpacer = false;
            tCount = 0;
            approvalTabs = [];
            for (j = 0, len = list.length; j < len; j++) {
                ta = list[j];
                for (k = 0, len1 = tabs.length; k < len1; k++) {
                    t = tabs[k];
                    if (t === 'LI' && this.util.Config.get('live_centre', 'sub_tabs', 'lineups') || t === 'ST' && this.util.Config.get('live_centre', 'sub_tabs', 'statistics')) {
                        continue
                    }
                    if (t === 'HI' && !this._hasHighlights()) {
                        continue
                    }
                    if ((this.feedIndex[t] != null) && ta.tab === this.feedIndex[t]) {
                        if (typeof ta.trans === 'object') {
                            ref = ta.trans;
                            for (l = 0, len2 = ref.length; l < len2; l++) {
                                transItem = ref[l];
                                if (ta.translate = this.util.trans(transItem)) {
                                    break
                                }
                            }
                        } else {
                            ta.translate = this.util.trans(ta.trans ? ta.trans : this._getSummaryTrans())
                        }
                        approvalTabs.push(ta);
                        tCount++
                    }
                }
            }
            for (m = 0, len3 = approvalTabs.length; m < len3; m++) {
                ta = approvalTabs[m];
                newFeature = (ta.newFeature != null) && ta.newFeature;
                if (newFeature) {
                    extraSpacer = true
                }
                openStats = (ta.openStats != null) && ta.openStats && this.detailVersion !== 2;
                html.push(this._createTab(ta.id, ta["class"], ta.tab, ta.translate, openStats, newFeature, (this.eventTracking && (ta.eventTracking != null) ? ta.eventTracking : null), (tCount === 1 ? true : false)))
            }
            html.push('</ul>');
            if (extraSpacer) {
                html.unshift('<div class="spacer-block">&nbsp;</div>')
            }
            return html.join('')
        };
        Detail_Tabs.prototype._createContent = function(id) {
            var html;
            html = [];
            if (!this.$('#tab-match-' + id + '').length) {
                html.push('<div id="tab-match-' + id + '">');
                html.push('<div id="' + id + '-preload" class="preload-panel"><div class="preload"><span>Loading ...</span></div></div>');
                html.push('<div id="' + id + '-content"></div>');
                html.push('</div>')
            }
            return html.join('')
        };
        Detail_Tabs.prototype._hasHighlights = function() {
            if (this.data['HR'] == null) {
                return false
            }
            return this.Helper_HighlightRestriction.hasHighlight(this.data['HR'], this.util.Enviroment.getGlobalGeoIp())
        };
        Detail_Tabs.prototype._createTab = function(id, cl, tab, trans, openStats, newFeature, eventTracking, singleNav) {
            var itemClose, itemOpen, onclickOpen, participants, ret;
            if (newFeature == null) {
                newFeature = false
            }
            if (eventTracking == null) {
                eventTracking = null
            }
            if (singleNav == null) {
                singleNav = false
            }
            eventTracking = eventTracking != null ? ' e_t.track_click(\'' + eventTracking.join("','") + '\'); ' : '';
            if (openStats) {
                participants = typeof this.participantEncodedIds === 'object' ? "'" + this.participantEncodedIds.join("','") + "'" : '';
                onclickOpen = "stats_open('" + this.tournamentEncodedId + "', '" + this.tournamentStageEncodedId + "', " + this.sportId + ", 'draw', [" + participants + "]);"
            } else {
                onclickOpen = "detail_tab('" + tab + "');"
            }
            if (singleNav) {
                itemOpen = '<span class="single-nav"';
                itemClose = '</span>'
            } else {
                itemOpen = '<a';
                itemClose = '</a>'
            }
            ret = '<li id="li-match-' + id + '" class="' + cl + '"><span>' + itemOpen + ' href="#" id="a-match-' + id + '" onclick="' + onclickOpen + ' ' + eventTracking + 'return false">' + trans + itemClose;
            if (newFeature) {
                ret += '<strong class="x3"><span>' + this.util.trans('TRANS_NEW_FEATURE') + '</span></strong>'
            }
            ret += '</span></li>';
            return ret
        };
        Detail_Tabs.prototype.setAfterShowCallback = function(cb) {
            return this._afterTabShowCallbacks.push(cb)
        };
        Detail_Tabs.prototype.show = function() {
            var $secondRow, bookmarks, cb, i, j, k, len, len1, ref, results, secondRowHidden, selectedIds;
            bookmarks = this.$('#detail-bookmarks');
            selectedIds = [];
            bookmarks.find('li.selected').each((function(_this) {
                return function(i, el) {
                    return selectedIds.push(_this.$(el).attr('id'))
                }
            })(this));
            secondRowHidden = this.$('#detail-submenu-bookmark').is(':hidden');
            this._moveToContainer();
            bookmarks.empty();
            bookmarks.append(this._getHtml());
            this._moveFromContainer();
            for (j = 0, len = selectedIds.length; j < len; j++) {
                i = selectedIds[j];
                this.$('#' + i).addClass('selected')
            }
            if (!secondRowHidden) {
                $secondRow = this.$('#detail-submenu-bookmark');
                $secondRow.show();
                if (!$secondRow.find('li.selected').length) {
                    $secondRow.find('li:eq(0)').addClass('selected')
                }
            }
            ref = this._afterTabShowCallbacks;
            results = [];
            for (k = 0, len1 = ref.length; k < len1; k++) {
                cb = ref[k];
                results.push(typeof cb === "function" ? cb() : void 0)
            }
            return results
        };
        Detail_Tabs.prototype.hasTable = function(tableName) {
            var j, len, tabKey, tabNames, tabs;
            tabs = [];
            if (this.data['DX'] != null) {
                tabs = this.data['DX'].split(',')
            }
            tabNames = [];
            for (j = 0, len = tabs.length; j < len; j++) {
                tabKey = tabs[j];
                if (this.feedIndex[tabKey] != null) {
                    tabNames.push(this.feedIndex[tabKey])
                }
            }
            return this.$.inArray(tableName, tabNames) !== -1
        };
        Detail_Tabs.prototype._getSummaryTrans = function() {
            if (this.sportId === this._sportList.GOLF) {
                if ((this.data.golf_duel_national != null) && this.data.golf_duel_national === '1') {
                    return 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY'
                } else {
                    return 'TRANS_DETAIL_BOOKMARK_PLAYER_CARD'
                }
            } else if (this._hasTwoLevels()) {
                if (this.data.AW === 1) {
                    return 'TRANS_DETAIL_BOOKMARK_LIVE_CENTRE'
                } else {
                    return 'TRANS_DETAIL_BOOKMARK_MATCH'
                }
            } else if (this.util_sport.isRacingSport(this.sportId)) {
                return 'TRANS_DETAIL_BOOKMARK_PLAYER_RESULTS'
            } else {
                return 'TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY'
            }
        };
        Detail_Tabs.prototype._hasTwoLevels = function() {
            var j, len, t, tabs, tabsTwoLevels;
            if (this.sportId === this._sportList.GOLF && this.util.Page.isDetailParticipantPage()) {
                return true
            }
            tabsTwoLevels = ['LI', 'ST', 'LC', 'MH', 'PS'];
            if (this.data['DX'] != null) {
                tabs = this.data['DX'].split(',');
                for (j = 0, len = tabsTwoLevels.length; j < len; j++) {
                    t = tabsTwoLevels[j];
                    if (indexOf.call(tabs, t) >= 0) {
                        return true
                    }
                }
            }
            return false
        };
        Detail_Tabs.prototype._moveToContainer = function() {
            var container;
            container = this.$('#detail-submenu-bookmark-container');
            if (container.length === 0) {
                container = this.$('<div id="detail-submenu-bookmark-container" style="display: none;">');
                this.$('#detail-bookmarks').before(container)
            }
            return this.$('#detail-before-submenu-bookmark>*').appendTo(container)
        };
        Detail_Tabs.prototype._moveFromContainer = function() {
            var beforeBookmark;
            beforeBookmark = this.$('#detail-before-submenu-bookmark');
            if (beforeBookmark.length !== 0) {
                return this.$('#detail-submenu-bookmark-container>*').appendTo(beforeBookmark)
            }
        };
        return Detail_Tabs
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('detail_tabs', Detail_Tabs)
}).call(this);
(function() {
    var Detail_FsDetail;
    Detail_FsDetail = (function() {
        function Detail_FsDetail(util) {
            this.util = util;
            this.data = this.util.Enviroment.getFsDetail()
        }
        Detail_FsDetail.prototype.setOverrideData = function(data) {
            this.data = data
        };
        Detail_FsDetail.prototype.getAvailableTabs = function() {
            if (this.data['DX'] != null) {
                return this.data['DX']
            } else {
                return null
            }
        };
        Detail_FsDetail.prototype.getGeoBookmakerSettings = function() {
            if (this.data['GB'] != null) {
                return this.data['GB']
            } else {
                return null
            }
        };
        Detail_FsDetail.prototype.removeTab = function(tab) {
            var tabs;
            tabs = [];
            if (this.data['DX'] != null) {
                tabs = this.data['DX'].split(',');
                if (tabs.length > 0) {
                    if (tabs.indexOf(tab) > -1) {
                        tabs.splice(tabs.indexOf(tab), 1);
                        return this.data['DX'] = tabs.join()
                    }
                }
            }
        };
        return Detail_FsDetail
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('detail_fsdetail', Detail_FsDetail)
}).call(this);
(function() {
    var Template;
    Template = (function() {
        function Template(config, jQuery) {
            if (config == null) {
                config = {}
            }
            this.jQuery = jQuery != null ? jQuery : $;
            this.config = {
                templateDefinitions: {},
                bodyWidthGetter: function() {
                    return 620
                },
                hasOddsBonusTextGetter: function() {
                    return false
                },
                translate: function(key) {
                    return key
                },
                isCountryPage: function() {
                    return false
                }
            };
            this.jQuery.extend(this.config, config);
            this.templateDefinitions = {}
        }
        Template.prototype.setConfigValue = function(name, value) {
            return this.config[name] = value
        };
        Template.prototype.reset = function() {
            var ref, sportDefinition, templateName;
            ref = this.templateDefinitions;
            for (templateName in ref) {
                sportDefinition = ref[templateName];
                sportDefinition.prepareHeaderColumnsHtmlTemplate()
            }
        };
        Template.prototype.createGroupHeader = function(sportId, eventId, groupLabelName) {
            var sportDefinition;
            sportDefinition = this.getTemplateDefinitionForGame(sportId, eventId);
            return sportDefinition.createGroupHeader(groupLabelName)
        };
        Template.prototype.createSportHeader = function(sportId, eventId, headerContent) {
            var sportDefinition;
            sportDefinition = this.getTemplateDefinitionForGame(sportId, eventId);
            return sportDefinition.createSportHeader(headerContent)
        };
        Template.prototype.getHeader = function(sportId, labelId) {
            var sportDefinition;
            sportDefinition = this.getTemplateDefinitionForLabel(sportId, labelId);
            return new cjs.TemplateHeader(sportDefinition, labelId, false, this.jQuery)
        };
        Template.prototype.createHeader = function(sportId, labelId) {
            var sportDefinition;
            sportDefinition = this.getTemplateDefinitionForLabel(sportId, labelId);
            return new cjs.TemplateHeader(sportDefinition, labelId, true, this.jQuery)
        };
        Template.prototype.getGameRow = function(sportId, eventId, multipleEvent) {
            var sportDefinition;
            if (multipleEvent == null) {
                multipleEvent = false
            }
            sportDefinition = this.getTemplateDefinitionForGame(sportId, eventId);
            return new cjs.TemplateGame(sportDefinition, eventId, false, multipleEvent, this.jQuery)
        };
        Template.prototype.getGameRowWithCustomJqRowElements = function(sportId, eventId, jqRowElements) {
            var gameRow;
            gameRow = this.getGameRow(sportId, eventId, true);
            gameRow.setJqElement(jqRowElements);
            return gameRow
        };
        Template.prototype.createGameRow = function(sportId, eventId, multipleEvent) {
            var sportDefinition;
            if (multipleEvent == null) {
                multipleEvent = false
            }
            sportDefinition = this.getTemplateDefinitionForGame(sportId, eventId);
            return new cjs.TemplateGame(sportDefinition, eventId, true, multipleEvent, this.jQuery)
        };
        Template.prototype.getHeaderFromTemplate = function(templateName, sportId, labelId) {
            var sportDefinition;
            sportDefinition = this.getTemplateDefinitionForTemplate(templateName, sportId);
            return new cjs.TemplateHeader(sportDefinition, labelId, false, this.jQuery)
        };
        Template.prototype.createHeaderFromTemplate = function(templateName, sportId, labelId) {
            var sportDefinition;
            sportDefinition = this.getTemplateDefinitionForTemplate(templateName, sportId);
            return new cjs.TemplateHeader(sportDefinition, labelId, true, this.jQuery)
        };
        Template.prototype.createGameRowFromTemplate = function(templateName, sportId, eventId, multipleEvent) {
            var sportDefinition;
            if (multipleEvent == null) {
                multipleEvent = false
            }
            sportDefinition = this.getTemplateDefinitionForTemplate(templateName, sportId);
            return new cjs.TemplateGame(sportDefinition, eventId, true, multipleEvent, this.jQuery)
        };
        Template.prototype.getGameRowFromTemplate = function(templateName, sportId, eventId, multipleEvent) {
            var sportDefinition;
            if (multipleEvent == null) {
                multipleEvent = false
            }
            sportDefinition = this.getTemplateDefinitionForTemplate(templateName, sportId);
            return new cjs.TemplateGame(sportDefinition, eventId, false, multipleEvent, this.jQuery)
        };
        Template.prototype.getTemplateDefinitionForGame = function(sportId, eventId) {
            var ref, templateClass, templateName;
            ref = this.config.sportDefinitionResolver.resolveFromGame(sportId, eventId), templateName = ref[0], templateClass = ref[1];
            return this.getTemplateDefinition(templateName, templateClass, sportId)
        };
        Template.prototype.getTemplateDefinitionForLabel = function(sportId, labelId) {
            var ref, templateClass, templateName;
            ref = this.config.sportDefinitionResolver.resolveFromLabel(sportId, labelId), templateName = ref[0], templateClass = ref[1];
            return this.getTemplateDefinition(templateName, templateClass, sportId)
        };
        Template.prototype.getTemplateDefinitionForSport = function(sportId) {
            var ref, templateClass, templateName;
            ref = this.config.sportDefinitionResolver.resolveFromSport(sportId), templateName = ref[0], templateClass = ref[1];
            return this.getTemplateDefinition(templateName, templateClass, sportId)
        };
        Template.prototype.getTemplateDefinition = function(templateName, templateClass, sportId) {
            if (this.templateDefinitions[templateName] == null) {
                this.templateDefinitions[templateName] = new cjs[templateClass](this.config, sportId, this.jQuery)
            }
            return this.templateDefinitions[templateName]
        };
        Template.prototype.getTemplateDefinitionForTemplate = function(templateName, sportId) {
            return this.getTemplateDefinition(templateName, this.config.sportDefinitionResolver.getTemplateDefinitionClass(templateName), sportId)
        };
        Template.prototype.canBeGameResolved = function(sportId, eventId) {
            return this.config.sportDefinitionResolver.canBeGameResolved(sportId, eventId)
        };
        Template.prototype.clearTemplateDefinitions = function() {
            return this.templateDefinitions = {}
        };
        return Template
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template = Template
}).call(this);
(function() {
    var TemplateCell;
    TemplateCell = (function() {
        TemplateCell.prototype.CELL_ICONS = 'cell_ia';
        TemplateCell.prototype.CELL_ICON_ADD_MATCH = 'cell_ib';
        TemplateCell.prototype.CELL_MATCH_STATUS = 'cell_aa';
        TemplateCell.prototype.CELL_TEAM_HOME_NAME = 'cell_ab';
        TemplateCell.prototype.CELL_TEAM_AWAY_NAME = 'cell_ac';
        TemplateCell.prototype.CELL_MATCH_START_TIME = 'cell_ad';
        TemplateCell.prototype.CELL_MATCH_WIN_LOSE = 'cell_ae';
        TemplateCell.prototype.CELL_TOURNAMENT_TEMPLATE_ACRONYM = 'cell_af';
        TemplateCell.prototype.CELL_RANK = 'cell_ra';
        TemplateCell.prototype.CELL_TEAM = 'cell_rb';
        TemplateCell.prototype.CELL_NUMBER = 'cell_rc';
        TemplateCell.prototype.CELL_LAPS = 'cell_rd';
        TemplateCell.prototype.CELL_LAP_TIME = 'cell_re';
        TemplateCell.prototype.CELL_GRID = 'cell_rf';
        TemplateCell.prototype.CELL_PITSTOPS = 'cell_rg';
        TemplateCell.prototype.CELL_AGE = 'cell_rh';
        TemplateCell.prototype.CELL_DISTANCE = 'cell_ri';
        TemplateCell.prototype.CELL_WEIGHT = 'cell_rj';
        TemplateCell.prototype.CELL_STARTING_PRICE = 'cell_rk';
        TemplateCell.prototype.CELL_JUMP_ROUND_1 = 'cell_rl';
        TemplateCell.prototype.CELL_JUMP_ROUND_2 = 'cell_ru';
        TemplateCell.prototype.CELL_JUMP_COUNT = 'cell_rq';
        TemplateCell.prototype.CELL_POINTS_ROUND_1 = 'cell_rm';
        TemplateCell.prototype.CELL_POINTS_ROUND_2 = 'cell_rv';
        TemplateCell.prototype.CELL_POINTS_TOTAL = 'cell_rn';
        TemplateCell.prototype.CELL_RUN_1 = 'cell_ro';
        TemplateCell.prototype.CELL_RUN_2 = 'cell_rp';
        TemplateCell.prototype.CELL_DIFFERENCE = 'cell_rr';
        TemplateCell.prototype.CELL_SHOOTING = 'cell_rs';
        TemplateCell.prototype.CELL_TIME = 'cell_rt';
        TemplateCell.prototype.CELL_SCORE = 'cell_sa';
        TemplateCell.prototype.CELL_SCORE_PART = 'cell_sb';
        TemplateCell.prototype.CELL_SCORE_HOME = 'cell_sc';
        TemplateCell.prototype.CELL_SCORE_HOME_PART_1 = 'cell_sd';
        TemplateCell.prototype.CELL_SCORE_HOME_PART_2 = 'cell_se';
        TemplateCell.prototype.CELL_SCORE_HOME_PART_3 = 'cell_sf';
        TemplateCell.prototype.CELL_SCORE_HOME_PART_4 = 'cell_sg';
        TemplateCell.prototype.CELL_SCORE_HOME_PART_5 = 'cell_sh';
        TemplateCell.prototype.CELL_SCORE_HOME_PART_6 = 'cell_si';
        TemplateCell.prototype.CELL_SCORE_HOME_PART_7 = 'cell_sj';
        TemplateCell.prototype.CELL_SCORE_HOME_PART_8 = 'cell_sk';
        TemplateCell.prototype.CELL_SCORE_HOME_PART_9 = 'cell_sl';
        TemplateCell.prototype.CELL_SCORE_HOME_PART_10 = 'cell_sm';
        TemplateCell.prototype.CELL_SCORE_HOME_PART_11 = 'cell_sn';
        TemplateCell.prototype.CELL_SCORE_HOME_PART_12 = 'cell_so';
        TemplateCell.prototype.CELL_SCORE_HOME_POINT_BY_POINT = 'cell_sp';
        TemplateCell.prototype.CELL_SCORE_HOME_HITS = 'cell_sr';
        TemplateCell.prototype.CELL_SCORE_HOME_ERRORS = 'cell_ss';
        TemplateCell.prototype.CELL_SCORE_HOME_LAST_PART = 'cell_st';
        TemplateCell.prototype.CELL_SCORE_HOME_HOLE = 'cell_su';
        TemplateCell.prototype.CELL_RAW_SCORE_HOME = 'cell_sv';
        TemplateCell.prototype.CELL_SCORE_HOME_TODAY = 'cell_sw';
        TemplateCell.prototype.CELL_SCORE_DUEL = 'cell_sx';
        TemplateCell.prototype.CELL_SCORE_AWAY = 'cell_ta';
        TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 = 'cell_tb';
        TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 = 'cell_tc';
        TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 = 'cell_td';
        TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 = 'cell_te';
        TemplateCell.prototype.CELL_SCORE_AWAY_PART_5 = 'cell_tf';
        TemplateCell.prototype.CELL_SCORE_AWAY_PART_6 = 'cell_th';
        TemplateCell.prototype.CELL_SCORE_AWAY_PART_7 = 'cell_ti';
        TemplateCell.prototype.CELL_SCORE_AWAY_PART_8 = 'cell_tj';
        TemplateCell.prototype.CELL_SCORE_AWAY_PART_9 = 'cell_tk';
        TemplateCell.prototype.CELL_SCORE_AWAY_PART_10 = 'cell_tl';
        TemplateCell.prototype.CELL_SCORE_AWAY_PART_11 = 'cell_tm';
        TemplateCell.prototype.CELL_SCORE_AWAY_PART_12 = 'cell_tn';
        TemplateCell.prototype.CELL_SCORE_AWAY_POINT_BY_POINT = 'cell_to';
        TemplateCell.prototype.CELL_SCORE_AWAY_HITS = 'cell_tp';
        TemplateCell.prototype.CELL_SCORE_AWAY_ERRORS = 'cell_tr';
        TemplateCell.prototype.CELL_SCORE_AWAY_LAST_PART = 'cell_tt';
        TemplateCell.prototype.CELL_SERVE_HOME = 'cell_xh';
        TemplateCell.prototype.CELL_SERVE_AWAY = 'cell_xa';
        TemplateCell.prototype.CELL_EXTRA_INFO = 'cell_xi';
        TemplateCell.prototype.CELL_BEST_OF = 'cell_xx';
        TemplateCell.prototype.CELL_OUTCOME_1 = 'cell_oa';
        TemplateCell.prototype.CELL_OUTCOME_X = 'cell_ob';
        TemplateCell.prototype.CELL_OUTCOME_2 = 'cell_oc';
        TemplateCell.prototype.CELL_OUTCOME_SPREAD_HOME_VALUE = 'cell_od';
        TemplateCell.prototype.CELL_OUTCOME_SPREAD_AWAY_VALUE = 'cell_oe';
        TemplateCell.prototype.CELL_OUTCOME_SPREAD_HOME_ODDS = 'cell_of';
        TemplateCell.prototype.CELL_OUTCOME_SPREAD_AWAY_ODDS = 'cell_og';
        TemplateCell.prototype.CELL_OUTCOME_HOME_MONEY_LINE = 'cell_oh';
        TemplateCell.prototype.CELL_OUTCOME_AWAY_MONEY_LINE = 'cell_oi';
        TemplateCell.prototype.CELL_OUTCOME_OVER_VALUE = 'cell_oj';
        TemplateCell.prototype.CELL_OUTCOME_UNDER_VALUE = 'cell_ok';
        TemplateCell.prototype.CELL_OUTCOME_OVER_ODDS = 'cell_ol';
        TemplateCell.prototype.CELL_OUTCOME_UNDER_ODDS = 'cell_om';
        TemplateCell.prototype.CELL_OUTCOME_AH_VALUE = 'cell_on';
        TemplateCell.prototype.CELL_OUTCOME_AH_1 = 'cell_oo';
        TemplateCell.prototype.CELL_OUTCOME_AH_2 = 'cell_op';
        TemplateCell.prototype.CELL_OUTCOME_WINNER = 'cell_or';
        TemplateCell.prototype.CELL_OUTCOME_TOP_3 = 'cell_ov';
        TemplateCell.prototype.CELL_OUTCOME_TOP_5 = 'cell_os';
        TemplateCell.prototype.CELL_OUTCOME_TOP_6 = 'cell_ow';
        TemplateCell.prototype.CELL_OUTCOME_TOP_10 = 'cell_ot';
        TemplateCell.prototype.CELL_OUTCOME_TOP_20 = 'cell_ou';
        TemplateCell.prototype.CELL_OUTCOME_EACH_WAY = 'cell_oz';
        TemplateCell.prototype.CELL_LIVE_IN_OFFER = 'cell_oq';
        TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH = 'head_aa';
        TemplateCell.prototype.CELL_HEADER_HEADING = 'head_ab';
        TemplateCell.prototype.CELL_TEAM_HEADER_HEADING = 'head_ta';
        TemplateCell.prototype.CELL_TEAM_HEADER_ICON_ADD_MATCH = 'head_tb';
        TemplateCell.prototype.CELL_HEADER_ODDS = 'head_ac';
        TemplateCell.prototype.CELL_HEADER_START_TIME = 'head_ae';
        TemplateCell.prototype.CELL_HEADER_OUTCOME_1 = 'head_oa';
        TemplateCell.prototype.CELL_HEADER_OUTCOME_X = 'head_ob';
        TemplateCell.prototype.CELL_HEADER_OUTCOME_2 = 'head_oc';
        TemplateCell.prototype.CELL_HEADER_OUTCOME_AH_VALUE = 'head_on';
        TemplateCell.prototype.CELL_HEADER_OUTCOME_AH_1 = 'head_oo';
        TemplateCell.prototype.CELL_HEADER_OUTCOME_AH_2 = 'head_op';
        TemplateCell.prototype.CELL_HEADER_OUTCOME_SPREAD = 'head_ox';
        TemplateCell.prototype.CELL_HEADER_OUTCOME_MONEY_LINE = 'head_oy';
        TemplateCell.prototype.CELL_HEADER_OUTCOME_OVER_UNDER = 'head_oz';
        TemplateCell.prototype.CELL_HEADER_OUTCOME_EACH_WAY = 'head_od';
        TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT = 'head_ra';

        function TemplateCell(cellName, gameRowElement, jQuery) {
            this.cellName = cellName;
            this.gameRowElement = gameRowElement;
            this.jQuery = jQuery != null ? jQuery : $;
            this.cellElement = this.jQuery('.' + this.cellName, this.gameRowElement)
        }
        TemplateCell.prototype.getJqElement = function() {
            return this.cellElement
        };
        TemplateCell.prototype.setHtml = function(html) {
            return this.getJqElement().html(html)
        };
        TemplateCell.prototype.getHtml = function() {
            return this.getJqElement().html()
        };
        TemplateCell.prototype.GET_ODDS_CELLS = function() {
            return [cjs.TemplateCell.prototype.CELL_OUTCOME_1, cjs.TemplateCell.prototype.CELL_OUTCOME_X, cjs.TemplateCell.prototype.CELL_OUTCOME_2, cjs.TemplateCell.prototype.CELL_OUTCOME_SPREAD_HOME_VALUE, cjs.TemplateCell.prototype.CELL_OUTCOME_SPREAD_AWAY_VALUE, cjs.TemplateCell.prototype.CELL_OUTCOME_SPREAD_HOME_ODDS, cjs.TemplateCell.prototype.CELL_OUTCOME_SPREAD_AWAY_ODDS, cjs.TemplateCell.prototype.CELL_OUTCOME_HOME_MONEY_LINE, cjs.TemplateCell.prototype.CELL_OUTCOME_AWAY_MONEY_LINE, cjs.TemplateCell.prototype.CELL_OUTCOME_OVER_VALUE, cjs.TemplateCell.prototype.CELL_OUTCOME_UNDER_VALUE, cjs.TemplateCell.prototype.CELL_OUTCOME_OVER_ODDS, cjs.TemplateCell.prototype.CELL_OUTCOME_UNDER_ODDS, cjs.TemplateCell.prototype.CELL_OUTCOME_AH_VALUE, cjs.TemplateCell.prototype.CELL_OUTCOME_AH_1, cjs.TemplateCell.prototype.CELL_OUTCOME_AH_2, cjs.TemplateCell.prototype.CELL_OUTCOME_WINNER, cjs.TemplateCell.prototype.CELL_OUTCOME_TOP_3, cjs.TemplateCell.prototype.CELL_OUTCOME_TOP_5, cjs.TemplateCell.prototype.CELL_OUTCOME_TOP_6, cjs.TemplateCell.prototype.CELL_OUTCOME_TOP_10, cjs.TemplateCell.prototype.CELL_OUTCOME_TOP_20, cjs.TemplateCell.prototype.CELL_OUTCOME_EACH_WAY, cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER]
        };
        return TemplateCell
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.TemplateCell = TemplateCell
}).call(this);
(function() {
    var TemplateGame, ref;
    TemplateGame = (function() {
        function TemplateGame(sportDefinition, eventId, createGameRowElement, _multipleEvent, jQuery) {
            this.sportDefinition = sportDefinition;
            this.eventId = eventId;
            if (createGameRowElement == null) {
                createGameRowElement = false
            }
            this._multipleEvent = _multipleEvent != null ? _multipleEvent : false;
            this.jQuery = jQuery != null ? jQuery : $;
            if (createGameRowElement) {
                this._createGameRow()
            } else {
                this._getGameRow()
            }
            this.isCreatedGameRowElement = createGameRowElement;
            this.cells = {}
        }
        TemplateGame.prototype.setJqElement = function(gameRowElement) {
            this.gameRowElement = gameRowElement;
            return this.isCreatedGameRowElement = true
        };
        TemplateGame.prototype.getJqElement = function() {
            return this.gameRowElement
        };
        TemplateGame.prototype.getHtml = function() {
            return this.jQuery('<tbody>').append(this.getJqElement().clone()).html()
        };
        TemplateGame.prototype.getCell = function(cellName) {
            if (this.cells[cellName] == null) {
                this.cells[cellName] = new cjs.TemplateCell(cellName, this.gameRowElement, this.jQuery)
            }
            return this.cells[cellName]
        };
        TemplateGame.prototype.getCellHtml = function(cellName) {
            return this.getCell(cellName).getHtml()
        };
        TemplateGame.prototype.getSportDefinition = function() {
            return this.sportDefinition
        };
        TemplateGame.prototype.getEventId = function() {
            return this.eventId
        };
        TemplateGame.prototype.setCellHtml = function(cellName, html) {
            var cell;
            cell = this.getCell(cellName);
            return cell.setHtml(html)
        };
        TemplateGame.prototype.setCellsHtml = function(dataObject) {
            var cellName, html, results;
            results = [];
            for (cellName in dataObject) {
                html = dataObject[cellName];
                results.push(this.setCellHtml(cellName, html))
            }
            return results
        };
        TemplateGame.prototype._createGameRow = function() {
            return this.gameRowElement = this.sportDefinition.createGameRow(this.eventId)
        };
        TemplateGame.prototype._getGameRow = function() {
            var gameRowSelector;
            if (this._multipleEvent) {
                return
            }
            gameRowSelector = this.sportDefinition.getGameRowSelector(this.eventId, this._multipleEvent);
            return this.gameRowElement = this.jQuery(gameRowSelector)
        };
        return TemplateGame
    })();
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.TemplateGame = TemplateGame
    }
}).call(this);
(function() {
    var TemplateHeader, ref;
    TemplateHeader = (function() {
        function TemplateHeader(sportDefinition, labelId, createHeaderElement, jQuery) {
            this.sportDefinition = sportDefinition;
            this.labelId = labelId;
            if (createHeaderElement == null) {
                createHeaderElement = false
            }
            this.jQuery = jQuery != null ? jQuery : $;
            if (createHeaderElement) {
                this._createHeader()
            } else {
                this._getHeader()
            }
            this.isCreatedHeaderElement = createHeaderElement;
            this.cells = {}
        }
        TemplateHeader.prototype.getJqElement = function() {
            return this.headerElement
        };
        TemplateHeader.prototype.getHtml = function() {
            return this.jQuery('<thead>').append(this.getJqElement().clone()).html()
        };
        TemplateHeader.prototype.getCell = function(cellName) {
            if (this.cells[cellName] == null) {
                this.cells[cellName] = new cjs.TemplateCell(cellName, this.headerElement, this.jQuery)
            }
            return this.cells[cellName]
        };
        TemplateHeader.prototype.getCellHtml = function(cellName) {
            return this.getCell(cellName).getHtml()
        };
        TemplateHeader.prototype.getSportDefinition = function() {
            return this.sportDefinition
        };
        TemplateHeader.prototype.setCellHtml = function(cellName, html) {
            var cell;
            cell = this.getCell(cellName);
            return cell.setHtml(html)
        };
        TemplateHeader.prototype.setCellsHtml = function(dataObject) {
            var cellName, html, results;
            results = [];
            for (cellName in dataObject) {
                html = dataObject[cellName];
                results.push(this.setCellHtml(cellName, html))
            }
            return results
        };
        TemplateHeader.prototype._createHeader = function() {
            return this.headerElement = this.sportDefinition.createHeader(this.labelId)
        };
        TemplateHeader.prototype._getHeader = function() {
            var headerSelector;
            headerSelector = this.sportDefinition.getHeaderSelector(this.labelId);
            return this.headerElement = this.jQuery(headerSelector)
        };
        return TemplateHeader
    })();
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.TemplateHeader = TemplateHeader
    }
}).call(this);
(function() {
    var TemplateGameDataProxy, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    TemplateGameDataProxy = (function() {
        function TemplateGameDataProxy(inject, jQuery, _dic) {
            this.jQuery = jQuery != null ? jQuery : $;
            this._dic = _dic != null ? _dic : cjs.dic;
            this.cellContentGetter = inject.cellContentGetter, this.columnAttrListGetter = inject.columnAttrListGetter, this.mygamesCellClassGetter = inject.mygamesCellClassGetter, this.categoryGetter = inject.categoryGetter, this.projectTypeGetter = inject.projectTypeGetter, this.scorePartIndexGetter = inject.scorePartIndexGetter, this.oddsCellContentGetter = inject.oddsCellContentGetter, this.countryGetter = inject.countryGetter, this.matchDayGetter = inject.matchDayGetter, this.coreUpdateGetter = inject.coreUpdateGetter, this.oddsHighlightGetter = inject.oddsHighlightGetter, this.mygamesGroupsGetter = inject.mygamesGroupsGetter;
            this.cellDefinition = {};
            this._defineCells()
        }
        TemplateGameDataProxy.prototype.getGameRowObjects = function(fsDataIndex) {
            var gameId, gamePrefix, gameRow, gameRowElements, gameRowObjects, multipleEvent, ref, rowCount, rowsElements, sportId;
            multipleEvent = this.categoryGetter() * 1 === 5;
            ref = fsDataIndex.split('_'), gamePrefix = ref[0], sportId = ref[1], gameId = ref[2];
            gameRowObjects = [];
            gameRow = cjs.template.getGameRow(sportId, gameId, false);
            gameRowObjects.push(gameRow);
            if (!multipleEvent) {
                return gameRowObjects
            }
            rowsElements = this.jQuery(gameRow.sportDefinition.getGameRowSelector(gameRow.eventId, true));
            rowCount = gameRow.sportDefinition.getGameRowCount();
            gameRowElements = [];
            rowsElements.each((function(_this) {
                return function(index, rowElement) {
                    gameRowElements.push(rowElement);
                    if ((index + 1) % rowCount === 0) {
                        gameRowObjects.push(cjs.template.getGameRowWithCustomJqRowElements(sportId, gameId, _this.jQuery(gameRowElements)));
                        return gameRowElements = []
                    }
                }
            })(this));
            return gameRowObjects
        };
        TemplateGameDataProxy.prototype.updateGame = function(fsDataIndex) {
            var gameRow, gameRowObjects, i, len, ret;
            gameRowObjects = this.getGameRowObjects(fsDataIndex);
            ret = false;
            for (i = 0, len = gameRowObjects.length; i < len; i++) {
                gameRow = gameRowObjects[i];
                ret = this.updateGameRow(gameRow, fsDataIndex) || ret
            }
            return ret
        };
        TemplateGameDataProxy.prototype.updateGameRow = function(gameRow) {
            var cellName, fsDataIndex, i, len, ref, sportDefinition, updated, updatedKeys;
            sportDefinition = gameRow.getSportDefinition();
            fsDataIndex = 'g_' + sportDefinition.getSportId() + '_' + gameRow.getEventId();
            updated = false;
            updatedKeys = this._getUpdatedKeys(fsDataIndex);
            if (!updatedKeys.length) {
                return updated
            }
            ref = sportDefinition.getGameCellNames();
            for (i = 0, len = ref.length; i < len; i++) {
                cellName = ref[i];
                if (!this._isCellAffectedByKeys(cellName, updatedKeys)) {
                    continue
                }
                updated = true;
                this.updateGameCell(cellName, gameRow, false, updatedKeys)
            }
            this._updateGameRowStageClass(fsDataIndex, gameRow, updatedKeys);
            this._updateGameRowClass(fsDataIndex, gameRow, updatedKeys);
            return updated
        };
        TemplateGameDataProxy.prototype.updateGameCell = function(cellName, gameRow, updateOnlyContent, updatedKeys) {
            var cell, cellClass, cellContent, fsDataIndex, ref, sportDefinition;
            if (updateOnlyContent == null) {
                updateOnlyContent = false
            }
            if (updatedKeys == null) {
                updatedKeys = []
            }
            sportDefinition = gameRow.getSportDefinition();
            fsDataIndex = 'g_' + sportDefinition.getSportId() + '_' + gameRow.getEventId();
            ref = this.getCellContentAndClass(cellName, fsDataIndex), cellContent = ref[0], cellClass = ref[1];
            cell = gameRow.getCell(cellName);
            cell.setHtml(cellContent);
            if (!updateOnlyContent) {
                cell.getJqElement().attr('class', sportDefinition.getGameCellDefaultClass(cellName));
                if (cellClass) {
                    cell.getJqElement().addClass(cellClass)
                }
            }
            if (this.cellDefinition[cellName].afterCellUpdateCallback != null) {
                return this.cellDefinition[cellName].afterCellUpdateCallback(gameRow, cell, updatedKeys)
            }
        };
        TemplateGameDataProxy.prototype.getFilledGameRow = function(fsDataIndex, rowClass, multipleEvent) {
            var _, eventId, ref, sportDefinition, sportId;
            if (multipleEvent == null) {
                multipleEvent = false
            }
            ref = fsDataIndex.split('_'), _ = ref[0], sportId = ref[1], eventId = ref[2];
            sportDefinition = cjs.template.getTemplateDefinitionForGame(sportId, eventId);
            return this.getFilledGameRowFromTemplate(sportDefinition, fsDataIndex, rowClass, multipleEvent)
        };
        TemplateGameDataProxy.prototype.getFilledGameRowFromTemplate = function(sportDefinition, fsDataIndex, rowClass, multipleEvent) {
            var cellClass, cellContent, cellName, cellsData, eventItem, gameCells, gxy, html, i, j, len, ref, ref1, ref2, rowIdClass, rowIndex;
            if (rowClass == null) {
                rowClass = ''
            }
            if (multipleEvent == null) {
                multipleEvent = false
            }
            eventItem = this._dic.get('dataEventHolderProxy').getHolder().getEvent(fsDataIndex);
            if (hasMatchFinalResultOnly(fsDataIndex)) {
                rowClass += " no-service-info"
            }
            if (eventItem.isInterrupted() || eventItem.isAfterDay()) {
                rowClass += " " + this._createGameRowStageClass(cjs.Util.List.getEventStages().INTERRUPTED)
            } else if (eventItem.isFinished() && !eventItem.isTotallyFinished()) {
                rowClass += " " + this._createGameRowStageClass(cjs.Util.List.getEventStageTypes().SCHEDULED)
            } else {
                rowClass += " " + this._createGameRowStageClass(eventItem.getStageType())
            }
            rowClass += this._createGameRowNoServiceInfoClass(eventItem);
            rowClass += this._createHorseRaceInfoClass(eventItem);
            html = sportDefinition.getGameRowHtmlTemplate();
            cellsData = {};
            gameCells = sportDefinition.getGameCellNames();
            for (i = 0, len = gameCells.length; i < len; i++) {
                cellName = gameCells[i];
                ref = this.getCellContentAndClass(cellName, fsDataIndex), cellContent = ref[0], cellClass = ref[1];
                cellsData[cellName.replace('cell_', 'H_')] = cellContent;
                cellsData[cellName.replace('cell_', 'C_')] = this._getCellClass(sportDefinition, cellName, cellClass)
            }
            for (rowIndex = j = 1, ref1 = sportDefinition.getGameRowCount(); 1 <= ref1 ? j <= ref1 : j >= ref1; rowIndex = 1 <= ref1 ? ++j : --j) {
                rowIdClass = '';
                if (multipleEvent) {
                    gxy = html.match(/\sid="([a-z])_%%SPORT_ID%%_%%EVENT_ID%%"/i);
                    if ((gxy[0] != null) && (gxy[1] != null)) {
                        html = html.replace(gxy[0], '');
                        rowIdClass = gxy[1] + '_' + eventItem.getValue('sport_id') + '_' + eventItem.getValue('original_id') + ' '
                    }
                }
                cellsData['R_C' + rowIndex] = rowIdClass + rowClass;
                if (rowIndex === 3 && ((ref2 = sportDefinition.getSportId()) === 6 || ref2 === 13) && !cellsData.H_xi) {
                    cellsData['R_C' + rowIndex] = 'hidden-imp'
                }
            }
            html = html.replace(/%%((C|H|R)_([a-zA-Z0-9]{2}))%%/g, function(match, p1, p2, p3, offset, string) {
                if (cellsData[p1] != null) {
                    return cellsData[p1]
                } else {
                    return ''
                }
            });
            if (!multipleEvent) {
                html = html.replace(/%%SPORT_ID%%/g, eventItem.getValue('sport_id'));
                html = html.replace(/%%EVENT_ID%%/g, eventItem.getValue('original_id'))
            }
            return html
        };
        TemplateGameDataProxy.prototype.getCellContentAndClass = function(cellName, fsDataIndex) {
            if (!this.cellDefinition[cellName]) {
                return [null, null]
            }
            return this.cellDefinition[cellName].getContentCallback(fsDataIndex)
        };
        TemplateGameDataProxy.prototype._getCellContentAndClassForType = function(cellTypeName, fsDataIndex) {
            var coreUpdate, currentEventItem, historyDataItem, obj, objectName;
            currentEventItem = this._dic.get('dataEventHolderProxy').getHolder().getEvent(fsDataIndex);
            historyDataItem = this._dic.getNewInstance('dataItem');
            coreUpdate = this.coreUpdateGetter();
            if (coreUpdate.element_defined(fsDataIndex)) {
                historyDataItem.reinit(coreUpdate.element_history_get(fsDataIndex))
            }
            objectName = "Template_CellContent_" + cellTypeName;
            obj = this._dic.get(objectName);
            return [obj.getContent(currentEventItem, historyDataItem), obj.getClass(currentEventItem, historyDataItem)]
        };
        TemplateGameDataProxy.prototype._getCellClass = function(sportDefinition, cellName, appendClass) {
            var cellClass, className, i, len, ref;
            cellClass = sportDefinition.getGameCellDefaultClass(cellName).split(' ');
            if (appendClass) {
                ref = appendClass.split(' ');
                for (i = 0, len = ref.length; i < len; i++) {
                    className = ref[i];
                    if (this.jQuery(className, cellClass)) {
                        cellClass.push(className)
                    }
                }
            }
            return cellClass.join(' ')
        };
        TemplateGameDataProxy.prototype._addCellDefinition = function(cellName, dataKeys, cellContentCallback, afterCellUpdateCallback) {
            if (afterCellUpdateCallback == null) {
                afterCellUpdateCallback = null
            }
            if (this.cellDefinition[cellName] != null) {
                return false
            }
            this.cellDefinition[cellName] = {
                dataKeys: dataKeys,
                getContentCallback: cellContentCallback,
                afterCellUpdateCallback: afterCellUpdateCallback
            };
            return true
        };
        TemplateGameDataProxy.prototype._isCellAffectedByKeys = function(cellName, changedKeys) {
            var dataKey, dataKeys, i, len;
            dataKeys = this._getDataKeysForCell(cellName);
            for (i = 0, len = dataKeys.length; i < len; i++) {
                dataKey = dataKeys[i];
                if (this.jQuery.inArray(dataKey, changedKeys) !== -1) {
                    return true
                }
            }
            return false
        };
        TemplateGameDataProxy.prototype._getDataKeysForCell = function(cellName) {
            var ref, ref1;
            if (((ref = this.cellDefinition) != null ? (ref1 = ref[cellName]) != null ? ref1.dataKeys : void 0 : void 0) == null) {
                return []
            }
            return this.cellDefinition[cellName].dataKeys
        };
        TemplateGameDataProxy.prototype._getUpdatedKeys = function(fsDataIndex) {
            var coreUpdate, dataEventHolder, dataKey, holderProxy, keysChanged;
            coreUpdate = this.coreUpdateGetter();
            holderProxy = this._dic.get('dataEventHolderProxy');
            dataEventHolder = holderProxy.getHolder();
            if (!dataEventHolder.hasEvent(fsDataIndex)) {
                return []
            }
            keysChanged = [];
            for (dataKey in dataEventHolder.getEvent(fsDataIndex).getData()) {
                if (coreUpdate.did_property_changed(fsDataIndex, dataKey, true)) {
                    keysChanged.push(dataKey)
                }
            }
            return keysChanged
        };
        TemplateGameDataProxy.prototype._updateGameRowStageClass = function(fsDataIndex, gameRow, updatedKeys) {
            var AB, availableClass, availableClasses, eventItem, i, len, results, switchClass;
            if (indexOf.call(updatedKeys, 'AB') >= 0) {
                eventItem = this._dic.get('dataEventHolderProxy').getHolder().getEvent(fsDataIndex);
                availableClasses = [cjs.Util.List.getEventStageTypeAsString(cjs.Util.List.getEventStageTypes().LIVE), cjs.Util.List.getEventStageTypeAsString(cjs.Util.List.getEventStageTypes().FINISHED), cjs.Util.List.getEventStageTypeAsString(cjs.Util.List.getEventStageTypes().SCHEDULED), cjs.Util.List.getEventStageAsString(cjs.Util.List.getEventStages().INTERRUPTED)];
                if (eventItem.isInterrupted() || eventItem.isAfterDay()) {
                    AB = cjs.Util.List.getEventStages().INTERRUPTED
                } else if (eventItem.isFinished() && !eventItem.isTotallyFinished()) {
                    AB = cjs.Util.List.getEventStageTypes().SCHEDULED
                } else {
                    AB = eventItem.getStageType()
                }
                results = [];
                for (i = 0, len = availableClasses.length; i < len; i++) {
                    availableClass = availableClasses[i];
                    if (availableClass === cjs.Util.List.getEventStageAsString(cjs.Util.List.getEventStages().INTERRUPTED)) {
                        switchClass = availableClass === cjs.Util.List.getEventStageAsString(AB)
                    } else {
                        switchClass = availableClass === cjs.Util.List.getEventStageTypeAsString(AB)
                    }
                    results.push(gameRow.getJqElement().toggleClass("stage-" + availableClass, switchClass))
                }
                return results
            }
        };
        TemplateGameDataProxy.prototype._updateGameRowClass = function(fsDataIndex, gameRow, updatedKeys) {
            var eventItem, ref;
            if (indexOf.call(updatedKeys, 'WT') >= 0) {
                eventItem = this._dic.get('dataEventHolderProxy').getHolder().getEvent(fsDataIndex);
                return gameRow.getJqElement().toggleClass("non-runner", (ref = eventItem.getParticipantStatus(), indexOf.call(this._getHorseEventIncidents(), ref) >= 0))
            }
        };
        TemplateGameDataProxy.prototype._createGameRowStageClass = function(type) {
            var allowedEventStages;
            allowedEventStages = [cjs.Util.List.getEventStages().INTERRUPTED];
            if (indexOf.call(allowedEventStages, type) >= 0) {
                return "stage-" + (cjs.Util.List.getEventStageAsString(type))
            } else {
                return "stage-" + (cjs.Util.List.getEventStageTypeAsString(type))
            }
        };
        TemplateGameDataProxy.prototype._createGameRowNoServiceInfoClass = function(eventItem) {
            var allowedSports, ref, sports;
            sports = cjs.Util.List.getSports();
            allowedSports = [sports.TENNIS, sports.CRICKET, sports.DARTS, sports.BASEBALL, sports.BADMINTON, sports.VOLLEYBALL, sports.BEACH_VOLLEYBALL];
            if (ref = eventItem.getSportId(), indexOf.call(allowedSports, ref) < 0) {
                return ''
            }
            if (!eventItem.isLive()) {
                return ''
            }
            if (eventItem.hasService()) {
                return ''
            }
            return ' no-service-info'
        };
        TemplateGameDataProxy.prototype._getHorseEventIncidents = function() {
            var eventIncidentType;
            eventIncidentType = this._dic.get('util_list').getEventIncidentType();
            return [eventIncidentType.NON_RUNNER, eventIncidentType.PULLED_UP, eventIncidentType.UNSEATED_RIDER, eventIncidentType.RAN_OUT, eventIncidentType.FALL, eventIncidentType.BROUGHT_DOWN, eventIncidentType.HIT_RAILS, eventIncidentType.REFUSED_TO_RACE, eventIncidentType.DISQUALIFIED, eventIncidentType.SLIPPED_UP]
        };
        TemplateGameDataProxy.prototype._createHorseRaceInfoClass = function(eventItem) {
            var ref;
            if (ref = eventItem.getParticipantStatus(), indexOf.call(this._getHorseEventIncidents(), ref) >= 0) {
                return ' non-runner'
            }
            return ''
        };
        TemplateGameDataProxy.prototype._defineCells = function() {
            var CELLS, cellName, dataKeys, i, j, len, len1, parser, scorePart, scoreParts, scoreSide, scoreSides, stats;
            CELLS = cjs.TemplateCell.prototype;
            this._addCellDefinition(CELLS.CELL_ICON_ADD_MATCH, [], (function(_this) {
                return function(fsDataIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.cellContentGetter('mygames', fsDataIndex);
                    cellClass = _this.mygamesCellClassGetter(cellContent);
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_MATCH_START_TIME, ['AB', 'AC', 'AD', 'AP'], (function(_this) {
                return function(fsDataIndex) {
                    var attr, cellClass, cellContent, eventItem;
                    eventItem = _this._dic.get('dataEventHolderProxy').getHolder().getEvent(fsDataIndex);
                    attr = _this.columnAttrListGetter(fsDataIndex);
                    if (_this.categoryGetter() === 5) {
                        if (_this.jQuery.inArray(0, _this.matchDayGetter(eventItem.getValue('AD'), eventItem.getValue('AP'))) !== -1) {
                            cellContent = _this.cellContentGetter('time', fsDataIndex);
                            cellClass = attr.css.time
                        } else {
                            cellContent = _this.cellContentGetter('date', fsDataIndex);
                            cellClass = 'time-playing'
                        }
                    } else {
                        cellContent = _this.cellContentGetter((!_this._dic.get('page').isSeasonPage() && !_this._dic.get('page').isCountryPage() ? 'time' : 'datetime'), fsDataIndex);
                        cellClass = attr.css.time
                    }
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_MATCH_STATUS, ['BW', 'ZF', 'AB', 'AC', 'AO', 'BX', 'AG', 'AH', 'CK', 'WL'], (function(_this) {
                return function(fsDataIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.cellContentGetter('counter', fsDataIndex);
                    cellClass = _this.columnAttrListGetter(fsDataIndex).css.match_status;
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_MATCH_WIN_LOSE, ['AS'], (function(_this) {
                return function(fsDataIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.cellContentGetter('win_lose', fsDataIndex);
                    cellClass = _this.columnAttrListGetter(fsDataIndex).css.win_lose;
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_TOURNAMENT_TEMPLATE_ACRONYM, [], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('TournamentTemplateAcronym', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_TEAM_HOME_NAME, ['CA', 'BY', 'AJ', 'AE', 'AZ', 'AB', 'WT', 'WY'], (function(_this) {
                return function(fsDataIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.cellContentGetter('home', fsDataIndex);
                    cellClass = _this.columnAttrListGetter(fsDataIndex).css.home;
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_TEAM_AWAY_NAME, ['CB', 'WE', 'AF', 'AK', 'BZ', 'AZ', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.cellContentGetter('away', fsDataIndex);
                    cellClass = _this.columnAttrListGetter(fsDataIndex).css.away;
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SERVE_HOME, ['WC', 'AB', 'AC'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('ServeHome', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SERVE_AWAY, ['WC', 'AB', 'AC'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('ServeAway', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SCORE, ['AB', 'AC', 'AZ', 'AE', 'AF', 'AG', 'AH', 'AT', 'AU', 'GR', 'GS', 'IA', 'IB', 'IC', 'ID'], (function(_this) {
                return function(fsDataIndex) {
                    var cellClass, cellContent, gameId, gamePrefix, gameRow, ref, sportId;
                    ref = fsDataIndex.split('_'), gamePrefix = ref[0], sportId = ref[1], gameId = ref[2];
                    gameRow = cjs.template.getGameRow(sportId, gameId, false);
                    cellContent = _this.cellContentGetter('score_home', fsDataIndex);
                    cellClass = _this.columnAttrListGetter(fsDataIndex).css.score;
                    if (_this.projectTypeGetter() === '_ass' && cellContent === '-') {
                        cellClass += ' no-underline'
                    }
                    if (parseInt(sportId) === _this._dic.get('util_list').getSports().GOLF && gameRow.sportDefinition.getGameRowCount() === 2) {
                        cellClass += ' no-highlighted'
                    }
                    return [cellContent, cellClass]
                }
            })(this));
            stats = this._dic.get('util_list').getStatsDataTypes();
            parser = this._dic.get('Helper_Parser');
            this._addCellDefinition(CELLS.CELL_RANK, ['WS', 'WT', 'WW', 'AB', parser.getStatsResultsIndex(stats.RANK), parser.getStatsResultsIndex(stats.STOP_REASON), parser.getStatsResultsIndex(stats.STOP_REASON_ROUND_1), parser.getStatsResultsIndex(stats.STOP_REASON_ROUND_2)], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('Rank', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_TEAM, ['NA'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('Team', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_NUMBER, ['NB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('Number', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_LAPS, ['NC'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('Laps', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_LAP_TIME, ['ND', 'NG', 'NH', 'NJ', 'WZ', 'WT', 'WS', 'AB', 'VX'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('LapTime', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_GRID, ['NE'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('Grid', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_PITSTOPS, ['NF'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('Pitstops', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_DISTANCE, ['NK'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('Distance', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SCORE_DUEL, ['AH', 'AG'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('ScoreDuel', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_WEIGHT, ['NL'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('Weight', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_STARTING_PRICE, ['NM'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('StartingPrice', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_AGE, ['NN'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('Age', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SCORE_HOME, ['AB', 'AC', 'AG', 'WT', 'WS', 'WZ'], (function(_this) {
                return function(fsDataIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.cellContentGetter('score_home', fsDataIndex);
                    cellClass = _this.columnAttrListGetter(fsDataIndex).css.score;
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_RAW_SCORE_HOME, ['AB', 'AC', 'AG'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('RawScoreHome', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SCORE_AWAY, ['AB', 'AC', 'AH'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('ScoreAway', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SCORE_PART, ['AW', 'AC', 'AB', 'BA', 'BB'], (function(_this) {
                return function(fsDataIndex) {
                    var cellContent;
                    cellContent = _this.cellContentGetter('home_score_part', fsDataIndex);
                    return [cellContent, '']
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SCORE_HOME_HOLE, ['AB', 'WT', 'GH', 'AC', 'WS', 'WZ'], (function(_this) {
                return function(fsDataIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.cellContentGetter('score_home_hole', fsDataIndex);
                    cellClass = _this.columnAttrListGetter(fsDataIndex).css.hole;
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SCORE_HOME_TODAY, ['AB', 'WT', 'GH', 'GI', 'AC', 'WS'], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('ParToday', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_ICONS, ['AB', 'AX', 'AM', 'BW', 'ZF', 'AD', 'AC', 'AV', 'AN', 'AW', 'AL'], (function(_this) {
                return function(fsDataIndex) {
                    var cellContent;
                    cellContent = _this.cellContentGetter('icon', fsDataIndex);
                    _this.coreUpdateGetter().runDisableVideoIconBlink(fsDataIndex);
                    return [cellContent, '']
                }
            })(this));
            scoreSides = ['home', 'away'];
            scoreParts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
            for (i = 0, len = scoreSides.length; i < len; i++) {
                scoreSide = scoreSides[i];
                for (j = 0, len1 = scoreParts.length; j < len1; j++) {
                    scorePart = scoreParts[j];
                    if (scoreSide === 'home') {
                        cellName = 'CELL_SCORE_HOME_PART_' + scorePart
                    } else {
                        cellName = 'CELL_SCORE_AWAY_PART_' + scorePart
                    }
                    dataKeys = [];
                    switch (this.scorePartIndexGetter(scoreSide, scorePart - 1)) {
                        case 'BA':
                            dataKeys = ['DK', 'DO'];
                            break;
                        case 'BC':
                            dataKeys = ['DM', 'DQ'];
                            break;
                        case 'BB':
                            dataKeys = ['DL', 'DP'];
                            break;
                        case 'BD':
                            dataKeys = ['DN', 'DR']
                    }
                    dataKeys.push(this.scorePartIndexGetter(scoreSide, scorePart - 1));
                    dataKeys.push(this.scorePartIndexGetter(scoreSide, scorePart - 1).replace(/^B/, "D"));
                    dataKeys.push('AC');
                    dataKeys.push('WT');
                    this._addCellDefinition(CELLS[cellName], dataKeys, ((function(_this) {
                        return function(scoreSide, scorePart) {
                            return function(fsDataIndex) {
                                var cellClass, cellContent;
                                cellContent = _this.cellContentGetter(scoreSide + '_score_part', fsDataIndex, _this.scorePartIndexGetter(scoreSide, scorePart - 1)) + "";
                                cellClass = _this.columnAttrListGetter(fsDataIndex).css.score_part;
                                return [cellContent, cellClass]
                            }
                        }
                    })(this))(scoreSide, scorePart))
                }
            }
            this._addCellDefinition(CELLS.CELL_SCORE_HOME_LAST_PART, ['BA', 'BC', 'BE', 'BG', 'BI', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.cellContentGetter('last_part_score_home', fsDataIndex) + "";
                    cellClass = _this.columnAttrListGetter(fsDataIndex).css.last_part_score;
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SCORE_AWAY_LAST_PART, ['BB', 'BD', 'BF', 'BH', 'BJ', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.cellContentGetter('last_part_score_away', fsDataIndex) + "";
                    cellClass = _this.columnAttrListGetter(fsDataIndex).css.last_part_score;
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SCORE_HOME_POINT_BY_POINT, ['AB', 'AC', 'WA'], (function(_this) {
                return function(fsDataIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.cellContentGetter('game_score_part', fsDataIndex, 'WA') + "";
                    cellClass = _this.columnAttrListGetter(fsDataIndex).css.point_by_point;
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SCORE_AWAY_POINT_BY_POINT, ['AB', 'AC', 'WB'], (function(_this) {
                return function(fsDataIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.cellContentGetter('game_score_part', fsDataIndex, 'WB') + "";
                    cellClass = _this.columnAttrListGetter(fsDataIndex).css.point_by_point;
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SCORE_HOME_HITS, ['WF'], (function(_this) {
                return function(fsDataIndex) {
                    var cellContent;
                    cellContent = _this.cellContentGetter('home_score_part', fsDataIndex, 'WF') + "";
                    return [cellContent, '']
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SCORE_AWAY_HITS, ['WG'], (function(_this) {
                return function(fsDataIndex) {
                    var cellContent;
                    cellContent = _this.cellContentGetter('home_score_part', fsDataIndex, 'WG') + "";
                    return [cellContent, '']
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SCORE_HOME_ERRORS, ['WH'], (function(_this) {
                return function(fsDataIndex) {
                    var cellContent;
                    cellContent = _this.cellContentGetter('home_score_part', fsDataIndex, 'WH') + "";
                    return [cellContent, '']
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SCORE_AWAY_ERRORS, ['WI'], (function(_this) {
                return function(fsDataIndex) {
                    var cellContent;
                    cellContent = _this.cellContentGetter('home_score_part', fsDataIndex, 'WI') + "";
                    return [cellContent, '']
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_LIVE_IN_OFFER, ['AY', 'AB', 'AN'], (function(_this) {
                return function(fsDataIndex) {
                    var cellContent;
                    cellContent = _this.cellContentGetter('comparison', fsDataIndex);
                    return [cellContent, '']
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_1, ['XA', 'YA', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('1', fsDataIndex)
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_X, ['XB', 'YB', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('0', fsDataIndex)
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_2, ['XC', 'YC', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('2', fsDataIndex)
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_AH_VALUE, ['XH'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('AH', fsDataIndex)
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    return _this.oddsHighlightGetter(cell.getJqElement())
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_AH_1, ['XF', 'YF', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('AH1', fsDataIndex)
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_AH_2, ['XG', 'YG', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('AH2', fsDataIndex)
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_SPREAD_HOME_VALUE, ['XH'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('AH', fsDataIndex, 'home')
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    return _this.oddsHighlightGetter(cell.getJqElement())
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_SPREAD_HOME_ODDS, ['XF', 'YF', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('AH1', fsDataIndex, 'home')
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_HOME_MONEY_LINE, ['XL', 'YL', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('ML1', fsDataIndex, 'home')
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_OVER_VALUE, ['XK'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('OU', fsDataIndex, 'home')
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    return _this.oddsHighlightGetter(cell.getJqElement())
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_OVER_ODDS, ['XI', 'YI', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('OU1', fsDataIndex, 'home')
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_SPREAD_AWAY_VALUE, ['XH'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('AH', fsDataIndex, 'away')
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    return _this.oddsHighlightGetter(cell.getJqElement())
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_SPREAD_AWAY_ODDS, ['XG', 'YG', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('AH2', fsDataIndex, 'away')
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_AWAY_MONEY_LINE, ['XM', 'YM', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('ML2', fsDataIndex, 'away')
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_UNDER_VALUE, ['XK'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('OU', fsDataIndex, 'away')
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    return _this.oddsHighlightGetter(cell.getJqElement())
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_UNDER_ODDS, ['XJ', 'YJ', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('OU2', fsDataIndex, 'away')
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_WINNER, ['XA', 'YA', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('winner', fsDataIndex)
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_EACH_WAY, ['XB', 'YB', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('each_way', fsDataIndex)
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_TOP_3, ['XO', 'YO', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('top_3', fsDataIndex)
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_TOP_5, ['XB', 'YB', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('top_5', fsDataIndex)
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_TOP_6, ['XP', 'YP', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('top_6', fsDataIndex)
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_TOP_10, ['XC', 'YC', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('top_10', fsDataIndex)
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_OUTCOME_TOP_20, ['XD', 'YD', 'AB'], (function(_this) {
                return function(fsDataIndex) {
                    return _this.oddsCellContentGetter('top_20', fsDataIndex)
                }
            })(this), (function(_this) {
                return function(gameRow, cell, updatedKeys) {
                    if (_this.jQuery.inArray('AB', updatedKeys) === -1) {
                        return _this.oddsHighlightGetter(cell.getJqElement())
                    }
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_EXTRA_INFO, ['AE', 'AF', 'AD', 'AP', 'AB', 'WJ', 'WK', 'WQ', 'AS', 'LS', 'WO', 'WP'], (function(_this) {
                return function(fsDataIndex) {
                    var cellContent, eventItem, extraRow;
                    eventItem = _this._dic.get('dataEventHolderProxy').getHolder().getEvent(fsDataIndex);
                    extraRow = '';
                    switch (eventItem.getValue('sport')) {
                        case 'cricket':
                            extraRow = 'extra_row';
                            break;
                        case 'baseball':
                            extraRow = 'extra_row_baseball'
                    }
                    cellContent = _this.cellContentGetter(extraRow, fsDataIndex);
                    return [cellContent, '']
                }
            })(this), function(gameRow, cell, updatedKeys) {
                var sportDefinition;
                sportDefinition = gameRow.getSportDefinition();
                if (cell.getHtml()) {
                    return gameRow.getJqElement().eq(2).removeClass('hidden-imp')
                } else {
                    return gameRow.getJqElement().eq(2).addClass('hidden-imp')
                }
            });
            this._addCellDefinition(CELLS.CELL_BEST_OF, ['WD', 'WL'], (function(_this) {
                return function(fsDataIndex) {
                    var cellContent;
                    cellContent = _this.cellContentGetter('best_of', fsDataIndex, 'WD');
                    return [cellContent, '']
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_SHOOTING, [parser.getStatsResultsIndex(stats.PENALTY_LAP), parser.getStatsResultsIndex(stats.MISSED_SHOT), parser.getStatsResultsIndex(stats.ON_TRACK), parser.getStatsResultsIndex(stats.RANK)], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('Shooting', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_TIME, ['AC', parser.getStatsResultsIndex(stats.TIME), parser.getStatsResultsIndex(stats.STOP_REASON)], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('Time', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_RUN_1, [parser.getStatsResultsIndex(stats.TIME_ROUND_1), parser.getStatsResultsIndex(stats.STOP_REASON_ROUND_1)], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('TimeRound1', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_RUN_2, [parser.getStatsResultsIndex(stats.TIME_ROUND_2), parser.getStatsResultsIndex(stats.STOP_REASON_ROUND_2)], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('TimeRound2', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_DIFFERENCE, ['AC', 'NJ', parser.getStatsResultsIndex(stats.GAP), parser.getStatsResultsIndex(stats.ON_TRACK), parser.getStatsResultsIndex(stats.RANK), parser.getStatsResultsIndex(stats.LAPS_DISTANCE), parser.getStatsResultsIndex(stats.STOP_REASON)], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('Gap', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_JUMP_ROUND_1, [parser.getStatsResultsIndex(stats.JUMP_ROUND_1), parser.getStatsResultsIndex(stats.STOP_REASON_ROUND_1)], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('JumpRound1', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_JUMP_ROUND_2, [parser.getStatsResultsIndex(stats.JUMP_ROUND_2), parser.getStatsResultsIndex(stats.STOP_REASON_ROUND_2)], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('JumpRound2', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_JUMP_COUNT, [parser.getStatsResultsIndex(stats.JUMP_COUNT)], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('JumpCount', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_POINTS_ROUND_1, [parser.getStatsResultsIndex(stats.POINTS_ROUND_1)], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('PointsRound1', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_POINTS_ROUND_2, [parser.getStatsResultsIndex(stats.POINTS_ROUND_2)], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('PointsRound2', fsDataIndex)
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_POINTS_TOTAL, ['AC', parser.getStatsResultsIndex(stats.POINTS), parser.getStatsResultsIndex(stats.STOP_REASON)], (function(_this) {
                return function(fsDataIndex) {
                    return _this._getCellContentAndClassForType('Points', fsDataIndex)
                }
            })(this));
            return true
        };
        return TemplateGameDataProxy
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.TemplateGameDataProxy = TemplateGameDataProxy
}).call(this);
(function() {
    var TemplateHeaderDataProxy;
    TemplateHeaderDataProxy = (function() {
        function TemplateHeaderDataProxy(inject, jQuery, _dic) {
            this.jQuery = jQuery != null ? jQuery : $;
            this._dic = _dic != null ? _dic : cjs.dic;
            this.mygamesIconGetter = inject.mygamesIconGetter, this.headingGetter = inject.headingGetter, this.oddsTextGetter = inject.oddsTextGetter, this.isLeagueCollapsedGetter = inject.isLeagueCollapsedGetter, this.isLeagueTopGetter = inject.isLeagueTopGetter, this.headingStageGetter = inject.headingStageGetter, this.headingTeamGetter = inject.headingTeamGetter, this.mygamesTeamIconGetter = inject.mygamesTeamIconGetter, this.tournamentInfoTextGetter = inject.tournamentInfoTextGetter, this.headerOutcomeEachWayHandicapGetter = inject.headerOutcomeEachWayHandicapGetter;
            this.cellDefinition = {};
            this._headerClasses = {};
            this._eachWayHeaderTitles = {};
            this._defineHeaderCells()
        }
        TemplateHeaderDataProxy.prototype.getFilledHeader = function(sportId, fsLablIndex) {
            var _, leagueId, ref, sportDefinition;
            ref = fsLablIndex.split('_'), _ = ref[0], leagueId = ref[1];
            sportDefinition = cjs.template.getTemplateDefinitionForLabel(sportId, leagueId);
            return this.getFilledHeaderFromTemplate(sportDefinition, fsLablIndex)
        };
        TemplateHeaderDataProxy.prototype.getFilledTeamHeader = function(sportId, teamIndex, labelId) {
            var _, ref, sportDefinition, teamId;
            ref = teamIndex.split('_'), _ = ref[0], teamId = ref[1];
            if (labelId != null) {
                sportDefinition = cjs.template.getTemplateDefinitionForLabel(sportId, labelId)
            } else {
                sportDefinition = cjs.template.getTemplateDefinitionForSport(sportId)
            }
            return this.getFilledTeamHeaderFromTemplate(sportDefinition, teamIndex)
        };
        TemplateHeaderDataProxy.prototype.getFilledHeaderFromTemplate = function(sportDefinition, fsLablIndex) {
            return this._getFilledHeaderFromTemplate(sportDefinition, fsLablIndex, sportDefinition.getHeaderHtmlTemplate(), sportDefinition.getHeaderCellNames(), sportDefinition.getHeaderRowCount(), this.isLeagueTopGetter(fsLablIndex), this.isLeagueCollapsedGetter(fsLablIndex))
        };
        TemplateHeaderDataProxy.prototype.getFilledTeamHeaderFromTemplate = function(sportDefinition, teamlIndex) {
            return this._getFilledHeaderFromTemplate(sportDefinition, teamlIndex, sportDefinition.getTeamHeaderHtmlTemplate(), sportDefinition.getTeamHeaderCellNames(), sportDefinition.getTeamHeaderRowCount())
        };
        TemplateHeaderDataProxy.prototype._getFilledHeaderFromTemplate = function(sportDefinition, headerIndex, htmlTemplate, headerCells, rowCount, isTop, isCollapsed) {
            var cellClass, cellContent, cellName, cellsData, headerClass, i, j, len, ref, ref1, rowClass, rowIndex, sportId;
            if (isTop == null) {
                isTop = false
            }
            if (isCollapsed == null) {
                isCollapsed = false
            }
            sportId = sportDefinition.getSportId();
            cellsData = {};
            for (i = 0, len = headerCells.length; i < len; i++) {
                cellName = headerCells[i];
                ref = this.getCellContentAndClass(sportDefinition, cellName, headerIndex), cellContent = ref[0], cellClass = ref[1];
                cellsData[cellName.replace('head_', 'H_')] = cellContent;
                cellsData[cellName.replace('head_', 'C_')] = this._getCellClass(sportDefinition, cellName, cellClass)
            }
            headerClass = this._getHeaderClass(headerIndex);
            for (rowIndex = j = 1, ref1 = rowCount; 1 <= ref1 ? j <= ref1 : j >= ref1; rowIndex = 1 <= ref1 ? ++j : --j) {
                rowClass = [];
                if (headerClass[rowIndex] != null) {
                    rowClass.push(headerClass[rowIndex])
                }
                if (rowIndex === 1 && isTop) {
                    rowClass.push('primary-top')
                }
                if (isCollapsed) {
                    if (rowIndex === 1) {
                        rowClass.push('bottom-no-border')
                    }
                    if (rowIndex !== 1) {
                        rowClass.push('hidden')
                    }
                }
                cellsData['R_C' + rowIndex] = rowClass.join(' ')
            }
            htmlTemplate = htmlTemplate.replace(/%%((C|H|R)_([a-zA-Z0-9]{2}))%%/g, function(match, p1, p2, p3, offset, string) {
                if (cellsData[p1] != null) {
                    return cellsData[p1]
                } else {
                    return ''
                }
            });
            htmlTemplate = this._prepareHtmlTemplate(headerIndex, htmlTemplate);
            htmlTemplate = htmlTemplate.replace(/%%SPORT_ID%%/g, sportId);
            htmlTemplate = htmlTemplate.replace(/%%LABEL_ID%%/g, headerIndex.split('_')[1]);
            htmlTemplate = htmlTemplate.replace(/%%TEAM_ID%%/g, headerIndex.split('_')[1]);
            return htmlTemplate
        };
        TemplateHeaderDataProxy.prototype.getCellContentAndClass = function(sportDefinition, cellName, headerIndex) {
            if (!this.cellDefinition[cellName]) {
                return [null, null]
            }
            return this.cellDefinition[cellName].getContentCallback(sportDefinition, headerIndex)
        };
        TemplateHeaderDataProxy.prototype._getCellClass = function(sportDefinition, cellName, appendClass) {
            var cellClass, className, i, len, ref;
            cellClass = sportDefinition.getHeaderCellDefaultClass(cellName).split(' ');
            if (appendClass) {
                ref = appendClass.split(' ');
                for (i = 0, len = ref.length; i < len; i++) {
                    className = ref[i];
                    if (this.jQuery(className, cellClass)) {
                        cellClass.push(className)
                    }
                }
            }
            return cellClass.join(' ')
        };
        TemplateHeaderDataProxy.prototype._addCellDefinition = function(cellName, dataKeys, cellContentCallback, afterCellUpdateCallback) {
            if (afterCellUpdateCallback == null) {
                afterCellUpdateCallback = null
            }
            if (this.cellDefinition[cellName] != null) {
                return false
            }
            this.cellDefinition[cellName] = {
                dataKeys: dataKeys,
                getContentCallback: cellContentCallback,
                afterCellUpdateCallback: afterCellUpdateCallback
            };
            return true
        };
        TemplateHeaderDataProxy.prototype._defineHeaderCells = function() {
            var CELLS, that;
            CELLS = cjs.TemplateCell.prototype;
            that = this;
            this._addCellDefinition(CELLS.CELL_HEADER_ICON_ADD_MATCH, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.mygamesIconGetter(fsLablIndex);
                    cellClass = '';
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_HEADER_HEADING, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.headingGetter(fsLablIndex);
                    cellClass = '';
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_TEAM_HEADER_HEADING, [], (function(_this) {
                return function(sportDefinition, teamIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.headingTeamGetter(teamIndex);
                    cellClass = '';
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_TEAM_HEADER_ICON_ADD_MATCH, [], (function(_this) {
                return function(sportDefinition, teamIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.mygamesTeamIconGetter(teamIndex);
                    cellClass = '';
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_HEADER_START_TIME, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellClass, cellContent;
                    cellContent = _this.headingStageGetter(fsLablIndex);
                    cellClass = '';
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_HEADER_ODDS, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellClass, cellContent, ref;
                    ref = _this.oddsTextGetter(CELLS.CELL_HEADER_ODDS, sportDefinition.getOddsLayout()), cellContent = ref[0], cellClass = ref[1];
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_HEADER_OUTCOME_1, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellClass, cellContent, ref;
                    ref = _this.oddsTextGetter(CELLS.CELL_HEADER_OUTCOME_1, sportDefinition.getOddsLayout()), cellContent = ref[0], cellClass = ref[1];
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_HEADER_OUTCOME_X, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellClass, cellContent, ref;
                    ref = _this.oddsTextGetter(CELLS.CELL_HEADER_OUTCOME_X, sportDefinition.getOddsLayout()), cellContent = ref[0], cellClass = ref[1];
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_HEADER_OUTCOME_2, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellClass, cellContent, ref;
                    ref = _this.oddsTextGetter(CELLS.CELL_HEADER_OUTCOME_2, sportDefinition.getOddsLayout()), cellContent = ref[0], cellClass = ref[1];
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_HEADER_OUTCOME_AH_VALUE, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellClass, cellContent, ref;
                    ref = _this.oddsTextGetter(CELLS.CELL_HEADER_OUTCOME_AH_VALUE, sportDefinition.getOddsLayout()), cellContent = ref[0], cellClass = ref[1];
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_HEADER_OUTCOME_AH_1, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellClass, cellContent, ref;
                    ref = _this.oddsTextGetter(CELLS.CELL_HEADER_OUTCOME_AH_1, sportDefinition.getOddsLayout()), cellContent = ref[0], cellClass = ref[1];
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_HEADER_OUTCOME_AH_2, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellClass, cellContent, ref;
                    ref = _this.oddsTextGetter(CELLS.CELL_HEADER_OUTCOME_AH_2, sportDefinition.getOddsLayout()), cellContent = ref[0], cellClass = ref[1];
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_HEADER_OUTCOME_SPREAD, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellClass, cellContent, ref;
                    ref = _this.oddsTextGetter(CELLS.CELL_HEADER_OUTCOME_SPREAD, sportDefinition.getOddsLayout()), cellContent = ref[0], cellClass = ref[1];
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_HEADER_OUTCOME_MONEY_LINE, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellClass, cellContent, ref;
                    ref = _this.oddsTextGetter(CELLS.CELL_HEADER_OUTCOME_MONEY_LINE, sportDefinition.getOddsLayout()), cellContent = ref[0], cellClass = ref[1];
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_HEADER_OUTCOME_OVER_UNDER, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellClass, cellContent, ref;
                    ref = _this.oddsTextGetter(CELLS.CELL_HEADER_OUTCOME_OVER_UNDER, sportDefinition.getOddsLayout()), cellContent = ref[0], cellClass = ref[1];
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_HEADER_TOURNAMENT_INFO_TEXT, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellClass, cellContent, headerClass, headerRowIndex, ref;
                    ref = _this.tournamentInfoTextGetter(fsLablIndex), cellContent = ref[0], cellClass = ref[1], headerClass = ref[2];
                    headerRowIndex = 2;
                    if (headerClass) {
                        that._addHeaderClass(fsLablIndex, headerRowIndex, headerClass)
                    }
                    return [cellContent, cellClass]
                }
            })(this));
            this._addCellDefinition(CELLS.CELL_HEADER_OUTCOME_EACH_WAY, [], (function(_this) {
                return function(sportDefinition, fsLablIndex) {
                    var cellContent, eachWayTitle, handicap, handicapType, handicapValue, ref;
                    handicap = _this.headerOutcomeEachWayHandicapGetter(fsLablIndex);
                    cellContent = _this._dic.get('util_trans')('TRANS_ODDS_COMPARISON_EACH_WAY_SHORT');
                    if (handicap) {
                        ref = handicap.split('|'), handicapValue = ref[0], handicapType = ref[1];
                        eachWayTitle = _this._dic.get('util_trans')('TRANS_ODDS_COMPARISON_EACH_WAY');
                        if (parseInt(handicapValue)) {
                            eachWayTitle += " (" + handicapValue + ")"
                        }
                        _this._addEachWayHeaderTitle(fsLablIndex, eachWayTitle)
                    }
                    return [cellContent, '']
                }
            })(this));
            return true
        };
        TemplateHeaderDataProxy.prototype._addHeaderClass = function(headerIndex, headerRowIndex, headerClass) {
            if (this._headerClasses[headerIndex] == null) {
                this._headerClasses[headerIndex] = {}
            }
            return this._headerClasses[headerIndex][headerRowIndex] = headerClass
        };
        TemplateHeaderDataProxy.prototype._getHeaderClass = function(headerIndex) {
            if (this._headerClasses[headerIndex] != null) {
                return this._headerClasses[headerIndex]
            }
            return {}
        };
        TemplateHeaderDataProxy.prototype._addEachWayHeaderTitle = function(headerIndex, title) {
            return this._eachWayHeaderTitles[headerIndex] = title
        };
        TemplateHeaderDataProxy.prototype._getEachWayHeaderTitle = function(headerIndex) {
            if (this._eachWayHeaderTitles[headerIndex] != null) {
                return this._eachWayHeaderTitles[headerIndex]
            }
            return ''
        };
        TemplateHeaderDataProxy.prototype._prepareHtmlTemplate = function(headerIndex, htmlTemplate) {
            var $cell, $htmlTemplate, eachWayHeaderTitle;
            eachWayHeaderTitle = this._getEachWayHeaderTitle(headerIndex);
            if (eachWayHeaderTitle) {
                $htmlTemplate = this.jQuery('<thead>');
                $htmlTemplate.html(htmlTemplate);
                $cell = $htmlTemplate.find("tr.score-label td." + cjs.TemplateCell.prototype.CELL_HEADER_OUTCOME_EACH_WAY);
                $cell.attr('title', eachWayHeaderTitle);
                htmlTemplate = $htmlTemplate.html()
            }
            return htmlTemplate
        };
        return TemplateHeaderDataProxy
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.TemplateHeaderDataProxy = TemplateHeaderDataProxy
}).call(this);
(function() {
    var Template_SportDefinition, indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i
            }
            return -1
        };
    Template_SportDefinition = (function() {
        Template_SportDefinition.prototype.ROW_FORMAT_ID_1 = 'g_%%SPORT_ID%%_%%EVENT_ID%%';
        Template_SportDefinition.prototype.ROW_FORMAT_ID_2 = 'x_%%SPORT_ID%%_%%EVENT_ID%%';
        Template_SportDefinition.prototype.ROW_FORMAT_ID_3 = 'y_%%SPORT_ID%%_%%EVENT_ID%%';
        Template_SportDefinition.prototype.HEADER_FORMAT_ID_1 = 'l_%%SPORT_ID%%_%%LABEL_ID%%';
        Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 = 'i_%%SPORT_ID%%_%%LABEL_ID%%';
        Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 = 'j_%%SPORT_ID%%_%%LABEL_ID%%';
        Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 = 'k_%%SPORT_ID%%_%%LABEL_ID%%';
        Template_SportDefinition.prototype.TEAM_HEADER_FORMAT_ID = 'p_%%SPORT_ID%%_%%TEAM_ID%%';

        function Template_SportDefinition(config, sportId, jQuery) {
            if (config == null) {
                config = {}
            }
            this.sportId = sportId;
            this.jQuery = jQuery != null ? jQuery : $;
            this.sportId = parseInt(this.sportId);
            this.config = {};
            this.jQuery.extend(this.config, config);
            this._prepareGameTemplate()
        }
        Template_SportDefinition.prototype.createHeader = function(labelId) {
            var element;
            element = this.headerTemplate.clone();
            this.jQuery('tr', element).each((function(_this) {
                return function(i, e) {
                    var className, el;
                    el = _this.jQuery(e);
                    className = el.attr('class');
                    className = className.replace('%%SPORT_ID%%', _this.sportId);
                    className = className.replace('%%LABEL_ID%%', labelId);
                    return el.attr('class', className)
                }
            })(this));
            return element.find('tr')
        };
        Template_SportDefinition.prototype.createGameRow = function(eventId) {
            var element;
            element = this.gameRowTemplate.clone();
            this.jQuery('tr', element).each((function(_this) {
                return function(i, e) {
                    var id;
                    id = e.id;
                    id = id.replace('%%SPORT_ID%%', _this.sportId);
                    id = id.replace('%%EVENT_ID%%', eventId);
                    return e.id = id
                }
            })(this));
            return element.find('tr')
        };
        Template_SportDefinition.prototype.getHeaderSelector = function(labelId) {
            var id, j, ref, rowFormatConstant, rowIndex, rows;
            rows = [];
            for (rowIndex = j = 1, ref = this.getHeaderRowCount(); 1 <= ref ? j <= ref : j >= ref; rowIndex = 1 <= ref ? ++j : --j) {
                rowFormatConstant = 'HEADER_FORMAT_ID_' + rowIndex;
                id = Template_SportDefinition.prototype[rowFormatConstant];
                id = id.replace('%%SPORT_ID%%', this.sportId);
                id = id.replace('%%LABEL_ID%%', labelId);
                rows.push('tr.' + id)
            }
            return rows.join(',')
        };
        Template_SportDefinition.prototype.getHeaderColumnsHtmlTemplate = function() {
            return this.headerColumnsHtmlTemplate
        };
        Template_SportDefinition.prototype.getHeaderHtmlTemplate = function() {
            return this.headerHtmlTemplate
        };
        Template_SportDefinition.prototype.getTeamHeaderHtmlTemplate = function() {
            return this.teamHeaderHtmlTemplate
        };
        Template_SportDefinition.prototype.getHeaderRowCount = function() {
            return this.headerRowCount
        };
        Template_SportDefinition.prototype.getTeamHeaderRowCount = function() {
            return this.teamHeaderRowCount
        };
        Template_SportDefinition.prototype.getHeaderCellNames = function() {
            return this.headerCellNames
        };
        Template_SportDefinition.prototype.getTeamHeaderCellNames = function() {
            return this.teamHeaderCellNames
        };
        Template_SportDefinition.prototype.getHeaderCellDefaultClass = function(cellName) {
            if (this.defaultHeaderCellClasses[cellName] != null) {
                return this.defaultHeaderCellClasses[cellName]
            } else {
                return ''
            }
        };
        Template_SportDefinition.prototype.getTeamHeaderCellDefaultClass = function(cellName) {
            if (this.defaultTeamHeaderCellClasses[cellName] != null) {
                return this.defaultTeamHeaderCellClasses[cellName]
            } else {
                return ''
            }
        };
        Template_SportDefinition.prototype.getGameRowCount = function() {
            return this.gameRowCount
        };
        Template_SportDefinition.prototype.getGameColumnCount = function() {
            return this.gameColumnCount
        };
        Template_SportDefinition.prototype.getGameCellNames = function() {
            return this.gameCellNames
        };
        Template_SportDefinition.prototype.getGameRowSelector = function(eventId, returnClassSelector) {
            var id, j, ref, rowFormatConstant, rowIndex, rows, sign;
            if (returnClassSelector == null) {
                returnClassSelector = false
            }
            rows = [];
            sign = returnClassSelector ? "." : "#";
            for (rowIndex = j = 1, ref = this.getGameRowCount(); 1 <= ref ? j <= ref : j >= ref; rowIndex = 1 <= ref ? ++j : --j) {
                rowFormatConstant = 'ROW_FORMAT_ID_' + rowIndex;
                id = Template_SportDefinition.prototype[rowFormatConstant];
                id = id.replace('%%SPORT_ID%%', this.sportId);
                id = id.replace('%%EVENT_ID%%', eventId);
                rows.push("tr" + sign + id)
            }
            return rows.join(',')
        };
        Template_SportDefinition.prototype.getGameRowHtmlTemplate = function() {
            return this.gameRowHtmlTemplate
        };
        Template_SportDefinition.prototype.getGameCellDefaultClass = function(cellName) {
            if (this.defaultCellClasses[cellName] != null) {
                return this.defaultCellClasses[cellName]
            } else {
                return ''
            }
        };
        Template_SportDefinition.prototype.hasGameCell = function(cellName) {
            return indexOf.call(this.gameCellNames, cellName) >= 0
        };
        Template_SportDefinition.prototype.getSportId = function() {
            return this.sportId
        };
        Template_SportDefinition.prototype.getOddsColumnCount = function() {
            return this.oddsColumnCount
        };
        Template_SportDefinition.prototype.hasOddsPart = function() {
            return false
        };
        Template_SportDefinition.prototype.createGroupHeader = function(groupLabelName) {
            var template;
            template = this.groupHeaderTemplate.clone();
            template.find('.group-label-name').html(groupLabelName);
            return template
        };
        Template_SportDefinition.prototype.createSportHeader = function(headerContent) {
            var element;
            if (headerContent == null) {
                headerContent = null
            }
            element = this.sportHeaderTemplate.clone();
            if (headerContent) {
                this.jQuery('>div', element).append(headerContent)
            }
            return element
        };
        Template_SportDefinition.prototype.getColumnWidth = function(columnName) {
            return this.config.templateDimension.getWidth(this, columnName)
        };
        Template_SportDefinition.prototype.getPercent = function(num) {
            return (num * 100) + "%"
        };
        Template_SportDefinition.prototype._prepareGameTemplate = function() {
            this.gameRowTemplate = this.defineGameRow();
            this.groupHeaderTemplate = this.defineGroupHeader();
            this.sportHeaderTemplate = this.defineSportHeader();
            this.prepareHeaderColumnsHtmlTemplate();
            this._determineRowCount();
            this._determineCellNamesAndDefaultClasses();
            this._determineColumnCount();
            this._determineOddsColumnCount();
            this.headerTemplate = this.defineHeader();
            this.teamHeaderTemplate = this.defineTeamHeader();
            this._determineHeaderRowCount();
            this._determineTeamHeaderRowCount();
            this._determineLeagueHeaderCellNamesAndDefaultClasses();
            this._determineTeamHeaderCellNamesAndDefaultClasses();
            this.gameRowHtmlTemplate = this._prepareGameRowHtmlTemplate();
            this.headerHtmlTemplate = this._prepareLeagueHeaderHtmlTemplate();
            return this.teamHeaderHtmlTemplate = this._prepareTeamHeaderHtmlTemplate()
        };
        Template_SportDefinition.prototype._determineRowCount = function() {
            return this.gameRowCount = this.gameRowTemplate.find('tr').length
        };
        Template_SportDefinition.prototype._determineHeaderRowCount = function() {
            return this.headerRowCount = this.headerTemplate.find('tr').length
        };
        Template_SportDefinition.prototype._determineTeamHeaderRowCount = function() {
            return this.teamHeaderRowCount = this.teamHeaderTemplate.find('tr').length
        };
        Template_SportDefinition.prototype._determineCellNamesAndDefaultClasses = function() {
            this.gameCellNames = [];
            this.defaultCellClasses = {};
            this.gameRowTemplate.find('*[class^="cell_"]').each((function(_this) {
                return function(i, e) {
                    var cellName, element, elementClass, regex, ret;
                    element = _this.jQuery(e);
                    elementClass = element.attr('class');
                    regex = /.*(cell_[a-z0-9]{2}).*/;
                    ret = regex.exec(elementClass);
                    if (ret) {
                        cellName = ret[1];
                        _this.defaultCellClasses[cellName] = elementClass;
                        return _this.gameCellNames.push(cellName)
                    }
                }
            })(this));
            return true
        };
        Template_SportDefinition.prototype._determineLeagueHeaderCellNamesAndDefaultClasses = function() {
            var ref;
            return ref = this._determineHeaderCellNamesAndDefaultClasses(this.headerTemplate), this.headerCellNames = ref[0], this.defaultHeaderCellClasses = ref[1], ref
        };
        Template_SportDefinition.prototype._determineTeamHeaderCellNamesAndDefaultClasses = function() {
            var ref;
            return ref = this._determineHeaderCellNamesAndDefaultClasses(this.teamHeaderTemplate), this.teamHeaderCellNames = ref[0], this.defaultTeamHeaderCellClasses = ref[1], ref
        };
        Template_SportDefinition.prototype._determineHeaderCellNamesAndDefaultClasses = function(template) {
            var defaultHeaderCellClasses, headerCellNames;
            headerCellNames = [];
            defaultHeaderCellClasses = {};
            template.find('*[class^="head_"]').each((function(_this) {
                return function(i, e) {
                    var cellName, elementClass, regex, ret;
                    elementClass = _this.jQuery(e).attr('class');
                    regex = /.*(head_[a-z0-9]{2}).*/;
                    ret = regex.exec(elementClass);
                    if (ret) {
                        cellName = ret[1];
                        defaultHeaderCellClasses[cellName] = elementClass;
                        return headerCellNames.push(cellName)
                    }
                }
            })(this));
            return [headerCellNames, defaultHeaderCellClasses]
        };
        Template_SportDefinition.prototype._determineColumnCount = function() {
            this.gameColumnCount = 0;
            return this.gameRowTemplate.find('tr:eq(0) td').each((function(_this) {
                return function(i, e) {
                    var el;
                    el = _this.jQuery(e);
                    if (el.attr('colspan')) {
                        return _this.gameColumnCount += parseInt(el.attr('colspan'))
                    } else {
                        return _this.gameColumnCount += 1
                    }
                }
            })(this))
        };
        Template_SportDefinition.prototype._determineOddsColumnCount = function() {
            var oddsCells;
            this.oddsColumnCount = 0;
            if (!this.hasOddsPart()) {
                return
            }
            oddsCells = cjs.TemplateCell.prototype.GET_ODDS_CELLS();
            return this.oddsColumnCount = this.gameRowTemplate.find('tr:eq(0) td').filter((function(_this) {
                return function(i, e) {
                    var cellName, regex, ret;
                    regex = /.*(cell_[a-z0-9]{2}).*/;
                    ret = regex.exec(_this.jQuery(e).attr('class'));
                    if (!ret) {
                        return false
                    }
                    cellName = ret[1];
                    if (_this.jQuery.inArray(cellName, oddsCells) !== -1) {
                        return true
                    }
                    return false
                }
            })(this)).length
        };
        Template_SportDefinition.prototype.prepareHeaderColumnsHtmlTemplate = function() {
            var buf, columnWidth, columnsWidth, j, len;
            buf = '<colgroup>';
            columnsWidth = this.config.templateDimension.calculateAbsoluteColumnsWidth(this.defineHeaderColumnsWidth(), this.config.bodyWidthGetter());
            for (j = 0, len = columnsWidth.length; j < len; j++) {
                columnWidth = columnsWidth[j];
                buf += "<col width=\"" + columnWidth + "\"/>"
            }
            buf += '</colgroup>';
            this.headerColumnsHtmlTemplate = buf
        };
        Template_SportDefinition.prototype._prepareGameRowHtmlTemplate = function() {
            var gameRowTemplate;
            gameRowTemplate = this.gameRowTemplate.clone();
            gameRowTemplate.find('*[class^="cell_"]').each((function(_this) {
                return function(i, e) {
                    var cellIndex, element, elementClass, regex, ret;
                    element = _this.jQuery(e);
                    elementClass = element.attr('class');
                    regex = /.*(cell_([a-z0-9]{2})).*/;
                    ret = regex.exec(elementClass);
                    if (ret) {
                        cellIndex = ret[2];
                        element.attr('class', '%%C_' + cellIndex + '%%' + ' ');
                        return element.html('%%H_' + cellIndex + '%%')
                    }
                }
            })(this));
            gameRowTemplate.find('tr').each((function(_this) {
                return function(i, e) {
                    var element;
                    element = _this.jQuery(e);
                    return element.addClass('%%R_C' + (i + 1) + '%%')
                }
            })(this));
            return gameRowTemplate.html()
        };
        Template_SportDefinition.prototype._prepareLeagueHeaderHtmlTemplate = function() {
            var htmlTemplate;
            htmlTemplate = this.headerTemplate.clone();
            return this._prepareHeaderHtmlTemplate(htmlTemplate)
        };
        Template_SportDefinition.prototype._prepareTeamHeaderHtmlTemplate = function() {
            var htmlTemplate;
            htmlTemplate = this.teamHeaderTemplate.clone();
            return this._prepareHeaderHtmlTemplate(htmlTemplate)
        };
        Template_SportDefinition.prototype._prepareHeaderHtmlTemplate = function(htmlTemplate) {
            htmlTemplate.find('*[class^="head_"]').each((function(_this) {
                return function(i, e) {
                    var cellIndex, element, elementClass, regex, ret;
                    element = _this.jQuery(e);
                    elementClass = element.attr('class');
                    regex = /.*(head_([a-z0-9]{2})).*/;
                    ret = regex.exec(elementClass);
                    if (ret) {
                        cellIndex = ret[2];
                        element.attr('class', '%%C_' + cellIndex + '%%' + ' ');
                        return element.html('%%H_' + cellIndex + '%%')
                    }
                }
            })(this));
            htmlTemplate.find('tr').each((function(_this) {
                return function(i, e) {
                    var element;
                    element = _this.jQuery(e);
                    return element.addClass('%%R_C' + (i + 1) + '%%')
                }
            })(this));
            return htmlTemplate.html()
        };
        Template_SportDefinition.prototype.defineGameRow = function() {
            return this.jQuery('<tbody><tr></tr></tbody>')
        };
        Template_SportDefinition.prototype.defineGroupHeader = function() {
            var elementHtml;
            elementHtml = '<div class="group-label"><span class="group-label-wrapper"><span class="group-label-name"></span></span></div>';
            return this.jQuery('<div>', {
                html: elementHtml
            })
        };
        Template_SportDefinition.prototype.defineSportHeader = function() {
            var className, element;
            element = this.jQuery('<div>');
            className = this.config.sport_list[this.sportId];
            if (cjs.dic.get('util_sport').inGroup(this.sportId, 31)) {
                className = this.config.sport_list[this.config.parent_sports[this.sportId]] + ' ' + className
            }
            return element.append(this.jQuery('<div>', {
                "class": 'sport-label ' + className
            }).append(this.jQuery('<span>', {
                "class": 'sport-icon ' + this.config.sport_list[this.sportId]
            })))
        };
        Template_SportDefinition.prototype.defineHeader = function() {
            return this.jQuery('<tbody><tr></tr></tbody>')
        };
        Template_SportDefinition.prototype.defineTeamHeader = function() {
            return this.jQuery('<tbody><tr></tr></tbody>')
        };
        Template_SportDefinition.prototype.defineHeaderColumnsWidth = function() {
            return [0]
        };
        Template_SportDefinition.prototype.__workaroundAddFakeRow = function(element) {
            var fakeRow, i, j, ref;
            if (this.jQuery.browser.opera || (this.jQuery.browser.msie && parseInt(this.jQuery.browser.version) > 8)) {
                fakeRow = this.jQuery('<tr style="height: 0; display: table-row;"></tr>');
                for (i = j = 1, ref = this.getGameColumnCount(); 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
                    fakeRow.append(this.jQuery('<td>'))
                }
                return element.append(fakeRow)
            }
        };
        Template_SportDefinition.prototype.hasUsTimeFormat = function() {
            return cjs.dic.get('util_config').get('app', 'US_time_format')
        };
        Template_SportDefinition.prototype.getDeltaTime = function() {
            if (this.hasUsTimeFormat()) {
                return 15
            } else {
                return 0
            }
        };
        Template_SportDefinition.prototype.getDeltaStatus = function() {
            if (this.hasUsTimeFormat()) {
                return -5
            } else {
                return 0
            }
        };
        Template_SportDefinition.prototype.getDeltaName = function() {
            if (this.hasUsTimeFormat()) {
                return -10
            } else {
                return 0
            }
        };
        Template_SportDefinition.prototype.getDeltaHomeName = function() {
            if (this.hasUsTimeFormat()) {
                return -8
            } else {
                return 0
            }
        };
        Template_SportDefinition.prototype.getDeltaAwayName = function() {
            if (this.hasUsTimeFormat()) {
                return -7
            } else {
                return 0
            }
        };
        return Template_SportDefinition
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition = Template_SportDefinition
}).call(this);
(function() {
    var Template_SportDefinitionOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinitionOdds = (function(superClass) {
        extend(Template_SportDefinitionOdds, superClass);

        function Template_SportDefinitionOdds(config, sportId, jQuery) {
            if (config == null) {
                config = {}
            }
            this.sportId = sportId;
            this.jQuery = jQuery != null ? jQuery : $;
            Template_SportDefinitionOdds.__super__.constructor.call(this, config, this.sportId, this.jQuery)
        }
        Template_SportDefinitionOdds.prototype.hasOddsPart = function() {
            return true
        };
        Template_SportDefinitionOdds.prototype.getOddsLayout = function() {
            var oddsLayout, ref;
            oddsLayout = cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_12;
            if ((((ref = this.config) != null ? ref.oddsLayoutForSportGetter : void 0) != null)) {
                oddsLayout = this.config.oddsLayoutForSportGetter(this.sportId)
            }
            return oddsLayout
        };
        Template_SportDefinitionOdds.prototype.getOddsPartDefinition = function(jQelement) {
            var oddsLayout;
            oddsLayout = this.getOddsLayout();
            return cjs.Template_OddsPartDefinition.prototype.OddsPartDefinitionFactory(oddsLayout, this.jQuery)
        };
        Template_SportDefinitionOdds.prototype.appendProjectBonus = function(row, appendTd, forceAppendTd) {
            var oddsPart;
            if (appendTd == null) {
                appendTd = false
            }
            if (forceAppendTd == null) {
                forceAppendTd = false
            }
            if (this.config.hasOddsBonusTextGetter()) {
                return row.append(this.jQuery('<td>', {
                    colspan: this.getOddsColumnCount(),
                    "class": cjs.TemplateCell.prototype.CELL_HEADER_ODDS + ' project-bonus'
                }))
            } else {
                oddsPart = this.getOddsPartDefinition();
                row.append(oddsPart.getHeader());
                if (forceAppendTd || (appendTd && this.getOddsLayout() !== cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_US_LAYOUT)) {
                    return row.append(this.jQuery('<td>'))
                }
            }
        };
        return Template_SportDefinitionOdds
    })(cjs.Template_SportDefinition);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinitionOdds = Template_SportDefinitionOdds
}).call(this);
(function() {
    var Template_SportDefinitionResolver;
    Template_SportDefinitionResolver = (function() {
        function Template_SportDefinitionResolver(inject, _dic) {
            this._dic = _dic != null ? _dic : cjs.dic;
            this.categoryGetter = inject.categoryGetter, this.sportList = inject.sportList, this.isDetailGetter = inject.isDetailGetter, this.isTournamentPageGetter = inject.isTournamentPageGetter, this.isCountryPageGetter = inject.isCountryPageGetter
        }
        Template_SportDefinitionResolver.prototype.canBeGameResolved = function(sportId, gameId) {
            var fsDataIndex;
            fsDataIndex = "g_" + sportId + "_" + gameId;
            return this._dic.get('dataEventHolderProxy').getHolder().hasItem(fsDataIndex)
        };
        Template_SportDefinitionResolver.prototype.resolveFromGame = function(sportId, gameId) {
            var eventItem, fsDataIndex, leagueItem;
            fsDataIndex = "g_" + sportId + "_" + gameId;
            eventItem = this._dic.get('dataEventHolderProxy').getHolder().getEvent(fsDataIndex);
            leagueItem = eventItem.getLeague();
            return this.resolveFromLabel(sportId, leagueItem.getValue('ZC'))
        };
        Template_SportDefinitionResolver.prototype.resolveFromLabel = function(sportId, labelId) {
            var categoryId, fsLabelIndex, leagueItem, sportCategory, sportList, tournamentTemplateCategories;
            fsLabelIndex = sportId + "_" + labelId;
            sportCategory = '';
            leagueItem = this._dic.get('dataLeagueHolderProxy').getHolder().getLeague(fsLabelIndex);
            tournamentTemplateCategories = this._dic.get('util_list').getTournamentTemplateCategories();
            sportList = this._dic.get('util_list').getSports();
            categoryId = leagueItem.getSuperTemplateId();
            if ((categoryId != null) && (tournamentTemplateCategories[categoryId] != null) && this._hasSportCategoryTemplate(sportId, tournamentTemplateCategories[categoryId])) {
                sportCategory = tournamentTemplateCategories[categoryId]
            } else if (parseInt(sportId) === sportList.GOLF) {
                if (parseInt(leagueItem.getValue('ZW')) === 0) {
                    if (parseInt(leagueItem.getValue('ZT')) === 1) {
                        sportCategory = 'NoDuelStableford'
                    } else {
                        sportCategory = 'NoDuel'
                    }
                } else if (this.isTournamentPageGetter() || this.isCountryPageGetter()) {
                    return ['TournamentResults', this.getTemplateDefinitionClass('TournamentResults')]
                }
            } else if (this._dic.get('util_sport').inGroup(parseInt(sportId), sportList.MOTORSPORT)) {
                if (parseInt(leagueItem.getValue('ZW')) === 1) {
                    sportCategory = 'Duel'
                }
            } else if (parseInt(sportId) === sportList.WINTER_SPORTS_ALPINE_SKIING) {
                if (parseInt(leagueItem.getStagesCount()) > 1) {
                    sportCategory = 'Rounds'
                }
            } else if (parseInt(sportId) === sportList.WINTER_SPORTS_SKI_JUMPING && this._isNationalTeam(fsLabelIndex)) {
                sportCategory = 'Teams'
            }
            return this._getIdentAndClass(sportId, sportCategory)
        };
        Template_SportDefinitionResolver.prototype._isNationalTeam = function(fsLabelIndex) {
            var eventDataHolder, eventItem, i, id, ids, len;
            eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
            ids = eventDataHolder.getAllContainerIds();
            for (i = 0, len = ids.length; i < len; i++) {
                id = ids[i];
                eventItem = eventDataHolder.getItem(id);
                if (eventItem.getLeagueId() === fsLabelIndex) {
                    return eventItem.isNationalTeam()
                }
            }
            return false
        };
        Template_SportDefinitionResolver.prototype.resolveFromSport = function(sportId) {
            return this._getIdentAndClass(sportId)
        };
        Template_SportDefinitionResolver.prototype._getIdentAndClass = function(sportId, sportCategory) {
            var sportDefinitionClass, templateName;
            if (sportCategory == null) {
                sportCategory = ''
            }
            templateName = this._createTemplateName(sportId, sportCategory);
            sportDefinitionClass = this.getTemplateDefinitionClass(templateName);
            if (!this._checkClassExists(sportDefinitionClass)) {
                sportDefinitionClass = this._isOddsCategory() ? 'Template_SportDefinition_DefaultOdds' : 'Template_SportDefinition_Default'
            }
            return [templateName, sportDefinitionClass]
        };
        Template_SportDefinitionResolver.prototype._checkClassExists = function(sportDefinitionClass) {
            return cjs[sportDefinitionClass] != null
        };
        Template_SportDefinitionResolver.prototype._isOddsCategory = function() {
            var ref, ref1;
            if ((ref = (ref1 = this.categoryGetter()) != null ? ref1.subCategory : void 0) === 2 || ref === 3) {
                return true
            } else {
                return false
            }
        };
        Template_SportDefinitionResolver.prototype._createTemplateName = function(sportId, sportCategory) {
            var templateIdent, templateName;
            templateIdent = this.sportList[sportId];
            templateName = templateIdent.replace(/-/g, '_');
            while (templateIdent && typeof templateName === 'undefined') {
                templateName = templateIdent.replace(/-/g, '_')
            }
            if (this.isDetailGetter()) {
                templateName = 'Detail_' + templateName
            }
            if (sportCategory) {
                templateName += '_' + sportCategory
            }
            if (this._isOddsCategory()) {
                templateName += 'Odds'
            }
            return templateName
        };
        Template_SportDefinitionResolver.prototype._hasSportCategoryTemplate = function(sportId, sportCategory) {
            var sportDefinitionClass, templateName;
            templateName = this._createTemplateName(sportId, sportCategory);
            sportDefinitionClass = this.getTemplateDefinitionClass(templateName);
            return this._checkClassExists(sportDefinitionClass)
        };
        Template_SportDefinitionResolver.prototype.getTemplateDefinitionClass = function(templateName) {
            return 'Template_SportDefinition_' + templateName.slice(0, 1).toUpperCase() + templateName.slice(1)
        };
        return Template_SportDefinitionResolver
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinitionResolver = Template_SportDefinitionResolver
}).call(this);
(function() {
    var Template_DimensionAbstract;
    Template_DimensionAbstract = (function() {
        Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH = 'col_ib';
        Template_DimensionAbstract.prototype.COLUMN_ICONS = 'col_ia';
        Template_DimensionAbstract.prototype.COLUMN_MATCH_START_TIME = 'col_ic';
        Template_DimensionAbstract.prototype.COLUMN_MATCH_STATUS = 'col_id';
        Template_DimensionAbstract.prototype.COLUMN_SERVE = 'col_ie';
        Template_DimensionAbstract.prototype.COLUMN_MATCH_WIN_LOSE = 'col_if';
        Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER = 'col_oq';

        function Template_DimensionAbstract(inject, jQuery) {
            this.jQuery = jQuery != null ? jQuery : $;
            this.iconListGetter = inject.iconListGetter, this.newLiveBettingIconEnableGetter = inject.newLiveBettingIconEnableGetter, this.iconCountGetter = inject.iconCountGetter, this.showMygamesGroupsGetter = inject.showMygamesGroupsGetter;
            this.widthGetters = {};
            this._registerDefaultWidthGetters();
            this._registerWidthGetters()
        }
        Template_DimensionAbstract.prototype.getWidth = function(sportDefinition, columnName) {
            if ((this.widthGetters[columnName] != null)) {
                return this.widthGetters[columnName](sportDefinition)
            }
            return 0
        };
        Template_DimensionAbstract.prototype.calculateAbsoluteColumnsWidth = function(columnsWidthArray, totalWidth) {
            var absoluteTotalWidth, absoluteWidth, absolutecolumnsWidthArray, i, j, key, len, len1, maxWidthKey, maxWidthPercent, totalWidthWithoutPercentColumns, width, widthPercent;
            absolutecolumnsWidthArray = [];
            totalWidthWithoutPercentColumns = totalWidth;
            for (i = 0, len = columnsWidthArray.length; i < len; i++) {
                width = columnsWidthArray[i];
                if (!(/%$/.test(width))) {
                    totalWidthWithoutPercentColumns -= parseFloat(width)
                }
            }
            maxWidthPercent = 0;
            maxWidthKey = -1;
            absoluteTotalWidth = 0;
            for (key = j = 0, len1 = columnsWidthArray.length; j < len1; key = ++j) {
                width = columnsWidthArray[key];
                if (/%$/.test(width)) {
                    widthPercent = parseFloat(width);
                    if (maxWidthPercent < widthPercent) {
                        maxWidthPercent = widthPercent;
                        maxWidthKey = key
                    }
                    absoluteWidth = Math.round(totalWidthWithoutPercentColumns * (widthPercent / 100))
                } else {
                    absoluteWidth = parseInt(width)
                }
                absoluteTotalWidth += absoluteWidth;
                absolutecolumnsWidthArray.push(absoluteWidth)
            }
            if (absoluteTotalWidth !== totalWidth && maxWidthKey !== -1) {
                absolutecolumnsWidthArray[maxWidthKey] -= absoluteTotalWidth - totalWidth
            }
            return absolutecolumnsWidthArray
        };
        Template_DimensionAbstract.prototype._registerWidthGetters = function() {};
        Template_DimensionAbstract.prototype._registerDefaultWidthGetters = function() {
            return this._registerWidthGetter(this.COLUMN_ICONS, (function(_this) {
                return function(sportDefinition) {
                    var iconCount, iconList, width;
                    iconList = _this.iconListGetter();
                    iconCount = _this.iconCountGetter(sportDefinition.getSportId());
                    width = iconCount * 15;
                    if (iconCount) {
                        width += 8
                    }
                    if (_this.newLiveBettingIconEnableGetter() && _this.jQuery.inArray('live', iconList)) {
                        width += 6
                    }
                    return width
                }
            })(this))
        };
        Template_DimensionAbstract.prototype._registerWidthGetter = function(getterName, callback) {
            return this.widthGetters[getterName] = callback
        };
        return Template_DimensionAbstract
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_DimensionAbstract = Template_DimensionAbstract
}).call(this);
(function() {
    var Template_Dimension, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_Dimension = (function(superClass) {
        extend(Template_Dimension, superClass);

        function Template_Dimension() {
            return Template_Dimension.__super__.constructor.apply(this, arguments)
        }
        Template_Dimension.prototype._registerWidthGetters = function() {
            this._registerWidthGetter(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH, (function(_this) {
                return function() {
                    if (_this.showMygamesGroupsGetter()) {
                        return 57
                    } else {
                        return 24
                    }
                }
            })(this));
            this._registerWidthGetter(cjs.Template_DimensionAbstract.prototype.COLUMN_SERVE, function() {
                return 19
            });
            this._registerWidthGetter(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER, (function(_this) {
                return function() {
                    var width;
                    width = 22;
                    if (_this.newLiveBettingIconEnableGetter()) {
                        width += 6
                    }
                    return width
                }
            })(this));
            this._registerWidthGetter(this.COLUMN_ICONS, (function(_this) {
                return function(sportDefinition) {
                    var iconCount, iconList, width;
                    iconList = _this.iconListGetter();
                    iconCount = _this.iconCountGetter(sportDefinition.getSportId());
                    width = iconCount * 15;
                    if (iconCount) {
                        width += 8
                    }
                    if (_this.newLiveBettingIconEnableGetter() && _this.jQuery.inArray('live', iconList)) {
                        width += 6
                    }
                    if (iconCount === 2) {
                        width += 1
                    }
                    return width
                }
            })(this));
            return this._registerWidthGetter(cjs.Template_DimensionAbstract.prototype.COLUMN_MATCH_WIN_LOSE, function() {
                return 25
            })
        };
        return Template_Dimension
    })(cjs.Template_DimensionAbstract);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_Dimension = Template_Dimension
}).call(this);
(function() {
    var Template_SportDefinition_Default, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Default = (function(superClass) {
        extend(Template_SportDefinition_Default, superClass);

        function Template_SportDefinition_Default() {
            return Template_SportDefinition_Default.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Default.prototype.defineHeader = function() {
            var element, row;
            element = this.jQuery('<thead>');
            row = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Default.prototype.defineTeamHeader = function() {
            var element, row;
            element = this.jQuery('<thead>');
            row = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.TEAM_HEADER_FORMAT_ID
            });
            row.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HEADER_ICON_ADD_MATCH
            }));
            row.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HEADER_HEADING
            }));
            element.append(row);
            return element
        };
        return Template_SportDefinition_Default
    })(cjs.Template_SportDefinition);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Default = Template_SportDefinition_Default
}).call(this);
(function() {
    var Template_SportDefinition_DefaultOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_DefaultOdds = (function(superClass) {
        extend(Template_SportDefinition_DefaultOdds, superClass);

        function Template_SportDefinition_DefaultOdds() {
            return Template_SportDefinition_DefaultOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_DefaultOdds.prototype.defineHeader = function() {
            var element, row;
            element = this.jQuery('<thead>');
            row = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - this.getOddsColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING + ' left project-bonus-border'
            }));
            this.appendProjectBonus(row, true, true);
            element.append(row);
            return element
        };
        Template_SportDefinition_DefaultOdds.prototype.defineGameRow = function() {
            switch (this.getOddsLayout()) {
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_US_LAYOUT:
                    return this.defineGameRowForUsLayout();
                default:
                    return this.defineGameRowForOtherLayouts()
            }
        };
        Template_SportDefinition_DefaultOdds.prototype.defineGameRowForUsLayout = function() {
            var element, oddsPart, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            oddsPart = this.getOddsPartDefinition();
            row1.append(oddsPart.getContent(1, 1));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(oddsPart.getContent(1, 2));
            element.append(row1);
            element.append(row2);
            return element
        };
        Template_SportDefinition_DefaultOdds.prototype.defineGameRowForOtherLayouts = function() {
            var element, oddsPart, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE + ' score'
            }));
            oddsPart = this.getOddsPartDefinition();
            row.append(oddsPart.getContent(1));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_DefaultOdds.prototype.defineHeaderColumnsWidth = function() {
            switch (this.getOddsLayout()) {
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_12:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((203 + this.getDeltaHomeName()) / 608), this.getPercent((203 + this.getDeltaAwayName()) / 608), this.getPercent(49 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_1X2:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((176 + this.getDeltaHomeName()) / 608), this.getPercent((176 + this.getDeltaAwayName()) / 608), this.getPercent(50 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_AH:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((176 + this.getDeltaHomeName()) / 608), this.getPercent((176 + this.getDeltaAwayName()) / 608), this.getPercent(50 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_US_LAYOUT:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((212 + this.getDeltaHomeName() + this.getDeltaAwayName()) / 608), this.getPercent(49 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
            }
        };
        return Template_SportDefinition_DefaultOdds
    })(cjs.Template_SportDefinitionOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_DefaultOdds = Template_SportDefinition_DefaultOdds
}).call(this);
(function() {
    var Template_SportDefinition_American_football, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_American_football = (function(superClass) {
        extend(Template_SportDefinition_American_football, superClass);

        function Template_SportDefinition_American_football() {
            return Template_SportDefinition_American_football.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_American_football.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_HOME + ' serve-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_AWAY + ' serve-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_5 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_American_football.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 545), this.getPercent((68 + this.getDeltaStatus()) / 545), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_SERVE), this.getPercent((208 + this.getDeltaName()) / 545), this.getPercent(37 / 545), this.getPercent(37 / 545), this.getPercent(37 / 545), this.getPercent(37 / 545), this.getPercent(37 / 545), this.getPercent(37 / 545), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_American_football
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_American_football = Template_SportDefinition_American_football
}).call(this);
(function() {
    var Template_SportDefinition_Aussie_rules, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Aussie_rules = (function(superClass) {
        extend(Template_SportDefinition_Aussie_rules, superClass);

        function Template_SportDefinition_Aussie_rules() {
            return Template_SportDefinition_Aussie_rules.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Aussie_rules.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Aussie_rules.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 549), this.getPercent((68 + this.getDeltaStatus()) / 549), this.getPercent((186 + this.getDeltaName()) / 549), this.getPercent(100 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Aussie_rules
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Aussie_rules = Template_SportDefinition_Aussie_rules
}).call(this);
(function() {
    var Template_SportDefinition_Aussie_rulesOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Aussie_rulesOdds = (function(superClass) {
        extend(Template_SportDefinition_Aussie_rulesOdds, superClass);

        function Template_SportDefinition_Aussie_rulesOdds() {
            return Template_SportDefinition_Aussie_rulesOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Aussie_rulesOdds.prototype.defineHeaderColumnsWidth = function() {
            switch (this.getOddsLayout()) {
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_12:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent(139 / 608), this.getPercent(139 / 608), this.getPercent(177 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_1X2:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(47 / 608), this.getPercent(113 / 608), this.getPercent(113 / 608), this.getPercent(176 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_AH:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(47 / 608), this.getPercent(113 / 608), this.getPercent(113 / 608), this.getPercent(176 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_US_LAYOUT:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((162 + this.getDeltaName()) / 608), this.getPercent(99 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
            }
        };
        return Template_SportDefinition_Aussie_rulesOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Aussie_rulesOdds = Template_SportDefinition_Aussie_rulesOdds
}).call(this);
(function() {
    var Template_SportDefinition_Badminton, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Badminton = (function(superClass) {
        extend(Template_SportDefinition_Badminton, superClass);

        function Template_SportDefinition_Badminton() {
            return Template_SportDefinition_Badminton.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Badminton.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_HOME + ' serve-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_AWAY + ' serve-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Badminton.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_SERVE), this.getPercent((301 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Badminton
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Badminton = Template_SportDefinition_Badminton
}).call(this);
(function() {
    var Template_SportDefinition_Bandy, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Bandy = (function(superClass) {
        extend(Template_SportDefinition_Bandy, superClass);

        function Template_SportDefinition_Bandy() {
            return Template_SportDefinition_Bandy.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Bandy.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Bandy.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((264 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Bandy
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Bandy = Template_SportDefinition_Bandy
}).call(this);
(function() {
    var Template_SportDefinition_Baseball, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Baseball = (function(superClass) {
        extend(Template_SportDefinition_Baseball, superClass);

        function Template_SportDefinition_Baseball() {
            return Template_SportDefinition_Baseball.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Baseball.prototype.defineGameRow = function() {
            var element, row1, row2, row3;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_HOME + ' serve-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_6 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_7 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_8 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_9 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_10 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_HITS + ' part-bottom left-bd-2'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_ERRORS + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_AWAY + ' serve-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_5 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_6 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_7 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_8 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_9 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_10 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_HITS + ' part-top left-bd-2'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_ERRORS + ' part-top'
            }));
            row3 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_3
            });
            row3.append(this.jQuery('<td>', {
                colspan: 20,
                "class": cjs.TemplateCell.prototype.CELL_EXTRA_INFO + ' extra-info'
            }));
            element.append(row1);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Baseball.prototype.defineHeader = function() {
            var element, i, inningNumber, row1, row2, row3;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league' + ' ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row1.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'left-bd first'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'left-bd'
            }));
            row2.append(this.jQuery('<td>'));
            row2.append(this.jQuery('<td>'));
            row2.append(this.jQuery('<td>'));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_BASEBALL_RUNS'),
                html: this.config.translate('TRANS_BASEBALL_SHORT_RUNS')
            }));
            for (inningNumber = i = 1; i <= 9; inningNumber = ++i) {
                row2.append(this.jQuery('<td>', {
                    title: this.config.translate('TRANS_BASEBALL_MATCH_STATUS_' + inningNumber),
                    html: inningNumber
                }))
            }
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_DEFAULT_MATCH_STATUS_EINN'),
                html: this.config.translate('TRANS_DEFAULT_MATCH_STATUS_SHORT_EINN')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_BASEBALL_HITS'),
                html: this.config.translate('TRANS_BASEBALL_SHORT_HITS'),
                "class": 'left-bd-2'
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_BASEBALL_ERRORS'),
                html: this.config.translate('TRANS_BASEBALL_SHORT_ERRORS')
            }));
            row2.append(this.jQuery('<td>'));
            row2.append(this.jQuery('<td>'));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: 20
            }));
            element.append(row1);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Baseball.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 530), this.getPercent((68 + this.getDeltaStatus()) / 530), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_SERVE), this.getPercent((166 + this.getDeltaName()) / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(21 / 530), this.getPercent(19 / 530), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Baseball
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Baseball = Template_SportDefinition_Baseball
}).call(this);
(function() {
    var Template_SportDefinition_Basketball, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Basketball = (function(superClass) {
        extend(Template_SportDefinition_Basketball, superClass);

        function Template_SportDefinition_Basketball() {
            return Template_SportDefinition_Basketball.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Basketball.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_5 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Basketball.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 549), this.getPercent((68 + this.getDeltaStatus()) / 549), this.getPercent((212 + this.getDeltaName()) / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Basketball
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Basketball = Template_SportDefinition_Basketball
}).call(this);
(function() {
    var Template_SportDefinition_BasketballOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_BasketballOdds = (function(superClass) {
        extend(Template_SportDefinition_BasketballOdds, superClass);

        function Template_SportDefinition_BasketballOdds() {
            return Template_SportDefinition_BasketballOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_BasketballOdds.prototype.defineHeaderColumnsWidth = function() {
            switch (this.getOddsLayout()) {
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_12:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(47 / 608), this.getPercent(194 / 608), this.getPercent(194 / 608), this.getPercent(67 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_1X2:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(47 / 608), this.getPercent(167 / 608), this.getPercent(167 / 608), this.getPercent(68 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_AH:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(47 / 608), this.getPercent(167 / 608), this.getPercent(167 / 608), this.getPercent(68 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_US_LAYOUT:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((212 + this.getDeltaName()) / 608), this.getPercent(49 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
            }
        };
        return Template_SportDefinition_BasketballOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_BasketballOdds = Template_SportDefinition_BasketballOdds
}).call(this);
(function() {
    var Template_SportDefinition_Beach_soccer, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Beach_soccer = (function(superClass) {
        extend(Template_SportDefinition_Beach_soccer, superClass);

        function Template_SportDefinition_Beach_soccer() {
            return Template_SportDefinition_Beach_soccer.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Beach_soccer.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_5 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Beach_soccer.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((227 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Beach_soccer
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Beach_soccer = Template_SportDefinition_Beach_soccer
}).call(this);
(function() {
    var Template_SportDefinition_Beach_volleyball, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Beach_volleyball = (function(superClass) {
        extend(Template_SportDefinition_Beach_volleyball, superClass);

        function Template_SportDefinition_Beach_volleyball() {
            return Template_SportDefinition_Beach_volleyball.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Beach_volleyball.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_HOME + ' serve-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_AWAY + ' serve-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_5 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Beach_volleyball.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_SERVE), this.getPercent((227 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Beach_volleyball
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Beach_volleyball = Template_SportDefinition_Beach_volleyball
}).call(this);
(function() {
    var Template_SportDefinition_Boxing, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Boxing = (function(superClass) {
        extend(Template_SportDefinition_Boxing, superClass);

        function Template_SportDefinition_Boxing() {
            return Template_SportDefinition_Boxing.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Boxing.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_SCORE + ' score'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Boxing.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((270 + this.getDeltaName()) / 564), this.getPercent(179 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Boxing
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Boxing = Template_SportDefinition_Boxing
}).call(this);
(function() {
    var Template_SportDefinition_BoxingOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_BoxingOdds = (function(superClass) {
        extend(Template_SportDefinition_BoxingOdds, superClass);

        function Template_SportDefinition_BoxingOdds() {
            return Template_SportDefinition_BoxingOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_BoxingOdds.prototype.defineGameRowForUsLayout = function() {
            var element, oddsPart, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_SCORE + ' score-home'
            }));
            oddsPart = this.getOddsPartDefinition();
            row1.append(oddsPart.getContent(1, 1));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(oddsPart.getContent(1, 2));
            element.append(row1);
            element.append(row2);
            return element
        };
        Template_SportDefinition_BoxingOdds.prototype.defineHeaderColumnsWidth = function() {
            switch (this.getOddsLayout()) {
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_12:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(47 / 608), this.getPercent(137 / 608), this.getPercent(137 / 608), this.getPercent(169 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_1X2:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(47 / 608), this.getPercent(116 / 608), this.getPercent(116 / 608), this.getPercent(170 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_AH:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(47 / 608), this.getPercent(116 / 608), this.getPercent(116 / 608), this.getPercent(170 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_US_LAYOUT:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((136 + this.getDeltaStatus() + this.getDeltaName()) / 608), this.getPercent(150 / 608), this.getPercent(55 / 608), this.getPercent(55 / 608), this.getPercent(55 / 608), this.getPercent(55 / 608), this.getPercent(55 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
            }
        };
        return Template_SportDefinition_BoxingOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_BoxingOdds = Template_SportDefinition_BoxingOdds
}).call(this);
(function() {
    var Template_SportDefinition_Cricket, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Cricket = (function(superClass) {
        extend(Template_SportDefinition_Cricket, superClass);

        function Template_SportDefinition_Cricket() {
            return Template_SportDefinition_Cricket.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Cricket.prototype.defineGameRow = function() {
            var element, row1, row2, row3;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_HOME + ' serve-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_AWAY + ' serve-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row3 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_3
            });
            row3.append(this.jQuery('<td>', {
                colspan: 10,
                "class": cjs.TemplateCell.prototype.CELL_EXTRA_INFO + ' extra-info'
            }));
            element.append(row1);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Cricket.prototype.defineHeader = function() {
            var element, row1, row2, row3;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row1.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'left-bd first'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'left-bd'
            }));
            row2.append(this.jQuery('<td>'));
            row2.append(this.jQuery('<td>'));
            row2.append(this.jQuery('<td>'));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_CRICKET_RUNS'),
                html: this.config.translate('TRANS_CRICKET_SHORT_RUNS')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_DEFAULT_MATCH_STATUS_1INN'),
                html: 1
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_DEFAULT_MATCH_STATUS_2INN'),
                html: 2
            }));
            row2.append(this.jQuery('<td>'));
            row2.append(this.jQuery('<td>'));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: 10
            }));
            element.append(row1);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Cricket.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 530), this.getPercent((68 + this.getDeltaStatus()) / 530), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_SERVE), this.getPercent((168 + this.getDeltaName()) / 530), this.getPercent(49 / 530), this.getPercent(99 / 530), this.getPercent(99 / 530), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Cricket
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Cricket = Template_SportDefinition_Cricket
}).call(this);
(function() {
    var Template_SportDefinition_CricketOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_CricketOdds = (function(superClass) {
        extend(Template_SportDefinition_CricketOdds, superClass);

        function Template_SportDefinition_CricketOdds() {
            return Template_SportDefinition_CricketOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_CricketOdds.prototype.defineHeaderColumnsWidth = function() {
            switch (this.getOddsLayout()) {
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_12:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((194 + this.getDeltaHomeName()) / 608), this.getPercent((194 + this.getDeltaAwayName()) / 608), this.getPercent(67 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_1X2:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((167 + this.getDeltaHomeName()) / 608), this.getPercent((167 + this.getDeltaAwayName()) / 608), this.getPercent(68 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_AH:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((167 + this.getDeltaHomeName()) / 608), this.getPercent((167 + this.getDeltaAwayName()) / 608), this.getPercent(68 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_US_LAYOUT:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((212 + this.getDeltaHomeName() + this.getDeltaAwayName()) / 608), this.getPercent(49 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
            }
        };
        return Template_SportDefinition_CricketOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_CricketOdds = Template_SportDefinition_CricketOdds
}).call(this);
(function() {
    var Template_SportDefinition_Cycling, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Cycling = (function(superClass) {
        extend(Template_SportDefinition_Cycling, superClass);

        function Template_SportDefinition_Cycling() {
            return Template_SportDefinition_Cycling.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Cycling.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' player'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_LAP_TIME
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Cycling.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_CYCLING_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'player',
                title: this.config.translate('TRANS_NAME'),
                html: this.config.translate('TRANS_NAME')
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'team',
                title: this.config.translate('TRANS_CYCLING_TEAM'),
                html: this.config.translate('TRANS_CYCLING_SHORT_TEAM')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_CYCLING_TIME'),
                html: this.config.translate('TRANS_CYCLING_SHORT_TIME')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Cycling.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(50 / 636), this.getPercent(243 / 636), this.getPercent(243 / 636), this.getPercent(100 / 636)]
        };
        return Template_SportDefinition_Cycling
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Cycling = Template_SportDefinition_Cycling
}).call(this);
(function() {
    var Template_SportDefinition_CyclingOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_CyclingOdds = (function(superClass) {
        extend(Template_SportDefinition_CyclingOdds, superClass);

        function Template_SportDefinition_CyclingOdds() {
            return Template_SportDefinition_CyclingOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_CyclingOdds.prototype.getOddsLayout = function() {
            return cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_TW_3_6_10
        };
        Template_SportDefinition_CyclingOdds.prototype.defineGameRow = function() {
            var element, oddsPart, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' player'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM
            }));
            oddsPart = this.getOddsPartDefinition();
            row.append(oddsPart.getContent(1));
            element.append(row);
            return element
        };
        Template_SportDefinition_CyclingOdds.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row1.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - this.getOddsColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING + ' left project-bonus-border'
            }));
            this.appendProjectBonus(row1);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_CYCLING_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'player',
                title: this.config.translate('TRANS_NAME'),
                html: this.config.translate('TRANS_NAME')
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'team',
                title: this.config.translate('TRANS_CYCLING_TEAM'),
                html: this.config.translate('TRANS_CYCLING_SHORT_TEAM')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_WINNER'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_WINNER_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_3'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_3_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_6'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_6_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_10'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_10_SHORT')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_CyclingOdds.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(40 / 636), this.getPercent(158 / 636), this.getPercent(158 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636)]
        };
        return Template_SportDefinition_CyclingOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_CyclingOdds = Template_SportDefinition_CyclingOdds
}).call(this);
(function() {
    var Template_SportDefinition_Darts, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Darts = (function(superClass) {
        extend(Template_SportDefinition_Darts, superClass);

        function Template_SportDefinition_Darts() {
            return Template_SportDefinition_Darts.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Darts.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_HOME + ' serve-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_BEST_OF + ' best-of'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_AWAY + ' serve-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Darts.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 545), this.getPercent((68 + this.getDeltaStatus()) / 545), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_SERVE), this.getPercent((353 + this.getDeltaName()) / 545), this.getPercent(37 / 545), this.getPercent(40 / 545), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Darts
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Darts = Template_SportDefinition_Darts
}).call(this);
(function() {
    var Template_SportDefinition_Esports, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Esports = (function(superClass) {
        extend(Template_SportDefinition_Esports, superClass);

        function Template_SportDefinition_Esports() {
            return Template_SportDefinition_Esports.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Esports.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Esports.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((412 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Esports
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Esports = Template_SportDefinition_Esports
}).call(this);
(function() {
    var Template_SportDefinition_Field_hockey, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Field_hockey = (function(superClass) {
        extend(Template_SportDefinition_Field_hockey, superClass);

        function Template_SportDefinition_Field_hockey() {
            return Template_SportDefinition_Field_hockey.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Field_hockey.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Field_hockey.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((264 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Field_hockey
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Field_hockey = Template_SportDefinition_Field_hockey
}).call(this);
(function() {
    var Template_SportDefinition_Floorball, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Floorball = (function(superClass) {
        extend(Template_SportDefinition_Floorball, superClass);

        function Template_SportDefinition_Floorball() {
            return Template_SportDefinition_Floorball.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Floorball.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_5 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Floorball.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((227 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Floorball
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Floorball = Template_SportDefinition_Floorball
}).call(this);
(function() {
    var Template_SportDefinition_Futsal, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Futsal = (function(superClass) {
        extend(Template_SportDefinition_Futsal, superClass);

        function Template_SportDefinition_Futsal() {
            return Template_SportDefinition_Futsal.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Futsal.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Futsal.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((264 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Futsal
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Futsal = Template_SportDefinition_Futsal
}).call(this);
(function() {
    var Template_SportDefinition_Golf, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Golf = (function(superClass) {
        extend(Template_SportDefinition_Golf, superClass);

        function Template_SportDefinition_Golf() {
            return Template_SportDefinition_Golf.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Golf.prototype.defineGameRow = function() {
            var element, row, row1, row2;
            element = this.jQuery('<tbody>');
            if (this.config.isCountryPage()) {
                row = this.jQuery('<tr>', {
                    id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
                });
                row.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
                }));
                row.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
                }));
                row.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
                }));
                row.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
                }));
                row.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_SCORE + ' score'
                }));
                row.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
                }));
                row.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
                }));
                row.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
                }));
                element.append(row)
            } else {
                row1 = this.jQuery('<tr>', {
                    id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
                });
                row1.append(this.jQuery('<td>', {
                    rowspan: 2,
                    "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
                }));
                row1.append(this.jQuery('<td>', {
                    rowspan: 2,
                    "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
                }));
                row1.append(this.jQuery('<td>', {
                    rowspan: 2,
                    "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
                }));
                row1.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
                }));
                row1.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_RAW_SCORE_HOME + ' score-home'
                }));
                row1.append(this.jQuery('<td>', {
                    rowspan: 2,
                    "class": cjs.TemplateCell.prototype.CELL_SCORE + ' score'
                }));
                row1.append(this.jQuery('<td>', {
                    rowspan: 2,
                    "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
                }));
                row1.append(this.jQuery('<td>', {
                    rowspan: 2,
                    "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
                }));
                row2 = this.jQuery('<tr>', {
                    id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
                });
                row2.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
                }));
                row2.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
                }));
                element.append(row1);
                element.append(row2)
            }
            return element
        };
        Template_SportDefinition_Golf.prototype.defineHeader = function() {
            var element, row, row3, row4;
            element = this.jQuery('<thead>');
            row = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' tournament-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            element.append(row);
            element.append(row4);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Golf.prototype.defineHeaderColumnsWidth = function() {
            if (this.config.isCountryPage()) {
                return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(82 / 591), this.getPercent(69 / 591), this.getPercent(189 / 591), this.getPercent(70 / 591), this.getPercent(181 / 591), 23, this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
            } else {
                return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 591), this.getPercent((69 + this.getDeltaStatus()) / 591), this.getPercent((359 + this.getDeltaName()) / 591), this.getPercent(36 / 591), this.getPercent(80 / 591), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
            }
        };
        return Template_SportDefinition_Golf
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Golf = Template_SportDefinition_Golf
}).call(this);
(function() {
    var Template_SportDefinition_Golf_NoDuel, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Golf_NoDuel = (function(superClass) {
        extend(Template_SportDefinition_Golf_NoDuel, superClass);

        function Template_SportDefinition_Golf_NoDuel() {
            return Template_SportDefinition_Golf_NoDuel.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Golf_NoDuel.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' player'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_HOLE
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_TODAY
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Golf_NoDuel.prototype.defineHeader = function() {
            var element, i, roundNumber, row1, row2, row3, row4, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_GOLF_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'player-label',
                title: this.config.translate('TRANS_PLAYER'),
                html: this.config.translate('TRANS_PLAYER')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_GOLF_PAR'),
                html: this.config.translate('TRANS_GOLF_SHORT_PAR')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_GOLF_HOLES_PLAYED').replace(': %s', ''),
                html: this.config.translate('TRANS_GOLF_HOLE_COL')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_GOLF_TODAY'),
                html: this.config.translate('TRANS_GOLF_TODAY')
            }));
            for (roundNumber = i = 1; i <= 4; roundNumber = ++i) {
                row2.append(this.jQuery('<td>', {
                    title: this.config.translate('TRANS_GOLF_MATCH_STATUS_' + roundNumber),
                    html: roundNumber
                }))
            }
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_GOLF_TOTAL'),
                html: this.config.translate('TRANS_GOLF_SHORT_TOTAL')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' tournament-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Golf_NoDuel.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(52 / 636), this.getPercent((255 + this.getDeltaName() + this.getDeltaStatus()) / 636), this.getPercent(42 / 636), this.getPercent((41 + this.getDeltaTime()) / 636), this.getPercent(41 / 636), this.getPercent(41 / 636), this.getPercent(41 / 636), this.getPercent(41 / 636), this.getPercent(41 / 636), this.getPercent(41 / 636)]
        };
        return Template_SportDefinition_Golf_NoDuel
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Golf_NoDuel = Template_SportDefinition_Golf_NoDuel
}).call(this);
(function() {
    var Template_SportDefinition_Golf_NoDuelOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Golf_NoDuelOdds = (function(superClass) {
        extend(Template_SportDefinition_Golf_NoDuelOdds, superClass);

        function Template_SportDefinition_Golf_NoDuelOdds() {
            return Template_SportDefinition_Golf_NoDuelOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Golf_NoDuelOdds.prototype.getOddsLayout = function() {
            return cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_TW
        };
        Template_SportDefinition_Golf_NoDuelOdds.prototype.defineGameRow = function() {
            var element, oddsPart, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' player'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            oddsPart = this.getOddsPartDefinition();
            row.append(oddsPart.getContent(1));
            element.append(row);
            return element
        };
        Template_SportDefinition_Golf_NoDuelOdds.prototype.defineHeader = function() {
            var element, row1, row2, row3;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row1.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - this.getOddsColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING + ' left project-bonus-border'
            }));
            this.appendProjectBonus(row1);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_GOLF_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'player-label',
                title: this.config.translate('TRANS_PLAYER'),
                html: this.config.translate('TRANS_PLAYER')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_GOLF_PAR'),
                html: this.config.translate('TRANS_GOLF_SHORT_PAR')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_WINNER'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_WINNER_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_5'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_5_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_10'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_10_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_20'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_20_SHORT')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            element.append(row1);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Golf_NoDuelOdds.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(47 / 636), this.getPercent(274 / 636), this.getPercent(47 / 636), this.getPercent(67 / 636), this.getPercent(67 / 636), this.getPercent(67 / 636), this.getPercent(67 / 636)]
        };
        return Template_SportDefinition_Golf_NoDuelOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Golf_NoDuelOdds = Template_SportDefinition_Golf_NoDuelOdds
}).call(this);
(function() {
    var Template_SportDefinition_Golf_NoDuelStableford, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Golf_NoDuelStableford = (function(superClass) {
        extend(Template_SportDefinition_Golf_NoDuelStableford, superClass);

        function Template_SportDefinition_Golf_NoDuelStableford() {
            return Template_SportDefinition_Golf_NoDuelStableford.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Golf_NoDuelStableford.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' player'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_HOLE
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Golf_NoDuelStableford.prototype.defineHeader = function() {
            var element, i, roundNumber, row1, row2, row3, row4, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_GOLF_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'player-label',
                title: this.config.translate('TRANS_PLAYER'),
                html: this.config.translate('TRANS_PLAYER')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_POINTS'),
                html: this.config.translate('TRANS_POINTS')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_GOLF_HOLES_PLAYED').replace(': %s', ''),
                html: this.config.translate('TRANS_GOLF_HOLE_COL')
            }));
            for (roundNumber = i = 1; i <= 4; roundNumber = ++i) {
                row2.append(this.jQuery('<td>', {
                    title: this.config.translate('TRANS_GOLF_MATCH_STATUS_' + roundNumber),
                    html: roundNumber
                }))
            }
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_GOLF_TOTAL'),
                html: this.config.translate('TRANS_GOLF_SHORT_TOTAL')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' tournament-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Golf_NoDuelStableford.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(52 / 636), this.getPercent(255 / 636), this.getPercent(47 / 636), this.getPercent(47 / 636), this.getPercent(47 / 636), this.getPercent(47 / 636), this.getPercent(47 / 636), this.getPercent(47 / 636), this.getPercent(47 / 636)]
        };
        return Template_SportDefinition_Golf_NoDuelStableford
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Golf_NoDuelStableford = Template_SportDefinition_Golf_NoDuelStableford
}).call(this);
(function() {
    var Template_SportDefinition_Golf_NoDuelStablefordOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Golf_NoDuelStablefordOdds = (function(superClass) {
        extend(Template_SportDefinition_Golf_NoDuelStablefordOdds, superClass);

        function Template_SportDefinition_Golf_NoDuelStablefordOdds() {
            return Template_SportDefinition_Golf_NoDuelStablefordOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Golf_NoDuelStablefordOdds.prototype.getOddsLayout = function() {
            return cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_TW
        };
        Template_SportDefinition_Golf_NoDuelStablefordOdds.prototype.defineGameRow = function() {
            var element, oddsPart, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' player'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            oddsPart = this.getOddsPartDefinition();
            row.append(oddsPart.getContent(1));
            element.append(row);
            return element
        };
        Template_SportDefinition_Golf_NoDuelStablefordOdds.prototype.defineHeader = function() {
            var element, row1, row2, row3;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row1.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - this.getOddsColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING + ' left project-bonus-border'
            }));
            this.appendProjectBonus(row1);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_GOLF_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'player-label',
                title: this.config.translate('TRANS_PLAYER'),
                html: this.config.translate('TRANS_PLAYER')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_POINTS'),
                html: this.config.translate('TRANS_POINTS')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_WINNER'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_WINNER_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_5'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_5_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_10'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_10_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_20'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_20_SHORT')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            element.append(row1);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Golf_NoDuelStablefordOdds.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(47 / 636), this.getPercent(274 / 636), this.getPercent(47 / 636), this.getPercent(67 / 636), this.getPercent(67 / 636), this.getPercent(67 / 636), this.getPercent(67 / 636)]
        };
        return Template_SportDefinition_Golf_NoDuelStablefordOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Golf_NoDuelStablefordOdds = Template_SportDefinition_Golf_NoDuelStablefordOdds
}).call(this);
(function() {
    var Template_SportDefinition_GolfOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_GolfOdds = (function(superClass) {
        extend(Template_SportDefinition_GolfOdds, superClass);

        function Template_SportDefinition_GolfOdds() {
            return Template_SportDefinition_GolfOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_GolfOdds.prototype.defineHeader = function() {
            var element, row;
            element = this.jQuery('<thead>');
            row = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - this.getOddsColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING + ' left project-bonus-border'
            }));
            this.appendProjectBonus(row, true);
            element.append(row);
            return element
        };
        Template_SportDefinition_GolfOdds.prototype.defineGameRow = function() {
            switch (this.getOddsLayout()) {
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_US_LAYOUT:
                    return this.defineGameRowForUsLayout();
                default:
                    return this.defineGameRowForOtherLayouts()
            }
        };
        Template_SportDefinition_GolfOdds.prototype.defineGameRowForOtherLayouts = function() {
            var element, oddsPart, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE + ' score'
            }));
            oddsPart = this.getOddsPartDefinition();
            row.append(oddsPart.getContent(1));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_GolfOdds.prototype.defineGameRowForUsLayout = function() {
            var element, oddsPart, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            oddsPart = this.getOddsPartDefinition();
            row1.append(oddsPart.getContent(1, 1));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(oddsPart.getContent(1, 2));
            element.append(row1);
            element.append(row2);
            return element
        };
        Template_SportDefinition_GolfOdds.prototype.defineHeaderColumnsWidth = function() {
            switch (this.getOddsLayout()) {
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_12:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(47 / 608), this.getPercent(188 / 608), this.getPercent(188 / 608), this.getPercent(79 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_1X2:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(47 / 608), this.getPercent(161 / 608), this.getPercent(161 / 608), this.getPercent(80 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_AH:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(47 / 608), this.getPercent(161 / 608), this.getPercent(161 / 608), this.getPercent(80 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_US_LAYOUT:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((241 + this.getDeltaHomeName() + this.getDeltaAwayName()) / 608), this.getPercent(70 / 608), this.getPercent(50 / 608), this.getPercent(50 / 608), this.getPercent(50 / 608), this.getPercent(50 / 608), this.getPercent(50 / 608)]
            }
        };
        return Template_SportDefinition_GolfOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_GolfOdds = Template_SportDefinition_GolfOdds
}).call(this);
(function() {
    var Template_SportDefinition_Handball, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Handball = (function(superClass) {
        extend(Template_SportDefinition_Handball, superClass);

        function Template_SportDefinition_Handball() {
            return Template_SportDefinition_Handball.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Handball.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Handball.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((301 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Handball
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Handball = Template_SportDefinition_Handball
}).call(this);
(function() {
    var Template_SportDefinition_Hockey, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Hockey = (function(superClass) {
        extend(Template_SportDefinition_Hockey, superClass);

        function Template_SportDefinition_Hockey() {
            return Template_SportDefinition_Hockey.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Hockey.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_5 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Hockey.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 549), this.getPercent((68 + this.getDeltaStatus()) / 549), this.getPercent((212 + this.getDeltaName()) / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Hockey
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Hockey = Template_SportDefinition_Hockey
}).call(this);
(function() {
    var Template_SportDefinition_Horse_racing, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Horse_racing = (function(superClass) {
        extend(Template_SportDefinition_Horse_racing, superClass);

        function Template_SportDefinition_Horse_racing() {
            return Template_SportDefinition_Horse_racing.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Horse_racing.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_AGE
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_WEIGHT
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_DISTANCE
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_STARTING_PRICE
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Horse_racing.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'horse',
                title: this.config.translate('TRANS_HORSE_RACING_HORSE'),
                html: this.config.translate('TRANS_HORSE_RACING_HORSE')
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'jockey-trainer',
                title: this.config.translate('TRANS_HORSE_RACING_JOCKEY') + "/" + this.config.translate('TRANS_HORSE_RACING_TRAINER'),
                html: this.config.translate('TRANS_HORSE_RACING_JOCKEY') + "/" + this.config.translate('TRANS_HORSE_RACING_TRAINER')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_HORSE_RACING_AGE_OF_HORSE'),
                html: this.config.translate('TRANS_HORSE_RACING_AGE')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_HORSE_RACING_WEIGHT_CARRYING_IN_STONES_AND_LBS'),
                html: this.config.translate('TRANS_HORSE_RACING_WEIGHT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_HORSE_RACING_DISTANCE_BEHIND_HORSE_AHEAD'),
                html: this.config.translate('TRANS_HORSE_RACING_DIST')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_HORSE_RACING_STARTING_PRICE'),
                html: this.config.translate('TRANS_HORSE_RACING_SP')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Horse_racing.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(50 / 636), this.getPercent(193 / 636), this.getPercent(193 / 636), this.getPercent(50 / 636), this.getPercent(50 / 636), this.getPercent(50 / 636), this.getPercent(50 / 636)]
        };
        return Template_SportDefinition_Horse_racing
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Horse_racing = Template_SportDefinition_Horse_racing
}).call(this);
(function() {
    var Template_SportDefinition_Horse_racingOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Horse_racingOdds = (function(superClass) {
        extend(Template_SportDefinition_Horse_racingOdds, superClass);

        function Template_SportDefinition_Horse_racingOdds() {
            return Template_SportDefinition_Horse_racingOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Horse_racingOdds.prototype.getOddsLayout = function() {
            return cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_EACH_WAY
        };
        Template_SportDefinition_Horse_racingOdds.prototype.defineGameRow = function() {
            var element, oddsPart, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_DISTANCE
            }));
            oddsPart = this.getOddsPartDefinition();
            row.append(oddsPart.getContent(1));
            element.append(row);
            return element
        };
        Template_SportDefinition_Horse_racingOdds.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row1.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - this.getOddsColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING + ' left project-bonus-border'
            }));
            this.appendProjectBonus(row1);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'horse',
                title: this.config.translate('TRANS_HORSE_RACING_HORSE'),
                html: this.config.translate('TRANS_HORSE_RACING_HORSE')
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'jockey-trainer',
                title: this.config.translate('TRANS_HORSE_RACING_JOCKEY') + "/" + this.config.translate('TRANS_HORSE_RACING_TRAINER'),
                html: this.config.translate('TRANS_HORSE_RACING_JOCKEY') + "/" + this.config.translate('TRANS_HORSE_RACING_TRAINER')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_HORSE_RACING_DISTANCE_BEHIND_HORSE_AHEAD'),
                html: this.config.translate('TRANS_HORSE_RACING_DIST')
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_OUTCOME_EACH_WAY,
                title: this.config.translate('TRANS_ODDS_COMPARISON_EACH_WAY'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_EACH_WAY_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_WINNER'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_WINNER_SHORT')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Horse_racingOdds.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(40 / 636), this.getPercent(193 / 636), this.getPercent(193 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636)]
        };
        return Template_SportDefinition_Horse_racingOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Horse_racingOdds = Template_SportDefinition_Horse_racingOdds
}).call(this);
(function() {
    var Template_SportDefinition_Mma, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Mma = (function(superClass) {
        extend(Template_SportDefinition_Mma, superClass);

        function Template_SportDefinition_Mma() {
            return Template_SportDefinition_Mma.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Mma.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_SCORE + ' score'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Mma.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((270 + this.getDeltaTime()) / 564), this.getPercent(179 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Mma
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Mma = Template_SportDefinition_Mma
}).call(this);
(function() {
    var Template_SportDefinition_MmaOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_MmaOdds = (function(superClass) {
        extend(Template_SportDefinition_MmaOdds, superClass);

        function Template_SportDefinition_MmaOdds() {
            return Template_SportDefinition_MmaOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_MmaOdds.prototype.defineGameRowForUsLayout = function() {
            var element, oddsPart, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_SCORE + ' score-home'
            }));
            oddsPart = this.getOddsPartDefinition();
            row1.append(oddsPart.getContent(1, 1));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(oddsPart.getContent(1, 2));
            element.append(row1);
            element.append(row2);
            return element
        };
        Template_SportDefinition_MmaOdds.prototype.defineHeaderColumnsWidth = function() {
            switch (this.getOddsLayout()) {
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_12:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((137 + this.getDeltaHomeName()) / 608), this.getPercent((137 + this.getDeltaAwayName()) / 608), this.getPercent(169 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_1X2:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((116 + this.getDeltaHomeName()) / 608), this.getPercent((116 + this.getDeltaAwayName()) / 608), this.getPercent(170 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_AH:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((116 + this.getDeltaHomeName()) / 608), this.getPercent((116 + this.getDeltaAwayName()) / 608), this.getPercent(170 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_US_LAYOUT:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((136 + this.getDeltaHomeName()) / 608), this.getPercent((150 + this.getDeltaAwayName()) / 608), this.getPercent(55 / 608), this.getPercent(55 / 608), this.getPercent(55 / 608), this.getPercent(55 / 608), this.getPercent(55 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
            }
        };
        return Template_SportDefinition_MmaOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_MmaOdds = Template_SportDefinition_MmaOdds
}).call(this);
(function() {
    var Template_SportDefinition_Motorsport_auto_racing_Duel, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Motorsport_auto_racing_Duel = (function(superClass) {
        extend(Template_SportDefinition_Motorsport_auto_racing_Duel, superClass);

        function Template_SportDefinition_Motorsport_auto_racing_Duel() {
            return Template_SportDefinition_Motorsport_auto_racing_Duel.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Motorsport_auto_racing_Duel.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Motorsport_auto_racing_Duel.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((412 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Motorsport_auto_racing_Duel
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Motorsport_auto_racing_Duel = Template_SportDefinition_Motorsport_auto_racing_Duel
}).call(this);
(function() {
    var Template_SportDefinition_Motorsport_auto_racing, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Motorsport_auto_racing = (function(superClass) {
        extend(Template_SportDefinition_Motorsport_auto_racing, superClass);

        function Template_SportDefinition_Motorsport_auto_racing() {
            return Template_SportDefinition_Motorsport_auto_racing.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Motorsport_auto_racing.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' player'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_LAP_TIME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_LAPS
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_GRID
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_PITSTOPS
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Motorsport_auto_racing.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'player',
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_PLAYER'),
                html: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_SHORT_PLAYER')
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'team',
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_TEAM'),
                html: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_SHORT_TEAM')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_TIME'),
                html: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_SHORT_TIME')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_LAPS'),
                html: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_SHORT_LAPS')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_GRID'),
                html: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_SHORT_GRID')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_PITSTOPS'),
                html: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_SHORT_PITSTOPS')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Motorsport_auto_racing.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(50 / 636), this.getPercent(183 / 636), this.getPercent(183 / 636), this.getPercent(100 / 636), this.getPercent(40 / 636), this.getPercent(40 / 636), this.getPercent(40 / 636)]
        };
        return Template_SportDefinition_Motorsport_auto_racing
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Motorsport_auto_racing = Template_SportDefinition_Motorsport_auto_racing
}).call(this);
(function() {
    var Template_SportDefinition_Motorsport_auto_racingOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Motorsport_auto_racingOdds = (function(superClass) {
        extend(Template_SportDefinition_Motorsport_auto_racingOdds, superClass);

        function Template_SportDefinition_Motorsport_auto_racingOdds() {
            return Template_SportDefinition_Motorsport_auto_racingOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Motorsport_auto_racingOdds.prototype.getOddsLayout = function() {
            return cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_TW_3_6_10
        };
        Template_SportDefinition_Motorsport_auto_racingOdds.prototype.defineGameRow = function() {
            var element, oddsPart, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' player'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM
            }));
            oddsPart = this.getOddsPartDefinition();
            row.append(oddsPart.getContent(1));
            element.append(row);
            return element
        };
        Template_SportDefinition_Motorsport_auto_racingOdds.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row1.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - this.getOddsColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING + ' left project-bonus-border'
            }));
            this.appendProjectBonus(row1);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'player',
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_PLAYER'),
                html: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_SHORT_PLAYER')
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'team',
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_TEAM'),
                html: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_SHORT_TEAM')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_WINNER'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_WINNER_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_3'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_3_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_6'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_6_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_10'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_10_SHORT')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Motorsport_auto_racingOdds.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(40 / 636), this.getPercent(158 / 636), this.getPercent(158 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636)]
        };
        return Template_SportDefinition_Motorsport_auto_racingOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Motorsport_auto_racingOdds = Template_SportDefinition_Motorsport_auto_racingOdds
}).call(this);
(function() {
    var Template_SportDefinition_Motorsport_moto_racing_Duel, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Motorsport_moto_racing_Duel = (function(superClass) {
        extend(Template_SportDefinition_Motorsport_moto_racing_Duel, superClass);

        function Template_SportDefinition_Motorsport_moto_racing_Duel() {
            return Template_SportDefinition_Motorsport_moto_racing_Duel.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Motorsport_moto_racing_Duel.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Motorsport_moto_racing_Duel.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((412 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Motorsport_moto_racing_Duel
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Motorsport_moto_racing_Duel = Template_SportDefinition_Motorsport_moto_racing_Duel
}).call(this);
(function() {
    var Template_SportDefinition_Motorsport_moto_racing_DuelOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Motorsport_moto_racing_DuelOdds = (function(superClass) {
        extend(Template_SportDefinition_Motorsport_moto_racing_DuelOdds, superClass);

        function Template_SportDefinition_Motorsport_moto_racing_DuelOdds() {
            return Template_SportDefinition_Motorsport_moto_racing_DuelOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Motorsport_moto_racing_DuelOdds.prototype.defineGameRow = function() {
            switch (this.getOddsLayout()) {
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_US_LAYOUT:
                    return this.defineGameRowForUsLayout();
                default:
                    return this.defineGameRowForOtherLayouts()
            }
        };
        Template_SportDefinition_Motorsport_moto_racing_DuelOdds.prototype.defineGameRowForOtherLayouts = function() {
            var element, oddsPart, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_DUEL + ' score'
            }));
            oddsPart = this.getOddsPartDefinition();
            row.append(oddsPart.getContent(1));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            element.append(row);
            return element
        };
        return Template_SportDefinition_Motorsport_moto_racing_DuelOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Motorsport_moto_racing_DuelOdds = Template_SportDefinition_Motorsport_moto_racing_DuelOdds
}).call(this);
(function() {
    var Template_SportDefinition_Motorsport_moto_racing, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Motorsport_moto_racing = (function(superClass) {
        extend(Template_SportDefinition_Motorsport_moto_racing, superClass);

        function Template_SportDefinition_Motorsport_moto_racing() {
            return Template_SportDefinition_Motorsport_moto_racing.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Motorsport_moto_racing.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' player'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_LAP_TIME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_LAPS
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_GRID
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Motorsport_moto_racing.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'player',
                title: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_PLAYER'),
                html: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_SHORT_PLAYER')
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'team',
                title: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_TEAM'),
                html: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_SHORT_TEAM')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_TIME'),
                html: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_SHORT_TIME')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_LAPS'),
                html: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_SHORT_LAPS')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_GRID'),
                html: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_SHORT_GRID')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Motorsport_moto_racing.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(50 / 636), this.getPercent(193 / 636), this.getPercent(193 / 636), this.getPercent(100 / 636), this.getPercent(50 / 636), this.getPercent(50 / 636)]
        };
        return Template_SportDefinition_Motorsport_moto_racing
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Motorsport_moto_racing = Template_SportDefinition_Motorsport_moto_racing
}).call(this);
(function() {
    var Template_SportDefinition_Motorsport_moto_racingOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Motorsport_moto_racingOdds = (function(superClass) {
        extend(Template_SportDefinition_Motorsport_moto_racingOdds, superClass);

        function Template_SportDefinition_Motorsport_moto_racingOdds() {
            return Template_SportDefinition_Motorsport_moto_racingOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Motorsport_moto_racingOdds.prototype.getOddsLayout = function() {
            return cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_TW_3_6_10
        };
        Template_SportDefinition_Motorsport_moto_racingOdds.prototype.defineGameRow = function() {
            var element, oddsPart, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' player'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM
            }));
            oddsPart = this.getOddsPartDefinition();
            row.append(oddsPart.getContent(1));
            element.append(row);
            return element
        };
        Template_SportDefinition_Motorsport_moto_racingOdds.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row1.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - this.getOddsColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING + ' left project-bonus-border'
            }));
            this.appendProjectBonus(row1);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'player',
                title: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_PLAYER'),
                html: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_SHORT_PLAYER')
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'team',
                title: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_TEAM'),
                html: this.config.translate('TRANS_MOTORSPORT_MOTO_RACING_SHORT_TEAM')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_WINNER'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_WINNER_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_3'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_3_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_6'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_6_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_TOP_10'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_TOP_10_SHORT')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Motorsport_moto_racingOdds.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(40 / 636), this.getPercent(158 / 636), this.getPercent(158 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636)]
        };
        return Template_SportDefinition_Motorsport_moto_racingOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Motorsport_moto_racingOdds = Template_SportDefinition_Motorsport_moto_racingOdds
}).call(this);
(function() {
    var Template_SportDefinition_Netball, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Netball = (function(superClass) {
        extend(Template_SportDefinition_Netball, superClass);

        function Template_SportDefinition_Netball() {
            return Template_SportDefinition_Netball.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Netball.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_5 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Netball.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((227 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Netball
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Netball = Template_SportDefinition_Netball
}).call(this);
(function() {
    var Template_SportDefinition_NetballOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_NetballOdds = (function(superClass) {
        extend(Template_SportDefinition_NetballOdds, superClass);

        function Template_SportDefinition_NetballOdds() {
            return Template_SportDefinition_NetballOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_NetballOdds.prototype.defineHeaderColumnsWidth = function() {
            switch (this.getOddsLayout()) {
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_12:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((194 + this.getDeltaHomeName()) / 608), this.getPercent((194 + this.getDeltaAwayName()) / 608), this.getPercent(67 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_1X2:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((167 + this.getDeltaHomeName()) / 608), this.getPercent((167 + this.getDeltaAwayName()) / 608), this.getPercent(68 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_AH:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((167 + this.getDeltaHomeName()) / 608), this.getPercent((167 + this.getDeltaAwayName()) / 608), this.getPercent(68 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getPercent(53 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)];
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_US_LAYOUT:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 608), this.getPercent((212 + this.getDeltaName() + this.getDeltaStatus()) / 608), this.getPercent(49 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getPercent(60 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
            }
        };
        return Template_SportDefinition_NetballOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_NetballOdds = Template_SportDefinition_NetballOdds
}).call(this);
(function() {
    var Template_SportDefinition_NoHeaderParticipantFixtures, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_NoHeaderParticipantFixtures = (function(superClass) {
        extend(Template_SportDefinition_NoHeaderParticipantFixtures, superClass);

        function Template_SportDefinition_NoHeaderParticipantFixtures() {
            return Template_SportDefinition_NoHeaderParticipantFixtures.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_NoHeaderParticipantFixtures.prototype.defineHeader = function() {
            var element, row;
            element = this.jQuery('<thead>');
            row = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_NoHeaderParticipantFixtures.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TOURNAMENT_TEMPLATE_ACRONYM
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_NoHeaderParticipantFixtures.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((80 + this.getDeltaTime()) / 608), this.getPercent(66 / 608), this.getPercent((212 + this.getDeltaHomeName()) / 608), this.getPercent((212 + this.getDeltaAwayName()) / 608), this.getPercent(38 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_NoHeaderParticipantFixtures
    })(cjs.Template_SportDefinition);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_NoHeaderParticipantFixtures = Template_SportDefinition_NoHeaderParticipantFixtures
}).call(this);
(function() {
    var Template_SportDefinition_NoHeaderParticipantResults, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_NoHeaderParticipantResults = (function(superClass) {
        extend(Template_SportDefinition_NoHeaderParticipantResults, superClass);

        function Template_SportDefinition_NoHeaderParticipantResults() {
            return Template_SportDefinition_NoHeaderParticipantResults.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_NoHeaderParticipantResults.prototype.defineHeader = function() {
            var element, row;
            element = this.jQuery('<thead>');
            row = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_NoHeaderParticipantResults.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TOURNAMENT_TEMPLATE_ACRONYM
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE + ' score'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_MATCH_WIN_LOSE
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_NoHeaderParticipantResults.prototype.defineHeaderColumnsWidth = function() {
            switch (this.getSportId()) {
                case 16:
                case 18:
                case 28:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((80 + this.getDeltaTime()) / 611), this.getPercent(66 / 611), this.getPercent((134 + this.getDeltaHomeName()) / 611), this.getPercent((133 + this.getDeltaAwayName()) / 611), this.getPercent(160 / 611), this.getPercent(38 / 611), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_MATCH_WIN_LOSE)];
                case 13:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((80 + this.getDeltaTime()) / 611), this.getPercent(66 / 611), this.getPercent((179 + this.getDeltaHomeName()) / 611), this.getPercent((178 + this.getDeltaAwayname()) / 611), this.getPercent(70 / 611), this.getPercent(38 / 611), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_MATCH_WIN_LOSE)];
                default:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((80 + this.getDeltaTime()) / 611), this.getPercent(66 / 611), this.getPercent((184 + this.getDeltaHomeName()) / 611), this.getPercent((183 + this.getDeltaAwayName()) / 611), this.getPercent(60 / 611), this.getPercent(38 / 611), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_MATCH_WIN_LOSE)]
            }
        };
        return Template_SportDefinition_NoHeaderParticipantResults
    })(cjs.Template_SportDefinition);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_NoHeaderParticipantResults = Template_SportDefinition_NoHeaderParticipantResults
}).call(this);
(function() {
    var Template_SportDefinition_ParticipantFixtures, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_ParticipantFixtures = (function(superClass) {
        extend(Template_SportDefinition_ParticipantFixtures, superClass);

        function Template_SportDefinition_ParticipantFixtures() {
            return Template_SportDefinition_ParticipantFixtures.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_ParticipantFixtures.prototype.defineHeader = function() {
            var element, row;
            element = this.jQuery('<thead>');
            row = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_ParticipantFixtures.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_ParticipantFixtures.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((80 + this.getDeltaTime()) / 608), this.getPercent((245 + this.getDeltaHomeName()) / 608), this.getPercent((245 + this.getDeltaAwayName()) / 608), this.getPercent(38 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_ParticipantFixtures
    })(cjs.Template_SportDefinition);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_ParticipantFixtures = Template_SportDefinition_ParticipantFixtures
}).call(this);
(function() {
    var Template_SportDefinition_Participant_Golf_NoDuel, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Participant_Golf_NoDuel = (function(superClass) {
        extend(Template_SportDefinition_Participant_Golf_NoDuel, superClass);

        function Template_SportDefinition_Participant_Golf_NoDuel() {
            return Template_SportDefinition_Participant_Golf_NoDuel.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Participant_Golf_NoDuel.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' player'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Participant_Golf_NoDuel.prototype.defineHeader = function() {
            var element, i, roundNumber, row1, row2, row3, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_GOLF_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'player-label',
                title: this.config.translate('TRANS_PLAYER'),
                html: this.config.translate('TRANS_PLAYER')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_GOLF_PAR'),
                html: this.config.translate('TRANS_GOLF_SHORT_PAR')
            }));
            for (roundNumber = i = 1; i <= 4; roundNumber = ++i) {
                row2.append(this.jQuery('<td>', {
                    title: this.config.translate('TRANS_GOLF_MATCH_STATUS_' + roundNumber),
                    html: roundNumber
                }))
            }
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_GOLF_TOTAL'),
                html: this.config.translate('TRANS_GOLF_SHORT_TOTAL')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            element.append(row1);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Participant_Golf_NoDuel.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(52 / 636), this.getPercent(337 / 636), this.getPercent(42 / 636), this.getPercent(41 / 636), this.getPercent(41 / 636), this.getPercent(41 / 636), this.getPercent(41 / 636), this.getPercent(41 / 636)]
        };
        return Template_SportDefinition_Participant_Golf_NoDuel
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Participant_Golf_NoDuel = Template_SportDefinition_Participant_Golf_NoDuel
}).call(this);
(function() {
    var Template_SportDefinition_ParticipantResults, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_ParticipantResults = (function(superClass) {
        extend(Template_SportDefinition_ParticipantResults, superClass);

        function Template_SportDefinition_ParticipantResults() {
            return Template_SportDefinition_ParticipantResults.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_ParticipantResults.prototype.defineHeader = function() {
            var element, row;
            element = this.jQuery('<thead>');
            row = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_ParticipantResults.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE + ' score'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_MATCH_WIN_LOSE
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_ParticipantResults.prototype.defineHeaderColumnsWidth = function() {
            switch (this.getSportId()) {
                case 16:
                case 18:
                case 28:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((86 + this.getDeltaTime()) / 611), this.getPercent((164 + this.getDeltaHomeName()) / 611), this.getPercent((163 + this.getDeltaAwayName()) / 611), this.getPercent(160 / 611), this.getPercent(38 / 611), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_MATCH_WIN_LOSE)];
                case 13:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((80 + this.getDeltaTime()) / 611), this.getPercent((212 + this.getDeltaHomeName()) / 611), this.getPercent((211 + this.getDeltaAwayName()) / 611), this.getPercent(70 / 611), this.getPercent(38 / 611), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_MATCH_WIN_LOSE)];
                default:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((80 + this.getDeltaTime()) / 611), this.getPercent((217 + this.getDeltaHomeName()) / 611), this.getPercent((216 + this.getDeltaAwayName()) / 611), this.getPercent(60 / 611), this.getPercent(38 / 611), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_MATCH_WIN_LOSE)]
            }
        };
        return Template_SportDefinition_ParticipantResults
    })(cjs.Template_SportDefinition);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_ParticipantResults = Template_SportDefinition_ParticipantResults
}).call(this);
(function() {
    var Template_SportDefinition_Pesapallo, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Pesapallo = (function(superClass) {
        extend(Template_SportDefinition_Pesapallo, superClass);

        function Template_SportDefinition_Pesapallo() {
            return Template_SportDefinition_Pesapallo.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Pesapallo.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_HOME + ' serve-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom left-bd-2'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_10 + ' part-bottom bold'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5 + ' part-bottom left-bd-2'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_6 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_7 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_8 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_11 + ' part-bottom bold'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_9 + ' part-bottom left-bd-2'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_12 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_AWAY + ' serve-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top left-bd-2'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_10 + ' part-top bold'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_5 + ' part-top left-bd-2'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_6 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_7 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_8 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_11 + ' part-top bold'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_9 + ' part-top left-bd-2'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_12 + ' part-top'
            }));
            element.append(row1);
            element.append(row2);
            return element
        };
        Template_SportDefinition_Pesapallo.prototype.defineHeader = function() {
            var element, i, inningNumber, j, row1, row2, row3;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league' + ' ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row1.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'left-bd first'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'left-bd'
            }));
            row2.append(this.jQuery('<td>'));
            row2.append(this.jQuery('<td>'));
            row2.append(this.jQuery('<td>'));
            row2.append(this.jQuery('<td>'));
            for (inningNumber = i = 1; i <= 4; inningNumber = ++i) {
                row2.append(this.jQuery('<td>', {
                    title: this.config.translate('TRANS_PESAPALLO_MATCH_STATUS_' + inningNumber),
                    html: inningNumber,
                    "class": inningNumber === 1 ? 'left-bd-2' : ''
                }))
            }
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_DEFAULT_MATCH_STATUS_1HF'),
                html: this.config.translate('TRANS_PESAPALLO_SHORT_1HF')
            }));
            for (inningNumber = j = 5; j <= 8; inningNumber = ++j) {
                row2.append(this.jQuery('<td>', {
                    title: this.config.translate('TRANS_PESAPALLO_MATCH_STATUS_' + inningNumber),
                    html: inningNumber,
                    "class": inningNumber === 5 ? 'left-bd-2' : ''
                }))
            }
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_DEFAULT_MATCH_STATUS_2HF'),
                html: this.config.translate('TRANS_PESAPALLO_SHORT_2HF')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_PESAPALLO_MATCH_STATUS_EINN'),
                html: this.config.translate('TRANS_PESAPALLO_SHORT_EINN'),
                "class": 'left-bd-2'
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_PESAPALLO_MATCH_STATUS_PEN'),
                html: this.config.translate('TRANS_PESAPALLO_SHORT_PEN')
            }));
            row2.append(this.jQuery('<td>'));
            row2.append(this.jQuery('<td>'));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: 20
            }));
            element.append(row1);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Pesapallo.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 530), this.getPercent((68 + this.getDeltaStatus()) / 530), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_SERVE), this.getPercent((168 + this.getDeltaName()) / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getPercent(19 / 530), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Pesapallo
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Pesapallo = Template_SportDefinition_Pesapallo
}).call(this);
(function() {
    var Template_SportDefinition_Rugby_league, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Rugby_league = (function(superClass) {
        extend(Template_SportDefinition_Rugby_league, superClass);

        function Template_SportDefinition_Rugby_league() {
            return Template_SportDefinition_Rugby_league.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Rugby_league.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Rugby_league.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 549), this.getPercent((68 + this.getDeltaStatus()) / 549), this.getPercent((249 + this.getDeltaName()) / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Rugby_league
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Rugby_league = Template_SportDefinition_Rugby_league
}).call(this);
(function() {
    var Template_SportDefinition_Rugby_union, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Rugby_union = (function(superClass) {
        extend(Template_SportDefinition_Rugby_union, superClass);

        function Template_SportDefinition_Rugby_union() {
            return Template_SportDefinition_Rugby_union.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Rugby_union.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Rugby_union.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 549), this.getPercent((68 + this.getDeltaStatus()) / 549), this.getPercent((249 + this.getDeltaName()) / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getPercent(37 / 549), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Rugby_union
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Rugby_union = Template_SportDefinition_Rugby_union
}).call(this);
(function() {
    var Template_SportDefinition_Snooker, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Snooker = (function(superClass) {
        extend(Template_SportDefinition_Snooker, superClass);

        function Template_SportDefinition_Snooker() {
            return Template_SportDefinition_Snooker.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Snooker.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_BEST_OF + ' best-of'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Snooker.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((372 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getPercent(40 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Snooker
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Snooker = Template_SportDefinition_Snooker
}).call(this);
(function() {
    var Template_SportDefinition_Soccer, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Soccer = (function(superClass) {
        extend(Template_SportDefinition_Soccer, superClass);

        function Template_SportDefinition_Soccer() {
            return Template_SportDefinition_Soccer.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Soccer.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE + ' score'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_PART + ' part-top'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Soccer.prototype.defineHeaderColumnsWidth = function() {
            if (this.config.isCountryPage()) {
                return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((82 + this.getDeltaTime()) / 549), this.getPercent((69 + this.getDeltaStatus()) / 549), this.getPercent((151 + this.getDeltaName()) / 549), this.getPercent(49 / 549), this.getPercent(151 / 549), this.getPercent(47 / 549), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
            } else {
                return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 549), this.getPercent((69 + this.getDeltaStatus()) / 549), this.getPercent((168 + this.getDeltaName()) / 549), this.getPercent(50 / 549), this.getPercent(168 / 549), this.getPercent(47 / 549), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
            }
        };
        return Template_SportDefinition_Soccer
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Soccer = Template_SportDefinition_Soccer
}).call(this);
(function() {
    var Template_SportDefinition_SoccerOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_SoccerOdds = (function(superClass) {
        extend(Template_SportDefinition_SoccerOdds, superClass);

        function Template_SportDefinition_SoccerOdds() {
            return Template_SportDefinition_SoccerOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_SoccerOdds.prototype.defineGameRow = function() {
            switch (this.getOddsLayout()) {
                case cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_US_LAYOUT:
                    return this.defineGameRowForUsLayout();
                default:
                    return this.defineGameRowForOtherLayouts()
            }
        };
        Template_SportDefinition_SoccerOdds.prototype.defineGameRowForUsLayout = function() {
            var element, oddsPart, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            oddsPart = this.getOddsPartDefinition();
            row1.append(oddsPart.getContent(1, 1));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(oddsPart.getContent(1, 2));
            element.append(row1);
            element.append(row2);
            return element
        };
        return Template_SportDefinition_SoccerOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_SoccerOdds = Template_SportDefinition_SoccerOdds
}).call(this);
(function() {
    var Template_SportDefinition_Table_tennis, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Table_tennis = (function(superClass) {
        extend(Template_SportDefinition_Table_tennis, superClass);

        function Template_SportDefinition_Table_tennis() {
            return Template_SportDefinition_Table_tennis.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Table_tennis.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_6 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_7 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_5 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_6 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_7 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Table_tennis.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((233 + this.getDeltaName()) / 564), this.getPercent(27 / 564), this.getPercent(27 / 564), this.getPercent(27 / 564), this.getPercent(27 / 564), this.getPercent(27 / 564), this.getPercent(27 / 564), this.getPercent(27 / 564), this.getPercent(27 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Table_tennis
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Table_tennis = Template_SportDefinition_Table_tennis
}).call(this);
(function() {
    var Template_SportDefinition_Tennis, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Tennis = (function(superClass) {
        extend(Template_SportDefinition_Tennis, superClass);

        function Template_SportDefinition_Tennis() {
            return Template_SportDefinition_Tennis.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Tennis.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_HOME + ' serve-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_POINT_BY_POINT + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_AWAY + ' serve-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_5 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_POINT_BY_POINT + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Tennis.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 545), this.getPercent((68 + this.getDeltaStatus()) / 545), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_SERVE), this.getPercent((213 + this.getDeltaName()) / 545), this.getPercent(31 / 545), this.getPercent(31 / 545), this.getPercent(31 / 545), this.getPercent(31 / 545), this.getPercent(31 / 545), this.getPercent(31 / 545), this.getPercent(31 / 545), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Tennis
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Tennis = Template_SportDefinition_Tennis
}).call(this);
(function() {
    var Template_SportDefinition_TournamentFixtures, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_TournamentFixtures = (function(superClass) {
        extend(Template_SportDefinition_TournamentFixtures, superClass);

        function Template_SportDefinition_TournamentFixtures() {
            return Template_SportDefinition_TournamentFixtures.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_TournamentFixtures.prototype.defineHeader = function() {
            var element, row;
            element = this.jQuery('<thead>');
            row = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_TournamentFixtures.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_TournamentFixtures.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((80 + this.getDeltaTime()) / 608), this.getPercent((245 + this.getDeltaHomeName()) / 608), this.getPercent((245 + this.getDeltaAwayName()) / 608), this.getPercent(38 / 608), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_TournamentFixtures
    })(cjs.Template_SportDefinition);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_TournamentFixtures = Template_SportDefinition_TournamentFixtures
}).call(this);
(function() {
    var Template_SportDefinition_TournamentResults, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_TournamentResults = (function(superClass) {
        extend(Template_SportDefinition_TournamentResults, superClass);

        function Template_SportDefinition_TournamentResults() {
            return Template_SportDefinition_TournamentResults.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_TournamentResults.prototype.defineHeader = function() {
            var element, row, row3, row4;
            element = this.jQuery('<thead>');
            row = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            if (this.getSportId() === 23) {
                row4 = this.jQuery('<tr>', {
                    "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' tournament-info-text'
                });
                row4.append(this.jQuery('<td>'));
                row4.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                    colspan: this.getGameColumnCount() - 1
                }));
                row3 = this.jQuery('<tr>', {
                    "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
                }).append(this.jQuery('<td>', {
                    colspan: this.getGameColumnCount()
                }))
            }
            element.append(row);
            if (this.getSportId() === 23) {
                element.append(row4);
                element.append(row3)
            }
            return element
        };
        Template_SportDefinition_TournamentResults.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE + ' score'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_TournamentResults.prototype.defineHeaderColumnsWidth = function() {
            switch (this.getSportId()) {
                case 16:
                case 18:
                case 28:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((80 + this.getDeltaTime()) / 636), this.getPercent((179 + this.getDeltaHomeName()) / 636), this.getPercent((179 + this.getDeltaAwayName()) / 636), this.getPercent(160 / 636), this.getPercent(38 / 636)];
                case 13:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((80 + this.getDeltaTime()) / 636), this.getPercent((224 + this.getDeltaHomeName()) / 636), this.getPercent((224 + this.getDeltaAwayName()) / 636), this.getPercent(70 / 636), this.getPercent(38 / 636)];
                case 23:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((80 + this.getDeltaTime()) / 636), this.getPercent((219 + this.getDeltaHomeName()) / 636), this.getPercent((219 + this.getDeltaAwayName()) / 636), this.getPercent(80 / 636), this.getPercent(38 / 636)];
                default:
                    return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((80 + this.getDeltaTime()) / 636), this.getPercent((229 + this.getDeltaHomeName()) / 636), this.getPercent((229 + this.getDeltaAwayName()) / 636), this.getPercent(60 / 636), this.getPercent(38 / 636)]
            }
        };
        return Template_SportDefinition_TournamentResults
    })(cjs.Template_SportDefinition);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_TournamentResults = Template_SportDefinition_TournamentResults
}).call(this);
(function() {
    var Template_SportDefinition_Volleyball, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Volleyball = (function(superClass) {
        extend(Template_SportDefinition_Volleyball, superClass);

        function Template_SportDefinition_Volleyball() {
            return Template_SportDefinition_Volleyball.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Volleyball.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_HOME + ' serve-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SERVE_AWAY + ' serve-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_5 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Volleyball.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_SERVE), this.getPercent((227 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Volleyball
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Volleyball = Template_SportDefinition_Volleyball
}).call(this);
(function() {
    var Template_SportDefinition_Water_polo, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Water_polo = (function(superClass) {
        extend(Template_SportDefinition_Water_polo, superClass);

        function Template_SportDefinition_Water_polo() {
            return Template_SportDefinition_Water_polo.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Water_polo.prototype.defineGameRow = function() {
            var element, row1, row2;
            element = this.jQuery('<tbody>');
            row1 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_START_TIME + ' time'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_MATCH_STATUS + ' timer'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' team-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME + ' score-home'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_1 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_2 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_3 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_4 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_5 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_HOME_PART_6 + ' part-bottom'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_ICONS + ' icons'
            }));
            row1.append(this.jQuery('<td>', {
                rowspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_LIVE_IN_OFFER + ' comparison'
            }));
            row2 = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_2
            });
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_AWAY_NAME + ' team-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY + ' score-away'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_1 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_2 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_3 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_4 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_5 + ' part-top'
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SCORE_AWAY_PART_6 + ' part-top'
            }));
            element.append(row1).append(row2);
            return element
        };
        Template_SportDefinition_Water_polo.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent((47 + this.getDeltaTime()) / 564), this.getPercent((68 + this.getDeltaStatus()) / 564), this.getPercent((190 + this.getDeltaName()) / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getPercent(37 / 564), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICONS), this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_LIVE_IN_OFFER)]
        };
        return Template_SportDefinition_Water_polo
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Water_polo = Template_SportDefinition_Water_polo
}).call(this);
(function() {
    var Template_SportDefinition_Winter_sports_alpine_skiing, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Winter_sports_alpine_skiing = (function(superClass) {
        extend(Template_SportDefinition_Winter_sports_alpine_skiing, superClass);

        function Template_SportDefinition_Winter_sports_alpine_skiing() {
            return Template_SportDefinition_Winter_sports_alpine_skiing.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Winter_sports_alpine_skiing.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TIME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_DIFFERENCE
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Winter_sports_alpine_skiing.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'name',
                title: this.config.translate('TRANS_NAME'),
                html: this.config.translate('TRANS_NAME')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_ALPINE_SKIING_TOTAL'),
                html: this.config.translate('TRANS_WINTER_SPORTS_ALPINE_SKIING_TOTAL')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_ALPINE_SKIING_DIFFERENCE'),
                html: this.config.translate('TRANS_WINTER_SPORTS_ALPINE_SKIING_DIFF')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Winter_sports_alpine_skiing.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(50 / 636), this.getPercent(446 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636)]
        };
        return Template_SportDefinition_Winter_sports_alpine_skiing
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Winter_sports_alpine_skiing = Template_SportDefinition_Winter_sports_alpine_skiing
}).call(this);
(function() {
    var Template_SportDefinition_Winter_sport_alpine_skiingOdds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Winter_sport_alpine_skiingOdds = (function(superClass) {
        extend(Template_SportDefinition_Winter_sport_alpine_skiingOdds, superClass);

        function Template_SportDefinition_Winter_sport_alpine_skiingOdds() {
            return Template_SportDefinition_Winter_sport_alpine_skiingOdds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Winter_sport_alpine_skiingOdds.prototype.getOddsLayout = function() {
            return cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_EACH_WAY
        };
        Template_SportDefinition_Winter_sport_alpine_skiingOdds.prototype.defineGameRow = function() {
            var element, oddsPart, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_DISTANCE
            }));
            oddsPart = this.getOddsPartDefinition();
            row.append(oddsPart.getContent(1));
            element.append(row);
            return element
        };
        Template_SportDefinition_Winter_sport_alpine_skiingOdds.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            row1.append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - this.getOddsColumnCount() - 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING + ' left project-bonus-border'
            }));
            this.appendProjectBonus(row1);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'horse',
                title: this.config.translate('TRANS_HORSE_RACING_HORSE'),
                html: this.config.translate('TRANS_HORSE_RACING_HORSE')
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'jockey-trainer',
                title: this.config.translate('TRANS_HORSE_RACING_JOCKEY') + "/" + this.config.translate('TRANS_HORSE_RACING_TRAINER'),
                html: this.config.translate('TRANS_HORSE_RACING_JOCKEY') + "/" + this.config.translate('TRANS_HORSE_RACING_TRAINER')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_HORSE_RACING_DISTANCE_BEHIND_HORSE_AHEAD'),
                html: this.config.translate('TRANS_HORSE_RACING_DIST')
            }));
            row2.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_OUTCOME_EACH_WAY,
                title: this.config.translate('TRANS_ODDS_COMPARISON_EACH_WAY'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_EACH_WAY_SHORT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_ODDS_COMPARISON_WINNER'),
                html: this.config.translate('TRANS_ODDS_COMPARISON_WINNER_SHORT')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Winter_sport_alpine_skiingOdds.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(40 / 636), this.getPercent(193 / 636), this.getPercent(193 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636)]
        };
        return Template_SportDefinition_Winter_sport_alpine_skiingOdds
    })(cjs.Template_SportDefinition_DefaultOdds);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Winter_sport_alpine_skiingOdds = Template_SportDefinition_Winter_sport_alpine_skiingOdds
}).call(this);
(function() {
    var Template_SportDefinition_Winter_sports_alpine_skiing_Rounds, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Winter_sports_alpine_skiing_Rounds = (function(superClass) {
        extend(Template_SportDefinition_Winter_sports_alpine_skiing_Rounds, superClass);

        function Template_SportDefinition_Winter_sports_alpine_skiing_Rounds() {
            return Template_SportDefinition_Winter_sports_alpine_skiing_Rounds.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Winter_sports_alpine_skiing_Rounds.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RUN_1
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RUN_2
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TIME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_DIFFERENCE
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Winter_sports_alpine_skiing_Rounds.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'name',
                title: this.config.translate('TRANS_NAME'),
                html: this.config.translate('TRANS_NAME')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_ALPINE_SKIING_RUN_1'),
                html: this.config.translate('TRANS_WINTER_SPORTS_ALPINE_SKIING_RUN_1')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_ALPINE_SKIING_RUN_2'),
                html: this.config.translate('TRANS_WINTER_SPORTS_ALPINE_SKIING_RUN_2')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_ALPINE_SKIING_TOTAL'),
                html: this.config.translate('TRANS_WINTER_SPORTS_ALPINE_SKIING_TOTAL')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_ALPINE_SKIING_DIFFERENCE'),
                html: this.config.translate('TRANS_WINTER_SPORTS_ALPINE_SKIING_DIFF')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Winter_sports_alpine_skiing_Rounds.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(50 / 636), this.getPercent(306 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636)]
        };
        return Template_SportDefinition_Winter_sports_alpine_skiing_Rounds
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Winter_sports_alpine_skiing_Rounds = Template_SportDefinition_Winter_sports_alpine_skiing_Rounds
}).call(this);
(function() {
    var Template_SportDefinition_Winter_sports_biathlon, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Winter_sports_biathlon = (function(superClass) {
        extend(Template_SportDefinition_Winter_sports_biathlon, superClass);

        function Template_SportDefinition_Winter_sports_biathlon() {
            return Template_SportDefinition_Winter_sports_biathlon.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Winter_sports_biathlon.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_SHOOTING
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TIME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_DIFFERENCE
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Winter_sports_biathlon.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'name',
                title: this.config.translate('TRANS_NAME'),
                html: this.config.translate('TRANS_NAME')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_BIATHLON_SHOOTING'),
                html: this.config.translate('TRANS_WINTER_SPORTS_BIATHLON_SHOOTING')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_BIATHLON_TIME'),
                html: this.config.translate('TRANS_WINTER_SPORTS_BIATHLON_TIME')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_BIATHLON_DIFFERENCE'),
                html: this.config.translate('TRANS_WINTER_SPORTS_BIATHLON_DIFF')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Winter_sports_biathlon.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(50 / 636), this.getPercent(376 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636)]
        };
        return Template_SportDefinition_Winter_sports_biathlon
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Winter_sports_biathlon = Template_SportDefinition_Winter_sports_biathlon
}).call(this);
(function() {
    var Template_SportDefinition_Winter_sports_cross_country, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Winter_sports_cross_country = (function(superClass) {
        extend(Template_SportDefinition_Winter_sports_cross_country, superClass);

        function Template_SportDefinition_Winter_sports_cross_country() {
            return Template_SportDefinition_Winter_sports_cross_country.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Winter_sports_cross_country.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TIME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_DIFFERENCE
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Winter_sports_cross_country.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'name',
                title: this.config.translate('TRANS_NAME'),
                html: this.config.translate('TRANS_NAME')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_CROSS_COUNTRY_TIME'),
                html: this.config.translate('TRANS_WINTER_SPORTS_CROSS_COUNTRY_TIME')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_CROSS_COUNTRY_DIFFERENCE'),
                html: this.config.translate('TRANS_WINTER_SPORTS_CROSS_COUNTRY_DIFF')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Winter_sports_cross_country.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(50 / 636), this.getPercent(446 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636)]
        };
        return Template_SportDefinition_Winter_sports_cross_country
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Winter_sports_cross_country = Template_SportDefinition_Winter_sports_cross_country
}).call(this);
(function() {
    var Template_SportDefinition_Winter_sports_ski_jumping, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Winter_sports_ski_jumping = (function(superClass) {
        extend(Template_SportDefinition_Winter_sports_ski_jumping, superClass);

        function Template_SportDefinition_Winter_sports_ski_jumping() {
            return Template_SportDefinition_Winter_sports_ski_jumping.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Winter_sports_ski_jumping.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_JUMP_ROUND_1
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_POINTS_ROUND_1
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_JUMP_ROUND_2
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_POINTS_ROUND_2
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_POINTS_TOTAL
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Winter_sports_ski_jumping.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'name',
                title: this.config.translate('TRANS_NAME'),
                html: this.config.translate('TRANS_NAME')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_LENGTH_1'),
                html: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_LENGTH_1')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_1'),
                html: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_1')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_LENGTH_2'),
                html: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_LENGTH_2')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_2'),
                html: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_2')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_TOTAL'),
                html: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_TOTAL')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Winter_sports_ski_jumping.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(50 / 636), this.getPercent(236 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636)]
        };
        return Template_SportDefinition_Winter_sports_ski_jumping
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Winter_sports_ski_jumping = Template_SportDefinition_Winter_sports_ski_jumping
}).call(this);
(function() {
    var Template_SportDefinition_Winter_sports_ski_jumping_Teams, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Winter_sports_ski_jumping_Teams = (function(superClass) {
        extend(Template_SportDefinition_Winter_sports_ski_jumping_Teams, superClass);

        function Template_SportDefinition_Winter_sports_ski_jumping_Teams() {
            return Template_SportDefinition_Winter_sports_ski_jumping_Teams.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Winter_sports_ski_jumping_Teams.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_JUMP_COUNT
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_POINTS_ROUND_1
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_POINTS_ROUND_2
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_POINTS_TOTAL
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Winter_sports_ski_jumping_Teams.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'name',
                title: this.config.translate('TRANS_NAME'),
                html: this.config.translate('TRANS_NAME')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_COUNT'),
                html: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_COUNT')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_1'),
                html: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_1')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_2'),
                html: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_2')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_TOTAL'),
                html: this.config.translate('TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_TOTAL')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Winter_sports_ski_jumping_Teams.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(50 / 636), this.getPercent(306 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636), this.getPercent(70 / 636)]
        };
        return Template_SportDefinition_Winter_sports_ski_jumping_Teams
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Winter_sports_ski_jumping_Teams = Template_SportDefinition_Winter_sports_ski_jumping_Teams
}).call(this);
(function() {
    var Template_SportDefinition_Motorsport_auto_racing_DAKAR, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Motorsport_auto_racing_DAKAR = (function(superClass) {
        extend(Template_SportDefinition_Motorsport_auto_racing_DAKAR, superClass);

        function Template_SportDefinition_Motorsport_auto_racing_DAKAR() {
            return Template_SportDefinition_Motorsport_auto_racing_DAKAR.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Motorsport_auto_racing_DAKAR.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' player'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_LAP_TIME
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Motorsport_auto_racing_DAKAR.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'player',
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_PLAYER'),
                html: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_SHORT_PLAYER')
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'team',
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_TEAM'),
                html: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_SHORT_TEAM')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_TIME'),
                html: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_SHORT_TIME')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Motorsport_auto_racing_DAKAR.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(50 / 636), this.getPercent(243 / 636), this.getPercent(243 / 636), this.getPercent(100 / 636)]
        };
        return Template_SportDefinition_Motorsport_auto_racing_DAKAR
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Motorsport_auto_racing_DAKAR = Template_SportDefinition_Motorsport_auto_racing_DAKAR
}).call(this);
(function() {
    var Template_SportDefinition_Motorsport_auto_racing_WRC, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_SportDefinition_Motorsport_auto_racing_WRC = (function(superClass) {
        extend(Template_SportDefinition_Motorsport_auto_racing_WRC, superClass);

        function Template_SportDefinition_Motorsport_auto_racing_WRC() {
            return Template_SportDefinition_Motorsport_auto_racing_WRC.__super__.constructor.apply(this, arguments)
        }
        Template_SportDefinition_Motorsport_auto_racing_WRC.prototype.defineGameRow = function() {
            var element, row;
            element = this.jQuery('<tbody>');
            row = this.jQuery('<tr>', {
                id: cjs.Template_SportDefinition.prototype.ROW_FORMAT_ID_1
            });
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_ICON_ADD_MATCH + ' icons left'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_RANK + ' team-rank'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM_HOME_NAME + ' player'
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_TEAM
            }));
            row.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_LAP_TIME
            }));
            element.append(row);
            return element
        };
        Template_SportDefinition_Motorsport_auto_racing_WRC.prototype.defineHeader = function() {
            var element, row1, row2, row3, row4, td;
            element = this.jQuery('<thead>');
            row1 = this.jQuery('<tr>', {
                "class": 'league ' + cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_1
            });
            row1.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_ICON_ADD_MATCH
            }));
            td = this.jQuery('<td>', {
                colspan: this.getGameColumnCount() - 1,
                "class": ' col-first'
            });
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_HEADING
            }));
            td.append(this.jQuery('<div>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_START_TIME
            }));
            row1.append(td);
            row2 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_2 + ' score-label'
            });
            row2.append(this.jQuery('<td>', {
                "class": 'icons-label'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'rank-label',
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_RANK'),
                html: '#'
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'player',
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_PLAYER'),
                html: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_SHORT_PLAYER')
            }));
            row2.append(this.jQuery('<td>', {
                "class": 'team',
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_TEAM'),
                html: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_SHORT_TEAM')
            }));
            row2.append(this.jQuery('<td>', {
                title: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_TIME'),
                html: this.config.translate('TRANS_MOTORSPORT_AUTO_RACING_SHORT_TIME')
            }));
            row3 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_3 + ' blank-line'
            }).append(this.jQuery('<td>', {
                colspan: this.getGameColumnCount()
            }));
            row4 = this.jQuery('<tr>', {
                "class": cjs.Template_SportDefinition.prototype.HEADER_FORMAT_ID_4 + ' race-info-text'
            });
            row4.append(this.jQuery('<td>'));
            row4.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_TOURNAMENT_INFO_TEXT,
                colspan: this.getGameColumnCount() - 1
            }));
            element.append(row1);
            element.append(row4);
            element.append(row2);
            element.append(row3);
            return element
        };
        Template_SportDefinition_Motorsport_auto_racing_WRC.prototype.defineHeaderColumnsWidth = function() {
            return [this.getColumnWidth(cjs.Template_DimensionAbstract.prototype.COLUMN_ICON_ADD_MATCH), this.getPercent(50 / 636), this.getPercent(243 / 636), this.getPercent(243 / 636), this.getPercent(100 / 636)]
        };
        return Template_SportDefinition_Motorsport_auto_racing_WRC
    })(cjs.Template_SportDefinition_Default);
    (typeof window !== "undefined" && window !== null ? window : global).cjs.Template_SportDefinition_Motorsport_auto_racing_WRC = Template_SportDefinition_Motorsport_auto_racing_WRC
}).call(this);
(function() {
    var Template_OddsPartDefinition, ref;
    Template_OddsPartDefinition = (function() {
        Template_OddsPartDefinition.prototype.ODDS_TYPE_1X2 = '1X2';
        Template_OddsPartDefinition.prototype.ODDS_TYPE_12 = '12';
        Template_OddsPartDefinition.prototype.ODDS_TYPE_AH = 'AH';
        Template_OddsPartDefinition.prototype.ODDS_TYPE_US_LAYOUT = 'Us_Layout';
        Template_OddsPartDefinition.prototype.ODDS_TYPE_TW = 'To_Win';
        Template_OddsPartDefinition.prototype.ODDS_TYPE_TW_3_6_10 = 'To_Win_3_6_10';
        Template_OddsPartDefinition.prototype.ODDS_TYPE_EACH_WAY = 'Each_Way';

        function Template_OddsPartDefinition(jQuery1) {
            this.jQuery = jQuery1
        }
        Template_OddsPartDefinition.prototype.getContent = function(rowspan) {};
        Template_OddsPartDefinition.prototype.getColumnCount = function() {
            return 0
        };
        Template_OddsPartDefinition.prototype.OddsPartDefinitionFactory = function(oddsType, jQuery) {
            var definitionName;
            definitionName = 'Template_OddsPartDefinition_' + oddsType;
            return new cjs[definitionName](jQuery)
        };
        return Template_OddsPartDefinition
    })();
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.Template_OddsPartDefinition = Template_OddsPartDefinition
    }
}).call(this);
(function() {
    var Template_OddsPartDefinition_12, ref, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_OddsPartDefinition_12 = (function(superClass) {
        extend(Template_OddsPartDefinition_12, superClass);

        function Template_OddsPartDefinition_12() {
            return Template_OddsPartDefinition_12.__super__.constructor.apply(this, arguments)
        }
        Template_OddsPartDefinition_12.prototype.getContent = function(rowspan) {
            var odds;
            odds = this.jQuery('<tr>');
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_1 + ' kx'
            }));
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_2 + ' kx last'
            }));
            return odds.find('td')
        };
        Template_OddsPartDefinition_12.prototype.getColumnCount = function() {
            return 2
        };
        Template_OddsPartDefinition_12.prototype.getHeader = function() {
            var odds;
            odds = this.jQuery('<tr>');
            odds.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_OUTCOME_1 + ' col'
            }));
            odds.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_OUTCOME_2 + ' col'
            }));
            return odds.find('td')
        };
        return Template_OddsPartDefinition_12
    })(cjs.Template_OddsPartDefinition);
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.Template_OddsPartDefinition_12 = Template_OddsPartDefinition_12
    }
}).call(this);
(function() {
    var Template_OddsPartDefinition_1X2, ref, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_OddsPartDefinition_1X2 = (function(superClass) {
        extend(Template_OddsPartDefinition_1X2, superClass);

        function Template_OddsPartDefinition_1X2() {
            return Template_OddsPartDefinition_1X2.__super__.constructor.apply(this, arguments)
        }
        Template_OddsPartDefinition_1X2.prototype.getContent = function(rowspan) {
            var odds;
            odds = this.jQuery('<tr>');
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_1 + ' kx'
            }));
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_X + ' kx'
            }));
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_2 + ' kx last'
            }));
            return odds.find('td')
        };
        Template_OddsPartDefinition_1X2.prototype.getColumnCount = function() {
            return 3
        };
        Template_OddsPartDefinition_1X2.prototype.getHeader = function() {
            var odds;
            odds = this.jQuery('<tr>');
            odds.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_OUTCOME_1 + ' col'
            }));
            odds.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_OUTCOME_X + ' col'
            }));
            odds.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_OUTCOME_2 + ' col'
            }));
            return odds.find('td')
        };
        return Template_OddsPartDefinition_1X2
    })(cjs.Template_OddsPartDefinition);
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.Template_OddsPartDefinition_1X2 = Template_OddsPartDefinition_1X2
    }
}).call(this);
(function() {
    var Template_OddsPartDefinition_AH, ref, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_OddsPartDefinition_AH = (function(superClass) {
        extend(Template_OddsPartDefinition_AH, superClass);

        function Template_OddsPartDefinition_AH() {
            return Template_OddsPartDefinition_AH.__super__.constructor.apply(this, arguments)
        }
        Template_OddsPartDefinition_AH.prototype.getContent = function(rowspan) {
            var odds;
            odds = this.jQuery('<tr>');
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_AH_VALUE
            }));
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_AH_1 + ' kx'
            }));
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_AH_2 + ' kx last'
            }));
            return odds.find('td')
        };
        Template_OddsPartDefinition_AH.prototype.getColumnCount = function() {
            return 3
        };
        Template_OddsPartDefinition_AH.prototype.getHeader = function() {
            var odds;
            odds = this.jQuery('<tr>');
            odds.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_OUTCOME_AH_VALUE + ' col'
            }));
            odds.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_OUTCOME_AH_1 + ' col'
            }));
            odds.append(this.jQuery('<td>', {
                "class": cjs.TemplateCell.prototype.CELL_HEADER_OUTCOME_AH_2 + ' col'
            }));
            return odds.find('td')
        };
        return Template_OddsPartDefinition_AH
    })(cjs.Template_OddsPartDefinition);
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.Template_OddsPartDefinition_AH = Template_OddsPartDefinition_AH
    }
}).call(this);
(function() {
    var Template_OddsPartDefinition_Each_Way, ref, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_OddsPartDefinition_Each_Way = (function(superClass) {
        extend(Template_OddsPartDefinition_Each_Way, superClass);

        function Template_OddsPartDefinition_Each_Way() {
            return Template_OddsPartDefinition_Each_Way.__super__.constructor.apply(this, arguments)
        }
        Template_OddsPartDefinition_Each_Way.prototype.getContent = function(rowspan) {
            var odds;
            odds = this.jQuery('<tr>');
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_EACH_WAY + ' kx'
            }));
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_WINNER + ' kx'
            }));
            return odds.find('td')
        };
        Template_OddsPartDefinition_Each_Way.prototype.getColumnCount = function() {
            return 2
        };
        Template_OddsPartDefinition_Each_Way.prototype.getHeader = function() {
            var odds;
            odds = this.jQuery('<tr>');
            odds.append(this.jQuery('<td>', {
                colspan: '2',
                "class": ' col'
            }));
            return odds.find('td')
        };
        return Template_OddsPartDefinition_Each_Way
    })(cjs.Template_OddsPartDefinition);
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.Template_OddsPartDefinition_Each_Way = Template_OddsPartDefinition_Each_Way
    }
}).call(this);
(function() {
    var Template_OddsPartDefinition_To_Win_3_6_10, ref, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_OddsPartDefinition_To_Win_3_6_10 = (function(superClass) {
        extend(Template_OddsPartDefinition_To_Win_3_6_10, superClass);

        function Template_OddsPartDefinition_To_Win_3_6_10() {
            return Template_OddsPartDefinition_To_Win_3_6_10.__super__.constructor.apply(this, arguments)
        }
        Template_OddsPartDefinition_To_Win_3_6_10.prototype.getContent = function(rowspan) {
            var odds;
            odds = this.jQuery('<tr>');
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_WINNER + ' kx'
            }));
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_TOP_3 + ' kx'
            }));
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_TOP_6 + ' kx last'
            }));
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_TOP_10 + ' kx last'
            }));
            return odds.find('td')
        };
        Template_OddsPartDefinition_To_Win_3_6_10.prototype.getColumnCount = function() {
            return 4
        };
        Template_OddsPartDefinition_To_Win_3_6_10.prototype.getHeader = function() {
            var odds;
            odds = this.jQuery('<tr>');
            odds.append(this.jQuery('<td>', {
                colspan: '4',
                "class": ' col'
            }));
            return odds.find('td')
        };
        return Template_OddsPartDefinition_To_Win_3_6_10
    })(cjs.Template_OddsPartDefinition);
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.Template_OddsPartDefinition_To_Win_3_6_10 = Template_OddsPartDefinition_To_Win_3_6_10
    }
}).call(this);
(function() {
    var Template_OddsPartDefinition_To_Win, ref, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_OddsPartDefinition_To_Win = (function(superClass) {
        extend(Template_OddsPartDefinition_To_Win, superClass);

        function Template_OddsPartDefinition_To_Win() {
            return Template_OddsPartDefinition_To_Win.__super__.constructor.apply(this, arguments)
        }
        Template_OddsPartDefinition_To_Win.prototype.getContent = function(rowspan) {
            var odds;
            odds = this.jQuery('<tr>');
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_WINNER + ' kx'
            }));
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_TOP_5 + ' kx'
            }));
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_TOP_10 + ' kx last'
            }));
            odds.append(this.jQuery('<td>', {
                rowspan: rowspan,
                "class": cjs.TemplateCell.prototype.CELL_OUTCOME_TOP_20 + ' kx last'
            }));
            return odds.find('td')
        };
        Template_OddsPartDefinition_To_Win.prototype.getColumnCount = function() {
            return 4
        };
        Template_OddsPartDefinition_To_Win.prototype.getHeader = function() {
            var odds;
            odds = this.jQuery('<tr>');
            odds.append(this.jQuery('<td>', {
                colspan: '4',
                "class": ' col'
            }));
            return odds.find('td')
        };
        return Template_OddsPartDefinition_To_Win
    })(cjs.Template_OddsPartDefinition);
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.Template_OddsPartDefinition_To_Win = Template_OddsPartDefinition_To_Win
    }
}).call(this);
(function() {
    var Template_OddsPartDefinition_Us_Layout, ref, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    Template_OddsPartDefinition_Us_Layout = (function(superClass) {
        extend(Template_OddsPartDefinition_Us_Layout, superClass);

        function Template_OddsPartDefinition_Us_Layout() {
            return Template_OddsPartDefinition_Us_Layout.__super__.constructor.apply(this, arguments)
        }
        Template_OddsPartDefinition_Us_Layout.prototype.getContent = function(rowspan, rowIndex) {
            var odds;
            if (rowIndex == null) {
                rowIndex = 1
            }
            odds = this.jQuery('<tr>');
            if (rowIndex === 1) {
                odds.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_OUTCOME_SPREAD_HOME_VALUE + ' ah_handicap ah odds-bottom left-bd-2'
                }));
                odds.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_OUTCOME_SPREAD_HOME_ODDS + ' kx o_AH1 ah odds-bottom'
                }));
                odds.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_OUTCOME_HOME_MONEY_LINE + ' kx o_ML1 odds-bottom left-bd-2'
                }));
                odds.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_OUTCOME_OVER_VALUE + ' ou_total ou odds-bottom left-bd-2'
                }));
                odds.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_OUTCOME_OVER_ODDS + ' kx o_OU1 ou odds-bottom'
                }))
            } else {
                odds.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_OUTCOME_SPREAD_AWAY_VALUE + ' ah_handicap ah odds-top left-bd-2'
                }));
                odds.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_OUTCOME_SPREAD_AWAY_ODDS + ' kx o_AH2 ah odds-top'
                }));
                odds.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_OUTCOME_AWAY_MONEY_LINE + ' kx o_ML2 odds-top left-bd-2'
                }));
                odds.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_OUTCOME_UNDER_VALUE + ' ou_total ou odds-top left-bd-2'
                }));
                odds.append(this.jQuery('<td>', {
                    "class": cjs.TemplateCell.prototype.CELL_OUTCOME_UNDER_ODDS + ' kx o_OU2 ou odds-top'
                }))
            }
            return odds.find('td')
        };
        Template_OddsPartDefinition_Us_Layout.prototype.getColumnCount = function() {
            return 5
        };
        Template_OddsPartDefinition_Us_Layout.prototype.getHeader = function() {
            var odds;
            odds = this.jQuery('<tr>');
            odds.append(this.jQuery('<td>', {
                colspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_OUTCOME_SPREAD + ' col'
            }));
            odds.append(this.jQuery('<td>', {
                colspan: 1,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_OUTCOME_MONEY_LINE + ' col'
            }));
            odds.append(this.jQuery('<td>', {
                colspan: 2,
                "class": cjs.TemplateCell.prototype.CELL_HEADER_OUTCOME_OVER_UNDER + ' col'
            }));
            return odds.find('td')
        };
        return Template_OddsPartDefinition_Us_Layout
    })(cjs.Template_OddsPartDefinition);
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.Template_OddsPartDefinition_Us_Layout = Template_OddsPartDefinition_Us_Layout
    }
}).call(this);
! function($) {
    var SmartBanner = function(options) {
        this.origHtmlMargin = parseFloat($('html').css('margin-top'));
        this.options = $.extend({}, $.smartbanner.defaults, options);
        var standalone = navigator.standalone,
            UA = navigator.userAgent;
        if (this.options.force) {
            this.type = this.options.force
        } else if (UA.match(/iPad|iPhone|iPod/i) != null) {
            if (UA.match(/Safari/i) != null && (UA.match(/CriOS/i) != null || window.Number(navigator.userAgent.substr(navigator.userAgent.indexOf('OS ') + 3, 3).replace('_', '.')) < 6)) this.type = 'ios'
        } else if (UA.match(/Android/i) != null) {
            this.type = 'android'
        } else if (UA.match(/Windows NT 6.2/i) != null && UA.match(/Touch/i) !== null) {
            this.type = 'windows'
        }
        if (!this.type || standalone || this.getCookie('sb-closed') || this.getCookie('sb-installed')) {
            return
        }
        this.scale = this.options.scale == 'auto' ? $(window).width() / window.screen.width : this.options.scale;
        if (this.scale < 1) this.scale = 1;
        var meta = $(this.type == 'android' ? 'meta[name="google-play-app"]' : this.type == 'ios' ? 'meta[name="apple-itunes-app"]' : 'meta[name="msApplication-ID"]');
        if (meta.length == 0) return;
        if (this.type == 'windows') {
            this.pfn = $('meta[name="msApplication-PackageFamilyName"]').attr('content');
            this.appId = meta.attr('content')[1]
        } else {
            this.appId = /app-id=([^\s,]+)/.exec(meta.attr('content'))[1]
        }
        this.title = this.options.title ? this.options.title : $('title').text().replace(/\s*[|\-·].*$/, '');
        this.author = this.options.author ? this.options.author : ($('meta[name="author"]').length ? $('meta[name="author"]').attr('content') : window.location.hostname);
        this.create();
        this.show();
        this.listen()
    };
    SmartBanner.prototype = {
        constructor: SmartBanner,
        create: function() {
            var iconURL, link = (this.options.url ? this.options.url : (this.type == 'windows' ? 'ms-windows-store:PDP?PFN=' + this.pfn : (this.type == 'android' ? 'market://details?id=' : 'https://itunes.apple.com/' + this.options.appStoreLanguage + '/app/id')) + this.appId),
                inStore = this.options.price ? this.options.price : '',
                gloss = this.options.iconGloss === null ? (this.type == 'ios') : this.options.iconGloss;
            $('body').append('<div id="smartbanner" class="' + this.type + '"><div class="sb-container"><a href="#" class="sb-close">&times;</a><span class="sb-icon"></span><div class="sb-info"><strong>' + this.title + '</strong><span>' + this.author + '</span><span class="free">' + inStore + '</span></div><a href="' + link + '" target="_blank" class="sb-button"><span>' + this.options.button + '</span></a></div></div>');
            if (this.options.icon) {
                iconURL = this.options.icon
            } else if ($('link[rel="apple-touch-icon-precomposed"]').length > 0) {
                iconURL = $('link[rel="apple-touch-icon-precomposed"]').attr('href');
                if (this.options.iconGloss === null) gloss = false
            } else if ($('link[rel="apple-touch-icon"]').length > 0) {
                iconURL = $('link[rel="apple-touch-icon"]').attr('href')
            } else if ($('meta[name="msApplication-TileImage"]').length > 0) {
                iconURL = $('meta[name="msApplication-TileImage"]').attr('content')
            } else if ($('meta[name="msapplication-TileImage"]').length > 0) {
                iconURL = $('meta[name="msapplication-TileImage"]').attr('content')
            }
            if (iconURL) {
                $('#smartbanner .sb-icon').css('background-image', 'url(' + iconURL + ')');
                if (gloss) $('#smartbanner .sb-icon').addClass('gloss')
            } else {
                $('#smartbanner').addClass('no-icon')
            }
            this.bannerHeight = $('#smartbanner').outerHeight() + 2;
            if (this.scale > 1) {
                var width = parseInt($('#smartbanner').css('width')) / this.scale;
                $('#smartbanner').css('top', parseFloat($('#smartbanner').css('top')) * this.scale).css('height', parseFloat($('#smartbanner').css('height')) * this.scale);
                $('#smartbanner .sb-container').css('-webkit-transform', 'scale(' + this.scale + ')').css('-msie-transform', 'scale(' + this.scale + ')').css('-moz-transform', 'scale(' + this.scale + ')').css('width', width)
            }
        },
        listen: function() {
            $('#smartbanner .sb-close').on('click', $.proxy(this.close, this));
            $('#smartbanner .sb-button').on('click', $.proxy(this.install, this))
        },
        show: function(callback) {
            $('#smartbanner').stop().animate({
                top: 0
            }, this.options.speedIn).addClass('shown');
            $('html').animate({
                marginTop: this.origHtmlMargin + (this.bannerHeight * this.scale)
            }, this.options.speedIn, 'swing', callback)
        },
        hide: function(callback) {
            $('#smartbanner').stop().animate({
                top: -1 * this.bannerHeight * this.scale
            }, this.options.speedOut).removeClass('shown');
            $('html').animate({
                marginTop: this.origHtmlMargin
            }, this.options.speedOut, 'swing', callback)
        },
        close: function(e) {
            e.preventDefault();
            this.hide();
            this.setCookie('sb-closed', 'true', this.options.daysHidden)
        },
        install: function(e) {},
        setCookie: function(name, value, exdays) {
            var exdate = new Date();
            exdate.setDate(exdate.getDate() + exdays);
            value = escape(value) + ((exdays == null) ? '' : '; expires=' + exdate.toUTCString());
            document.cookie = name + '=' + value + '; path=/;'
        },
        getCookie: function(name) {
            var i, x, y, ARRcookies = document.cookie.split(";");
            for (i = 0; i < ARRcookies.length; i++) {
                x = ARRcookies[i].substr(0, ARRcookies[i].indexOf("="));
                y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1);
                x = x.replace(/^\s+|\s+$/g, "");
                if (x == name) {
                    return unescape(y)
                }
            }
            return null
        },
        switchType: function() {
            var that = this;
            this.hide(function() {
                that.type = that.type == 'android' ? 'ios' : 'android';
                var meta = $(that.type == 'android' ? 'meta[name="google-play-app"]' : 'meta[name="apple-itunes-app"]').attr('content');
                that.appId = /app-id=([^\s,]+)/.exec(meta)[1];
                $('#smartbanner').detach();
                that.create();
                that.show()
            })
        }
    };
    $.smartbanner = function(option) {
        var $window = $(window),
            data = $window.data('typeahead'),
            options = typeof option == 'object' && option;
        if (!data) $window.data('typeahead', (data = new SmartBanner(options)));
        if (typeof option == 'string') data[option]()
    };
    $.smartbanner.defaults = {
        title: null,
        author: null,
        price: 'FREE',
        appStoreLanguage: 'us',
        inAppStore: 'On the App Store',
        inGooglePlay: 'In Google Play',
        inWindowsStore: 'In the Windows Store',
        icon: null,
        iconGloss: null,
        button: 'VIEW',
        url: null,
        scale: 'auto',
        speedIn: 300,
        speedOut: 400,
        daysHidden: 15,
        daysReminder: 90,
        force: null
    };
    $.smartbanner.Constructor = SmartBanner
}(window.jQuery);
(function() {
    var Page;
    Page = (function() {
        function Page(util_enviroment, util_sport, util_config) {
            this.util_enviroment = util_enviroment;
            this.util_sport = util_sport;
            this.util_config = util_config
        }
        Page.prototype.isTournamentPage = function() {
            return this.util_enviroment.isTournamentPage()
        };
        Page.prototype.isTournamentSubPage = function() {
            return this.util_enviroment.isTournamentSubPage()
        };
        Page.prototype.isTournamentPagePassiveTable = function() {
            return this.util_enviroment.isTournamentPagePassiveTable()
        };
        Page.prototype.isTournamentPageSummary = function() {
            return this.isTournamentPage() && !this.isTournamentSubPage()
        };
        Page.prototype.isTournamentPageFixtures = function() {
            return this.isTournamentPage() && this.util_enviroment.getTournamentPageTab() === this.util_enviroment.getConstants().tournamentPage.TAB_FIXTURES
        };
        Page.prototype.isTournamentPageResults = function() {
            return this.isTournamentPage() && this.util_enviroment.getTournamentPageTab() === this.util_enviroment.getConstants().tournamentPage.TAB_RESULTS
        };
        Page.prototype.isParticipantPage = function() {
            var participantPage;
            participantPage = this.util_enviroment.getParticipantPage();
            return Boolean(participantPage != null)
        };
        Page.prototype.isParticipantSubPage = function() {
            var participantPage;
            participantPage = this.util_enviroment.getParticipantPage();
            return Boolean((participantPage != null) && participantPage.getSubPage())
        };
        Page.prototype.isParticipantPagePassiveTable = function() {
            var participantPage;
            participantPage = this.util_enviroment.getParticipantPage();
            return Boolean((participantPage != null) && participantPage.getPassiveTable())
        };
        Page.prototype.isParticipantPageSummary = function() {
            return this.isParticipantPage() && !this.isParticipantSubPage()
        };
        Page.prototype.isParticipantPageFixtures = function() {
            var participantPage;
            participantPage = this.util_enviroment.getParticipantPage();
            return Boolean((participantPage != null) && participantPage.getTab() === this.util_enviroment.getConstants().participantPage.TAB_FIXTURES)
        };
        Page.prototype.isParticipantPageResults = function() {
            var participantPage;
            participantPage = this.util_enviroment.getParticipantPage();
            return Boolean((participantPage != null) && participantPage.getTab() === this.util_enviroment.getConstants().participantPage.TAB_RESULTS)
        };
        Page.prototype.isSeriesPage = function() {
            var seriesPage;
            seriesPage = this.util_enviroment.getSeriesPage();
            return Boolean(seriesPage != null)
        };
        Page.prototype.isSeriesSubPage = function() {
            var seriesPage;
            seriesPage = this.util_enviroment.getSeriesPage();
            return Boolean((seriesPage != null) && seriesPage.getSubPage())
        };
        Page.prototype.isSeriesPagePassiveTable = function() {
            var seriesPage;
            seriesPage = this.util_enviroment.getSeriesPage();
            return Boolean((seriesPage != null) && seriesPage.getPassiveTable())
        };
        Page.prototype.isSeriesPageSummary = function() {
            return this.isSeriesPage() && !this.isSeriesSubPage()
        };
        Page.prototype.isSeriesPageFixtures = function() {
            var seriesPage;
            seriesPage = this.util_enviroment.getSeriesPage();
            return Boolean((seriesPage != null) && seriesPage.getTab() === this.util_enviroment.getConstants().seriesPage.TAB_FIXTURES)
        };
        Page.prototype.isSeriesPageResults = function() {
            var seriesPage;
            seriesPage = this.util_enviroment.getSeriesPage();
            return Boolean((seriesPage != null) && seriesPage.getTab() === this.util_enviroment.getConstants().seriesPage.TAB_RESULTS)
        };
        Page.prototype.isSeasonPage = function() {
            return this.isTournamentPage() || this.isParticipantPage() || this.isSeriesPage()
        };
        Page.prototype.isSeasonSubPage = function() {
            return this.isTournamentSubPage() || this.isParticipantSubPage() || this.isSeriesSubPage()
        };
        Page.prototype.isSeasonPagePassiveTable = function() {
            return this.isTournamentPagePassiveTable() || this.isParticipantPagePassiveTable() || this.isSeriesPagePassiveTable()
        };
        Page.prototype.isSeasonPageSummary = function() {
            return this.isTournamentPageSummary() || this.isParticipantPageSummary() || this.isSeriesPageSummary()
        };
        Page.prototype.isSeasonPageFixtures = function() {
            return this.isTournamentPageFixtures() || this.isParticipantPageFixtures() || this.isSeriesPageFixtures()
        };
        Page.prototype.isSeasonPageResults = function() {
            return this.isTournamentPageResults() || this.isParticipantPageResults() || this.isSeriesPageResults()
        };
        Page.prototype.isCountryPage = function() {
            return Boolean(this.util_enviroment.getCountryId() && !this.isSeasonPage())
        };
        Page.prototype.isSportPage = function() {
            return Boolean(this.util_enviroment.getSportId() && !this.isCountryPage())
        };
        Page.prototype.isChildSportPage = function() {
            return Boolean(this.isSportPage() && (this.util_sport.getParentSport(this.util_enviroment.getSportId()) != null))
        };
        Page.prototype.isPlayerProfile = function() {
            var participantPage;
            participantPage = this.util_enviroment.getParticipantPage();
            return Boolean((participantPage != null) && participantPage.getIsPlayerProfile())
        };
        Page.prototype.getMaxEvents = function(sportId, category, categoryId) {
            var maxEvents, maxEventsInCategory, ref, sportMaxEvents, sportName;
            if (categoryId == null) {
                categoryId = null
            }
            maxEvents = this.util_config.get('app', 'noduel_events', 'main', 'default');
            if (category === 5) {
                maxEvents = this.util_config.get('app', 'noduel_events', 'mygames')
            } else {
                if (categoryId) {
                    maxEventsInCategory = (ref = this.util_config.get('app', 'noduel_events', 'categories')[categoryId]) != null ? ref : null
                }
                if (maxEventsInCategory != null) {
                    maxEvents = maxEventsInCategory
                } else {
                    sportName = this.util_sport.getOriginalNameFromId(sportId);
                    sportMaxEvents = this.util_config.get('app', 'noduel_events', 'main', sportName);
                    if (sportMaxEvents) {
                        maxEvents = sportMaxEvents
                    }
                    if (this.isTournamentPage()) {
                        sportMaxEvents = this.util_config.get('app', 'noduel_events', 'tournament_page', sportName);
                        if (sportMaxEvents) {
                            maxEvents = sportMaxEvents
                        }
                    }
                }
            }
            return maxEvents
        };
        return Page
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Page', Page, ['page'])
}).call(this);
(function() {
    var ParticipantPage, base;
    ParticipantPage = (function() {
        ParticipantPage.prototype.TAB_FIXTURES = cjs.constants.participantPage.TAB_FIXTURES;
        ParticipantPage.prototype.TAB_RESULTS = cjs.constants.participantPage.TAB_RESULTS;
        ParticipantPage.prototype.DATA_PART_MATCH_LIMIT = 100;
        ParticipantPage.prototype.SUMMARY_PASSIVE_TABLE_MATCH_LIMIT = 10;
        ParticipantPage.prototype.ID_PREFIX = 'participant-page';

        function ParticipantPage(_dic) {
            this._dic = _dic != null ? _dic : cjs.dic;
            this._idPrefix = this.ID_PREFIX;
            this._noHeader = false;
            this._passiveTable = false;
            this._subPage = false;
            this._tab = null;
            this._dataPart = 0;
            this._isPlayerProfile = false
        }
        ParticipantPage.prototype._getVar = function(name, idSuffix) {
            var el;
            el = $('#' + this._idPrefix + '-' + name + idSuffix);
            if (el.length === 0) {
                return null
            } else {
                return el.text()
            }
        };
        ParticipantPage.prototype.getPassiveTable = function() {
            return this._passiveTable
        };
        ParticipantPage.prototype.setPassiveTable = function(value) {
            return this._passiveTable = value
        };
        ParticipantPage.prototype.getSubPage = function() {
            return this._subPage
        };
        ParticipantPage.prototype.setSubPage = function(value) {
            return this._subPage = value
        };
        ParticipantPage.prototype.getDataPart = function() {
            return this._dataPart
        };
        ParticipantPage.prototype.setDataPart = function(value) {
            return this._dataPart = value
        };
        ParticipantPage.prototype.getIsPlayerProfile = function() {
            return this._isPlayerProfile
        };
        ParticipantPage.prototype.setIsPlayerProfile = function(_isPlayerProfile) {
            this._isPlayerProfile = _isPlayerProfile
        };
        ParticipantPage.prototype.getTab = function() {
            return this._tab
        };
        ParticipantPage.prototype.hasNoHeader = function() {
            return this._noHeader
        };
        ParticipantPage.prototype.setNoHeader = function(value) {
            return this._noHeader = value
        };
        ParticipantPage.prototype._getTemplate = function(tab, noDuel) {
            var template;
            if (noDuel) {
                template = 'Participant_Golf_NoDuel'
            } else if (tab === this.TAB_FIXTURES) {
                template = 'ParticipantFixtures';
                if (this.hasNoHeader()) {
                    template = 'NoHeader' + template
                }
                updater.country_tournament_order_fin = false
            } else if (tab === this.TAB_RESULTS) {
                template = 'ParticipantResults';
                if (this.hasNoHeader()) {
                    template = 'NoHeader' + template
                }
                updater.country_tournament_order_fin = true
            } else {
                template = null
            }
            return template
        };
        ParticipantPage.prototype.show = function(idSuffix, add) {
            var archiveEventHandler, archiveEventHolder, archiveLeagueHolder, colGroupHtml, currentScope, data, eventHolderProxy, eventsGenerated, gameHeaderHtml, games, headerLastHtmlPos, headerLastId, holderProxyClass, html, leagueHolderProxy, midnight1, midnight2, more, n1, n2, noMatch, sportDefinition, sportId, tab, template, temporaryEventHandler, temporaryEventHolder, temporaryLeagueHolder, tournamentPage, trans, utime;
            idSuffix = idSuffix != null ? '-' + idSuffix : '';
            tab = this._getVar('tab', idSuffix);
            data = this._getVar('data', idSuffix);
            sportId = cjs.Util.Number.toNumber(this._getVar('sport', idSuffix));
            utime = this._getVar('utime', idSuffix);
            more = this._getVar('more', idSuffix);
            if (tab == null) {
                return
            }
            $('#fs' + idSuffix).empty();
            if (sportId === cjs.constants.sport.GOLF) {
                trans = 'TOURNAMENT'
            } else {
                trans = 'MATCH'
            }
            noMatch = '<div class="no-match-found"><p>' + cjs.Util.trans('TRANS_' + trans + '_LIST_NOT_FOUND') + '</p></div>';
            if (data === '' && this._dataPart === 0) {
                $('#fs' + idSuffix).append(noMatch).css('border-bottom', 'none');
                return
            } else if (idSuffix === '-summary-results' || idSuffix === '-summary-fixtures') {
                this.setPassiveTable(true)
            } else if (this.getSubPage()) {
                this.setPassiveTable(true)
            }
            template = this._getTemplate(tab, false);
            if (idSuffix === '-results' && this._dataPart === 0 || idSuffix === '-fixtures' && this._dataPart === 0 || !page_is_initialized) {
                page_utime_init_value(this._dic.get('Helper_CurrentTime').getTimestamp())
            }
            tournamentPage = true;
            this._tab = tab;
            holderProxyClass = this._dic.getClass('dataHolderProxy');
            eventHolderProxy = this._dic.get('dataEventHolderProxy');
            leagueHolderProxy = this._dic.get('dataLeagueHolderProxy');
            currentScope = eventHolderProxy.getScope();
            eventHolderProxy.setScope(holderProxyClass.prototype.SCOPE_TEMPORARY);
            leagueHolderProxy.setScope(holderProxyClass.prototype.SCOPE_TEMPORARY);
            temporaryEventHolder = eventHolderProxy.getHolder();
            temporaryEventHandler = eventHolderProxy.getHandler();
            temporaryLeagueHolder = leagueHolderProxy.getHolder();
            temporaryEventHolder.reinit();
            temporaryLeagueHolder.reinit();
            eventHolderProxy.setScope(holderProxyClass.prototype.SCOPE_ARCHIVE);
            leagueHolderProxy.setScope(holderProxyClass.prototype.SCOPE_ARCHIVE);
            archiveEventHolder = eventHolderProxy.getHolder();
            archiveEventHandler = eventHolderProxy.getHandler();
            archiveLeagueHolder = leagueHolderProxy.getHolder();
            archiveEventHandler.each(function(index, id) {
                var eventItem, leagueId, leagueItem, temporaryEventItem, temporaryLeagueItem;
                eventItem = this.getItem(id);
                if (eventItem.getValue('tableIdSuffix') !== idSuffix) {
                    return
                }
                leagueItem = eventItem.getLeague();
                leagueId = leagueItem.getId();
                temporaryEventItem = temporaryEventHolder.getOrCreateNewEvent(id);
                temporaryEventItem.reinit(eventItem.getData());
                if (!temporaryLeagueHolder.hasLeague(leagueId)) {
                    temporaryLeagueItem = temporaryLeagueHolder.getOrCreateNewLeague(leagueId);
                    return temporaryLeagueItem.reinit(leagueItem.getData())
                }
            });
            eventHolderProxy.setScope(holderProxyClass.prototype.SCOPE_TEMPORARY);
            leagueHolderProxy.setScope(holderProxyClass.prototype.SCOPE_TEMPORARY);
            eventHolderProxy.getHandler().resetIds();
            leagueHolderProxy.getHandler().resetIds();
            n1 = eventHolderProxy.getHandler().count();
            parse(data, false, false);
            sort_fs_data();
            preload_hide();
            midnight1 = this._dic.get('util_date').getMidnight();
            midnight2 = midnight1 + 24 * 60 * 60;
            temporaryEventHandler.filter((function(that) {
                var eventsCount, lastDate, limit, matchMidnight1, showLinkMore;
                eventsCount = 0;
                matchMidnight1 = null;
                limit = sportId === cjs.constants.sport.GOLF ? 5 : that.SUMMARY_PASSIVE_TABLE_MATCH_LIMIT;
                lastDate = '';
                showLinkMore = more === 1;
                return function(index, id) {
                    var AC, AD, archiveEventItem, archiveLeagueItem, d, eventItem, leagueId, leagueItem, matchDate, matchMidnight, matchMidnight2;
                    eventItem = this.getItem(id);
                    leagueItem = eventItem.getLeague();
                    leagueId = leagueItem.getId();
                    AC = eventItem.getValue('AC');
                    AD = eventItem.getValue('AD');
                    if (AC === cjs.constants.MATCH_STATUS_POST && AD < midnight1) {
                        return
                    }
                    if ((idSuffix === '-results' || idSuffix === '-fixtures') && that._dataPart === 0) {
                        if (matchMidnight1 === null && eventsCount >= that.DATA_PART_MATCH_LIMIT - 1) {
                            matchDate = new Date(AD * 1000);
                            matchMidnight = new Date(matchDate.getUTCFullYear(), matchDate.getUTCMonth(), matchDate.getUTCDate(), 0, 0, 0);
                            d = 0;
                            if (matchDate.getUTCHours() + cjs.timezone.getTimezone() >= 24) {
                                d = 1
                            } else if (matchDate.getUTCHours() + cjs.timezone.getTimezone() < 0) {
                                d = -1
                            }
                            matchMidnight1 = matchMidnight.getTime() / 1000 + d * 24 * 60 * 60 + get_gmt_offset_diff();
                            matchMidnight2 = matchMidnight1 + 24 * 60 * 60
                        }
                        if (matchMidnight1 !== null && (idSuffix === '-results' && AD < matchMidnight1 || idSuffix === '-fixtures' && AD >= matchMidnight2)) {
                            return
                        }
                    } else if (idSuffix === '-summary-results' || idSuffix === '-summary-fixtures') {
                        if (eventsCount >= limit && lastDate !== that._dic.get('util_date').timestamp2date(cjs.dateFormat, AD, get_gmt_offset())) {
                            showLinkMore = true;
                            return
                        } else {
                            if (tab === that.TAB_RESULTS && AD >= midnight1 || tab === that.TAB_FIXTURES && AD < midnight2) {
                                return
                            } else {
                                lastDate = that._dic.get('util_date').timestamp2date(cjs.dateFormat, AD, get_gmt_offset())
                            }
                        }
                    }
                    eventItem.setValue('tableIdSuffix', idSuffix);
                    archiveEventItem = archiveEventHolder.getOrCreateNewEvent(id);
                    archiveEventItem.reinit(eventItem.getData());
                    if (!archiveLeagueHolder.hasLeague(leagueId)) {
                        archiveLeagueItem = archiveLeagueHolder.getOrCreateNewLeague(leagueId);
                        archiveLeagueItem.reinit(leagueItem.getData())
                    }
                    eventsCount++;
                    return true
                }
            })(this));
            n2 = eventHolderProxy.getHandler().count();
            eventHolderProxy.setScope(holderProxyClass.prototype.SCOPE_ARCHIVE);
            leagueHolderProxy.setScope(holderProxyClass.prototype.SCOPE_ARCHIVE);
            eventHolderProxy.getHandler().resetIds();
            leagueHolderProxy.getHandler().resetIds();
            if ((idSuffix === '-results' || idSuffix === '-fixtures' || idSuffix === '-summary-results' || idSuffix === '-summary-fixtures') && parseInt(this._getVar('allmatchcount', idSuffix)) <= n2 || n2 - n1 < 1) {
                $('#' + this._idPrefix + idSuffix + '-more').hide()
            } else {
                $('#' + this._idPrefix + idSuffix + '-more').show()
            }
            sportDefinition = cjs.template.getTemplateDefinitionForTemplate(template, sportId);
            colGroupHtml = sportDefinition.getHeaderColumnsHtmlTemplate();
            eventsGenerated = 0;
            headerLastId = 0;
            html = [];
            headerLastHtmlPos = null;
            games = {};
            temporaryEventHandler.each((function(that) {
                return function(index, id) {
                    var eventItem, gameHeaderHtml, gameRowHtml, isNoDuelPage, leagueItem;
                    eventItem = this.getItem(id);
                    leagueItem = eventItem.getLeague();
                    if (headerLastId !== leagueItem.getId()) {
                        if (headerLastId !== 0) {
                            if (!that.hasNoHeader()) {
                                html.push('</tbody>');
                                html.push('</table>')
                            }
                            cjs.mygamesCheckboxes.setHeaderGames(headerLastId, games);
                            gameHeaderHtml = cjs.templateHeaderDataProxy.getFilledHeaderFromTemplate(sportDefinition, headerLastId);
                            html[headerLastHtmlPos] = gameHeaderHtml
                        }
                        if (sportId === cjs.constants.sport.GOLF) {
                            isNoDuelPage = isNoDuelTournament(eventItem.getLeagueId());
                            template = that._getTemplate(tab, isNoDuelPage);
                            sportDefinition = cjs.template.getTemplateDefinitionForTemplate(template, sportId);
                            colGroupHtml = sportDefinition.getHeaderColumnsHtmlTemplate()
                        }
                        games = {};
                        if (!that.hasNoHeader() || headerLastId === 0) {
                            html.push('<table class="' + eventItem.getValue('sport') + (isNoDuelPage ? ' no-duel' : '') + '">');
                            html.push(colGroupHtml)
                        }
                        if (!that.hasNoHeader()) {
                            html.push('<thead>');
                            headerLastHtmlPos = html.push('--HEADER PLACEHOLDER--') - 1;
                            html.push('</thead>');
                            html.push('<tbody>')
                        }
                        headerLastId = leagueItem.getId()
                    }
                    gameRowHtml = cjs.templateGameDataProxy.getFilledGameRowFromTemplate(sportDefinition, id, eventsGenerated % 2 ? 'odd' : 'even');
                    html.push(gameRowHtml);
                    games[id] = true;
                    return eventsGenerated++
                }
            })(this));
            if (headerLastId !== 0) {
                html.push('</tbody>');
                html.push('</table>');
                cjs.mygamesCheckboxes.setHeaderGames(headerLastId, games);
                gameHeaderHtml = cjs.templateHeaderDataProxy.getFilledHeaderFromTemplate(sportDefinition, headerLastId);
                html[headerLastHtmlPos] = gameHeaderHtml
            }
            if (temporaryEventHandler.count() === 0) {
                $('#fs' + idSuffix).append(noMatch)
            }
            if ((idSuffix === '-summary-results' || idSuffix === '-summary-fixtures') && eventsGenerated > 0) {
                $('#block' + idSuffix).show()
            }
            $('#fs' + idSuffix).append(html.join(''));
            this.setPassiveTable(false);
            this._tab = null;
            eventHolderProxy.setScope(currentScope);
            return leagueHolderProxy.setScope(currentScope)
        };
        return ParticipantPage
    })();
    if (typeof window !== "undefined" && window !== null) {
        if ((base = window.cjs).ParticipantPage == null) {
            base.ParticipantPage = ParticipantPage
        }
    } else {
        if (exports.ParticipantPage == null) {
            exports.ParticipantPage = ParticipantPage
        }
    }
}).call(this);
(function() {
    var SeriesPage, base, extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key]
            }

            function ctor() {
                this.constructor = child
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child
        },
        hasProp = {}.hasOwnProperty;
    SeriesPage = (function(superClass) {
        extend(SeriesPage, superClass);

        function SeriesPage() {
            return SeriesPage.__super__.constructor.apply(this, arguments)
        }
        SeriesPage.prototype.TAB_FIXTURES = cjs.constants.seriesPage.TAB_FIXTURES;
        SeriesPage.prototype.TAB_RESULTS = cjs.constants.seriesPage.TAB_RESULTS;
        SeriesPage.prototype.DATA_PART_MATCH_LIMIT = 1000;
        SeriesPage.prototype.SUMMARY_PASSIVE_TABLE_MATCH_LIMIT = 1000;
        SeriesPage.prototype.ID_PREFIX = 'tournament-page';
        SeriesPage.prototype._getTemplate = function(tab, noDuel) {
            var template;
            if (tab === this.TAB_FIXTURES) {
                template = 'TournamentFixtures';
                updater.country_tournament_order_fin = false
            } else if (tab === this.TAB_RESULTS) {
                template = 'TournamentResults';
                updater.country_tournament_order_fin = true
            } else {
                template = null
            }
            return template
        };
        return SeriesPage
    })(cjs.ParticipantPage);
    if (typeof window !== "undefined" && window !== null) {
        if ((base = window.cjs).SeriesPage == null) {
            base.SeriesPage = SeriesPage
        }
    } else {
        if (exports.SeriesPage == null) {
            exports.SeriesPage = SeriesPage
        }
    }
}).call(this);
(function() {
    var AdBlocked, ref;
    AdBlocked = (function() {
        function AdBlocked(_jQuery, _cfg) {
            this._jQuery = _jQuery;
            this._cfg = _cfg
        }
        AdBlocked.prototype.save = function(blocked, browser) {
            var browserKey, browserName, browserStatus, dataToSend;
            if (browser == null) {
                browser = {}
            }
            if (!(this._cfg.fs_stats_enable === true && this._cfg.fs_stats_url_adblocked)) {
                return
            }
            browserName = "unknown";
            if (browser != null) {
                for (browserKey in browser) {
                    browserStatus = browser[browserKey];
                    if ((browserKey === 'msie' || browserKey === 'chrome' || browserKey === 'mozilla' || browserKey === 'opera' || browserKey === 'safari') && browserStatus) {
                        browserName = browserKey
                    }
                }
            }
            dataToSend = {
                blocked: blocked ? 1 : 0,
                browserName: browserName,
                projectId: this._cfg.projectId
            };
            return this._jQuery.ajax({
                url: this._cfg.fs_stats_url_adblocked,
                data: dataToSend,
                dataType: 'jsonp',
                jsonpCallback: 'jsonp_cb'
            })
        };
        return AdBlocked
    })();
    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.AdBlocked = AdBlocked
    }
}).call(this);
(function() {
    var Application;
    Application = (function() {
        function Application(util_config, util_enviroment) {
            this.util_config = util_config;
            this.util_enviroment = util_enviroment
        }
        Application.prototype.getExternalProjects = function() {
            return this.util_config.get('app', 'odds', 'external_projects')
        };
        Application.prototype.isExternalProject = function() {
            return this.getExternalProjectId() !== 0
        };
        Application.prototype.getExternalProjectId = function() {
            var externalProjects;
            if (this.util_enviroment.getExternalProjectId() !== 0) {
                return this.util_enviroment.getExternalProjectId()
            }
            externalProjects = this.getExternalProjects();
            if (externalProjects && externalProjects[this.util_enviroment.getConfigHashId()]) {
                return externalProjects[this.util_enviroment.getConfigHashId()]
            }
            return 0
        };
        Application.prototype.setMainBookmakerId = function(_bookmakerId) {
            this._bookmakerId = _bookmakerId
        };
        Application.prototype.getMainBookmakerId = function() {
            return this._bookmakerId
        };
        return Application
    })();
    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Application', Application, ['application'])
}).call(this);
var temporaryLeagueData = cjs.dic.getNewInstance('dataHolder');
cjs.Util = cjs.dic.get('util');
var ie = cjs.Util.Browser.is(cjs.Util.Browser.IE);
var ie6 = cjs.Util.Browser.is(cjs.Util.Browser.IE6);
var ie7 = cjs.Util.Browser.is(cjs.Util.Browser.IE7);
var ff = cjs.Util.Browser.is(cjs.Util.Browser.FF);
var webkit = cjs.Util.Browser.is(cjs.Util.Browser.WEBKIT);
var base_image_url = cjs.Util.Url.getLocationOrigin() + '/res/image/';
var base_image_data_url = base_image_url + 'data/';
var base_project_image_url = cjs.Util.Url.getLocationOrigin() + '/res/_fs/image/';
cjs.status = new cjs.Status();
window.onerror = function(msg, url, line, column, error) {
    if (msg.substr(-cjs.dev._errorReportsReportedMark.length) == cjs.dev._errorReportsReportedMark) {
        return
    }
    if (typeof column == 'undefined') {
        column = -1
    }
    if (typeof error == 'undefined') {
        error = null
    }
    cjs.dev.reportError("Caught unhandled exception: '" + msg + "' from " + url + ":" + line + ":" + column, error)
};
$(document).keyup(function(e) {
    if (e.altKey && e.ctrlKey && e.shiftKey && e.keyCode == 68) {
        cjs.dev.init(function() {
            cjs.dev.debugWindow.show()
        })
    }
});
cjs.dev.initUrl = '/x/js/core-debugger_0_1221000000.js';
cjs.AjaxJqObject.prototype.errorReporter = function(msg, e) {
    cjs.dev.reportError(msg, e)
};
cjs.Push.prototype.errorReporter = cjs.AjaxJqObject.prototype.errorReporter;
cjs.clientStorage = cjs.dic.get('client_storage');
clientStorage = cjs.clientStorage;
cjs.timezone = new cjs.TimezoneSwitcher(clientStorage, 1, cjs.Util.Date.timestamp2date, change_tz_callback);
cjs.feedService = {};
var project_id = 0;
var check_lang_box_geo_ip = [];
var odds_no_win_stages = [1, 9, 8, 4, 5, 37, 36, ];
var odds_betting_types = {
    "1": 1,
    "2": 3,
    "3": 3,
    "4": 1,
    "5": 3,
    "6": 3,
    "7": 1,
    "8": 1,
    "9": 1,
    "10": 1,
    "11": 1,
    "12": 3,
    "18": 3,
    "19": 1,
    "13": 3,
    "14": 3,
    "15": 3,
    "16": 1,
    "17": 3,
    "21": 3,
    "22": 1,
    "24": 1,
    "25": 3,
    "26": 1,
    "28": 3,
    "29": 3,
    "30": 1,
    "23": 101,
    "31": 101,
    "32": 101,
    "33": 101,
    "34": 101,
    "35": 16,
    "36": 3,
    "37": 101,
    "38": 101,
    "39": 101,
    "40": 101,
    "41": 101
};
var odds_sport_scope_list = {
    "1": 2,
    "2": 2,
    "3": 1,
    "4": 2,
    "5": 1,
    "6": 1,
    "7": 2,
    "8": 2,
    "9": 2,
    "10": 2,
    "11": 2,
    "12": 2,
    "18": 1,
    "19": 2,
    "13": 1,
    "14": 2,
    "15": 2,
    "16": 2,
    "17": 2,
    "21": 2,
    "22": 2,
    "24": 2,
    "25": 2,
    "26": 2,
    "28": 2,
    "29": 1,
    "30": 2,
    "23": 2,
    "31": 2,
    "32": 2,
    "33": 2,
    "34": 2,
    "35": 2,
    "36": 2,
    "37": 2,
    "38": 2,
    "39": 2,
    "40": 2,
    "41": 2
};
var PushClientFlashTransport = "/iframe/flash-transport.swf";
var SPORT_LIST = new Array();
var SPORT_LIST_BY_ID = {};
var SPORT_URL_BY_ID = [];
SPORT_LIST['soccer'] = 1;
SPORT_LIST_BY_ID['1'] = 'soccer';
SPORT_URL_BY_ID['1'] = '/soccer/';
SPORT_LIST['tennis'] = 2;
SPORT_LIST_BY_ID['2'] = 'tennis';
SPORT_URL_BY_ID['2'] = '/tennis/';
SPORT_LIST['basketball'] = 3;
SPORT_LIST_BY_ID['3'] = 'basketball';
SPORT_URL_BY_ID['3'] = '/basketball/';
SPORT_LIST['hockey'] = 4;
SPORT_LIST_BY_ID['4'] = 'hockey';
SPORT_URL_BY_ID['4'] = '/hockey/';
SPORT_LIST['american-football'] = 5;
SPORT_LIST_BY_ID['5'] = 'american-football';
SPORT_URL_BY_ID['5'] = '/american-football/';
SPORT_LIST['baseball'] = 6;
SPORT_LIST_BY_ID['6'] = 'baseball';
SPORT_URL_BY_ID['6'] = '/baseball/';
SPORT_LIST['handball'] = 7;
SPORT_LIST_BY_ID['7'] = 'handball';
SPORT_URL_BY_ID['7'] = '/handball/';
SPORT_LIST['rugby-union'] = 8;
SPORT_LIST_BY_ID['8'] = 'rugby-union';
SPORT_URL_BY_ID['8'] = '/rugby-union/';
SPORT_LIST['floorball'] = 9;
SPORT_LIST_BY_ID['9'] = 'floorball';
SPORT_URL_BY_ID['9'] = '/floorball/';
SPORT_LIST['bandy'] = 10;
SPORT_LIST_BY_ID['10'] = 'bandy';
SPORT_URL_BY_ID['10'] = '/bandy/';
SPORT_LIST['futsal'] = 11;
SPORT_LIST_BY_ID['11'] = 'futsal';
SPORT_URL_BY_ID['11'] = '/futsal/';
SPORT_LIST['volleyball'] = 12;
SPORT_LIST_BY_ID['12'] = 'volleyball';
SPORT_URL_BY_ID['12'] = '/volleyball/';
SPORT_LIST['cricket'] = 13;
SPORT_LIST_BY_ID['13'] = 'cricket';
SPORT_URL_BY_ID['13'] = '/cricket/';
SPORT_LIST['darts'] = 14;
SPORT_LIST_BY_ID['14'] = 'darts';
SPORT_URL_BY_ID['14'] = '/darts/';
SPORT_LIST['snooker'] = 15;
SPORT_LIST_BY_ID['15'] = 'snooker';
SPORT_URL_BY_ID['15'] = '/snooker/';
SPORT_LIST['boxing'] = 16;
SPORT_LIST_BY_ID['16'] = 'boxing';
SPORT_URL_BY_ID['16'] = '/boxing/';
SPORT_LIST['beach-volleyball'] = 17;
SPORT_LIST_BY_ID['17'] = 'beach-volleyball';
SPORT_URL_BY_ID['17'] = '/beach-volleyball/';
SPORT_LIST['aussie-rules'] = 18;
SPORT_LIST_BY_ID['18'] = 'aussie-rules';
SPORT_URL_BY_ID['18'] = '/aussie-rules/';
SPORT_LIST['rugby-league'] = 19;
SPORT_LIST_BY_ID['19'] = 'rugby-league';
SPORT_URL_BY_ID['19'] = '/rugby-league/';
SPORT_LIST['badminton'] = 21;
SPORT_LIST_BY_ID['21'] = 'badminton';
SPORT_URL_BY_ID['21'] = '/badminton/';
SPORT_LIST['water-polo'] = 22;
SPORT_LIST_BY_ID['22'] = 'water-polo';
SPORT_URL_BY_ID['22'] = '/water-polo/';
SPORT_LIST['golf'] = 23;
SPORT_LIST_BY_ID['23'] = 'golf';
SPORT_URL_BY_ID['23'] = '/golf/';
SPORT_LIST['field-hockey'] = 24;
SPORT_LIST_BY_ID['24'] = 'field-hockey';
SPORT_URL_BY_ID['24'] = '/field-hockey/';
SPORT_LIST['table-tennis'] = 25;
SPORT_LIST_BY_ID['25'] = 'table-tennis';
SPORT_URL_BY_ID['25'] = '/table-tennis/';
SPORT_LIST['beach-soccer'] = 26;
SPORT_LIST_BY_ID['26'] = 'beach-soccer';
SPORT_URL_BY_ID['26'] = '/beach-soccer/';
SPORT_LIST['mma'] = 28;
SPORT_LIST_BY_ID['28'] = 'mma';
SPORT_URL_BY_ID['28'] = '/mma/';
SPORT_LIST['netball'] = 29;
SPORT_LIST_BY_ID['29'] = 'netball';
SPORT_URL_BY_ID['29'] = '/netball/';
SPORT_LIST['pesapallo'] = 30;
SPORT_LIST_BY_ID['30'] = 'pesapallo';
SPORT_URL_BY_ID['30'] = '/pesapallo/';
SPORT_LIST['motorsport'] = 31;
SPORT_LIST_BY_ID['31'] = 'motorsport';
SPORT_URL_BY_ID['31'] = '/motorsport/';
SPORT_LIST['motorsport-auto-racing'] = 32;
SPORT_LIST_BY_ID['32'] = 'motorsport-auto-racing';
SPORT_URL_BY_ID['32'] = '/auto-racing/';
SPORT_LIST['motorsport-moto-racing'] = 33;
SPORT_LIST_BY_ID['33'] = 'motorsport-moto-racing';
SPORT_URL_BY_ID['33'] = '/moto-racing/';
SPORT_LIST['cycling'] = 34;
SPORT_LIST_BY_ID['34'] = 'cycling';
SPORT_URL_BY_ID['34'] = '/cycling/';
SPORT_LIST['horse-racing'] = 35;
SPORT_LIST_BY_ID['35'] = 'horse-racing';
SPORT_URL_BY_ID['35'] = '/horse-racing/';
SPORT_LIST['esports'] = 36;
SPORT_LIST_BY_ID['36'] = 'esports';
SPORT_URL_BY_ID['36'] = '/esports/';
SPORT_LIST['winter-sports'] = 37;
SPORT_LIST_BY_ID['37'] = 'winter-sports';
SPORT_URL_BY_ID['37'] = '/winter-sports/';
SPORT_LIST['winter-sports-ski-jumping'] = 38;
SPORT_LIST_BY_ID['38'] = 'winter-sports-ski-jumping';
SPORT_URL_BY_ID['38'] = '/ski-jumping/';
SPORT_LIST['winter-sports-alpine-skiing'] = 39;
SPORT_LIST_BY_ID['39'] = 'winter-sports-alpine-skiing';
SPORT_URL_BY_ID['39'] = '/alpine-skiing/';
SPORT_LIST['winter-sports-cross-country'] = 40;
SPORT_LIST_BY_ID['40'] = 'winter-sports-cross-country';
SPORT_URL_BY_ID['40'] = '/cross-country-skiing/';
SPORT_LIST['winter-sports-biathlon'] = 41;
SPORT_LIST_BY_ID['41'] = 'winter-sports-biathlon';
SPORT_URL_BY_ID['41'] = '/biathlon/';
var SPORT_SCORE_PART_LIST = new Array();
SPORT_SCORE_PART_LIST['soccer'] = 1;
SPORT_SCORE_PART_LIST['tennis'] = 5;
SPORT_SCORE_PART_LIST['basketball'] = 5;
SPORT_SCORE_PART_LIST['hockey'] = 5;
SPORT_SCORE_PART_LIST['american-football'] = 5;
SPORT_SCORE_PART_LIST['baseball'] = 10;
SPORT_SCORE_PART_LIST['handball'] = 3;
SPORT_SCORE_PART_LIST['rugby-union'] = 4;
SPORT_SCORE_PART_LIST['floorball'] = 5;
SPORT_SCORE_PART_LIST['bandy'] = 4;
SPORT_SCORE_PART_LIST['futsal'] = 4;
SPORT_SCORE_PART_LIST['volleyball'] = 5;
SPORT_SCORE_PART_LIST['cricket'] = 2;
SPORT_SCORE_PART_LIST['darts'] = 0;
SPORT_SCORE_PART_LIST['snooker'] = 0;
SPORT_SCORE_PART_LIST['boxing'] = 0;
SPORT_SCORE_PART_LIST['beach-volleyball'] = 3;
SPORT_SCORE_PART_LIST['aussie-rules'] = 4;
SPORT_SCORE_PART_LIST['rugby-league'] = 4;
SPORT_SCORE_PART_LIST['badminton'] = 3;
SPORT_SCORE_PART_LIST['water-polo'] = 6;
SPORT_SCORE_PART_LIST['golf'] = 0;
SPORT_SCORE_PART_LIST['field-hockey'] = 4;
SPORT_SCORE_PART_LIST['table-tennis'] = 7;
SPORT_SCORE_PART_LIST['beach-soccer'] = 5;
SPORT_SCORE_PART_LIST['mma'] = 0;
SPORT_SCORE_PART_LIST['netball'] = 5;
SPORT_SCORE_PART_LIST['pesapallo'] = 11;
SPORT_SCORE_PART_LIST['motorsport'] = 0;
SPORT_SCORE_PART_LIST['motorsport-auto-racing'] = 0;
SPORT_SCORE_PART_LIST['motorsport-moto-racing'] = 0;
SPORT_SCORE_PART_LIST['cycling'] = 0;
SPORT_SCORE_PART_LIST['horse-racing'] = 0;
SPORT_SCORE_PART_LIST['esports'] = 0;
SPORT_SCORE_PART_LIST['winter-sports'] = 0;
SPORT_SCORE_PART_LIST['winter-sports-ski-jumping'] = 0;
SPORT_SCORE_PART_LIST['winter-sports-alpine-skiing'] = 0;
SPORT_SCORE_PART_LIST['winter-sports-cross-country'] = 0;
SPORT_SCORE_PART_LIST['winter-sports-biathlon'] = 0;
var SPORT_ODDS_TYPE_LIST = new Array();
SPORT_ODDS_TYPE_LIST['soccer'] = '1x2';
SPORT_ODDS_TYPE_LIST['tennis'] = '12';
SPORT_ODDS_TYPE_LIST['basketball'] = '12';
SPORT_ODDS_TYPE_LIST['hockey'] = '1x2';
SPORT_ODDS_TYPE_LIST['american-football'] = '12';
SPORT_ODDS_TYPE_LIST['baseball'] = '12';
SPORT_ODDS_TYPE_LIST['handball'] = '1x2';
SPORT_ODDS_TYPE_LIST['rugby-union'] = '1x2';
SPORT_ODDS_TYPE_LIST['floorball'] = '1x2';
SPORT_ODDS_TYPE_LIST['bandy'] = '1x2';
SPORT_ODDS_TYPE_LIST['futsal'] = '1x2';
SPORT_ODDS_TYPE_LIST['volleyball'] = '12';
SPORT_ODDS_TYPE_LIST['cricket'] = '12';
SPORT_ODDS_TYPE_LIST['darts'] = '12';
SPORT_ODDS_TYPE_LIST['snooker'] = '12';
SPORT_ODDS_TYPE_LIST['boxing'] = '1x2';
SPORT_ODDS_TYPE_LIST['beach-volleyball'] = '12';
SPORT_ODDS_TYPE_LIST['aussie-rules'] = '12';
SPORT_ODDS_TYPE_LIST['rugby-league'] = '1x2';
SPORT_ODDS_TYPE_LIST['badminton'] = '12';
SPORT_ODDS_TYPE_LIST['water-polo'] = '1x2';
SPORT_ODDS_TYPE_LIST['golf'] = '12';
SPORT_ODDS_TYPE_LIST['field-hockey'] = '1x2';
SPORT_ODDS_TYPE_LIST['table-tennis'] = '12';
SPORT_ODDS_TYPE_LIST['beach-soccer'] = '1x2';
SPORT_ODDS_TYPE_LIST['mma'] = '12';
SPORT_ODDS_TYPE_LIST['netball'] = '12';
SPORT_ODDS_TYPE_LIST['pesapallo'] = '1x2';
SPORT_ODDS_TYPE_LIST['motorsport'] = '12';
SPORT_ODDS_TYPE_LIST['motorsport-auto-racing'] = '12';
SPORT_ODDS_TYPE_LIST['motorsport-moto-racing'] = '12';
SPORT_ODDS_TYPE_LIST['cycling'] = '12';
SPORT_ODDS_TYPE_LIST['horse-racing'] = '12';
SPORT_ODDS_TYPE_LIST['esports'] = '12';
SPORT_ODDS_TYPE_LIST['winter-sports'] = '12';
SPORT_ODDS_TYPE_LIST['winter-sports-ski-jumping'] = '12';
SPORT_ODDS_TYPE_LIST['winter-sports-alpine-skiing'] = '12';
SPORT_ODDS_TYPE_LIST['winter-sports-cross-country'] = '12';
SPORT_ODDS_TYPE_LIST['winter-sports-biathlon'] = '12';
var tennis_point_by_point = true;
var ICON_LIST = new Array('info', 'tv', 'shirt');
var TXT_SPORT = new Array();
TXT_SPORT['soccer'] = new Array();
TXT_SPORT['soccer']['name'] = 'Soccer';
TXT_SPORT['soccer']['1'] = '&nbsp;';
TXT_SPORT['soccer']['45'] = 'To finish';
TXT_SPORT['soccer']['42'] = 'Awaiting<br />updates';
TXT_SPORT['soccer']['2'] = 'Live';
TXT_SPORT['soccer']['12'] = '1st Half';
TXT_SPORT['soccer']['13'] = '2nd Half';
TXT_SPORT['soccer']['6'] = 'Extra Time';
TXT_SPORT['soccer']['7'] = 'Penalties';
TXT_SPORT['soccer']['38'] = 'Half Time';
TXT_SPORT['soccer']['46'] = 'Break Time';
TXT_SPORT['soccer']['3'] = 'Finished';
TXT_SPORT['soccer']['10'] = 'After ET';
TXT_SPORT['soccer']['11'] = 'After Pen.';
TXT_SPORT['soccer']['9'] = 'Walkover';
TXT_SPORT['soccer']['43'] = 'Delayed';
TXT_SPORT['soccer']['36'] = 'Interrupted';
TXT_SPORT['soccer']['4'] = 'Postponed';
TXT_SPORT['soccer']['5'] = 'Cancelled';
TXT_SPORT['soccer']['37'] = 'Abandoned';
TXT_SPORT['soccer']['54'] = 'Awarded';
TXT_SPORT['tennis'] = new Array();
TXT_SPORT['tennis']['name'] = 'Tennis';
TXT_SPORT['tennis']['1'] = '&nbsp;';
TXT_SPORT['tennis']['45'] = 'To finish';
TXT_SPORT['tennis']['42'] = 'Awaiting<br />updates';
TXT_SPORT['tennis']['2'] = 'Live';
TXT_SPORT['tennis']['17'] = 'Set 1';
TXT_SPORT['tennis']['18'] = 'Set 2';
TXT_SPORT['tennis']['19'] = 'Set 3';
TXT_SPORT['tennis']['20'] = 'Set 4';
TXT_SPORT['tennis']['21'] = 'Set 5';
TXT_SPORT['tennis']['47'] = 'Set 1<br />Tiebreak';
TXT_SPORT['tennis']['48'] = 'Set 2<br />Tiebreak';
TXT_SPORT['tennis']['49'] = 'Set 3<br />Tiebreak';
TXT_SPORT['tennis']['50'] = 'Set 4<br />Tiebreak';
TXT_SPORT['tennis']['51'] = 'Set 5<br />Tiebreak';
TXT_SPORT['tennis']['46'] = 'Break Time';
TXT_SPORT['tennis']['3'] = 'Finished';
TXT_SPORT['tennis']['8'] = 'Finished<br />(retired)';
TXT_SPORT['tennis']['9'] = 'Walkover';
TXT_SPORT['tennis']['43'] = 'Delayed';
TXT_SPORT['tennis']['36'] = 'Interrupted';
TXT_SPORT['tennis']['4'] = 'Postponed';
TXT_SPORT['tennis']['5'] = 'Cancelled';
TXT_SPORT['tennis']['37'] = 'Abandoned';
TXT_SPORT['tennis']['54'] = 'Awarded';
TXT_SPORT['tennis']['57'] = 'After<br />day 1';
TXT_SPORT['tennis']['58'] = 'After<br />day 2';
TXT_SPORT['basketball'] = new Array();
TXT_SPORT['basketball']['name'] = 'Basketball';
TXT_SPORT['basketball']['1'] = '&nbsp;';
TXT_SPORT['basketball']['45'] = 'To finish';
TXT_SPORT['basketball']['42'] = 'Awaiting<br />updates';
TXT_SPORT['basketball']['2'] = 'Live';
TXT_SPORT['basketball']['22'] = '1st Quarter';
TXT_SPORT['basketball']['23'] = '2nd Quarter';
TXT_SPORT['basketball']['24'] = '3rd Quarter';
TXT_SPORT['basketball']['25'] = '4th Quarter';
TXT_SPORT['basketball']['6'] = 'Overtime';
TXT_SPORT['basketball']['38'] = 'Half Time';
TXT_SPORT['basketball']['46'] = 'Break Time';
TXT_SPORT['basketball']['3'] = 'Finished';
TXT_SPORT['basketball']['10'] = 'After<br />Overtime';
TXT_SPORT['basketball']['9'] = 'Walkover';
TXT_SPORT['basketball']['43'] = 'Delayed';
TXT_SPORT['basketball']['36'] = 'Interrupted';
TXT_SPORT['basketball']['4'] = 'Postponed';
TXT_SPORT['basketball']['5'] = 'Cancelled';
TXT_SPORT['basketball']['37'] = 'Abandoned';
TXT_SPORT['basketball']['54'] = 'Awarded';
TXT_SPORT['hockey'] = new Array();
TXT_SPORT['hockey']['name'] = 'Hockey';
TXT_SPORT['hockey']['1'] = '&nbsp;';
TXT_SPORT['hockey']['45'] = 'To finish';
TXT_SPORT['hockey']['42'] = 'Awaiting<br />updates';
TXT_SPORT['hockey']['2'] = 'Live';
TXT_SPORT['hockey']['14'] = '1st Period';
TXT_SPORT['hockey']['15'] = '2nd Period';
TXT_SPORT['hockey']['16'] = '3rd Period';
TXT_SPORT['hockey']['6'] = 'Overtime';
TXT_SPORT['hockey']['7'] = 'Penalties';
TXT_SPORT['hockey']['46'] = 'Break Time';
TXT_SPORT['hockey']['3'] = 'Finished';
TXT_SPORT['hockey']['10'] = 'After<br />Overtime';
TXT_SPORT['hockey']['11'] = 'After<br />Penalties';
TXT_SPORT['hockey']['9'] = 'Walkover';
TXT_SPORT['hockey']['43'] = 'Delayed';
TXT_SPORT['hockey']['36'] = 'Interrupted';
TXT_SPORT['hockey']['4'] = 'Postponed';
TXT_SPORT['hockey']['5'] = 'Cancelled';
TXT_SPORT['hockey']['37'] = 'Abandoned';
TXT_SPORT['hockey']['54'] = 'Awarded';
TXT_SPORT['american-football'] = new Array();
TXT_SPORT['american-football']['name'] = 'American football';
TXT_SPORT['american-football']['1'] = '&nbsp;';
TXT_SPORT['american-football']['45'] = 'To finish';
TXT_SPORT['american-football']['42'] = 'Awaiting<br />updates';
TXT_SPORT['american-football']['2'] = 'Live';
TXT_SPORT['american-football']['22'] = '1st Quarter';
TXT_SPORT['american-football']['23'] = '2nd Quarter';
TXT_SPORT['american-football']['24'] = '3rd Quarter';
TXT_SPORT['american-football']['25'] = '4th Quarter';
TXT_SPORT['american-football']['6'] = 'Overtime';
TXT_SPORT['american-football']['38'] = 'Half Time';
TXT_SPORT['american-football']['46'] = 'Break Time';
TXT_SPORT['american-football']['3'] = 'Finished';
TXT_SPORT['american-football']['10'] = 'After<br />Overtime';
TXT_SPORT['american-football']['9'] = 'Walkover';
TXT_SPORT['american-football']['43'] = 'Delayed';
TXT_SPORT['american-football']['36'] = 'Interrupted';
TXT_SPORT['american-football']['4'] = 'Postponed';
TXT_SPORT['american-football']['5'] = 'Cancelled';
TXT_SPORT['american-football']['37'] = 'Abandoned';
TXT_SPORT['american-football']['54'] = 'Awarded';
TXT_SPORT['baseball'] = new Array();
TXT_SPORT['baseball']['name'] = 'Baseball';
TXT_SPORT['baseball']['1'] = '&nbsp;';
TXT_SPORT['baseball']['45'] = 'To finish';
TXT_SPORT['baseball']['42'] = 'Awaiting<br />updates';
TXT_SPORT['baseball']['2'] = 'Live';
TXT_SPORT['baseball']['26'] = '1st Inning';
TXT_SPORT['baseball']['27'] = '2nd Inning';
TXT_SPORT['baseball']['28'] = '3rd Inning';
TXT_SPORT['baseball']['29'] = '4th Inning';
TXT_SPORT['baseball']['30'] = '5th Inning';
TXT_SPORT['baseball']['31'] = '6th Inning';
TXT_SPORT['baseball']['32'] = '7th Inning';
TXT_SPORT['baseball']['33'] = '8th Inning';
TXT_SPORT['baseball']['34'] = '9th Inning';
TXT_SPORT['baseball']['35'] = 'Extra<br />Inning';
TXT_SPORT['baseball']['46'] = 'Break Time';
TXT_SPORT['baseball']['3'] = 'Finished';
TXT_SPORT['baseball']['9'] = 'Walkover';
TXT_SPORT['baseball']['43'] = 'Delayed';
TXT_SPORT['baseball']['36'] = 'Interrupted';
TXT_SPORT['baseball']['4'] = 'Postponed';
TXT_SPORT['baseball']['5'] = 'Cancelled';
TXT_SPORT['baseball']['37'] = 'Abandoned';
TXT_SPORT['baseball']['54'] = 'Awarded';
TXT_SPORT['handball'] = new Array();
TXT_SPORT['handball']['name'] = 'Handball';
TXT_SPORT['handball']['1'] = '&nbsp;';
TXT_SPORT['handball']['45'] = 'To finish';
TXT_SPORT['handball']['42'] = 'Awaiting<br />updates';
TXT_SPORT['handball']['2'] = 'Live';
TXT_SPORT['handball']['12'] = '1st Half';
TXT_SPORT['handball']['38'] = 'Half Time';
TXT_SPORT['handball']['13'] = '2nd Half';
TXT_SPORT['handball']['6'] = 'Extra Time';
TXT_SPORT['handball']['7'] = 'Penalties';
TXT_SPORT['handball']['46'] = 'Break Time';
TXT_SPORT['handball']['3'] = 'Finished';
TXT_SPORT['handball']['10'] = 'After ET';
TXT_SPORT['handball']['11'] = 'After<br />Penalties';
TXT_SPORT['handball']['9'] = 'Walkover';
TXT_SPORT['handball']['43'] = 'Delayed';
TXT_SPORT['handball']['36'] = 'Interrupted';
TXT_SPORT['handball']['4'] = 'Postponed';
TXT_SPORT['handball']['5'] = 'Cancelled';
TXT_SPORT['handball']['37'] = 'Abandoned';
TXT_SPORT['handball']['54'] = 'Awarded';
TXT_SPORT['rugby-union'] = new Array();
TXT_SPORT['rugby-union']['name'] = 'Rugby Union';
TXT_SPORT['rugby-union']['1'] = '&nbsp;';
TXT_SPORT['rugby-union']['45'] = 'To finish';
TXT_SPORT['rugby-union']['42'] = 'Awaiting<br />updates';
TXT_SPORT['rugby-union']['2'] = 'Live';
TXT_SPORT['rugby-union']['12'] = '1st Half';
TXT_SPORT['rugby-union']['38'] = 'Half Time';
TXT_SPORT['rugby-union']['13'] = '2nd Half';
TXT_SPORT['rugby-union']['6'] = 'Extra Time';
TXT_SPORT['rugby-union']['7'] = 'Penalties';
TXT_SPORT['rugby-union']['46'] = 'Break Time';
TXT_SPORT['rugby-union']['3'] = 'Finished';
TXT_SPORT['rugby-union']['10'] = 'After ET';
TXT_SPORT['rugby-union']['11'] = 'After<br />Penalties';
TXT_SPORT['rugby-union']['9'] = 'Walkover';
TXT_SPORT['rugby-union']['43'] = 'Delayed';
TXT_SPORT['rugby-union']['36'] = 'Interrupted';
TXT_SPORT['rugby-union']['4'] = 'Postponed';
TXT_SPORT['rugby-union']['5'] = 'Cancelled';
TXT_SPORT['rugby-union']['37'] = 'Abandoned';
TXT_SPORT['rugby-union']['54'] = 'Awarded';
TXT_SPORT['floorball'] = new Array();
TXT_SPORT['floorball']['name'] = 'Floorball';
TXT_SPORT['floorball']['1'] = '&nbsp;';
TXT_SPORT['floorball']['45'] = 'To finish';
TXT_SPORT['floorball']['42'] = 'Awaiting<br />updates';
TXT_SPORT['floorball']['2'] = 'Live';
TXT_SPORT['floorball']['14'] = '1st Period';
TXT_SPORT['floorball']['15'] = '2nd Period';
TXT_SPORT['floorball']['16'] = '3rd Period';
TXT_SPORT['floorball']['6'] = 'Overtime';
TXT_SPORT['floorball']['7'] = 'Penalties';
TXT_SPORT['floorball']['46'] = 'Break Time';
TXT_SPORT['floorball']['3'] = 'Finished';
TXT_SPORT['floorball']['10'] = 'After<br />Overtime';
TXT_SPORT['floorball']['11'] = 'After<br />Penalties';
TXT_SPORT['floorball']['9'] = 'Walkover';
TXT_SPORT['floorball']['43'] = 'Delayed';
TXT_SPORT['floorball']['36'] = 'Interrupted';
TXT_SPORT['floorball']['4'] = 'Postponed';
TXT_SPORT['floorball']['5'] = 'Cancelled';
TXT_SPORT['floorball']['37'] = 'Abandoned';
TXT_SPORT['floorball']['54'] = 'Awarded';
TXT_SPORT['bandy'] = new Array();
TXT_SPORT['bandy']['name'] = 'Bandy';
TXT_SPORT['bandy']['1'] = '&nbsp;';
TXT_SPORT['bandy']['45'] = 'To finish';
TXT_SPORT['bandy']['42'] = 'Awaiting<br />updates';
TXT_SPORT['bandy']['2'] = 'Live';
TXT_SPORT['bandy']['12'] = '1st Half';
TXT_SPORT['bandy']['38'] = 'Half Time';
TXT_SPORT['bandy']['13'] = '2nd Half';
TXT_SPORT['bandy']['6'] = 'Extra Time';
TXT_SPORT['bandy']['7'] = 'Penalties';
TXT_SPORT['bandy']['46'] = 'Break Time';
TXT_SPORT['bandy']['3'] = 'Finished';
TXT_SPORT['bandy']['10'] = 'After<br />Overtime';
TXT_SPORT['bandy']['11'] = 'After<br />Penalties';
TXT_SPORT['bandy']['9'] = 'Walkover';
TXT_SPORT['bandy']['43'] = 'Delayed';
TXT_SPORT['bandy']['36'] = 'Interrupted';
TXT_SPORT['bandy']['4'] = 'Postponed';
TXT_SPORT['bandy']['5'] = 'Cancelled';
TXT_SPORT['bandy']['37'] = 'Abandoned';
TXT_SPORT['bandy']['54'] = 'Awarded';
TXT_SPORT['futsal'] = new Array();
TXT_SPORT['futsal']['name'] = 'Futsal';
TXT_SPORT['futsal']['1'] = '&nbsp;';
TXT_SPORT['futsal']['45'] = 'To finish';
TXT_SPORT['futsal']['42'] = 'Awaiting<br />updates';
TXT_SPORT['futsal']['2'] = 'Live';
TXT_SPORT['futsal']['12'] = '1st Half';
TXT_SPORT['futsal']['38'] = 'Half Time';
TXT_SPORT['futsal']['13'] = '2nd Half';
TXT_SPORT['futsal']['6'] = 'Extra Time';
TXT_SPORT['futsal']['7'] = 'Penalties';
TXT_SPORT['futsal']['46'] = 'Break Time';
TXT_SPORT['futsal']['3'] = 'Finished';
TXT_SPORT['futsal']['10'] = 'After ET';
TXT_SPORT['futsal']['11'] = 'After Pen.';
TXT_SPORT['futsal']['9'] = 'Walkover';
TXT_SPORT['futsal']['43'] = 'Delayed';
TXT_SPORT['futsal']['36'] = 'Interrupted';
TXT_SPORT['futsal']['4'] = 'Postponed';
TXT_SPORT['futsal']['5'] = 'Cancelled';
TXT_SPORT['futsal']['37'] = 'Abandoned';
TXT_SPORT['futsal']['54'] = 'Awarded';
TXT_SPORT['volleyball'] = new Array();
TXT_SPORT['volleyball']['name'] = 'Volleyball';
TXT_SPORT['volleyball']['1'] = '&nbsp;';
TXT_SPORT['volleyball']['45'] = 'To finish';
TXT_SPORT['volleyball']['42'] = 'Awaiting<br />updates';
TXT_SPORT['volleyball']['2'] = 'Live';
TXT_SPORT['volleyball']['17'] = 'Set 1';
TXT_SPORT['volleyball']['18'] = 'Set 2';
TXT_SPORT['volleyball']['19'] = 'Set 3';
TXT_SPORT['volleyball']['20'] = 'Set 4';
TXT_SPORT['volleyball']['21'] = 'Set 5';
TXT_SPORT['volleyball']['55'] = 'Set 6';
TXT_SPORT['volleyball']['56'] = 'Set 7';
TXT_SPORT['volleyball']['46'] = 'Break Time';
TXT_SPORT['volleyball']['3'] = 'Finished';
TXT_SPORT['volleyball']['9'] = 'Walkover';
TXT_SPORT['volleyball']['43'] = 'Delayed';
TXT_SPORT['volleyball']['36'] = 'Interrupted';
TXT_SPORT['volleyball']['4'] = 'Postponed';
TXT_SPORT['volleyball']['5'] = 'Cancelled';
TXT_SPORT['volleyball']['37'] = 'Abandoned';
TXT_SPORT['volleyball']['54'] = 'Awarded';
TXT_SPORT['cricket'] = new Array();
TXT_SPORT['cricket']['name'] = 'Cricket';
TXT_SPORT['cricket']['1'] = '&nbsp;';
TXT_SPORT['cricket']['45'] = 'To finish';
TXT_SPORT['cricket']['42'] = 'Awaiting<br />updates';
TXT_SPORT['cricket']['2'] = 'Live';
TXT_SPORT['cricket']['26'] = '1st Inning';
TXT_SPORT['cricket']['27'] = '2nd Inning';
TXT_SPORT['cricket']['57'] = 'After<br />day 1';
TXT_SPORT['cricket']['58'] = 'After<br />day 2';
TXT_SPORT['cricket']['59'] = 'After<br />day 3';
TXT_SPORT['cricket']['60'] = 'After<br />day 4';
TXT_SPORT['cricket']['61'] = 'After<br />day 5';
TXT_SPORT['cricket']['46'] = 'Break Time';
TXT_SPORT['cricket']['3'] = 'Finished';
TXT_SPORT['cricket']['9'] = 'Walkover';
TXT_SPORT['cricket']['43'] = 'Delayed';
TXT_SPORT['cricket']['36'] = 'Interrupted';
TXT_SPORT['cricket']['4'] = 'Postponed';
TXT_SPORT['cricket']['5'] = 'Cancelled';
TXT_SPORT['cricket']['37'] = 'Abandoned';
TXT_SPORT['cricket']['54'] = 'Awarded';
TXT_SPORT['darts'] = new Array();
TXT_SPORT['darts']['name'] = 'Darts';
TXT_SPORT['darts']['1'] = '&nbsp;';
TXT_SPORT['darts']['45'] = 'To finish';
TXT_SPORT['darts']['42'] = 'Awaiting<br />updates';
TXT_SPORT['darts']['2'] = 'Live';
TXT_SPORT['darts']['46'] = 'Break Time';
TXT_SPORT['darts']['3'] = 'Finished';
TXT_SPORT['darts']['9'] = 'Walkover';
TXT_SPORT['darts']['43'] = 'Delayed';
TXT_SPORT['darts']['36'] = 'Interrupted';
TXT_SPORT['darts']['4'] = 'Postponed';
TXT_SPORT['darts']['5'] = 'Cancelled';
TXT_SPORT['darts']['37'] = 'Abandoned';
TXT_SPORT['darts']['54'] = 'Awarded';
TXT_SPORT['snooker'] = new Array();
TXT_SPORT['snooker']['name'] = 'Snooker';
TXT_SPORT['snooker']['1'] = '&nbsp;';
TXT_SPORT['snooker']['45'] = 'To finish';
TXT_SPORT['snooker']['42'] = 'Awaiting<br />updates';
TXT_SPORT['snooker']['2'] = 'Live';
TXT_SPORT['snooker']['46'] = 'Break Time';
TXT_SPORT['snooker']['3'] = 'Finished';
TXT_SPORT['snooker']['9'] = 'Walkover';
TXT_SPORT['snooker']['43'] = 'Delayed';
TXT_SPORT['snooker']['36'] = 'Interrupted';
TXT_SPORT['snooker']['4'] = 'Postponed';
TXT_SPORT['snooker']['5'] = 'Cancelled';
TXT_SPORT['snooker']['37'] = 'Abandoned';
TXT_SPORT['snooker']['54'] = 'Awarded';
TXT_SPORT['boxing'] = new Array();
TXT_SPORT['boxing']['name'] = 'Boxing';
TXT_SPORT['boxing']['1'] = '&nbsp;';
TXT_SPORT['boxing']['45'] = 'To finish';
TXT_SPORT['boxing']['42'] = 'Awaiting<br />updates';
TXT_SPORT['boxing']['2'] = 'Live';
TXT_SPORT['boxing']['46'] = 'Break Time';
TXT_SPORT['boxing']['3'] = 'Finished';
TXT_SPORT['boxing']['9'] = 'Walkover';
TXT_SPORT['boxing']['43'] = 'Delayed';
TXT_SPORT['boxing']['36'] = 'Interrupted';
TXT_SPORT['boxing']['4'] = 'Postponed';
TXT_SPORT['boxing']['5'] = 'Cancelled';
TXT_SPORT['boxing']['37'] = 'Abandoned';
TXT_SPORT['boxing']['54'] = 'Awarded';
TXT_SPORT['beach-volleyball'] = new Array();
TXT_SPORT['beach-volleyball']['name'] = 'Beach volleyball';
TXT_SPORT['beach-volleyball']['1'] = '&nbsp;';
TXT_SPORT['beach-volleyball']['45'] = 'To finish';
TXT_SPORT['beach-volleyball']['42'] = 'Awaiting<br />updates';
TXT_SPORT['beach-volleyball']['2'] = 'Live';
TXT_SPORT['beach-volleyball']['17'] = 'Set 1';
TXT_SPORT['beach-volleyball']['18'] = 'Set 2';
TXT_SPORT['beach-volleyball']['19'] = 'Set 3';
TXT_SPORT['beach-volleyball']['20'] = 'Set 4';
TXT_SPORT['beach-volleyball']['21'] = 'Set 5';
TXT_SPORT['beach-volleyball']['46'] = 'Break Time';
TXT_SPORT['beach-volleyball']['3'] = 'Finished';
TXT_SPORT['beach-volleyball']['8'] = 'Finished<br />(retired)';
TXT_SPORT['beach-volleyball']['9'] = 'Walkover';
TXT_SPORT['beach-volleyball']['43'] = 'Delayed';
TXT_SPORT['beach-volleyball']['36'] = 'Interrupted';
TXT_SPORT['beach-volleyball']['4'] = 'Postponed';
TXT_SPORT['beach-volleyball']['5'] = 'Cancelled';
TXT_SPORT['beach-volleyball']['37'] = 'Abandoned';
TXT_SPORT['beach-volleyball']['54'] = 'Awarded';
TXT_SPORT['aussie-rules'] = new Array();
TXT_SPORT['aussie-rules']['name'] = 'Aussie rules';
TXT_SPORT['aussie-rules']['1'] = '&nbsp;';
TXT_SPORT['aussie-rules']['45'] = 'To finish';
TXT_SPORT['aussie-rules']['42'] = 'Awaiting<br />updates';
TXT_SPORT['aussie-rules']['2'] = 'Live';
TXT_SPORT['aussie-rules']['22'] = '1st Quarter';
TXT_SPORT['aussie-rules']['23'] = '2nd Quarter';
TXT_SPORT['aussie-rules']['24'] = '3rd Quarter';
TXT_SPORT['aussie-rules']['25'] = '4th Quarter';
TXT_SPORT['aussie-rules']['6'] = 'Overtime';
TXT_SPORT['aussie-rules']['38'] = 'Half Time';
TXT_SPORT['aussie-rules']['46'] = 'Break Time';
TXT_SPORT['aussie-rules']['3'] = 'Finished';
TXT_SPORT['aussie-rules']['10'] = 'After<br />Overtime';
TXT_SPORT['aussie-rules']['9'] = 'Walkover';
TXT_SPORT['aussie-rules']['43'] = 'Delayed';
TXT_SPORT['aussie-rules']['36'] = 'Interrupted';
TXT_SPORT['aussie-rules']['4'] = 'Postponed';
TXT_SPORT['aussie-rules']['5'] = 'Cancelled';
TXT_SPORT['aussie-rules']['37'] = 'Abandoned';
TXT_SPORT['aussie-rules']['54'] = 'Awarded';
TXT_SPORT['rugby-league'] = new Array();
TXT_SPORT['rugby-league']['name'] = 'Rugby League';
TXT_SPORT['rugby-league']['1'] = '&nbsp;';
TXT_SPORT['rugby-league']['45'] = 'To finish';
TXT_SPORT['rugby-league']['42'] = 'Awaiting<br />updates';
TXT_SPORT['rugby-league']['2'] = 'Live';
TXT_SPORT['rugby-league']['12'] = '1st Half';
TXT_SPORT['rugby-league']['38'] = 'Half Time';
TXT_SPORT['rugby-league']['13'] = '2nd Half';
TXT_SPORT['rugby-league']['6'] = 'Extra Time';
TXT_SPORT['rugby-league']['7'] = 'Penalties';
TXT_SPORT['rugby-league']['46'] = 'Break Time';
TXT_SPORT['rugby-league']['3'] = 'Finished';
TXT_SPORT['rugby-league']['10'] = 'After ET';
TXT_SPORT['rugby-league']['11'] = 'After<br />Penalties';
TXT_SPORT['rugby-league']['9'] = 'Walkover';
TXT_SPORT['rugby-league']['43'] = 'Delayed';
TXT_SPORT['rugby-league']['36'] = 'Interrupted';
TXT_SPORT['rugby-league']['4'] = 'Postponed';
TXT_SPORT['rugby-league']['5'] = 'Cancelled';
TXT_SPORT['rugby-league']['37'] = 'Abandoned';
TXT_SPORT['rugby-league']['54'] = 'Awarded';
TXT_SPORT['badminton'] = new Array();
TXT_SPORT['badminton']['name'] = 'Badminton';
TXT_SPORT['badminton']['1'] = '&nbsp;';
TXT_SPORT['badminton']['45'] = 'To finish';
TXT_SPORT['badminton']['42'] = 'Awaiting<br />updates';
TXT_SPORT['badminton']['2'] = 'Live';
TXT_SPORT['badminton']['17'] = 'Set 1';
TXT_SPORT['badminton']['18'] = 'Set 2';
TXT_SPORT['badminton']['19'] = 'Set 3';
TXT_SPORT['badminton']['46'] = 'Break Time';
TXT_SPORT['badminton']['3'] = 'Finished';
TXT_SPORT['badminton']['8'] = 'Finished<br />(retired)';
TXT_SPORT['badminton']['9'] = 'Walkover';
TXT_SPORT['badminton']['43'] = 'Delayed';
TXT_SPORT['badminton']['36'] = 'Interrupted';
TXT_SPORT['badminton']['4'] = 'Postponed';
TXT_SPORT['badminton']['5'] = 'Cancelled';
TXT_SPORT['badminton']['37'] = 'Abandoned';
TXT_SPORT['badminton']['54'] = 'Awarded';
TXT_SPORT['water-polo'] = new Array();
TXT_SPORT['water-polo']['name'] = 'Water polo';
TXT_SPORT['water-polo']['1'] = '&nbsp;';
TXT_SPORT['water-polo']['45'] = 'To finish';
TXT_SPORT['water-polo']['42'] = 'Awaiting<br />updates';
TXT_SPORT['water-polo']['2'] = 'Live';
TXT_SPORT['water-polo']['22'] = '1st Quarter';
TXT_SPORT['water-polo']['23'] = '2nd Quarter';
TXT_SPORT['water-polo']['24'] = '3rd Quarter';
TXT_SPORT['water-polo']['25'] = '4th Quarter';
TXT_SPORT['water-polo']['6'] = 'Extra Time';
TXT_SPORT['water-polo']['7'] = 'Penalties';
TXT_SPORT['water-polo']['38'] = 'Half Time';
TXT_SPORT['water-polo']['46'] = 'Break Time';
TXT_SPORT['water-polo']['3'] = 'Finished';
TXT_SPORT['water-polo']['10'] = 'After ET';
TXT_SPORT['water-polo']['11'] = 'After<br />Penalties';
TXT_SPORT['water-polo']['9'] = 'Walkover';
TXT_SPORT['water-polo']['43'] = 'Delayed';
TXT_SPORT['water-polo']['36'] = 'Interrupted';
TXT_SPORT['water-polo']['4'] = 'Postponed';
TXT_SPORT['water-polo']['5'] = 'Cancelled';
TXT_SPORT['water-polo']['37'] = 'Abandoned';
TXT_SPORT['water-polo']['54'] = 'Awarded';
TXT_SPORT['golf'] = new Array();
TXT_SPORT['golf']['name'] = 'Golf';
TXT_SPORT['golf']['1'] = '&nbsp;';
TXT_SPORT['golf']['45'] = 'To finish';
TXT_SPORT['golf']['42'] = 'Awaiting<br />updates';
TXT_SPORT['golf']['2'] = 'Live';
TXT_SPORT['golf']['65'] = 'Round 1';
TXT_SPORT['golf']['66'] = 'Round 2';
TXT_SPORT['golf']['67'] = 'Round 3';
TXT_SPORT['golf']['68'] = 'Round 4';
TXT_SPORT['golf']['62'] = 'After<br />round 1';
TXT_SPORT['golf']['63'] = 'After<br />round 2';
TXT_SPORT['golf']['64'] = 'After<br />round 3';
TXT_SPORT['golf']['46'] = 'Break Time';
TXT_SPORT['golf']['3'] = 'Finished';
TXT_SPORT['golf']['8'] = 'Finished<br />(retired)';
TXT_SPORT['golf']['9'] = 'Walkover';
TXT_SPORT['golf']['43'] = 'Delayed';
TXT_SPORT['golf']['36'] = 'Interrupted';
TXT_SPORT['golf']['4'] = 'Postponed';
TXT_SPORT['golf']['5'] = 'Cancelled';
TXT_SPORT['golf']['37'] = 'Abandoned';
TXT_SPORT['golf']['54'] = 'Awarded';
TXT_SPORT['field-hockey'] = new Array();
TXT_SPORT['field-hockey']['name'] = 'Field hockey';
TXT_SPORT['field-hockey']['1'] = '&nbsp;';
TXT_SPORT['field-hockey']['45'] = 'To finish';
TXT_SPORT['field-hockey']['42'] = 'Awaiting<br />updates';
TXT_SPORT['field-hockey']['2'] = 'Live';
TXT_SPORT['field-hockey']['12'] = '1st Half';
TXT_SPORT['field-hockey']['38'] = 'Half Time';
TXT_SPORT['field-hockey']['13'] = '2nd Half';
TXT_SPORT['field-hockey']['6'] = 'Overtime';
TXT_SPORT['field-hockey']['7'] = 'Penalties';
TXT_SPORT['field-hockey']['46'] = 'Break Time';
TXT_SPORT['field-hockey']['3'] = 'Finished';
TXT_SPORT['field-hockey']['10'] = 'After<br />Overtime';
TXT_SPORT['field-hockey']['11'] = 'After<br />Penalties';
TXT_SPORT['field-hockey']['9'] = 'Walkover';
TXT_SPORT['field-hockey']['43'] = 'Delayed';
TXT_SPORT['field-hockey']['36'] = 'Interrupted';
TXT_SPORT['field-hockey']['4'] = 'Postponed';
TXT_SPORT['field-hockey']['5'] = 'Cancelled';
TXT_SPORT['field-hockey']['37'] = 'Abandoned';
TXT_SPORT['field-hockey']['54'] = 'Awarded';
TXT_SPORT['table-tennis'] = new Array();
TXT_SPORT['table-tennis']['name'] = 'Table tennis';
TXT_SPORT['table-tennis']['1'] = '&nbsp;';
TXT_SPORT['table-tennis']['45'] = 'To finish';
TXT_SPORT['table-tennis']['42'] = 'Awaiting<br />updates';
TXT_SPORT['table-tennis']['2'] = 'Live';
TXT_SPORT['table-tennis']['17'] = 'Set 1';
TXT_SPORT['table-tennis']['18'] = 'Set 2';
TXT_SPORT['table-tennis']['19'] = 'Set 3';
TXT_SPORT['table-tennis']['20'] = 'Set 4';
TXT_SPORT['table-tennis']['21'] = 'Set 5';
TXT_SPORT['table-tennis']['46'] = 'Break Time';
TXT_SPORT['table-tennis']['3'] = 'Finished';
TXT_SPORT['table-tennis']['8'] = 'Finished<br />(retired)';
TXT_SPORT['table-tennis']['9'] = 'Walkover';
TXT_SPORT['table-tennis']['43'] = 'Delayed';
TXT_SPORT['table-tennis']['36'] = 'Interrupted';
TXT_SPORT['table-tennis']['4'] = 'Postponed';
TXT_SPORT['table-tennis']['5'] = 'Cancelled';
TXT_SPORT['table-tennis']['37'] = 'Abandoned';
TXT_SPORT['table-tennis']['54'] = 'Awarded';
TXT_SPORT['beach-soccer'] = new Array();
TXT_SPORT['beach-soccer']['name'] = 'Beach soccer';
TXT_SPORT['beach-soccer']['1'] = '&nbsp;';
TXT_SPORT['beach-soccer']['45'] = 'To finish';
TXT_SPORT['beach-soccer']['42'] = 'Awaiting<br />updates';
TXT_SPORT['beach-soccer']['2'] = 'Live';
TXT_SPORT['beach-soccer']['14'] = '1st Period';
TXT_SPORT['beach-soccer']['15'] = '2nd Period';
TXT_SPORT['beach-soccer']['16'] = '3rd Period';
TXT_SPORT['beach-soccer']['6'] = 'Extra Time';
TXT_SPORT['beach-soccer']['7'] = 'Penalties';
TXT_SPORT['beach-soccer']['46'] = 'Break Time';
TXT_SPORT['beach-soccer']['3'] = 'Finished';
TXT_SPORT['beach-soccer']['10'] = 'After ET';
TXT_SPORT['beach-soccer']['11'] = 'After Pen.';
TXT_SPORT['beach-soccer']['9'] = 'Walkover';
TXT_SPORT['beach-soccer']['43'] = 'Delayed';
TXT_SPORT['beach-soccer']['36'] = 'Interrupted';
TXT_SPORT['beach-soccer']['4'] = 'Postponed';
TXT_SPORT['beach-soccer']['5'] = 'Cancelled';
TXT_SPORT['beach-soccer']['37'] = 'Abandoned';
TXT_SPORT['beach-soccer']['54'] = 'Awarded';
TXT_SPORT['mma'] = new Array();
TXT_SPORT['mma']['name'] = 'MMA';
TXT_SPORT['mma']['1'] = '&nbsp;';
TXT_SPORT['mma']['45'] = 'To finish';
TXT_SPORT['mma']['42'] = 'Awaiting<br />updates';
TXT_SPORT['mma']['2'] = 'Live';
TXT_SPORT['mma']['46'] = 'Break Time';
TXT_SPORT['mma']['3'] = 'Finished';
TXT_SPORT['mma']['9'] = 'Walkover';
TXT_SPORT['mma']['43'] = 'Delayed';
TXT_SPORT['mma']['36'] = 'Interrupted';
TXT_SPORT['mma']['4'] = 'Postponed';
TXT_SPORT['mma']['5'] = 'Cancelled';
TXT_SPORT['mma']['37'] = 'Abandoned';
TXT_SPORT['mma']['54'] = 'Awarded';
TXT_SPORT['netball'] = new Array();
TXT_SPORT['netball']['name'] = 'Netball';
TXT_SPORT['netball']['1'] = '&nbsp;';
TXT_SPORT['netball']['45'] = 'To finish';
TXT_SPORT['netball']['42'] = 'Awaiting<br />updates';
TXT_SPORT['netball']['2'] = 'Live';
TXT_SPORT['netball']['22'] = '1st Quarter';
TXT_SPORT['netball']['23'] = '2nd Quarter';
TXT_SPORT['netball']['24'] = '3rd Quarter';
TXT_SPORT['netball']['25'] = '4th Quarter';
TXT_SPORT['netball']['6'] = 'Overtime';
TXT_SPORT['netball']['38'] = 'Half Time';
TXT_SPORT['netball']['46'] = 'Break Time';
TXT_SPORT['netball']['3'] = 'Finished';
TXT_SPORT['netball']['10'] = 'After<br />Overtime';
TXT_SPORT['netball']['9'] = 'Walkover';
TXT_SPORT['netball']['43'] = 'Delayed';
TXT_SPORT['netball']['36'] = 'Interrupted';
TXT_SPORT['netball']['4'] = 'Postponed';
TXT_SPORT['netball']['5'] = 'Cancelled';
TXT_SPORT['netball']['37'] = 'Abandoned';
TXT_SPORT['netball']['54'] = 'Awarded';
TXT_SPORT['pesapallo'] = new Array();
TXT_SPORT['pesapallo']['name'] = 'Pesäpallo';
TXT_SPORT['pesapallo']['1'] = '&nbsp;';
TXT_SPORT['pesapallo']['45'] = 'To finish';
TXT_SPORT['pesapallo']['42'] = 'Awaiting<br />updates';
TXT_SPORT['pesapallo']['2'] = 'Live';
TXT_SPORT['pesapallo']['26'] = '1st Inning';
TXT_SPORT['pesapallo']['27'] = '2nd Inning';
TXT_SPORT['pesapallo']['28'] = '3rd Inning';
TXT_SPORT['pesapallo']['29'] = '4th Inning';
TXT_SPORT['pesapallo']['30'] = '5th Inning';
TXT_SPORT['pesapallo']['31'] = '6th Inning';
TXT_SPORT['pesapallo']['32'] = '7th Inning';
TXT_SPORT['pesapallo']['33'] = '8th Inning';
TXT_SPORT['pesapallo']['35'] = 'Extra<br />Inning';
TXT_SPORT['pesapallo']['7'] = 'Penalties';
TXT_SPORT['pesapallo']['46'] = 'Break Time';
TXT_SPORT['pesapallo']['3'] = 'Finished';
TXT_SPORT['pesapallo']['69'] = 'After<br />EI';
TXT_SPORT['pesapallo']['11'] = 'After<br />Penalties';
TXT_SPORT['pesapallo']['9'] = 'Walkover';
TXT_SPORT['pesapallo']['43'] = 'Delayed';
TXT_SPORT['pesapallo']['36'] = 'Interrupted';
TXT_SPORT['pesapallo']['4'] = 'Postponed';
TXT_SPORT['pesapallo']['5'] = 'Cancelled';
TXT_SPORT['pesapallo']['37'] = 'Abandoned';
TXT_SPORT['pesapallo']['54'] = 'Awarded';
TXT_SPORT['motorsport'] = new Array();
TXT_SPORT['motorsport']['name'] = 'Motorsport';
TXT_SPORT['motorsport-auto-racing'] = new Array();
TXT_SPORT['motorsport-auto-racing']['name'] = 'Auto Racing';
TXT_SPORT['motorsport-auto-racing']['1'] = '&nbsp;';
TXT_SPORT['motorsport-auto-racing']['2'] = 'Live';
TXT_SPORT['motorsport-auto-racing']['3'] = 'Finished';
TXT_SPORT['motorsport-auto-racing']['4'] = 'Postponed';
TXT_SPORT['motorsport-auto-racing']['5'] = 'Cancelled';
TXT_SPORT['motorsport-auto-racing']['36'] = 'Interrupted';
TXT_SPORT['motorsport-auto-racing']['37'] = 'Abandoned';
TXT_SPORT['motorsport-auto-racing']['42'] = 'Awaiting<br />updates';
TXT_SPORT['motorsport-auto-racing']['43'] = 'Delayed';
TXT_SPORT['motorsport-moto-racing'] = new Array();
TXT_SPORT['motorsport-moto-racing']['name'] = 'Moto Racing';
TXT_SPORT['motorsport-moto-racing']['1'] = '&nbsp;';
TXT_SPORT['motorsport-moto-racing']['2'] = 'Live';
TXT_SPORT['motorsport-moto-racing']['3'] = 'Finished';
TXT_SPORT['motorsport-moto-racing']['4'] = 'Postponed';
TXT_SPORT['motorsport-moto-racing']['5'] = 'Cancelled';
TXT_SPORT['motorsport-moto-racing']['36'] = 'Interrupted';
TXT_SPORT['motorsport-moto-racing']['37'] = 'Abandoned';
TXT_SPORT['motorsport-moto-racing']['42'] = 'Awaiting<br />updates';
TXT_SPORT['motorsport-moto-racing']['43'] = 'Delayed';
TXT_SPORT['cycling'] = new Array();
TXT_SPORT['cycling']['name'] = 'Cycling';
TXT_SPORT['cycling']['1'] = '&nbsp;';
TXT_SPORT['cycling']['2'] = 'Live';
TXT_SPORT['cycling']['3'] = 'Finished';
TXT_SPORT['cycling']['4'] = 'Postponed';
TXT_SPORT['cycling']['5'] = 'Cancelled';
TXT_SPORT['cycling']['36'] = 'Interrupted';
TXT_SPORT['cycling']['37'] = 'Abandoned';
TXT_SPORT['cycling']['42'] = 'Awaiting<br />updates';
TXT_SPORT['cycling']['43'] = 'Delayed';
TXT_SPORT['horse-racing'] = new Array();
TXT_SPORT['horse-racing']['name'] = 'Horse racing';
TXT_SPORT['horse-racing']['1'] = '&nbsp;';
TXT_SPORT['horse-racing']['2'] = 'Live';
TXT_SPORT['horse-racing']['3'] = 'Finished';
TXT_SPORT['horse-racing']['4'] = 'Postponed';
TXT_SPORT['horse-racing']['5'] = 'Cancelled';
TXT_SPORT['horse-racing']['36'] = 'Interrupted';
TXT_SPORT['horse-racing']['37'] = 'Abandoned';
TXT_SPORT['horse-racing']['42'] = 'Awaiting<br />updates';
TXT_SPORT['horse-racing']['43'] = 'Delayed';
TXT_SPORT['esports'] = new Array();
TXT_SPORT['esports']['name'] = 'eSports';
TXT_SPORT['esports']['1'] = '&nbsp;';
TXT_SPORT['esports']['2'] = 'Live';
TXT_SPORT['esports']['3'] = 'Finished';
TXT_SPORT['esports']['4'] = 'Postponed';
TXT_SPORT['esports']['5'] = 'Cancelled';
TXT_SPORT['esports']['36'] = 'Interrupted';
TXT_SPORT['esports']['37'] = 'Abandoned';
TXT_SPORT['esports']['42'] = 'Awaiting<br />updates';
TXT_SPORT['esports']['43'] = 'Delayed';
TXT_SPORT['esports']['54'] = 'Awarded';
TXT_SPORT['winter-sports'] = new Array();
TXT_SPORT['winter-sports']['name'] = 'Winter Sports';
TXT_SPORT['winter-sports-ski-jumping'] = new Array();
TXT_SPORT['winter-sports-ski-jumping']['name'] = 'Ski Jumping';
TXT_SPORT['winter-sports-ski-jumping']['1'] = '&nbsp;';
TXT_SPORT['winter-sports-ski-jumping']['2'] = 'Live';
TXT_SPORT['winter-sports-ski-jumping']['3'] = 'Finished';
TXT_SPORT['winter-sports-ski-jumping']['4'] = 'Postponed';
TXT_SPORT['winter-sports-ski-jumping']['5'] = 'Cancelled';
TXT_SPORT['winter-sports-ski-jumping']['36'] = 'Interrupted';
TXT_SPORT['winter-sports-ski-jumping']['37'] = 'Abandoned';
TXT_SPORT['winter-sports-ski-jumping']['42'] = 'Awaiting<br />updates';
TXT_SPORT['winter-sports-ski-jumping']['43'] = 'Delayed';
TXT_SPORT['winter-sports-alpine-skiing'] = new Array();
TXT_SPORT['winter-sports-alpine-skiing']['name'] = 'Alpine Skiing';
TXT_SPORT['winter-sports-alpine-skiing']['1'] = '&nbsp;';
TXT_SPORT['winter-sports-alpine-skiing']['2'] = 'Live';
TXT_SPORT['winter-sports-alpine-skiing']['3'] = 'Finished';
TXT_SPORT['winter-sports-alpine-skiing']['4'] = 'Postponed';
TXT_SPORT['winter-sports-alpine-skiing']['5'] = 'Cancelled';
TXT_SPORT['winter-sports-alpine-skiing']['36'] = 'Interrupted';
TXT_SPORT['winter-sports-alpine-skiing']['37'] = 'Abandoned';
TXT_SPORT['winter-sports-alpine-skiing']['42'] = 'Awaiting<br />updates';
TXT_SPORT['winter-sports-alpine-skiing']['43'] = 'Delayed';
TXT_SPORT['winter-sports-cross-country'] = new Array();
TXT_SPORT['winter-sports-cross-country']['name'] = 'Cross-Country Skiing';
TXT_SPORT['winter-sports-cross-country']['1'] = '&nbsp;';
TXT_SPORT['winter-sports-cross-country']['2'] = 'Live';
TXT_SPORT['winter-sports-cross-country']['3'] = 'Finished';
TXT_SPORT['winter-sports-cross-country']['4'] = 'Postponed';
TXT_SPORT['winter-sports-cross-country']['5'] = 'Cancelled';
TXT_SPORT['winter-sports-cross-country']['36'] = 'Interrupted';
TXT_SPORT['winter-sports-cross-country']['37'] = 'Abandoned';
TXT_SPORT['winter-sports-cross-country']['42'] = 'Awaiting<br />updates';
TXT_SPORT['winter-sports-cross-country']['43'] = 'Delayed';
TXT_SPORT['winter-sports-biathlon'] = new Array();
TXT_SPORT['winter-sports-biathlon']['name'] = 'Biathlon';
TXT_SPORT['winter-sports-biathlon']['1'] = '&nbsp;';
TXT_SPORT['winter-sports-biathlon']['2'] = 'Live';
TXT_SPORT['winter-sports-biathlon']['3'] = 'Finished';
TXT_SPORT['winter-sports-biathlon']['4'] = 'Postponed';
TXT_SPORT['winter-sports-biathlon']['5'] = 'Cancelled';
TXT_SPORT['winter-sports-biathlon']['36'] = 'Interrupted';
TXT_SPORT['winter-sports-biathlon']['37'] = 'Abandoned';
TXT_SPORT['winter-sports-biathlon']['42'] = 'Awaiting<br />updates';
TXT_SPORT['winter-sports-biathlon']['43'] = 'Delayed';
var TXT_LIST_LINK = cjs.Util.trans('TRANS_POWERED_BY');
var TXT_ODDS_0 = cjs.Util.trans('TRANS_ODDS_TYPE_0');
var TXT_ODDS_EVEN_SHORT = cjs.Util.trans('TRANS_ODDS_EVEN_SHORT');
var TXT_TODAY = cjs.Util.trans('TRANS_DAY_TODAY');
var TXT_CAL = new Array(cjs.Util.trans('TRANS_DAY_SHORT_SUN'), cjs.Util.trans('TRANS_DAY_SHORT_MON'), cjs.Util.trans('TRANS_DAY_SHORT_TUE'), cjs.Util.trans('TRANS_DAY_SHORT_WED'), cjs.Util.trans('TRANS_DAY_SHORT_THU'), cjs.Util.trans('TRANS_DAY_SHORT_FRI'), cjs.Util.trans('TRANS_DAY_SHORT_SAT'));
var TXT_CAL_FULL = new Array(cjs.Util.trans('TRANS_DAY_SUN'), cjs.Util.trans('TRANS_DAY_MON'), cjs.Util.trans('TRANS_DAY_TUE'), cjs.Util.trans('TRANS_DAY_WED'), cjs.Util.trans('TRANS_DAY_THU'), cjs.Util.trans('TRANS_DAY_FRI'), cjs.Util.trans('TRANS_DAY_SAT'));
var TXT_AUTH = cjs.Util.trans('TRANS_UNAUTHORIZED_WEBSITE');
var TXT_AUTH_LSIN = cjs.Util.trans('TRANS_LSIN_UNAUTHORIZED_WEBSITE') ? cjs.Util.trans('TRANS_LSIN_UNAUTHORIZED_WEBSITE') : TXT_AUTH;
var TXT_GOLF_WINNER = cjs.Util.trans('TRANS_WINNER');
var TXT_CALENDAR = {
    "prev_day": cjs.Util.trans('TRANS_DAY_PREVIOUS'),
    "next_day": cjs.Util.trans('TRANS_DAY_NEXT')
};
var PREMATCH_ODDS = '1';
var IN_PLAY_ODDS = '2';
var ODDS_CHANGE_HIGH_COLOR_LOCAL = '#D93900,#ffffff'.split(",");
var ODDS_CHANGE_HIGH_COLOR_ASS = '#36BF00,#ffffff'.split(",");
var ODDS_CHANGE_HIGH_COLOR_IN = '#002ED9,#ffffff'.split(",");
var numOfOHighBlinks = 3;
var oHighBlinkTime = 400;
var oHighTime = 5000;
var oHighFadeTime = 2000;
var oHighBgColor;
var oHighColor;
var gamePlanSettings = null;
var tournamentPage = false;
var tournamentSubPage = false;
var tournamentPagePassiveTable = false;
var tournamentPageTab = null;
var tournamentPageDataPart = 0;
var tournamentPageNoMatchToday = null;
var tournamentPageNoMatchfixturesResults = null;

function setGamePlanSettings(settings) {
    gamePlanSettings = settings
}

function getGamePlanSettings() {
    return gamePlanSettings
}

function lsid_init() {
    if (typeof ls.loginClient == 'undefined') {
        if (cjs.isBrowserDeprecated(true)) {
            var dialogKey;
            var $dialogContent = createUnsupportedBrowserDialogContent();
            for (dialogKey in ls.LoginClient.prototype.dialogs) {
                ls.LoginClient.prototype.dialogs[dialogKey].showTrigger = null;
                ls.LoginClient.prototype.dialogs[dialogKey].content = $dialogContent
            }
            $dialogContent = null
        }
        var socialInit = {};
        socialInit.facebook = '555890894461938';
        socialInit.twitter = 'Sg8Q5iSYOVNrAf8DlAs2bQ5k5';
        socialInit.google = '33270257411-p5mm2q46djddp4dhiucmmmaeuv2k4u2i.apps.googleusercontent.com';
        var loginClientTrans = {
            'closeWindow': cjs.Util.trans('TRANS_CLOSE_WINDOW'),
            'registration': 'REGISTRATION',
            'signIn': cjs.Util.trans('TRANS_USER_LOGIN'),
            'signInFB': cjs.Util.trans('TRANS_USER_LOGIN_FACEBOOK'),
            'user': cjs.Util.trans('TRANS_USER_USER'),
            'settings': cjs.Util.trans('TRANS_USER_CHANGE_PASSWORD'),
            'signOut': cjs.Util.trans('TRANS_USER_LOGOUT'),
            'signOutConfirm': cjs.Util.trans('TRANS_USER_LOGOUT_CONFIRMATION'),
            'emailError': cjs.Util.trans('TRANS_USER_ERROR_EMAIL_NOT_VALID'),
            'emailUsedError': cjs.Util.trans('TRANS_USER_ERROR_EMAIL_USED'),
            'passwordError': cjs.Util.trans('TRANS_USER_ERROR_PASSWORD_MIN_5_CHARACTERS'),
            'passwordMissmatchError': cjs.Util.trans('TRANS_USER_ERROR_PASSWORDS_NOT_SAME'),
            'passwordChangeFail': cjs.Util.trans('TRANS_USER_ERROR_PASSWORD_INVALID'),
            'passwordChangeOk': cjs.Util.trans('TRANS_USER_CHANGE_PASSWORD_SUCCESSFUL'),
            'forgottenPasswordSendOk': cjs.Util.trans('TRANS_USER_FORGOTTEN_PASSWORD_SEND_INSTRUCTIONS_SUCCESSFUL'),
            'captchaError': cjs.Util.trans('TRANS_USER_ERROR_CAPTCHA_NOT_SAME'),
            'captchaEmptyError': cjs.Util.trans('TRANS_USER_ERROR_CAPTCHA_NOT_SAME'),
            'captchaRetypeError': cjs.Util.trans('TRANS_USER_CAPTCHA_TYPE_TEXT_AGAIN'),
            'termsError': cjs.Util.trans('TRANS_USER_ERROR_I_AGREE_WITH_TERMS'),
            'verificationCodeError': cjs.Util.trans('TRANS_USER_ERROR_VERIFICATION_CODE_INVALID'),
            'verificationPassChangeCodeError': cjs.Util.trans('TRANS_USER_FORGOTTEN_PASSWORD_ERROR_NOT_VALID_VERIFICATION_CODE'),
            'registrationOk': cjs.Util.trans('TRANS_USER_REGISTRATION_SUCCESSFUL'),
            'registrationOkNote': 'ATTENTION: We have sent you an activation e-mail! Please check your mailbox and click the activation link included in the message.<br /><br />If you don\'t receive our activation e-mail within 20 minutes, you might find our message in the SPAM folder of your mailbox.<br /><br />If you fail to find our e-mail anyway, please contact us at support@flashscore.com.',
            'verificationOk': cjs.Util.trans('TRANS_USER_ACTIVATION_SUCCESSFUL'),
            'signInOK': cjs.Util.trans('TRANS_USER_LOGIN_SUCCESSFUL'),
            'signOutOk': cjs.Util.trans('TRANS_USER_LOGOUT_SUCCESSFUL'),
            'serverLogout': cjs.Util.trans('TRANS_USER_SERVER_LOGOUT'),
            'errTechnical': cjs.Util.trans('TRANS_USER_SERVER_ERROR'),
            'errSignIn': cjs.Util.trans('TRANS_USER_ERROR_LOGIN_FAILED'),
            'errSignInConfirm': cjs.Util.trans('TRANS_USER_ERROR_ACCOUNT_NOT_VERIFIED')
        };
        loginClientTrans['captchaError'] = cjs.Util.trans('TRANS_USER_DIALOG_REGISTRATION_NOT_ROBOT_CONFIRMATION'), loginClientTrans['captchaEmptyError'] = cjs.Util.trans('TRANS_USER_DIALOG_REGISTRATION_NOT_ROBOT_CONFIRMATION'), loginClientTrans['captchaRetypeError'] = cjs.Util.trans('TRANS_USER_DIALOG_REGISTRATION_NOT_ROBOT_CONFIRMATION'), loginClientTrans['registrationOkLabel'] = cjs.Util.trans('TRANS_USER_DIALOG_REGISTRATION_ALMOST_DONE'), loginClientTrans['registrationOkInfo1'] = cjs.Util.trans('TRANS_USER_DIALOG_REGISTRATION_EMAIL_SENT_TO'), loginClientTrans['registrationOkInfo2'] = cjs.Util.trans('TRANS_USER_DIALOG_REGISTRATION_CONFIRMATION_INFO'), hello.init(socialInit, {
            'redirect_uri': '/login-proxy/'
        });
        ls.loginClient = new ls.LoginClient(clientStorage, 'https://lsid.eu/', 'fs/1_2', '2', cjs.dic, hello, loginClientTrans, ls.urlEncode, function() {
            return cjs.geoIP
        }, function() {
            return cjs.dic.get('Helper_CurrentTime').getTimestamp() * 1000
        })
    }
}

function my_leagues_init(sportId, topLeagues, disableLoadTopLeagues) {
    if (typeof cjs.myLeagues == 'undefined') {
        lsid_init();
        var loadTopLeagues = function(sportId, callback) {
            if (disableLoadTopLeagues) {
                return
            }
            var myCallback = function(status, headers, responseText, actionTrigger, customHeaders) {
                topLeaguesRequested = JSON.parse(responseText);
                if (!topLeaguesRequested) {
                    topLeaguesRequested = {}
                }
                callback(topLeaguesRequested)
            };
            (new cjs.AjaxJqObject(req_url + 'mt_' + sportId, void 0, myCallback, 'loadTopLeagues')).update()
        };
        cjs.myLeagues = new cjs.MyLeagues(ls.loginClient, topLeagues, new cjs.TopLeagues(), loadTopLeagues, sportId, cjs.isBrowserDeprecated(true), cjs.Util.trans('TRANS_MY_LEAGUES_ADD'), cjs.Util.trans('TRANS_MY_LEAGUES_REMOVE'), cjs.Util.trans('TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER'));
        var delAddLeague = function(labelKey) {
            if (cjs.cfg.sortByTime && cjs.cfg.topLeaguesFirst) {
                sort_fs_data();
                pgenerate(true, category);
                return
            }
            var i = 0,
                j = 0,
                labelIds = [],
                labl_id;
            sort_fs_data();
            labelIds = labelIds.concat(this.getLabelIdsForKey(labelKey));
            for (i = 0; i < labelIds.length; i++) {
                for (j = i + 1; j < labelIds.length; j++) {
                    if (labelIds[i] === labelIds[j]) labelIds.splice(j--, 1)
                }
            }
            if (!labelIds) return;
            var eventHandler = cjs.dic.get('dataEventHolderProxy').getHandler();
            labelIds.sort(function(a, b) {
                var aPos = 0;
                var bPos = 0;
                var counter = 0;
                eventHandler.each(function(index, id) {
                    counter++;
                    if (!aPos && id == a) aPos = counter;
                    if (!bPos && id == b) bPos = counter;
                    if (aPos && bPos) return false
                });
                return bPos - aPos
            });
            tableType = sub_category == 2 || sub_category == 3 ? 'odds-content' : 'table-main';
            for (var i = 0; i < labelIds.length; i++) {
                labl_id = labelIds[i];
                labl_id_trimmed = labl_id.replace(/(.*)-.*/, '$1');
                if (cjs.dic.get('dataLeague').getLeagueValue(labl_id_trimmed, 'ZD') == 's' && !country) {
                    if (cjs.myLeagues.isTop(labl_id_trimmed)) {
                        fs_update.add_full_table(tableType, labl_id)
                    } else {
                        fs_update.remove_table(tableType, null, false, 'l_' + labl_id)
                    }
                } else {
                    if (cjs.Util.Sport.isStageSport(sport_id)) {
                        reloadIframeContent()
                    } else if (country || !cjs.cfg.topLeaguesFirst || category == 5) {
                        var isTop = cjs.myLeagues.isTop(labl_id_trimmed);
                        $('tr.l_' + labl_id).toggleClass('primary-top', isTop)
                    } else {
                        var animation;
                        var $newTable;
                        var $origTable = $('tr.l_' + labl_id + ':eq(0)').closest('table');
                        var origTableIndex = $origTable.index();
                        var isMovingTop = cjs.myLeagues.isTop(labl_id.replace(/(.*)-.*/, '$1'));
                        var tableIsNotAlone = $origTable.prevAll('table').length > 0 || $origTable.nextAll('table:not(.table-link-more-games)').length > 0;
                        var doAnimations = cjs.cfg.topLeaguesFirst && css3_transitions_supported() && labelIds.length === 1 && tableIsNotAlone;
                        if (doAnimations) {
                            animation = new cjs.MyLeaguesAnimation(isMovingTop, $origTable, css3_add_transition, css3_get_transition_property, tt, labl_id);
                            animation.pre()
                        }
                        fs_update.remove_table(tableType, null, false, 'l_' + labl_id, false);
                        fs_update.add_full_table(tableType, labl_id);
                        $newTable = $('tr.l_' + labl_id + ':eq(0)').closest('table');
                        if (doAnimations) {
                            origTableIndex === $newTable.index() ? animation.cancel() : animation.post($newTable)
                        }
                    }
                }
            }
        };
        cjs.myLeagues.registerCallback('add', delAddLeague);
        cjs.myLeagues.registerCallback('remove', delAddLeague);
        cjs.myLeaguesMenu = new cjs.MyLeaguesMenu(clientStorage, cjs.myLeagues, req_url + 'ml_', cjs.Util.trans('TRANS_MY_LEAGUES_LEFT_MENU_TEXT'));
        var drawMenu = function() {
            cjs.myLeaguesMenu.draw()
        };
        ls.loginClient.registerCallback('login', drawMenu);
        ls.loginClient.registerCallback('logout', drawMenu);
        ls.loginClient.registerCallback('dataSyncChange/myLeagues', drawMenu);
        cjs.myLeagues.registerCallback('add', drawMenu);
        cjs.myLeagues.registerCallback('remove', drawMenu);
        drawMenu = null
    }
}

function myTeamsInit(sportId) {
    if (typeof cjs.myTeams == 'undefined' && cjs.dic.get('util_config').get('app', 'myteams', 'enable')) {
        lsid_init();
        cjs.myTeams = cjs.dic.get('myTeams');
        cjs.myTeamsMenu = cjs.dic.get('myTeamsMenu');
        var navigation = cjs.dic.get('list_navigation');
        var drawMenu = function(participantKey) {
            var participantKeySportId = sportId;
            if (participantKey) {
                participantKeySportId = parseInt(participantKey.replace(/^([0-9]+)_.* /, '$1'))
            }
            if (sportId == participantKeySportId && cjs.myTeamsMenu) {
                cjs.myTeamsMenu.reload()
            }
            cjs.myTeams.reloadToggleIcons()
        };
        cjs.myTeams.registerCallback('dataLoaded', drawMenu);
        cjs.myTeams.registerCallback('dataLoaded', function() {
            if (typeof ls != 'undefined' && ls.loginClient && ls.loginClient.loggedIn()) {
                sort_fs_data();
                var myTeamsCount = cjs.dic.get('MyTeams').getCount();
                if (navigation.isMyGames() && myTeamsCount) {
                    loadAndShowMygamesContent()
                }
            }
        });
        ls.loginClient.registerCallback('login', drawMenu);
        ls.loginClient.registerCallback('login', function() {
            cjs.myTeams.restartDataAutosync()
        });
        ls.loginClient.registerCallback('logout', drawMenu);
        ls.loginClient.registerCallback('logout', function() {
            cjs.myTeams.stopDataAutosync()
        });
        ls.loginClient.registerCallback('dataSyncChange/myTeams', (function(drawMenu) {
            return function() {
                cjs.myTeams.reload();
                drawMenu();
                if (navigation.isMyGames()) {
                    redrawLivescore()
                }
            }
        })(drawMenu));
        cjs.myTeams.registerCallback('remove', drawMenu);
        cjs.myTeams.registerCallback('remove', function() {
            if (navigation.isMyGames()) {
                reloadIframeContent()
            }
        });
        drawMenu = null
    }
}

function parse(fs_input, update, odds, action) {
    var dataEventHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var dataLeagueHolder = cjs.dic.get('dataLeagueHolderProxy').getHolder();
    var dataParticipantHolder = cjs.dic.get('dataParticipantHolder');
    var feedTranslator = cjs.dic.get('Feed_Translator');
    var translateItem = cjs.dic.get('helperTranslateItem');
    var navigation = cjs.dic.get('list_navigation');
    if (fs_input == null || fs_input.length < 4 || fs_input == '0') {
        u_304 = 'd41d8cd98f00b204e9800998ecf8427e';
        return true
    }
    update = (typeof update == 'undefined' || update == false) ? false : true;
    odds = (typeof odds == 'undefined' || odds == false) ? false : true;
    var eventItem, leagueItem;
    var rows = fs_input.split(JS_ROW_END);
    var rows_length = rows.length;
    var labl_id;
    var parse_sport_id = sport_id;
    var parse_sport = sport;
    var return_val = true;
    var resort_stages = false;
    var top_leagues_switch = true;
    var eventId, tmp;
    var special = false;
    var LEAGUE_INDEX = 'ZA';
    var SPORT_INDEX = 'SA';
    var EVENT_INDEX = 'AA';
    var MOVED_EVENTS_INDEX = 'QA';
    var TOP_LEAGUES_INDEX = 'SG';
    var U_304_INDEX = 'A1';
    var REFRESH_UTIME_INDEX = 'A2';
    var DOWNLOAD_UL_FEED_INDEX = 'UL';
    var PAST_FUTURE_GAMES_INDEX = 'FG';
    var PARTICIPANT_INDEX = 'PR';
    var SPECIAL_INDEX = 'ST';
    var STATS_RESULTS_TYPE_INDEX = 'RAA';
    var STATS_RESULTS_VALUE_INDEX = 'RAB';
    var isMyTeamsAction = (typeof cjs.myTeams !== 'undefined' && action === cjs.myTeams.FEED_ACTION);
    var isRepairAction = (action == 'repair' || action == 'frepair');
    if (!update && !odds && !isRepairAction) {
        if (rows_length == 1) {
            rows_length = 0
        }
        if (!isDetailGetter() && (typeof action == 'undefined' || !isMyTeamsAction)) {
            preload_show()
        }
    }
    for (var i = 0; i < rows_length; i++) {
        var row = rows[i].split(JS_CELL_END);
        var row_length = row.length - 1;
        var index = row[0].split(JS_INDEX);
        var indexName, indexValue;
        if (typeof index[0] !== 'undefined') {
            indexName = index[0]
        }
        if (typeof index[1] !== 'undefined') {
            indexValue = index[1]
        }
        if (indexName === SPORT_INDEX) {
            parse_sport_id = indexValue;
            parse_sport = SPORT_LIST_BY_ID[parse_sport_id];
            parsed_sports[parse_sport_id] = parse_sport;
            continue
        } else if (indexName === LEAGUE_INDEX) {
            var tmp_labl = {};
            var backupedLeagueItem = cjs.dic.getNewInstance('Data_LeagueItem');
            if (parse_sport_id == cjs.constants.sport.GOLF || isNoDuelSport(parse_sport_id)) {
                tmp_labl['AB'] = '';
                tmp_labl['AC'] = '';
                tmp_labl['AD'] = ''
            }
            for (var j = 0; j < row_length; j++) {
                var rowParts = row[j].split(JS_INDEX);
                if (rowParts.length == 2) {
                    tmp_labl[rowParts[0]] = rowParts[1]
                }
            }
            tmp_labl['display'] = tmp_labl.ZD != 'c';
            tmp_labl['g_count'] = 0;
            tmp_labl['sport_id'] = parse_sport_id;
            tmp_labl['sport'] = parse_sport;
            labl_id = parse_sport_id + '_' + tmp_labl.ZC;
            if (isMyTeamsAction) {
                var mgLeagueData = cjs.mygames.getLabels();
                if (mgLeagueData[labl_id] != null) {
                    tmp_labl['g_count'] = mgLeagueData[labl_id]['g_count']
                }
            }
            if (typeof cjs.myLeagues != 'undefined') {
                if (cjs.myLeagues.isTop(labl_id) && !top_leagues_switch) {
                    resort_stages = true
                }
                top_leagues_switch = cjs.myLeagues.isTop(labl_id)
            }
            if (dataLeagueHolder.hasLeague(labl_id)) {
                var backupedLeagueItemData = dataLeagueHolder.getLeague(labl_id).getData();
                backupedLeagueItem.reinit(backupedLeagueItemData);
                tmp_labl['g_count'] = backupedLeagueItem.getEventCount()
            }
            if (isRepairAction) {
                if (dataLeagueHolder.hasLeague(labl_id)) {
                    leagueItem = dataLeagueHolder.getLeague(labl_id);
                    for (var key in tmp_labl) {
                        if (key.length > 2 || (key == "ZA" && tmp_labl[key] == '')) {
                            continue
                        }
                        leagueItem.setValue(key, tmp_labl[key])
                    }
                }
            } else if (!update) {
                leagueItem = dataLeagueHolder.getOrCreateNewLeague(labl_id);
                leagueItem.reinit(tmp_labl)
            } else if (update && labl_id) {
                if (dataLeagueHolder.hasLeague(labl_id)) {
                    leagueItem = dataLeagueHolder.getLeague(labl_id);
                    for (var key in tmp_labl) {
                        if (key.length > 2 || (key == "ZA" && tmp_labl[key] == '') || tmp_labl[key] == leagueItem.getValue(key)) {
                            continue
                        }
                        fs_update.label_set_property(labl_id, key, tmp_labl[key]);
                        leagueItem.setValue(key, tmp_labl[key])
                    }
                }
            }
            if (leagueItem) {
                leagueItem = translateItem.translate(leagueItem, feedTranslator, backupedLeagueItem)
            }
        } else if (indexName === MOVED_EVENTS_INDEX) {
            for (var j = 0; j < row_length; j++) {
                switch (row[j].substr(0, 2)) {
                    case 'QB':
                        eventId = 'g_' + parse_sport_id + '_' + row[j].substr(3);
                        break;
                    case 'QC':
                        if (eventId) {
                            tmp = (row[j].substr(3) + "").split('|');
                            fsEventsUpdatedStartTime[eventId] = {
                                start_time: parseInt(tmp[0]),
                                end_time: tmp[1] ? parseInt(tmp[1]) : null
                            };
                            eventId = null
                        }
                        break
                }
            }
            continue
        } else if (indexName === TOP_LEAGUES_INDEX && project_type_name == '_portable') {
            tmp = indexValue;
            if (tmp) {
                tmp = tmp.split(';');
                for (var j = 0, _len = tmp.length; j < _len; j++) {
                    cjs.myLeagues._topLeagues[parse_sport_id + '_' + tmp[j]] = {}
                }
            }
            continue
        } else if (indexName === PARTICIPANT_INDEX) {
            for (var j = 0; j < row_length; j++) {
                var tmpIndex = row[j].split(JS_INDEX);
                var key = tmpIndex[0];
                var value = tmpIndex[1];
                if (key == 'PR') {
                    var participantData = value.split('|');
                    var participantId = participantData[0];
                    var participantItem = dataParticipantHolder.getOrCreateNewParticipant(participantId);
                    participantItem.reinit(participantData)
                } else if (key == 'LV') {
                    feedTranslator.parseIntoDictionary(value)
                }
            }
            continue
        } else if (indexName === SPECIAL_INDEX && indexValue === 'repair') {
            special = true;
            var repairRows = [];
            for (var j = i + 1; j < rows_length; j++) {
                repairRows.push(rows[j]);
                i++;
                if (rows[j].split(JS_CELL_END)[0].split(JS_INDEX)[0] === 'A1') {
                    break
                }
            }
            continue
        } else if (indexName === U_304_INDEX) {
            if (typeof action != 'undefined' && action == 'update') {
                u_304 = indexValue
            }
            rows_length--;
            continue
        } else if (indexName === REFRESH_UTIME_INDEX) {
            var tmp_refresh_utime = indexValue - 0;
            if (tmp_refresh_utime > refresh_utime) {
                refresh_utime = tmp_refresh_utime;
                return_val = false
            }
        } else if (indexName === DOWNLOAD_UL_FEED_INDEX) {
            tmp = indexValue - 0;
            if (tmp) {
                var feedService = cjs.feedService[cjs.Feed_Service_LocalUpdate.NAME];
                if (feedService) {
                    feedService.setSyncTime(tmp)
                }
            }
        } else if (indexName === PAST_FUTURE_GAMES_INDEX) {
            setGamePlanSettings(indexValue.split(";"))
        } else if (indexName === EVENT_INDEX) {
            var original_id = indexValue;
            var id = 'g_' + parse_sport_id + '_' + original_id;
            var backupedEventItem = cjs.dic.getNewInstance('Data_EventItem');
            var eventItemExists = dataEventHolder.hasEvent(id);
            if ((update || isRepairAction || odds) && !eventItemExists) {
                continue
            }
            if (eventItemExists) {
                var backupedEventItemData = dataEventHolder.getItem(id).getData();
                backupedEventItem.reinit(backupedEventItemData)
            }
            eventItem = dataEventHolder.getOrCreateNewEvent(id);
            if (!eventItemExists && !update && !odds && !isRepairAction) {
                if (!navigation.isMyGames() || !isMyTeamsAction) {
                    leagueItem.setValue('g_count', leagueItem.getEventCount() + 1)
                }
                eventItem.reinit(createDefaultMatchItem(parse_sport));
                eventItem.setValue('original_id', original_id);
                eventItem.setValue('labl_id', labl_id);
                eventItem.setValue('sport_id', parse_sport_id);
                eventItem.setValue('sport', parse_sport)
            }
            var statsResultsTypeId = null;
            for (var j = 1; j < row_length; j++) {
                var rowParts = row[j].split(JS_INDEX);
                if (rowParts.length != 2) {
                    continue
                }
                var key = rowParts[0];
                var new_value_string = rowParts[1];
                if (update && (key == 'YA' || key == 'YB' || key == 'YC' || key == 'YD' || key == 'YE' || key == 'YF' || key == 'YG' || key == 'YI' || key == 'YJ' || key == 'YL' || key == 'YM')) {
                    continue
                }
                if (key == 'EA' || key == 'EB' || key == 'EC' || key == 'ED') {
                    continue
                }
                var new_value = new_value_string;
                if ($.inArray(key, ['ND', 'NG', STATS_RESULTS_VALUE_INDEX]) === -1) {
                    new_value -= 0
                }
                if (isNaN(new_value) || new_value_string == '') {
                    new_value = new_value_string
                }
                if (update || odds) {
                    var swap_corrected = get_index_and_value_for_swapped(id, key, new_value);
                    key = swap_corrected.key;
                    new_value = swap_corrected.value
                }
                if (key == "AG" || key == "AH" || key.match(/^B[A-H]$/)) {
                    new_value = fs_update.update_merged_score(eventItem, key, new_value)
                }
                if (key == STATS_RESULTS_TYPE_INDEX) {
                    statsResultsTypeId = new_value;
                    continue
                }
                if (key == STATS_RESULTS_VALUE_INDEX) {
                    if (statsResultsTypeId !== null) {
                        var statsResultsKey = cjs.dic.get('Helper_Parser').getStatsResultsIndex(statsResultsTypeId);
                        if (update && eventItem.getValue(statsResultsKey) !== new_value) {
                            fs_update.property_set(id, statsResultsKey, new_value, eventItem.getValue(statsResultsKey))
                        }
                        eventItem.setValue(statsResultsKey, new_value)
                    }
                    statsResultsTypeId = null;
                    continue
                }
                if (update && eventItem.getValue(key) !== new_value) {
                    fs_update.property_set(id, key, new_value, eventItem.getValue(key))
                }
                eventItem.setValue(key, new_value)
            }
            if (action == 'update') {
                for (var j = 1; j < row_length; j++) {
                    var key = row[j].substr(0, 2);
                    if (key == 'EA' || key == 'EB' || key == 'EC' || key == 'ED') {
                        var new_value_arr = row[j].substr(3).split(',');
                        var incidentTime = new_value_arr[1] / 60;
                        var updatedTime = new_value_arr[2];
                        var counterTime = getCounterTime(id);
                        var interval = 5;
                        if (new_value_arr[0] == eventItem.getStage() && incidentTime >= counterTime - interval && incidentTime <= counterTime + interval) {
                            new_value = updatedTime;
                            if (eventItem.getValue(key) !== new_value) {
                                fs_update.property_set(id, key, new_value, eventItem.getValue(key));
                                eventItem.setValue(key, new_value)
                            }
                        }
                    } else if (eventItem.getSportId() == cjs.constants.sport.GOLF || isNoDuelSport(eventItem.getSportId())) {
                        var new_value_arr = row[j].substr(3).split(',');
                        if ($.inArray(key, ['AB', 'AC', 'AD']) !== -1) {
                            fs_update.label_set_property(eventItem.getValue('labl_id'), key, new_value_arr)
                        }
                    }
                }
            }
            if (!odds) {
                eventItem.setValue('counter', TXT_SPORT[parse_sport][eventItem.getStage()])
            }
            eventItem = translateItem.translate(eventItem, feedTranslator, backupedEventItem);
            var page = cjs.dic.get('page');
            var check_start_times = category != 5 && typeof action == 'undefined' && !odds && !update && !page.isCountryPage() && !page.isSeasonPage();
            var removeEventByTime = check_start_times && !check_start_time(eventItem.getStartUTime(), eventItem.getEndUTime()) && !eventItem.isLive();
            var removeEventByInvalidLeague = !eventItem.getLeague().isValid();
            if (removeEventByTime || !eventItem.isValid() || removeEventByInvalidLeague) {
                if (!navigation.isMyGames() || !isMyTeamsAction) {
                    leagueItem.setValue('g_count', leagueItem.getEventCount() - 1)
                }
                dataEventHolder.removeEvent(id);
                fs_update.removeEvent(id)
            }
            if (!update && !odds && !special) {
                if (typeof participantItem != 'undefined' && eventItem.isValid()) {
                    participantItem.addEventId(eventItem.getId())
                }
            }
        }
    }
    fs_input = null;
    if (special && repairRows.length > 0) {
        parse(repairRows.join(JS_ROW_END), false, false, "frepair")
    }
    var leaguesInHolder = dataLeagueHolder.getReferences();
    for (var leagueId in leaguesInHolder) {
        if (!leaguesInHolder[leagueId].isValid()) {
            dataLeagueHolder.removeLeague(leagueId)
        }
    }
    return return_val
}
function check_start_time(start_time, end_time, other_params) {
    if (typeof other_params == 'undefined') {
        other_params = {}
    }
    if (!other_params.hasOwnProperty('day')) {
        other_params.day = sudate
    }
    var matchDay = get_match_day(start_time, end_time);
    return (jQuery.inArray(parseInt(other_params.day), matchDay) !== -1)
}
function get_match_day(start_time, end_time) {
    var local_date = new Date();
    local_date.setTime((cjs.dic.get('Helper_CurrentTime').getTimestamp() + (local_date.getTimezoneOffset() * 60) - get_gmt_offset()) * 1000);
    var local_date_start = Date.UTC(local_date.getFullYear(), local_date.getMonth(), local_date.getDate(), 0, 0, 0) / 1000 + get_gmt_offset();
    var _start = get_day_diff(start_time, local_date_start);
    if (!end_time) return [_start];
    var _end = get_day_diff(end_time, local_date_start);
    var ret = [];
    if (_end >= _start) {
        for (var i = _start; i <= _end; i++) ret.push(i)
    }
    return ret
}
function get_day_diff(time1, time2) {
    var secondsPerDay = 24 * 60 * 60;
    var diffTime = (time1 - time2) / secondsPerDay;
    return Math.floor(diffTime)
}
function get_index_and_value_for_swapped(event_id, key, value) {
    var ret = {
        'key': key,
        'value': value
    };
    if (cjs.dic.get('dataEvent').getEventValue(event_id, 'WE')) {
        if (key == 'AS' || key == 'AZ' || key == 'WC') {
            if (value == 2) ret.value = 1;
            else if (value == 1) ret.value = 2
        } else {
            if (key == "AJ" || key == "WF" || key == "WH" || key == "BY" || key == "AG" || key == "AT" || key == "BA" || key == "BC" || key == "BE" || key == "BG" || key == "BI" || key == "BK" || key == "BM" || key == "BO" || key == "BQ" || key == "BS" || key == "DA" || key == "DC" || key == "DE" || key == "DG" || key == "DI" || key == "DO" || key == "WA" || key == "OA" || key == "XF" || key == "YF" || key == "XL" || key == "YL") ret.key = key.substr(0, 1) + String.fromCharCode(key.charCodeAt(1) + 1);
            else if (key == "AK" || key == "WG" || key == "WI" || key == "BZ" || key == "AH" || key == "AU" || key == "BB" || key == "BD" || key == "BF" || key == "BH" || key == "BJ" || key == "BL" || key == "BN" || key == "BP" || key == "BR" || key == "BT" || key == "DB" || key == "DD" || key == "DF" || key == "DH" || key == "DJ" || key == "DP" || key == "WB" || key == "OB" || key == "XG" || key == "YG" || key == "XM" || key == "YM") ret.key = key.substr(0, 1) + String.fromCharCode(key.charCodeAt(1) - 1);
            else if (key == "XA" || key == "YA") ret.key = key.substr(0, 1) + String.fromCharCode(key.charCodeAt(1) + 2);
            else if (key == "XC" || key == "YC") ret.key = key.substr(0, 1) + String.fromCharCode(key.charCodeAt(1) - 2)
        }
    }
    return ret
}
function isSortByTime() {
    var page = cjs.dic.get('page');
    if (page.isCountryPage() && cjs.Util.Sport.inGroup(sport_id, cjs.constants.sport.MOTORSPORT)) {
        return true
    }
    var sortByTime = (page.isSeasonPage() && sport != 'golf' || page.isSeasonPagePassiveTable() || page.isSeasonSubPage()) && !cjs.Util.Sport.isStageSport(sport_id) ? true : cjs.cfg.sortByTime;
    return sortByTime
}
function isSortDesc() {
    var page = cjs.dic.get('page');
    if (page.isCountryPage() && cjs.Util.Sport.inGroup(sport_id, cjs.constants.sport.MOTORSPORT)) {
        return true
    }
    return page.isSeasonPage() ? updater.country_tournament_order_fin : false
}
function sortTopLeaguesFirst() {
    return cjs.dic.get('page').isSeasonPage() ? false : cjs.cfg.topLeaguesFirst
}
function sort_fs_data() {
    cjs.dic.get('dataLeagueHolderProxy').getHandler().resetIds();
    var dataHandler = cjs.dic.get('dataEventHolderProxy').getHandler();
    dataHandler.resetIds();
    if (!cjs.Util.Sport.hasCategoryPage(sport_id) && cjs.dic.get('page').isCountryPage() && !cjs.Util.Sport.inGroup(sport_id, cjs.constants.sport.MOTORSPORT)) {
        return
    }
    dataHandler.sort()
}
function get_mygames_cookie_name() {
    return 'fsdc_my_local'
}
function color_init(sportName) {
    if (typeof(sportName) == 'string') {
        sport = sportName
    }
    if (hover_color == null) {
        switch (sport) {
            default: hover_color = '#e6f4f8';
                break;
            case 'soccer':
            case 'golf':
            case 'horse-racing':
                hover_color = '#eaf7e7';
                break;
            case 'tennis':
                hover_color = '#f7f8dc';
                break;
            case 'basketball':
                hover_color = '#f9f1ea';
                break;
            case 'american-football':
                hover_color = '#f9eddf';
                break;
            case 'baseball':
                hover_color = '#eafcf2';
                break;
            case 'motorsport':
            case 'motorsport-auto-racing':
            case 'motorsport-moto-racing':
                hover_color = '#f9f1ea';
                break
        }
    }
    if (oHighBgColor == null || oHighColor == null) {
        oHighBgColor = ODDS_CHANGE_HIGH_COLOR_LOCAL[0];
        oHighColor = ODDS_CHANGE_HIGH_COLOR_LOCAL[1]
    }
}
function get_element(row, ident, param_type, false_return) {
    if (typeof param_type == 'undefined') param_type = 'string';
    if (typeof false_return == 'undefined') false_return = '';
    var pom = row.split(ident + JS_INDEX);
    if (pom.length == 2) {
        pom = pom[1].substr(0, pom[1].indexOf(JS_CELL_END));
        if (param_type == 'number') pom = cjs.Util.Number.toNumber(pom);
        return pom
    } else return false_return
}
function getCounterTime(index, allSports) {
    var pom = null;
    var currentTimestamp = cjs.dic.get('Helper_CurrentTime').getTimestamp();
    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var eventItem = eventDataHolder.getEvent(index);
    var leagueItem = eventItem.getLeague();
    if (eventItem.getStageType() != cjs.constants.MATCH_STATUS_TYPE_LIVE) {
        return pom
    }
    var gameTime = cjs.dic.get('Helper_GameTime');
    var sport = eventItem.getSportName();
    if ((sport == 'soccer' || sport == 'bandy' || sport == 'rugby-league' || sport == 'rugby-union')) {
        var firstHalf = (sport == 'soccer' || sport == 'bandy') ? 45 : 40;
        var secondHalf = (sport == 'soccer' || sport == 'bandy') ? 90 : 80;
        if ((sport == 'rugby-union' || sport == 'rugby-league') && eventDataHolder.hasEvent(index) && leagueItem.getIs7Rugby() == 1) {
            firstHalf = 7;
            secondHalf = 14
        }
        if (eventItem.getStage() == cjs.constants.event_stage.FIRST_HALF) {
            if (eventItem.getStageStartUTime() != 0) {
                pom = (currentTimestamp - eventItem.getStageStartUTime()) / 60;
                pom = (pom < 0) ? 0 : pom;
                pom += 1
            } else {
                pom = (currentTimestamp - eventItem.getStartUTime()) / 60;
                pom = (pom < 0) ? 0 : pom
            }
        } else if (eventItem.getStage() == cjs.constants.event_stage.SECOND_HALF) {
            if (eventItem.getStageStartUTime() != 0) {
                pom = (currentTimestamp - eventItem.getStageStartUTime()) / 60;
                pom = (pom < 0) ? 0 : pom;
                pom += firstHalf + 1
            } else {
                pom = (currentTimestamp - eventItem.getStartUTime()) / 60;
                pom -= 15;
                pom = (pom < firstHalf) ? firstHalf : pom
            }
        } else if (sport == 'soccer' && eventItem.getStage() == cjs.constants.event_stage.EXTRA_TIME) {
            if (eventItem.getStageStartUTime() != 0) {
                pom = (currentTimestamp - eventItem.getStageStartUTime()) / 60;
                pom = (pom < 0) ? 0 : pom;
                pom += secondHalf + 1
            } else {
                pom = (currentTimestamp - eventItem.getStartUTime()) / 60;
                pom -= 30;
                pom = (pom < secondHalf) ? secondHalf : pom
            }
        }
    } else if (sport == 'aussie-rules' && (!(eventItem.getGameTime() > 0))) {
        var stageDuration = 20;
        var pauseDuration = 15;
        var doSum = false;
        var stages = [cjs.constants.event_stage.FIRST_QUARTER, cjs.constants.event_stage.SECOND_QUARTER, cjs.constants.event_stage.THIRD_QUARTER, cjs.constants.event_stage.FOURTH_QUARTER, cjs.constants.event_stage.EXTRA_TIME];
        for (var i in stages) {
            if (stages[i] == eventItem.getStage()) {
                var stageStartUTime = eventItem.getStageStartUTime();
                var startTime = stageStartUTime ? stageStartUTime : eventItem.getStartUTime();
                pom = Math.floor((currentTimestamp - startTime) / 60);
                if (stageStartUTime) {
                    if (pom < 0) {
                        pom = 0
                    }
                    pom += i * stageDuration
                } else {
                    pom -= i * pauseDuration;
                    if (pom < i * stageDuration) {
                        pom = i * stageDuration
                    }
                }
                pom++;
                if (!doSum) {
                    pom -= i * stageDuration
                }
                break
            }
        }
    } else if (typeof allSports == 'undefined' || allSports || (eventItem.getGameTime() > 0 && gameTime.isLive(eventItem.getStage()))) {
        if (!gameTime.showStageInfo(eventItem)) {
            pom = get_sport_time(eventItem.getGameTime(), eventItem.getSportId(), eventItem.getStage(), eventItem.getDataStageTime());
            if (!(pom > 0)) {
                pom = null
            }
        }
    }
    return pom
}

function set_counter_time(index) {
    var pom = getCounterTime(index, false);
    var eventItem;
    if (pom != null) {
        eventItem = cjs.dic.get('dataEventHolderProxy').getHolder().getEvent(index);
        pom = Math.floor(pom);
        eventItem.setValue('counter', cjs.Util.Number.toNumber(pom));
        return true
    }
    return false
}
function counter_format(index, withHtml, wrapLines, withWrapper, withStage) {
    var eventItem = cjs.dic.get('dataEventHolderProxy').getHolder().getEvent(index);
    var leagueItem = eventItem.getLeague();
    var gameTime = cjs.dic.get('Helper_GameTime');
    var counter = eventItem.getValue('counter');
    if (counter === null) {
        counter = ''
    }
    var minutesDiff = 0;
    var appendText = '';
    var matchStatus = eventItem.getStage();
    var matchSport = eventItem.getSportName();
    var eventStageTime = (eventItem.getGameTime() > 0 && counter !== '&nbsp;' && gameTime.hasStageWithTime(matchStatus));
    if (typeof withHtml === 'undefined') {
        withHtml = true
    }
    if (typeof wrapLines === 'undefined') {
        wrapLines = true
    }
    if (typeof withWrapper === 'undefined') {
        withWrapper = true
    }
    if (typeof withStage === 'undefined') {
        withStage = true
    }
    if ($.inArray(matchSport, ['soccer', 'bandy', 'rugby-league', 'rugby-union']) !== -1) {
        var firstHalf, secondHalf;
        switch (matchSport) {
            case 'soccer':
            case 'bandy':
                firstHalf = 45;
                secondHalf = 90;
                break;
            case 'rugby-union':
            case 'rugby-league':
                if (leagueItem.getValue('ZR') == 1) {
                    firstHalf = 7;
                    secondHalf = 14
                } else {
                    firstHalf = 40;
                    secondHalf = 80
                }
                break;
            default:
                firstHalf = 40;
                secondHalf = 80;
                break
        }
        var isSoccer = matchSport === 'soccer';
        var extraTime = isSoccer ? 120 : null;
        if (matchStatus === cjs.constants.event_stage.FIRST_HALF && counter > firstHalf) {
            minutesDiff = counter - firstHalf;
            counter = firstHalf + '+'
        } else if (matchStatus === cjs.constants.event_stage.SECOND_HALF && counter > secondHalf) {
            minutesDiff = counter - secondHalf;
            counter = secondHalf + '+'
        } else if (isSoccer && matchStatus === cjs.constants.event_stage.EXTRA_TIME && counter > extraTime) {
            minutesDiff = counter - extraTime;
            counter = extraTime + '+'
        }
        var isLiveStage = gameTime.isLiveStageHalves(matchStatus);
        if (isSoccer && eventItem.hasLiveCentre() && minutesDiff > 0 && minutesDiff <= 10 && isLiveStage) {
            counter += minutesDiff
        }
        var isBandyRugby = $.inArray(matchSport, ['bandy', 'rugby-league', 'rugby-union']) !== -1;
        var isBandyRugbyLive = matchStatus === cjs.constants.event_stage.LIVE && isBandyRugby;
        var isSoccerExtraTime = matchStatus === cjs.constants.event_stage.EXTRA_TIME && isSoccer;
        if (isBandyRugbyLive || isSoccerExtraTime) {
            counter = counter + '<span class="blink">&nbsp;</span>';
            if (withStage) {
                counter = TXT_SPORT[matchSport][eventItem.getStage()] + (wrapLines ? '<br/>' : '&nbsp;-&nbsp;') + counter
            }
        }
    } else if (matchSport == 'aussie-rules' && (!(eventItem.getGameTime() > 0))) {
        var stageDuration = 20;
        if (counter > stageDuration) {
            minutesDiff = counter - stageDuration;
            counter = stageDuration + '+'
        }
        var isLiveStage = gameTime.isLiveStageQuarters(matchStatus);
        if (isLiveStage) {
            counter = counter + '<span class="blink">&nbsp;</span>';
            if (withStage) {
                counter = TXT_SPORT[matchSport][eventItem.getStage()] + (wrapLines ? '<br/>' : '&nbsp;-&nbsp;') + counter
            }
        }
    } else {
        if (!withStage) {
            counter = ' ';
            appendText = getCounterAppendText(eventItem.getData(), '')
        } else {
            appendText = getCounterAppendText(eventItem.getData())
        }
    }
    if (withHtml) {
        var blink = gameTime.getBlink(eventItem);
        if (eventStageTime) {
            var sportTime = get_sport_time(eventItem.getGameTime(), eventItem.getSportId(), eventItem.getStage(), eventItem.getDataStageTime());
            var disableStageInfo = gameTime.isSportWithContinuousMinutes(eventItem.getSportId()) && !gameTime.isExtraTime(matchStatus);
            if (withStage && !disableStageInfo) {
                counter = counter + (wrapLines ? '<br />&nbsp;' : '&nbsp;-&nbsp;') + sportTime
            } else {
                counter = sportTime
            }
        }
        if (counter === '') {
            counter = '&nbsp;'
        } else {
            counter = counter + blink + appendText;
            if (withWrapper) {
                counter = '<span>' + counter + '</span>'
            }
        }
    }
    return counter
}
function getCounterAppendText(match, delimiter) {
    if (typeof delimiter === 'undefined') {
        delimiter = '<br />'
    }
    var match_status = match.AC;
    var append_text = '';
    if ((match['sport'] == 'snooker' || match['sport'] == 'darts') && match_status == 2 && typeof match.AG != 'undefined' && typeof match.AH != 'undefined') {
        if (match['sport'] == 'snooker') {
            append_text = delimiter + cjs.Util.trans('TRANS_SNOOKER_FRAME_NUMBER').replace('%s', (cjs.Util.Number.toNumber(match['AG']) + cjs.Util.Number.toNumber(match['AH']) + 1))
        } else if (match['sport'] == 'darts') {
            var leg_set_trans = match.WL ? cjs.Util.trans('TRANS_DARTS_SET_NUMBER') : cjs.Util.trans('TRANS_DARTS_LEG_NUMBER');
            append_text = delimiter + leg_set_trans.replace('%s', (cjs.Util.Number.toNumber(match['AG']) + cjs.Util.Number.toNumber(match['AH']) + 1))
        }
    }
    return append_text
}
function get_sport_time(time, sport_id, event_stage_id, data_stage_time, with_seconds) {
    var revert = false;
    sport_id = parseInt(sport_id);
    event_stage_id = parseInt(event_stage_id);
    if (!with_seconds) time = parseInt(time);
    else {
        var orig_time = time.slice(0);
        var seconds = parseInt(time[1]);
        time = parseInt(time[0])
    }
    if (typeof data_stage_time != 'undefined' && data_stage_time !== null) {
        data_stage_time = data_stage_time.split(':');
        if (0 in data_stage_time) {
            data_stage_time[0] = parseInt(data_stage_time[0], 10)
        }
        if (1 in data_stage_time) {
            data_stage_time[1] = parseInt(data_stage_time[1], 10)
        }
    } else {
        data_stage_time = [0, 0]
    }
    if (typeof SPORT_REVERSED_TIME_LIST == 'undefined' || typeof SPORT_REVERSED_TIME_LIST[sport_id] == 'undefined') {
        if (with_seconds) return orig_time;
        return time
    }
    if (typeof SPORT_REVERSED_TIME_LIST[sport_id].stages != 'undefined' && $.inArray(event_stage_id, SPORT_REVERSED_TIME_LIST[sport_id].stages) != -1) {
        if (!with_seconds && time != 0) time = time - 1;
        if (data_stage_time[0]) time = data_stage_time[0] - time;
        else time = SPORT_REVERSED_TIME_LIST[sport_id].stage_time - time;
        revert = true
    } else if (typeof SPORT_REVERSED_TIME_LIST[sport_id].extra_time_stages != 'undefined' && $.inArray(event_stage_id, SPORT_REVERSED_TIME_LIST[sport_id].extra_time_stages) != -1) {
        if (!with_seconds && time != 0) time = time - 1;
        if (data_stage_time[1]) time = data_stage_time[1] - time;
        else time = SPORT_REVERSED_TIME_LIST[sport_id].extra_time - time;
        revert = true
    }
    if (time < 0) time = 0;
    if (!with_seconds) return time;
    else {
        if (!revert) return orig_time;
        else {
            seconds = 60 - seconds;
            if (seconds != 60) time = time - 1;
            else seconds = 0;
            return [time, seconds]
        }
    }
}

function reset_env() {
    if (typeof cjs !== 'undefined' && cjs.dic != null) {
        cjs.dic.get('dataEventHolderProxy').eachHolder(function(scope, holder) {
            if ($.inArray(scope, ['mygames', 'default', 'temporary']) === -1) {
                return
            }
            holder.reinit()
        });
        cjs.dic.get('dataLeagueHolderProxy').eachHolder(function(scope, holder) {
            if ($.inArray(scope, ['mygames', 'default', 'temporary']) === -1) {
                return
            }
            holder.reinit()
        });
        cjs.dic.get('dataEventHolderProxy').eachHandler(function(scope, handler) {
            if ($.inArray(scope, ['mygames', 'default', 'temporary']) === -1) {
                return
            }
            handler.resetIds()
        });
        cjs.dic.get('dataLeagueHolderProxy').eachHandler(function(scope, handler) {
            if ($.inArray(scope, ['mygames', 'default', 'temporary']) === -1) {
                return
            }
            handler.resetIds()
        })
    }
    fs_counter = new Array();
    fs_update = new core_update();
    fs_fade = new Array();
    fsEventsUpdatedStartTime = {}
}
function server_utime(day, user_utime) {
    if (typeof user_utime == 'undefined') user_utime = tudate;
    var server_date = new Date();
    server_date.setTime(user_utime * 1000);
    server_date.setDate(server_date.getDate() + day);
    return server_date.getTime() / 1000
}
function init(sport_name, country_id, tournament_id, country_tournament_order_fin, prev_category, prev_date, startUpdater, participant_id, seriesId) {
    if (typeof startUpdater == 'undefined') {
        startUpdater = true
    }
    if (cjs.Util.Page.isMixed()) {
        sport_name = 'soccer'
    }
    fixHeaderBackground();
    browser_init();
    check_supported_browser('fsbody');
    if (dof = clientStorage.get('fs_of_' + cjs.dic.get('utilConfig').get('app', 'lang', 'web'))) {
        default_odds_format = dof
    }
    ajax_updater = 'update';
    cjs.timezone.setDefaultTz(default_tz);
    initPush();
    initLangBox();
    cjs.synci = new cjs.SyncIndicator();
    var currentTimestamp = cjs.dic.get('Helper_CurrentTime').getTimestamp();
    refresh_utime = currentTimestamp;
    if (iframe_external) {
        TXT_LIST_LINK = cjs.Util.trans('TRANS_POWERED_BY_FREE');
        if (!freescore_serverside) TXT_LIST_LINK += '<br /><span class="partner">' + cjs.Util.trans('TRANS_BLOCK_LABEL_PARTNERS') + ': <a href="http://www.oddsportal.com/" target="_blank">OddsPortal.com</a>, <a href="http://www.flashscore.com/" target="_blank">FlashScore</a></span>';
        if (!iframe_powered_by) TXT_LIST_LINK = '&nbsp;';
        if (body_width <= 500) ICON_LIST = new Array()
    }
    if (typeof SPORT_LIST[sport_name] == 'undefined') {
        return false
    }
    if (typeof country_id == 'undefined' || country_id == 0) {
        country_id = null
    }
    if (typeof tournament_id == 'undefined' || tournament_id == 0) {
        tournament_id = null
    }
    if (typeof participant_id == 'undefined' || participant_id == 0) {
        participant_id = null
    }
    if (typeof seriesId == 'undefined' || seriesId == 0) {
        seriesId = null
    }
    if (typeof country_tournament_order_fin == 'undefined') {
        country_tournament_order_fin = true
    }
    sport_id = mid_s;
    sport = sport_name;
    country = country_id;
    tournament = tournament_id;
    participant = participant_id;
    series = seriesId;
    cjs.isFullPage = true;
    if (!cjs.participantPage && participant) {
        cjs.participantPage = new cjs.ParticipantPage()
    }
    if (!cjs.seriesPage && series) {
        cjs.seriesPage = new cjs.SeriesPage()
    }
    cjs.isTournamentPage = tournamentPage = tournament != null;
    odds_type = SPORT_ODDS_TYPE_LIST[sport];
    initCategory(prev_category);
    color_init();
    initDate(prev_date);
    initFeedRequest();
    initLsLoginClient();
    initPopUpRegistration();
    initMyGames();
    initMyLeagues();
    initLastSerialChecksum();
    window.e_t = cjs.dic.get('utilEnviroment').getEventTrackingObject();
    cjs.scrollToTop = new cjs.ScrollToTop(cjs.Util.trans('TRANS_FOOTER_TOP_ARROW'), $, 300, true, e_t);
    cjs.scrollToTop.init(window, 'div.container');
    updater = new CommCore(country, tournament, country_tournament_order_fin, null, null, participant, series);
    initUpdatingMatches(country, startUpdater);
    if (!startUpdater) {
        preload_hide()
    }
    initScoreHighlighterHtmlDisplayer();
    initTooltip();
    initSoundPlayer();
    initTemplate();
    cjs.dic.get('Helper_VisitCounter').iterate();
    debugWindowByClicks($('#project-debug'));
    cjs.feedService[cjs.Feed_Service_LocalUpdate.NAME] = new cjs.Feed_Service_LocalUpdate(sport_id, function() {
        return cjs.feedRequest
    }, function() {
        return window
    }, function() {
        return fs_update
    });
    cjs.Util.Browser.ieScrollWorkaround()
}
function initSmartbanner() {
    if (cjs.Util.Browser.android() && location.pathname !== cjs.dic.get('util_config').get('portable_apps', 'android', 'smart-banner-url')) {
        cjs.dic.get('Helper_Smartbanner').show()
    }
}

function initTooltip() {
    if (tt == null) {
        tt = new tooltip();
        tt.setHideCallback(function() {
            clearTimeout(core_update._tvTooltipTimeout);
            $('#tooltip-1').attr("isDelay", "0")
        })
    }
}

function debugWindowByClicks(el) {
    if (cjs.Util.Browser.mobile()) {
        var debugWindowEl = $(el);
        var prev = debugWindowEl.prev();
        debugWindowEl.css('height', prev.css('height'));
        debugWindowEl.css('left', parseInt(prev.css('left')) + parseInt(prev.css('width')) + 10 + 'px');
        debugWindowEl.css('top', prev.css('top'));
        debugWindowEl.show();
        (function() {
            var debugWindowCountdown = 0;
            var debugWindowTimer = null;
            debugWindowEl.click(function(e) {
                clearTimeout(debugWindowTimer);
                debugWindowTimer = setTimeout(function() {
                    debugWindowCountdown = 0
                }, 2000);
                debugWindowCountdown++;
                if (debugWindowCountdown == 10) {
                    cjs.dev.init(function() {
                        cjs.dev.debugWindow.show()
                    })
                }
            })
        })()
    }
}
function initLangBox() {
    var url = 'http://' + base_url + '/x/req/';
    cjs.langbox = new cjs.LangboxChecker(clientStorage, url, project_id, !iframe_external, check_lang_box_geo_ip)
}
function initLastSerialChecksum() {
    var last_serial_checksum = retrieve_last_serial_checksum();
    if (last_serial_checksum) {
        if (last_serial_checksum[0] == refresh_serial) {
            if (last_serial_checksum[2] != "sent") {
                send_refresh_failure_message();
                store_last_serial_checksum(refresh_serial + "-" + last_serial_checksum[1] + "-sent")
            }
        } else {
            clear_last_serial_checksum()
        }
    }
}
function initMyLeagues() {
    if (typeof cjs.myLeagues == 'undefined') {
        cjs.myLeagues = new cjs.TopLeagues()
    }
}
function initPush() {
    if (typeof cjs.gamesNotificationOnly !== 'undefined' || cjs.isStaticPage == true) {
        push_fallback = function() {}
    }
    if (typeof mpe_alias === 'undefined') {
        var mpe_alias = 'p1:100, p2:100, p3:100, p4:100, p5:100, p6:100, p7:100, p8:100, p9:100, p10:100'
    }
    if (typeof cjs.push === 'undefined') {
        cjs.push = new cjs.Push('fsdatacentre.com', mpe_alias, 443, true, PushClient, JXG, push_fallback, cjs.Util, $, function() {
            return cjs.sound_player
        }, function() {
            return cjs.dic.get('Helper_AjaxSyncTime').getTime(cjs.dic.get('Helper_AjaxSyncTime').updateAction)
        }, mpe_delivery == 'p' ? true : false, 2);
        cjs.push.setNamespace('/fs/fs3_')
    }
}
function initStaticPagesGamesNotification() {
    window.e_t = cjs.dic.get('utilEnviroment').getEventTrackingObject();
    initLsLoginClient();
    initPopUpRegistration();
    cjs.disableRedrawUserSettings = true;
    if (cjs.dic.get('util_config').get('app', 'game_notification_push', 'enable')) {
        cjs.gamesNotificationOnly = true;
        initSoundPlayer();
        initPush();
        cjs.push.enable(true);
        push_connect();
        initMyGames();
        push_update_subscription()
    } else {
        cjs.isStaticPage = true
    }
}

function initCookieLaw(acceptAutomatically) {
    if (cjs.dic.get('cookieLaw')) {
        cookieLaw = cjs.dic.get('cookieLaw');
        cookieLaw.showIfNeeded(acceptAutomatically)
    }
}

function initProjectMoved() {
    if (cjs.dic.get('projectMoved')) {
        pm = cjs.dic.get('projectMoved');
        pm.showIfNeeded()
    }
}

function initUpdatingMatches(country, startUpdater) {
    var readyCallback = null;
    if (startUpdater) {
        $('.adsghori').hide();
        var param = 'full';
        if (country === null) {
            param = 'full'
        } else if (participant !== null) {
            param = 'participant'
        } else if (series !== null) {
            param = 'series'
        } else if (tournament !== null) {
            param = 'tournament'
        } else if (country !== null) {
            param = 'country'
        }
        readyCallback = function() {
            if (param === 'full') {
                updater.doc_update('full')
            } else {
                setTimeout(function() {
                    updater.doc_update(param)
                }, 10)
            }
        }
    } else {
        readyCallback = function() {
            try {
                document.lsadvert_display();
                document.show_social_button()
            } catch (e) {}
            construct_fscon()
        }
    }
    var dicProxy = cjs.dic.get('DicProxy');
    dicProxy.onReady(readyCallback);
    if (!dicProxy.isReady()) {
        cjs.midnight = new cjs.classes.Midnight(function() {
            return cjs.dic.get('Helper_CurrentTime').getTimestamp()
        }, function() {
            return updater
        }, function() {
            return refresh_in_progress
        }, function() {
            return sudate
        }, get_gmt_offset_diff)
    }
}
function initDate(previousDate) {
    var prev_date = parseInt(previousDate);
    if (!isNaN(prev_date)) sudate = prev_date;
    else {
        prev_date = clientStorage.get('fs_date', 'parent');
        if (null !== prev_date) {
            prev_date = parseInt(prev_date);
            if (!isNaN(prev_date)) {
                sudate = prev_date
            }
            clientStorage.drop('fs_date')
        }
    }
}
function initCategory(previousCategory) {
    var prev_category = parseInt(previousCategory);
    if (!isNaN(prev_category)) {
        category = prev_category
    } else {
        var window_location = new String(window.location);
        if (window_location.match(/cat=/)) {
            var pos = window_location.indexOf('cat=');
            prev_category = window_location.substr(pos + 4, 1);
            prev_category = cjs.Util.Number.toNumber(prev_category);
            category = prev_category
        }
    }
}
function initSoundPlayer() {
    cjs.sound_player = new cjs.SoundPlayerSM2(soundManager, jQuery.ajax, tt, clientStorage, cjs.mygames, cjs.myLeagues, function() {
        return cjs.dic.exists('myTeams') ? cjs.dic.get('myTeams') : null
    }, project_type_name, function() {
        return category
    }, cjs.dic.get('dataEventHolderProxy'), 'livesport_disable_sounds', {
        "finished": "finished",
        "correction": "correction",
        "scoreIncremented": "score-incremented",
        "tennisGame": "tennis-game"
    }, {
        "soccer": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "tennis": {
            "finished": "tennisGameSetMatch",
            "correction": "commonCorrection",
            "score-incremented": "tennisGameSet",
            "tennis-game": "tennisGame"
        },
        "basketball": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "hockey": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "american-football": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "baseball": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "handball": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "rugby-union": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "floorball": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "bandy": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "futsal": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "volleyball": {
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "aussie-rules": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "rugby-league": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "cricket": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "darts": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "snooker": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "boxing": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "beach-volleyball": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "badminton": {
            "correction": "commonCorrection"
        },
        "water-polo": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "field-hockey": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "table-tennis": {
            "correction": "commonCorrection"
        },
        "beach-soccer": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "mma": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "netball": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "pesapallo": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "golf": {
            "finished": "commonEndOfGame"
        },
        "motorsport": [],
        "motorsport-auto-racing": [],
        "motorsport-moto-racing": [],
        "cycling": [],
        "horse-racing": [],
        "esports": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "winter-sports": [],
        "winter-sports-ski-jumping": [],
        "winter-sports-alpine-skiing": [],
        "winter-sports-cross-country": [],
        "winter-sports-biathlon": []
    }, cjs.Util.trans('TRANS_SOUND_ON'), cjs.Util.trans('TRANS_SOUND_OFF'), typeof navigator === 'object' ? (navigator.userAgent || '') : '', function() {
        return 'http://' + base_url
    })
}
function initMyGames() {
    if (typeof cjs.mygames === 'undefined') {
        cjs.mygames = new cjs.MyGames(clientStorage, ls.loginClient, get_mygames_cookie_name(), '/', function() {
            $("div#fscon #mygames-count").html('(' + cjs.mygames.getCount() + ')')
        }, SPORT_LIST_BY_ID, function() {
            return sudate
        }, $, get_match_day, project_id, cjs.cfg, get_gmt_offset, isNoDuelTournament, function() {
            return fsEventsUpdatedStartTime
        });
        cjs.mygamesCheckboxes = new cjs.MyGamesCheckboxes(cjs.mygames);
        cjs.mygamesGroups = new cjs.MyGamesGroups(cjs.mygames, cjs.cfg)
    }
}
function initLsLoginClient() {
    lsid_init();
    cjs.livescoreSettings = new cjs.LivescoreSettings(ls.loginClient, cjs.cfg);
    if (sport_id !== null) {
        my_leagues_init(sport_id)
    }
    if (cjs.Util.Page.isMixed()) {
        cjs.MyLeagues.prototype.isEditable = function() {
            return false
        }
    }
    ls.loginClient.registerCallback('login', function() {
        cjs.mygames.load();
        cjs.livescoreSettings.loadUserSettings();
        redrawLivescore();
        push_update_subscription()
    });
    ls.loginClient.registerCallback('logout', function() {
        cjs.mygames.drop();
        cjs.livescoreSettings.restoreDefaults();
        redrawLivescore();
        push_update_subscription()
    });
    ls.loginClient.registerCallback('dataSyncChange/myLeagues', redrawLivescore);
    ls.loginClient.registerCallback('dataSyncChange/mygames', function() {
        cjs.mygames.load();
        redrawLivescore()
    });
    ls.loginClient.registerCallback('dataSyncChange/lsSettins', function() {
        cjs.livescoreSettings.loadUserSettings();
        redrawLivescore()
    })
}
function initPopUpRegistration() {
}
function initFeedRequest() {
    if (typeof(cjs.feedRequest) !== 'undefined') {
        return
    }
    cjs.feedRequest = (new cjs.Feed_Request.Builder()).setDic(cjs.dic).setUpdaterGetter(function() {
        return updater
    }).setCreateAjaxJqObject(cjs.dic.get('utilEnviroment').createAjaxFeedObject).setBaseFeedXUrlGetter(function() {
        return base_feed_x_url
    }).setProjectTypeIdGetter(function() {
        return project_type_id
    }).setLocalLanguageGetter(function() {
        return cjs.Util.Config.get('app', 'lang', 'web')
    }).setSudateGetter(function() {
        return sudate
    }).setPageUtimeGetter(function() {
        return cjs.dic.get('Helper_CurrentTime').getTimestamp()
    }).setSportIdGetter(function() {
        return parseInt(sport_id)
    }).setIsMixedFeedGetter(function() {
        return mixed_feed
    }).setIe6UrlSuffixGetter(ie6_suffix).setStatsBehaviorGetter(function() {
        return stats_behaviour == 'global' ? '' : '_' + stats_behaviour
    }).setIsParticipantDetailGetter(function() {
        return typeof isParticipantDetail !== 'undefined' && isParticipantDetail == 1
    }).setDetailFeedGeoIpHeadersGetter(function() {
        if (cjs.geoIP) {
            return {}
        }
        return {
            'X-GeoIP': 1
        }
    }).setIsLiveOddsGetter(function() {
        return sub_category == 3 ? 1 : 0
    }).setDetailMainBookmakerGetter(function() {
        return cjs.dic.get('Feed_Content_LiveOdds').getBookmakerId()
    }).setEventParticipantIdGetter(function() {
        return (typeof eventParticipantId !== 'undefined' ? eventParticipantId : '')
    }).setOddsFormatGetter(function() {
        return get_odds_format()
    }).setTournamentStageIdGetter(function() {
        var drawUrl = location.hash.match(/^#draw;([a-z0-9]{8});([a-z0-9]{8}):/i);
        return drawUrl != null && typeof drawUrl[2] != 'undefined' ? drawUrl[2] : tournamentStageEncodedId
    }).setIsTournamentPagesEnableGetter(function() {
        return true
    }).setProjectIdGetter(function() {
        return project_id
    }).setExternalProjectIdGetter(function() {
        return cjs.dic.get('application').getExternalProjectId()
    }).build();
    cjs.feedLoader = new cjs.Feed_Loader();
    cjs.benchmarkRequest = new cjs.Benchmark_Request(cjs.feedRequest, function() {
        return parseInt(sport_id)
    })
}
function redrawLivescore() {
    if (cjs.redrawLivescoreCalled || !cjs.full_loaded) {
        return
    }
    cjs.redrawLivescoreCalled = true;
    setTimeout(function() {
        delete(cjs.redrawLivescoreCalled);
        cjs.livescoreSettings._redrawLivescore();
        redrawTournamentPage()
    }, 100)
}
function createDefaultMatchItem(sportName) {
    var match = {};
    match['AG'] = 0;
    match['AH'] = 0;
    match['AI'] = 'n';
    match['AJ'] = 0;
    match['AK'] = 0;
    match['AL'] = '';
    match['AM'] = '';
    match['AN'] = 'n';
    match['AO'] = 0;
    match['AP'] = 0;
    match['AR'] = 0;
    match['AS'] = 0;
    match['AT'] = '';
    match['AU'] = '';
    match['AV'] = '';
    match['AW'] = '';
    match['AX'] = 0;
    match['AY'] = '';
    match['AZ'] = '';
    match['BA'] = '';
    match['BB'] = '';
    match['BW'] = -1;
    match['BY'] = 0;
    match['BZ'] = 0;
    match['CA'] = 0;
    match['CB'] = 0;
    match['XA'] = 0;
    match['XC'] = 0;
    match['YA'] = 0;
    match['YC'] = 0;
    match['XX'] = '';
    if (SPORT_ODDS_TYPE_LIST[sportName] == '1x2') {
        match['XB'] = 0;
        match['YB'] = 0
    }
    if (sportName != 'soccer') {
        var sportScore = SPORT_SCORE_PART_LIST[sportName];
        if (sportScore > 1) {
            match['BC'] = '';
            match['BD'] = ''
        }
        if (sportScore > 2) {
            match['BE'] = '';
            match['BF'] = ''
        }
        if (sportScore > 3) {
            match['BG'] = '';
            match['BH'] = ''
        }
        if (sportScore > 4) {
            match['BI'] = '';
            match['BJ'] = ''
        }
        if (sportScore > 5) {
            match['BK'] = '';
            match['BL'] = ''
        }
        if (sportScore > 6) {
            match['BM'] = '';
            match['BN'] = '';
            match['BO'] = '';
            match['BP'] = '';
            match['BQ'] = '';
            match['BR'] = '';
            match['BS'] = '';
            match['BT'] = '';
            match['BU'] = '';
            match['BV'] = '';
            match['FA'] = '';
            match['FB'] = ''
        }
        if (sportName == 'tennis') {
            match['DA'] = '';
            match['DB'] = '';
            match['DC'] = '';
            match['DD'] = '';
            match['DE'] = '';
            match['DF'] = '';
            match['DG'] = '';
            match['DH'] = ''
        }
        if ($.inArray(sportName, ['hockey', 'basketball', 'american-football']) !== -1) {
            match['BX'] = ''
        }
    }
    if (is_serving_player(sportName)) match['WC'] = 0;
    if (is_point_by_point(sportName)) {
        match['WA'] = '';
        match['WB'] = ''
    }
    if (sportName == 'snooker' || sportName == 'darts') {
        match['WD'] = 0;
        match['AG'] = '-';
        match['AH'] = '-'
    }
    if (sportName == 'darts') match['WL'] = 0;
    if (has_hits_and_errors(sportName)) {
        match['WF'] = '';
        match['WG'] = '';
        match['WH'] = '';
        match['WI'] = ''
    }
    match['WE'] = 0;
    match['WR'] = 0;
    match['EA'] = 0;
    match['EB'] = 0;
    match['EC'] = 0;
    match['ED'] = 0;
    if (sportName == 'golf') {
        match['AG'] = '';
        match['WT'] = 0;
        match['BA'] = '';
        match['BC'] = '';
        match['BE'] = '';
        match['BG'] = '';
        match['BI'] = '';
        match['GR'] = '';
        match['WS'] = ''
    }
    return match
}
function initTemplate() {
    if (typeof cjs.Template !== 'undefined') {
        cjs.template = new cjs.Template({
            sportDefinitionResolver: new cjs.Template_SportDefinitionResolver({
                categoryGetter: function() {
                    return {
                        category: category,
                        subCategory: sub_category
                    }
                },
                sportList: SPORT_LIST_BY_ID,
                isDetailGetter: isDetailGetter,
                isTournamentPageGetter: function() {
                    return tournamentPage !== false
                },
                isCountryPageGetter: function() {
                    return country !== null
                }
            }),
            isCountryPage: function() {
                return !!country
            },
            templateDimension: new cjs.Template_Dimension({
                iconListGetter: function() {
                    return ICON_LIST
                },
                iconCountGetter: fs_update.icon_count,
                newLiveBettingIconEnableGetter: function() {
                    return true;
                    return false
                },
                showMygamesGroupsGetter: function() {
                    return cjs.mygamesGroups.showOnPage()
                }
            }, $),
            bodyWidthGetter: getBodyWidthGetter,
            sport_list: SPORT_LIST_BY_ID,
            parent_sports: cjs.cfg.parentSports,
            oddsLayoutForSportGetter: getOddsLayoutForSport,
            hasOddsBonusTextGetter: function() {
                return cjs.dic.get('Feed_Content_OddsBonus').hasItems()
            },
            translate: function(key) {
                switch (key) {
                    case 'TRANS_BASEBALL_HITS':
                        return "Hits";
                    case 'TRANS_BASEBALL_ERRORS':
                        return "Errors";
                    default:
                        if (/^TRANS_BASEBALL_MATCH_STATUS_[1-9]$/.test(key)) {
                            key = 'TRANS_DEFAULT_MATCH_STATUS_' + key.split('_')[4] + 'INN'
                        } else if (/^TRANS_GOLF_MATCH_STATUS_[1-4]$/.test(key)) {
                            key = 'TRANS_DEFAULT_MATCH_STATUS_ROUND' + key.split('_')[4]
                        } else if (/^TRANS_PESAPALLO_MATCH_STATUS_[1-8]$/.test(key)) {
                            key = 'TRANS_DEFAULT_MATCH_STATUS_' + key.split('_')[4] + 'INN'
                        }
                        return cjs.Util.trans(key)
                }
            }
        }, $);
        var injectGameData = {
            cellContentGetter: get_cell_content,
            countryGetter: function() {
                return country
            },
            matchDayGetter: get_match_day,
            columnAttrListGetter: fs_update.column_attr_list,
            mygamesCellClassGetter: getMygamesCellClass,
            categoryGetter: function() {
                return category
            },
            projectTypeGetter: function() {
                return project_type_name
            },
            coreUpdateGetter: function() {
                return fs_update
            },
            oddsHighlightGetter: highlight_odds_update,
            scorePartIndexGetter: function(side, scorePartIndex) {
                if (side == 'home') {
                    return home_score_part[scorePartIndex]
                } else {
                    return away_score_part[scorePartIndex]
                }
            },
            oddsCellContentGetter: function(outcomeType, index, participantType) {
                var ret;
                var eventItem = cjs.dic.get('dataEventHolderProxy').getHolder().getEvent(index);
                switch (participantType) {
                    case 'home':
                        ret = get_odds_content(outcomeType, eventItem, null, 'odds-bottom');
                        break;
                    case 'away':
                        ret = get_odds_content(outcomeType, eventItem, null, 'odds-top');
                        break;
                    default:
                        ret = get_odds_content(outcomeType, eventItem);
                        break
                }
                var e = $(ret);
                return [e.html(), e.attr('class')]
            },
            mygamesGroupsGetter: function() {
                return cjs.mygamesGroups
            }
        };
        var injectHeader = {
            mygamesIconGetter: function(labelId) {
                return cjs.mygamesCheckboxes.getHeaderCheckboxHtml(labelId) + cjs.mygamesGroups.getHeaderDropDownHtml(labelId)
            },
            headingGetter: getGameHeader,
            oddsTextGetter: function(cellName, oddsType) {
                var CELLS = cjs.TemplateCell.prototype;
                var spreadTrans = getSpreadTrans();
                switch (cellName) {
                    case CELLS.CELL_HEADER_ODDS:
                        var textType = oddsType == cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_1X2 || oddsType == cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_AH || oddsType == cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_TW || oddsType == cjs.Template_OddsPartDefinition.prototype.ODDS_TYPE_TW_3_6_10 ? 'long' : 'short';
                        var oddsBonus = cjs.dic.get('Feed_Content_OddsBonus');
                        return ['<span title="' + oddsBonus.getTitle() + '">' + oddsBonus.getText(textType) + '</span>', oddsBonus.getMainBookmakerClass()];
                    case CELLS.CELL_HEADER_OUTCOME_1:
                        return ['1', ''];
                    case CELLS.CELL_HEADER_OUTCOME_X:
                        return [TXT_ODDS_0, ''];
                    case CELLS.CELL_HEADER_OUTCOME_2:
                        return ['2', ''];
                    case CELLS.CELL_HEADER_OUTCOME_AH_VALUE:
                        return ['<span class="help" title="' + spreadTrans['full'] + '">' + spreadTrans['short'] + '</span>', ''];
                    case CELLS.CELL_HEADER_OUTCOME_AH_1:
                        return ['1', ''];
                    case CELLS.CELL_HEADER_OUTCOME_AH_2:
                        return ['2', ''];
                    case CELLS.CELL_HEADER_OUTCOME_SPREAD:
                        return ['<span class="help" title="' + spreadTrans['full'] + '">' + spreadTrans['short'] + '</span>', ''];
                    case CELLS.CELL_HEADER_OUTCOME_MONEY_LINE:
                        return [cjs.Util.trans('TRANS_ODDS_TYPE_HOME_AWAY'), ""];
                    case CELLS.CELL_HEADER_OUTCOME_OVER_UNDER:
                        return [cjs.Util.trans('TRANS_ODDS_TYPE_OVER_UNDER'), ""]
                }
            },
            isLeagueCollapsedGetter: function(labl_id) {
                return !cjs.dic.get('dataLeagueHolderProxy').getHolder().getLeague(labl_id).isOpen()
            },
            isLeagueTopGetter: function(labl_id) {
                return cjs.myLeagues.isTop(labl_id) && !cjs.Util.Page.isMixed() && !cjs.Util.Page.isParent()
            },
            headingStageGetter: getStageHeader,
            headingTeamGetter: getTeamHeader,
            mygamesTeamIconGetter: function(teamId) {
                return cjs.mygamesCheckboxes.getTeamHeaderCheckboxHtml(teamId)
            },
            tournamentInfoTextGetter: function(leagueId) {
                return cjs.dic.get('Helper_TournamentInfoText').getInfoText(leagueId)
            },
            headerOutcomeEachWayHandicapGetter: function(leagueId) {
                var eventHandler = cjs.dic.get('dataEventHolderProxy').getHandler();
                var eventHolder = eventHandler.getDataHolder();
                var handicap = '';
                eventHandler.each(function(index, id) {
                    var eventItem = eventHolder.getItem(id);
                    if (eventItem.getLeagueId() === leagueId) {
                        handicap = eventItem.getEachWayHandicap();
                        return false
                    }
                });
                return handicap
            }
        };
        cjs.templateGameDataProxy = new cjs.TemplateGameDataProxy(injectGameData, $);
        cjs.templateHeaderDataProxy = new cjs.TemplateHeaderDataProxy(injectHeader, $, cjs.dic)
    }
}
function init_after_feeds() {
    if (!cjs.full_loaded || !cjs.repair_loaded) return;
    if (counter_update_interval === null) {
        counter_update_interval = setInterval('counter_update()', 5 * 1000)
    }
    if (typeof url_check != 'undefined' && url_check && !lsin_status) setTimeout('service_url_check()', 1000);
    set_service_status()
}
function start_updating_odds() {
    if (typeof updater.updating_odds_interval != 'undefined') stop_updating_odds();
    updater.updating_odds_interval = setInterval('updater.doc_update(\'updated-odds\')', Number(updater.ajax_odds_update_time) * 1000)
}
function stop_updating_odds() {
    clearInterval(updater.updating_odds_interval);
    delete updater.updating_odds_interval
}
function detail_init(sport_name, game_id, content_utime) {
    browser_init();
    ajax_updater = 'game';
    u_304 = '';
    if (typeof SPORT_LIST[sport_name] == 'undefined') return false;
    if (typeof game_id == 'undefined') return false;
    cjs.eventId = game_id;
    cjs.isDetailPage = true;
    if (typeof content_utime == 'undefined') return false;
    var hash_list = ['CA', 'CB', 'CC', 'CD', 'CE', 'CF', 'CG', 'CH', 'CI', 'CJ', 'CL', 'CM'];
    for (var i in hash_list) {
        if (typeof fs_detail[hash_list[i]] == 'undefined') fs_detail[hash_list[i]] = null
    }
    sport = sport_name;
    if (typeof tz_list != 'undefined') cjs.timezone.setTZlist(tz_list);
    cjs.timezone.setDefaultTz(default_tz);
    if (typeof cjs.Detail_TimeCounter !== 'undefined') {
        cjs.detailTimeCounter = new cjs.Detail_TimeCounter({
            sportIdGetter: function() {
                return parseInt(sport_id)
            },
            pageUtimeGetter: function() {
                return cjs.dic.get('Helper_CurrentTime').getTimestamp()
            },
            gameStageUtimeGetter: function() {
                return g2utime
            },
            hasLiveCenterGetter: function() {
                return hasLiveCentreEnabled
            },
            eventStageIdGetter: function() {
                return event_stage_id
            },
            isRugby7Getter: function() {
                return typeof fs_detail.DU !== 'undefined' && fs_detail.DU
            }
        })
    }
    sport_id = mid_s;
    cjs.dic.get('detail_tabs').setAfterShowCallback(function() {
        if (cjs.dic.get('detail_tabs').hasTable('lineups')) {
            $('#detail-show-lineup-link').show()
        } else {
            $('#detail-show-lineup-link').hide()
        }
    });
    cjs.dic.get('detail_tabs').show();
    load_geoIP_clientIP(function() {
        cjs.dic.get('detail_tabs').show()
    });
    updater = new CommCore(null, null, true, game_id, content_utime);
    initFeedRequest();
    cjs.gamesNotificationOnly = true;
    initSoundPlayer();
    cjs.push = new cjs.Push('fsdatacentre.com', mpe_alias, 443, true, PushClient, JXG, push_fallback, cjs.Util, $, function() {
        return cjs.sound_player
    }, function() {
        return cjs.dic.get('Helper_AjaxSyncTime').getTime(cjs.dic.get('Helper_AjaxSyncTime').gameAction)
    }, false, 2);
    cjs.push.setNamespace('/fs/fs3_');
    if (cjs.Util.Config.get("app", "detail", "version") == 2) {
        cjs.isFullPage = true;
        cjs.push.enable(true);
        push_connect()
    } else {
        cjs.push.scheduleFallback(0);
        setTimeout('push_refresh()', 20 * 1000)
    }
    if (cjs.dic.get('util_config').get('app', 'myteams', 'enable') == true) {
        myTeamsInit(sport_id)
    }
    initMyGames();
    cjs.synci = new cjs.SyncIndicator();
    cjs.synci.htmlUpdate($("div#sync-indicator"));
    if (isParticipantDetail) {} else if (fs_detail.CA == null) {
        updater.doc_update('detail')
    } else {
        detail_format_utime();
        detail_set_odds_winner()
    }
    cjs.detailTimeCounter.start();
    tt = new tooltip('detail');
    ttb = new tooltip(null, 'bonus');
    ttb.set_max_width(250);
    if (event_stage_type_id == 2 && typeof match_history_tab_stages[event_stage_id] != 'undefined') {
        detail_tabs.tabs.tab_match_history.selected = match_history_tab_stages[event_stage_id] + '_history'
    }
    $(".dw-icon").attr("title", cjs.Util.trans('TRANS_WINNER_TOOLTIP'));
    $(".dw-icon.win").attr("title", cjs.Util.trans('TRANS_WINNER'));
    try_alien_referer_protection();
    if (sport == 'tennis') {
        detail_tabs.tabs.tab_head_2_head.tabs = {
            tab_all_h2h: {
                tabElement: {
                    id: "h2h-all-surface"
                },
                contentElement: {
                    id: "tab-h2h-all-surface"
                },
                urlName: "all"
            },
            tab_1_h2h: {
                tabElement: {
                    id: "h2h-1-surface"
                },
                contentElement: {
                    id: "tab-h2h-1-surface"
                },
                urlName: "1"
            },
            tab_2_h2h: {
                tabElement: {
                    id: "h2h-2-surface"
                },
                contentElement: {
                    id: "tab-h2h-2-surface"
                },
                urlName: "2"
            },
            tab_3_h2h: {
                tabElement: {
                    id: "h2h-3-surface"
                },
                contentElement: {
                    id: "tab-h2h-3-surface"
                },
                urlName: "3"
            }
        }
    }
    registerDetailTabCallbacks();
    window.e_t = cjs.dic.get('utilEnviroment').getEventTrackingObject()
}
function setHolderProxyScope(category) {
    var holderProxyProto = cjs.dic.getClass('dataHolderProxy').prototype;
    var scope;
    switch (category) {
        case 5:
            scope = holderProxyProto.SCOPE_MYGAMES;
            break;
        default:
            scope = holderProxyProto.SCOPE_DEFAULT
    }
    var holderEventProxy = cjs.dic.get('dataEventHolderProxy');
    var holderLeagueProxy = cjs.dic.get('dataLeagueHolderProxy');
    var previousScopeEvent = holderEventProxy.getScope();
    var previousScopeLeague = holderLeagueProxy.getScope();
    var dataEventHolderOld, dataEventHolderNew, dataLeagueHolderOld, dataLeagueHolderNew;
    var resetHolders = false;
    if (previousScopeEvent !== scope) {
        if (sudate == 0 && previousScopeEvent === previousScopeLeague && previousScopeEvent === holderProxyProto.SCOPE_DEFAULT && scope === holderProxyProto.SCOPE_MYGAMES) {
            dataEventHolderOld = cjs.dic.get('dataEventHolder');
            dataEventHolderNew = cjs.dic.get('dataEventHolderMygames');
            dataLeagueHolderOld = cjs.dic.get('dataLeagueHolder');
            dataLeagueHolderNew = cjs.dic.get('dataLeagueHolderMygames');
            dataEventHolderNew.reinit(dataEventHolderOld.getReferences());
            dataLeagueHolderNew.reinit(dataLeagueHolderOld.getReferences());
            holderEventProxy.setScope(scope);
            holderLeagueProxy.setScope(scope);
            holderEventProxy.getHandler().resetIds();
            holderLeagueProxy.getHandler().resetIds()
        } else if (sudate == 0 && previousScopeEvent === previousScopeLeague && previousScopeEvent === holderProxyProto.SCOPE_MYGAMES && scope === holderProxyProto.SCOPE_DEFAULT) {
            holderEventProxy.getHolder().reinit();
            holderLeagueProxy.getHolder().reinit();
            holderEventProxy.getHandler().resetIds();
            holderLeagueProxy.getHandler().resetIds();
            holderEventProxy.setScope(scope);
            holderLeagueProxy.setScope(scope)
        } else {
            holderEventProxy.getHolder().reinit();
            holderLeagueProxy.getHolder().reinit();
            holderEventProxy.getHandler().resetIds();
            holderLeagueProxy.getHandler().resetIds();
            holderEventProxy.setScope(scope);
            holderLeagueProxy.setScope(scope);
            holderEventProxy.getHolder().reinit();
            holderLeagueProxy.getHolder().reinit();
            holderEventProxy.getHandler().resetIds();
            holderLeagueProxy.getHandler().resetIds()
        }
    }
}
function pgenerate(full, cat, force_scroll_up, force_cat, subcategory, disableMyGamesLoad) {
    var navigation = cjs.dic.get('list_navigation');
    setHolderProxyScope(cat);
    if (typeof subcategory == 'undefined' || subcategory == null) {
        subcategory = 1
    }
    if (typeof cat !== 'undefined' && cat != category) {
        temporaryLeagueData.reinit()
    }
    disableMyGamesLoad = !!disableMyGamesLoad;
    sub_category = subcategory;
    if (navigation.isOdds()) {
        cjs.dic.get('Helper_StageTabs').setCurrentStageId(null);
        cjs.scoreHighlighter._highlighter.setIsOddsView(true)
    } else {
        cjs.scoreHighlighter._highlighter.setIsOddsView(false)
    }
    force_scroll_up = (typeof force_scroll_up == 'undefined' || !force_scroll_up ? false : true);
    if (typeof cat != 'undefined') category = cat;
    if (navigation.isLive()) {
        if (sudate != 0) {
            sudate = 0;
            preload_show();
            push_refresh();
            setTimeout("updater.doc_update()", 10);
            return
        }
    }
    banner_hide();
    preload_show();
    if (navigation.isMyGames()) {
        if (!disableMyGamesLoad) {
            if (typeof cjs.myTeams != 'undefined' && typeof ls != 'undefined' && ls.loginClient && ls.loginClient.loggedIn()) {
                if (cjs.dic.get('MyTeams').getCount() == 0) {
                    loadAndShowMygamesContent()
                } else {
                    cjs.dic.get('MyTeams').reloadParticipants()
                }
            } else {
                loadAndShowMygamesContent()
            }
        }
        return
    } else if (updater.last_doc_update_category == 5) {
        if (cjs.dic.get('dataEventHolderProxy').getHolder().hasData()) {
            sort_fs_data();
            updater.last_doc_update_category = category
        } else {
            updater.last_doc_update_category = category;
            sudate = 0;
            preload_show();
            setTimeout("updater.doc_update()", 10);
            return
        }
    }
    cjs.mygames.load(true);
    if (project_type_name == '_ass') {
        expand_collapse_league_load()
    }
    if (subcategory == 2 || subcategory == 3) {
        pgenerate_odds();
        return
    }
    if (category == 6 || category == 7) {
        pgenerate_country();
        return
    }
    construct_fscon();
    setTimeout(function() {
        generate(full, category, force_scroll_up)
    }, 1)
}
function generate(full, cat, force_scroll_up) {
    cat = (country == null ? (typeof cat == 'undefined' ? category : cat) : 0);
    try {
        if (force_scroll_up && parent.window) parent.window.scrollTo(0, 0)
    } catch (e) {}
    generate_content(cat, false, full);
    if (cjs.dic.get('dataEventHolderProxy').getHolder().hasData() === false) {
        if (cjs.Util.Config.get('app', 'game_notification_push', 'enable')) {
            cjs.gamesNotificationOnly = true;
            push_connect()
        } else {
            push_disconnect()
        }
    } else if (!cjs.push.isConnected()) {
        push_connect()
    }
    if (cjs.push.isConnected()) push_update_subscription();
    preload_hide();
    banner_show();
    if (full && cat != 4) {
        cjs.scoreHighlighter.displayAll()
    }
    if (full && tt == null) tt = new tooltip();
    if (tt != null) tt.hide_all();
    counter_update();
    if (interval_live != null) {
        clearInterval(interval_live);
        interval_live = null
    }
    show_iframe_top_messages();
    try {
        parent.document.lsadvert_display();
        var adBlocked = new cjs.AdBlocked($, cjs.cfg);
        banners.setAdBlockedCallback(function(blocked, browser) {
            adBlocked.save(blocked, browser)
        });
        if (typeof cjs.myLeaguesMenu != 'undefined') {
            banners.setDisplayedCallback(function() {
                cjs.myLeaguesMenu.draw()
            })
        }
    } catch (e) {
        try {
            document.lsadvert_display()
        } catch (e) {}
    }
    var pixelId = cjs.Util.Config.get('app', 'facebook_pixel_campaign_id');
    if (pixelId) {
        callFbPixelCampaignCallback(pixelId)
    }
    $('.adsghori').show();
    if (!$('body').hasClass('background-add-on')) {
        try {
            parent.document.show_social_button()
        } catch (e) {
            try {
                document.show_social_button()
            } catch (e) {}
        }
    }
    if (cjs.dic.get('util_config').get('app', 'box-over-content', 'scrolling-enable')) {
        var scrollingBanner = cjs.dic.get('Helper_ScrollingBanner');
        scrollingBanner.setBoxOverContent()
    }
}
function getEventsHtmlContainer(isOdds) {
    if (isOdds) {
        $container = $('<div>', {
            'class': 'odds-content'
        });
        if (cjs.Util.Page.isMixed() || cjs.Util.Page.isParent() || cjs.dic.get('page').isChildSportPage()) {
            $container.attr('id', 'local-mygames')
        }
    } else {
        $container = $('<div>', {
            'class': 'table-main'
        })
    }
    return $container
}

function appendEventsHtmlContainer($container, $appendTo, isOdds, replace) {
    if (isOdds) {
        $tmp = $container
    } else {
        if (category == 5 || cjs.Util.Page.isMixed() || cjs.Util.Page.isParent() || cjs.dic.get('page').isChildSportPage()) {
            $tmp = $('<div>', {
                id: 'local-mygames'
            }).append($container)
        } else {
            $tmp = $container
        }
    }
    if (replace) {
        $appendTo.html($tmp)
    } else {
        $appendTo.append($tmp)
    }
}

function generate_content(cat, isOdds, full, first_round, last_sport, lastGroup, afterContentGeneratedCallback, events, $container, replaceIfAllGenerated, lastSportCategoryId, lastIsGolfPlayOff, lastStageTabKey, stageTabsData) {
    cjs.mygames._startStorageSyncTimer();
    replaceIfAllGenerated = !!replaceIfAllGenerated;
    var eventHolderProxy = cjs.dic.get('dataEventHolderProxy');
    var dataEventHandler = eventHolderProxy.getHandler();
    var dataEventHolder = eventHolderProxy.getHolder();
    var multipleEvents = {};
    var html = [];
    var $fs = $('div#fs');
    var $container;
    var sportList = cjs.dic.get('util_list').getSports();
    if (first_round == null) {
        first_round = true
    }
    var useMygamesGroups = cjs.mygamesGroups.showOnPage();
    if (first_round) {
        cjs.template.reset();
        fs_update.updateEventPositions();
        iframe_stop_generating = true;
        clearTimeout(iframe_part_generator);
        $container = getEventsHtmlContainer(isOdds);
        if (!replaceIfAllGenerated) {
            $fs.empty();
            appendEventsHtmlContainer($container, $fs, isOdds)
        }
        var events = [];
        if (useMygamesGroups) {
            var mygamesEventIds = [];
            dataEventHandler.each(function(index, id) {
                var eventItem = this.getItem(id);
                var leagueId = eventItem.getValue('labl_id');
                if (cjs.mygames.check(id) || cjs.mygames.isAddedWholeTournament(leagueId)) {
                    mygamesEventIds.push(id)
                }
            });
            var gamesGroups = cjs.mygames.getGamesGroups(mygamesEventIds);
            for (var group in gamesGroups) {
                for (var i in gamesGroups[group]) {
                    events.push({
                        id: gamesGroups[group][i],
                        group: group && group != '0' ? group : ''
                    })
                }
            }
        } else {
            events = dataEventHandler.getIds().slice(0)
        }
        if (cjs.dic.get('util_sport').getId() === sportList.HORSE_RACING && !cjs.dic.get('list_navigation').isMyGames()) {
            var stageTabsHelper = cjs.dic.get('Helper_StageTabs');
            stageTabsHelper.prepareStages(events)
        }
    }
    var labl_id = null;
    var line = 0;
    var first = true;
    var table_open = false;
    var templateColspan = 0;
    var row_generated = 0;
    var rowIndex = 0;
    var max_generated_rows = cjs.dic.get('util_sport').getId() === sportList.HORSE_RACING ? 300 : 100;
    var lastIsDuel = 0;
    var todayMatchesAdded = false;
    var last_visible_labl_id = null;
    var currentGroup = null;
    var lastHeaderPosition = -1;
    var hasLastHeaderMygames = false;
    var eventId, eventItem, leagueItem, leagueId, meetingId, meetingKey;
    var stageDate, gmtOffsetGetter;
    var sportCategoryId;
    var newLabelHeader;
    lastSportCategoryId = lastSportCategoryId || 0;
    lastIsGolfPlayOff = lastIsGolfPlayOff || false;
    var replaceCheckboxState = function(html, index, state) {
        var stateClass = state ? 'tomyga' : "tomyg";
        html[index] = html[index].replace(/class="tomyga?"/, 'class="' + stateClass + '"')
    };
    if (!isOdds) {
        var expand_collapse_league_enable = country == null && false
    }
    cjs.dic.get('Feed_Content_OddsBonus').reset();
    var leaderboard = false;
    for (var _i = 0, _len = events.length; _i < _len; _i++) {
        rowIndex++;
        eventId = useMygamesGroups ? events[_i].id : events[_i];
        eventItem = dataEventHolder.getEvent(eventId);
        leagueItem = eventItem.getLeague();
        leagueId = leagueItem.getId();
        meetingId = leagueItem.getMeetingId();
        gmtOffsetGetter = cjs.dic.get('utilEnviroment').getGmtOffset();
        if (leagueItem.getStageTabs()) {
            stageDate = cjs.dic.get('util_date').timestamp2date('dmY', leagueItem.getRaceInfoText().split('|')[0], gmtOffsetGetter());
            meetingKey = meetingId + stageDate
        }
        if (!first_round && iframe_stop_generating) {
            iframe_stop_generating = false;
            return
        }
        if (!isOdds && !full && !eventItem.getValue('update')) {
            continue
        }
        var tr_classes = [];
        var after_labl = false;
        if (useMygamesGroups) {
            currentGroup = events[_i].group
        }
        var isUninterestingLeague = !cjs.myLeagues.isTop(leagueId) && leagueItem.isSecondary() && (country == null && cat != 5);
        if (leagueId != labl_id || currentGroup != lastGroup) {
            labl_id = leagueId;
            if (isUninterestingLeague) {
                continue
            }
            if (isOdds) {
                if (first_round && first) {
                    html.push('<div id="odds-format"><div class="', eventItem.getSportName(), '">');
                    html.push(cjs.Util.trans('TRANS_ODDS_FORMAT_SWITCH') + ' ');
                    var odds_tmp = [];
                    for (var odds_format_index in ODDS_FORMAT_LIST) {
                        if (odds_format_index == default_odds_format) {
                            odds_tmp.push('<span class="active-odds-format" title="' + ODDS_FORMAT_LIST[odds_format_index]['name_title'] + '">' + ODDS_FORMAT_LIST[odds_format_index]['name_iframe'] + '</span>')
                        } else {
                            odds_tmp.push('<a href="#" onclick="switch_odd_format(\'' + odds_format_index + '\'); return false" title="' + ODDS_FORMAT_LIST[odds_format_index]['name_title'] + '">' + ODDS_FORMAT_LIST[odds_format_index]['name_iframe'] + '</a>')
                        }
                    }
                    if (odds_tmp.length > 0) {
                        html.push(odds_tmp.join(' | '))
                    }
                    html.push('</div></div>')
                }
            }
            newLabelHeader = true
        } else if (isUninterestingLeague) {
            continue
        }
        if (!isGameHidden(eventId, currentGroup) && (isOdds || cat == 0 || (cat == 1 && (eventItem.isMarkedAsLive() || eventItem.isLive())) || (cat == 2 && eventItem.isFinished()) || (cat == 3 && eventItem.isScheduled()) || (cat == 5 && (cjs.mygames.check(eventId) || cjs.mygames.isAddedWholeTournament(leagueId))) || (cat == 6 || cat == 7))) {} else {
            continue
        }
        row_generated++;
        if (currentGroup != lastGroup) {
            last_sport = null
        }
        if (typeof lastStageTabKey == 'undefined') {
            lastStageTabKey = null
        }
        if ((last_visible_labl_id != cjs.getOriginalLabelId(leagueId) || currentGroup != lastGroup) && newLabelHeader) {
            templateColspan = cjs.template.getTemplateDefinitionForLabel(eventItem.getSportId(), leagueItem.getTournamentStageId()).getGameColumnCount();
            if (lastHeaderPosition !== -1) {
                replaceCheckboxState(html, lastHeaderPosition, hasLastHeaderMygames);
                lastHeaderPosition = -1;
                hasLastHeaderMygames = false
            }
            if (table_open) {
                html.push('</tbody>');
                html.push('</table>');
                table_open = false;
                if (!first_round && iframe_stop_generating) {
                    iframe_stop_generating = false;
                    return
                }
                if (row_generated > max_generated_rows) {
                    add_show_all_games_link(html, last_visible_labl_id, lastGroup);
                    iframe_stop_generating = false;
                    $container.append(html.join(''));
                    if_resize();
                    events.splice(0, rowIndex - 1);
                    iframe_part_generator = setTimeout((function(categoryId, isOdds, isFull, sportIdent, lastGroup, afterContentGeneratedCallback, events, $container, replaceIfAllGenerated, lastSportCategoryId, lastIsGolfPlayOff, lastStageTabKey, stageTabsData) {
                        return function() {
                            generate_content(categoryId, isOdds, isFull, false, sportIdent, lastGroup, afterContentGeneratedCallback, events, $container, replaceIfAllGenerated, lastSportCategoryId, lastIsGolfPlayOff, lastStageTabKey, stageTabsData)
                        }
                    })(cat, isOdds, full, last_sport, lastGroup, afterContentGeneratedCallback, events, $container, replaceIfAllGenerated, lastSportCategoryId, lastIsGolfPlayOff, lastStageTabKey, stageTabsData), 10);
                    return
                }
            }
            var table_classes = [eventItem.getSportName()];
            if (cjs.Util.Sport.inGroup(eventItem.getSportId(), cjs.constants.sport.MOTORSPORT)) {
                table_classes = [SPORT_LIST_BY_ID[cjs.cfg.parentSports[eventItem.getSportId()]]]
            }
            if (!first) {
                add_show_all_games_link(html, last_visible_labl_id, lastGroup)
            }
            var sportHeaderTxt = cjs.Util.Sport.inGroup(eventItem.getSportId(), cjs.constants.sport.MOTORSPORT) ? leagueItem.getTitle().split(':')[0] : TXT_SPORT[eventItem.getSportName()]['name'];
            sportCategoryId = cjs.Util.Sport.getCategoryId(eventItem, leagueItem);
            if (isOdds) {
                if ((lastSportCategoryId != sportCategoryId && country == null) || (cat == 5 || cjs.Util.Page.isMixed() || cjs.Util.Page.isParent()) && eventItem.getSportName() != last_sport) {
                    var sportHeaderJqObject = cjs.template.createSportHeader(eventItem.getSportId(), eventItem.getOriginalId(), sportHeaderTxt);
                    html.push(sportHeaderJqObject.html())
                }
                table_classes.push('odds')
            } else {
                if ((lastSportCategoryId != sportCategoryId && country == null) || (cat == 5 || cjs.Util.Page.isMixed() || cjs.Util.Page.isParent()) && eventItem.getSportName() != last_sport) {
                    if (!first && full && category == 0) {
                        add_more_sport_games_link(html, last_sport)
                    }
                    var sportHeaderJqObject = cjs.template.createSportHeader(eventItem.getSportId(), eventItem.getOriginalId(), sportHeaderTxt);
                    if (cat == 5 && currentGroup && lastGroup != currentGroup) {
                        html.push('<div class="table-line-bottom"></div>');
                        html.push(cjs.template.createGroupHeader(eventItem.getSportId(), eventItem.getOriginalId(), cjs.Util.trans('TRANS_MY_GAMES_GROUP').replace('%s', currentGroup)).html())
                    }
                    html.push(sportHeaderJqObject.html())
                }
                var page = cjs.dic.get('page');
                if (page.isTournamentPageSummary() && isNoDuelTournament(labl_id)) {
                    if (first_round && !leaderboard) {
                        var leaderboardTrans = 'Results';
                        html.push('<div class="spacer-block">&nbsp;</div>');
                        html.push('<ul class="ifmenu"><li class="selected"><span><strong>' + leaderboardTrans + '</strong></span></li></ul><div class="ifmenu-border"></div>');
                        leaderboard = true
                    }
                } else if ((page.isTournamentPageSummary() || page.isSeriesPageSummary()) && lastIsDuel == 0) {
                    var todaysMatchesTrans = (!isNoDuelTournament(labl_id) && (sport_id == cjs.constants.sport.GOLF || cjs.Util.Sport.isRacingSport(sport_id))) ? cjs.Util.trans('TRANS_TOURNAMENT_PAGE_PLAYER_RESULTS') : cjs.Util.trans('TRANS_TOURNAMENT_PAGE_TODAYS_MATCHES');
                    html.push('<div class="spacer-block">&nbsp;</div><ul class="ifmenu"><li class="selected"><span><strong>' + todaysMatchesTrans + '</strong></span></li></ul><div class="ifmenu-border"></div>')
                }
                lastIsDuel = leagueItem.getValue('ZW');
                lastIsGolfPlayOff = leagueItem.isGolfPlayOff();
                if (cjs.dic.get('page').isParticipantPage() && !todayMatchesAdded) {
                    html.push('<div class="spacer-block">&nbsp;</div><ul class="ifmenu"><li class="selected"><span><strong>');
                    html.push(sport_id == cjs.constants.sport.GOLF ? 'Today' : 'Today\'s Matches');
                    html.push('</strong></span></li></ul><div class="ifmenu-border"></div>');
                    todayMatchesAdded = true
                }
                if (isNoDuelTournament(leagueId)) {
                    table_classes.push('no-duel')
                }
            }
            lastSportCategoryId = sportCategoryId;
            var dataAttrGroup = '';
            if (currentGroup != null) {
                dataAttrGroup = ' data-group="' + (currentGroup ? currentGroup : 0) + '"'
            }
            var stageTabsHelper;
            var dataAttrTournamentStageId = '';
            var dataAttrEventId = '';
            var isInMyGames = cat == 5;
            if (leagueItem.getStageTabs() && !isInMyGames) {
                var stageId = leagueItem.getStageId();
                stageTabsHelper = cjs.dic.get('Helper_StageTabs');
                if (lastStageTabKey != meetingKey) {
                    stageTabsHelper.prepareData(leagueItem);
                    lastStageTabKey = meetingKey;
                    html.push(stageTabsHelper.getHtml())
                }
                var currentStageId = stageTabsHelper.getCurrentStageId();
                dataAttrTournamentStageId = ' data-stage-id="' + stageId + '"';
                dataAttrEventId = ' data-group-key="' + meetingKey + '"';
                if (stageId !== currentStageId) {
                    table_classes.push('hidden')
                }
            }
            html.push('<table' + dataAttrGroup + dataAttrTournamentStageId + dataAttrEventId + ' class="', table_classes.join(' '), '"', ie ? ' cellspacing="0" cellpadding="0"' : '');
            var sportDefinition = cjs.template.getTemplateDefinitionForLabel(parseInt(eventItem.getSportId()), leagueItem.getTournamentStageId());
            var colGroupHtml = sportDefinition.getHeaderColumnsHtmlTemplate();
            html.push(colGroupHtml);
            html.push('<thead>');
            var gameHeaderHtml = cjs.templateHeaderDataProxy.getFilledHeader(parseInt(eventItem.getSportId()), leagueId);
            if (useMygamesGroups) {
                gameHeaderHtml = gameHeaderHtml.replace(/(<span class="mg_dropdown_selected">)[-0-9]*(<\/span>)/, function(match, $1, $2) {
                    return $1 + cjs.mygamesGroups.getGroupValue(currentGroup) + $2
                })
            }
            lastHeaderPosition = html.push(gameHeaderHtml) - 1;
            html.push('</thead>');
            newLabelHeader = false;
            tr_classes.push('tr-first');
            after_labl = true;
            table_open = true;
            if (isOdds) {
                html.push('<tbody>')
            } else {
                lastGroup = currentGroup;
                if (!expand_collapse_league_enable || leagueItem.isOpen()) {
                    html.push('<tbody>')
                }
            }
            last_visible_labl_id = cjs.getOriginalLabelId(leagueId)
        }
        last_sport = eventItem.getSportName();
        if (expand_collapse_league_enable && !leagueItem.isOpen()) {
            continue
        }
        if (line == 1) {
            tr_classes.push('even')
        }
        var sportDefinition = cjs.template.getTemplateDefinitionForLabel(parseInt(eventItem.getSportId()), leagueItem.getTournamentStageId());
        if (!after_labl && sportDefinition.getGameRowCount() > 1) {
            html.push('<tr class="blank-line"><td colspan="', templateColspan, '"></td></tr>')
        }
        if (!hasLastHeaderMygames) {
            hasLastHeaderMygames = cjs.mygames.check(eventId)
        }
        generateGameContentFromTemplate(eventId, tr_classes, html, useMygamesGroups ? currentGroup : null);
        if (useMygamesGroups) {
            multipleEvents[eventId] = true
        }
        line = (line == 1 ? 0 : 1);
        first = false
    }
    if (lastHeaderPosition !== -1) {
        replaceCheckboxState(html, lastHeaderPosition, hasLastHeaderMygames)
    }
    if (row_generated == 0) {
        html.push(no_match_found(cat))
    } else {
        if (table_open) {
            html.push('</tbody>');
            html.push('</table>');
            if (!isOdds) {
                if (full && category == 0) {
                    add_more_sport_games_link(html, last_sport, true)
                }
            }
            if (!first) {
                add_show_all_games_link(html, last_visible_labl_id, lastGroup)
            }
            html.push('<div class="table-line-bottom"></div>')
        }
        html.push(cjs.mygamesGroups.getGroupInfoBox())
    }
    if (cat == 5 && typeof cjs.myTeams != 'undefined') {
        cjs.dic.get('contentGenerator').setStage(cjs.dic.getClass('contentGenerator').STAGE_MYTEAMS);
        cjs.mygamesGroups.setTemporaryDisabled(true);
        cjs.template.reset();
        var myTeamsCount = cjs.myTeams.getCount();
        html.push('<div class="spacer-block">&nbsp;</div><ul class="ifmenu"><li class="selected single-nav-select"><span><strong>My Teams (' + myTeamsCount + ')</strong></span></li></ul><div class="ifmenu-border"></div><div id="my-teams">');
        if (myTeamsCount) {
            var myTeamsParticipantEvents = cjs.myTeams.getParticipantsEvents();
            var myTeamsParticipantSort = [];
            for (var participantKey in myTeamsParticipantEvents) {
                var participantData = cjs.myTeams.getParticipantData(participantKey);
                myTeamsParticipantSort.push({
                    participantKey: participantKey,
                    title: participantData.title,
                    name: participantData.name,
                    sportName: cjs.dic.get('util_sport').getTranslatedName(participantData.sportId)
                })
            }
            myTeamsParticipantSort.sort(function(a, b) {
                var key = function(p) {
                    return p.title + '  ' + p.sportName
                };
                return cjs.dic.get('util_string').compare(key(a), key(b))
            });
            var rowIndex = 0;
            for (var sortIndex = 0; sortIndex < myTeamsParticipantSort.length; sortIndex++) {
                participantKey = myTeamsParticipantSort[sortIndex].participantKey;
                var lastSportId = null;
                var eventsCount = myTeamsParticipantEvents[participantKey].length;
                if (eventsCount == 0) {
                    var sportId = participantKey.replace(/^([0-9]+)_.*/, '$1');
                    var table_classes = ['no-match', cjs.Util.Sport.getOriginalNameFromId(sportId)];
                    html.push('<table class="', table_classes.join(' '), '"', ie ? ' cellspacing="0" cellpadding="0"' : '', '>');
                    generateContentMyGamesTeamsHeader(html, sportId, participantKey);
                    after_labl = true;
                    html.push('<tbody>');
                    templateColspan = cjs.template.getTemplateDefinitionForSport(sportId).getGameColumnCount();
                    html.push('<tr class="tr-first' + (rowIndex % 2 != 0 ? ' even' : '') + '"><td class="no-match" colspan="', templateColspan, '">');
                    var teamName = myTeamsParticipantSort[sortIndex].name;
                    html.push('%s_team has no match scheduled for the next %s_days days.'.replace('%s_team', teamName).replace('%s_days', cjs.cfg.mygames_future_days));
                    html.push('</td></tr>');
                    html.push('</tbody>');
                    html.push('</table>');
                    if (sortIndex == myTeamsParticipantSort.length - 1) {
                        html.push('<div class="table-line-bottom"></div>')
                    }
                    rowIndex++
                } else {
                    var eventsSort = [];
                    for (var eventIndex in myTeamsParticipantEvents[participantKey]) {
                        eventId = myTeamsParticipantEvents[participantKey][eventIndex];
                        if (dataEventHolder.hasEvent(eventId)) {
                            eventItem = dataEventHolder.getItem(eventId);
                            eventsSort.push({
                                eventId: eventId,
                                startTime: eventItem.getStartUTime()
                            })
                        }
                    }
                    eventsSort.sort(function(a, b) {
                        return a.startTime == b.startTime ? 0 : (a.startTime < b.startTime ? -1 : 1)
                    });
                    var lastNoDuel = null;
                    for (var i = 0; i < eventsSort.length; i++) {
                        eventId = eventsSort[i].eventId;
                        var tr_classes = [];
                        var after_labl = false;
                        eventItem = dataEventHolder.getItem(eventId);
                        leagueItem = eventItem.getLeague();
                        leagueId = leagueItem.getId();
                        var noDuel = isNoDuelTournament(leagueId);
                        if (lastSportId != eventItem.getSportId()) {
                            if (lastSportId !== null) {
                                html.push('</tbody>');
                                html.push('</table>')
                            }
                            var table_classes = [eventItem.getSportName()];
                            if (noDuel) {
                                table_classes.push('no-duel')
                            }
                            html.push('<table class="', table_classes.join(' '), '"', ie ? ' cellspacing="0" cellpadding="0"' : '', '>');
                            var sportId = parseInt(eventItem.getSportId());
                            generateContentMyGamesTeamsHeader(html, sportId, participantKey, leagueItem.getOriginalId());
                            after_labl = true;
                            html.push('<tbody>');
                            lastSportId = eventItem.getSportId();
                            tr_classes.push('tr-first')
                        } else if (lastNoDuel != noDuel) {
                            html.push('</tbody>');
                            html.push('</table>');
                            html.push('<table class="', table_classes.join(' '), '"', ie ? ' cellspacing="0" cellpadding="0"' : '', '>');
                            generateContentMyGamesTeamsHeader(html, sportId, participantKey, leagueItem.getOriginalId(), true);
                            html.push('<tbody>')
                        }
                        var sportDefinition = cjs.template.getTemplateDefinitionForSport(parseInt(eventItem.getSportId()));
                        if (!after_labl && sportDefinition.getGameRowCount() > 1) {
                            templateColspan = cjs.template.getTemplateDefinitionForLabel(parseInt(eventItem.getSportId()), leagueItem.getOriginalId()).getGameColumnCount();
                            html.push('<tr class="blank-line"><td colspan="', templateColspan, '"></td></tr>')
                        }
                        if (rowIndex % 2 != 0) {
                            tr_classes.push('even')
                        }
                        generateGameContentFromTemplate(eventId, tr_classes, html, 99);
                        rowIndex++;
                        lastNoDuel = noDuel
                    }
                }
                if (lastSportId !== null) {
                    html.push('</tbody>');
                    html.push('</table>');
                    if (sortIndex == myTeamsParticipantSort.length - 1) {
                        html.push('<div class="table-line-bottom"></div>')
                    }
                }
            }
        } else {
            html.push('<div class="no-match-found"><p>');
            html.push('You haven\'t selected any team yet.<br />To select your teams, just click the <span class=\"toggleMyTeam\"></span> icon located next to the name of the team.');
            html.push('</p></div>')
        }
        html.push('</div>');
        cjs.mygamesGroups.setTemporaryDisabled(false);
        cjs.dic.get('contentGenerator').setStage(cjs.dic.getClass('contentGenerator').STAGE_DEFAULT)
    }
    if (isOdds || (!cjs.dic.get('page').isSeasonPage())) {
        html.push('<div class="copyright"><div id="sync-indicator" ondblclick="sync_change()"></div>');
        html.push('&nbsp;');
        html.push('</div>')
    }
    if (!first_round && iframe_stop_generating) {
        iframe_stop_generating = false;
        return
    }
    $container.append(html.join(''));
    if (cjs.mygamesGroups) {
        if (cat == 5) {
            cjs.mygamesGroups.showLastUsedDropDownMenu()
        } else {
            cjs.mygamesGroups.reset()
        }
    }
    if (project_type_name == '_diretta-2') {
        setTimeout(function() {
            removeLinkFromSingleNav()
        }, 0)
    }
    if (replaceIfAllGenerated) {
        appendEventsHtmlContainer($container, $fs, isOdds, true)
    }
    if (!isOdds) {
        if (full && category == 0 && (cjs.Util.Page.isMixed() || cjs.Util.Page.isParent()) && 0) {
            l.sports_count.displayed_sports_count_in_link = false;
            l.sports_count.show_sports_count_in_link()
        }
        cjs.sound_player.setupToggle($('.ifmenu .ifmenu-sound-link'))
    }
    cjs.synci.htmlUpdate($("div#sync-indicator"));
    if (isOdds) {
        push_update_subscription();
        preload_hide();
        banner_show()
    }
    setTimeout(function() {
        if_resize()
    }, 5);
    if (isOdds) {
        if (interval_live != null) {
            clearInterval(interval_live);
            interval_live = null
        }
        copy_and_show_iframe_message('box-inner-content-a')
    } else {
        setTimeout(function() {
            if_resize()
        }, 1000);
        setTimeout(function() {
            if_resize()
        }, 3000);
        setTimeout(function() {
            if_resize()
        }, 7000)
    }
    if (tournament) {
        var qs = location.search.substring(1).split('&');
        var qsArr = [];
        for (var i in qs) {
            var qsParam = qs[i].split('=');
            qsArr[qsParam[0]] = qsParam[1]
        }
        if ('t' in qsArr && 'ts' in qsArr) {
            var anchor = $('#detail-anchor').get(0);
            if (typeof anchor.scrollIntoView == 'function') {
                anchor.scrollIntoView()
            }
        }
    }
    if (typeof afterContentGeneratedCallback === "function") {
        afterContentGeneratedCallback()
    }
}
function removeLinkFromSingleNav() {
    if ($('.table-main .ifmenu span').length == 1) {
        $('.table-main .ifmenu .selected').addClass('single-nav-select')
    }
    if ($('#block-summary-results .ifmenu span').length == 1) {
        $('#block-summary-results .ifmenu .selected').addClass('single-nav-select')
    }
    if ($('#block-summary-fixtures .ifmenu span').length == 1) {
        $('#block-summary-fixtures .ifmenu .selected').addClass('single-nav-select')
    }
}

function generateContentMyGamesTeamsHeader(html, sportId, participantKey, labelId, noThead) {
    var sportDefinition = typeof labelId != 'undefined' ? cjs.template.getTemplateDefinitionForLabel(sportId, labelId) : cjs.template.getTemplateDefinitionForSport(sportId);
    var colGroupHtml = sportDefinition.getHeaderColumnsHtmlTemplate();
    html.push(colGroupHtml);
    if (typeof noThead == 'undefined' || !noThead) {
        html.push('<thead>');
        var gameHeaderHtml = cjs.templateHeaderDataProxy.getFilledTeamHeader(sportId, participantKey, labelId);
        html.push(gameHeaderHtml);
        html.push('</thead>')
    }
}

function add_more_sport_games_link(html, sport, last) {
    if (!cjs.Util.Page.isMixed() || !0 || sudate != 0) {
        return
    }
    html.push('<table class="table-link-more-games ' + sport + '"' + (ie ? ' cellspacing="0" cellpadding="0"' : '') + '>');
    html.push('<tbody><tr><td><a href="' + SPORT_URL_BY_ID[SPORT_LIST[sport]] + '">' + cjs.Util.trans('TRANS_CLICK_FOR_MORE_SPORT_GAMES').replace('[sport]', TXT_SPORT[sport]['name'].toUpperCase()) + ' (<span id="cfm-sports-' + SPORT_LIST[sport] + '"></span>)</a></td></tr></tbody>');
    html.push('</table>')
}
function add_show_all_games_link(html, leagueId, groupId) {
    groupId = groupId || 0;
    var leagueItem = cjs.dic.get('dataLeagueHolderProxy').getHolder().getLeague(leagueId);
    var sportId = leagueItem.getSportId();
    var isStageSport = (cjs.Util.Sport.isStageSport(sportId));
    var page = cjs.dic.get('page');
    if ((cjs.Util.Sport.hasCategoryPage(sport_id) && page.isCountryPage()) || !isNoDuelTournament(leagueId) || (page.isTournamentPage() && !isStageSport) || page.isSeasonPagePassiveTable()) {
        return
    }
    if (category == 5 && !cjs.mygames.isAddedWholeTournament(leagueId)) {
        return
    }
    var itemKey = leagueId + ":" + groupId;
    var categoryId = leagueItem.getSuperTemplateId();
    if (temporaryLeagueData.hasItem(itemKey) && temporaryLeagueData.getItem(itemKey).getValue('show_all') === 1) {
        add_golf_noduel_info(html, leagueId, sportId);
        return
    } else if (leagueItem.getEventCount() > page.getMaxEvents(sportId, category, categoryId)) {
        var tableClass = 'table-link-more-games noduel-link' + (leagueItem.getStageTabs() ? ' hidden' : '');
        html.push('<table class="' + tableClass + '"' + (ie ? ' cellspacing="0" cellpadding="0"' : '') + '>');
        html.push('<tbody><tr class="row-link-more-games"><td><span class="tournament-pages-link" data-label="' + leagueId + '">' + cjs.Util.trans('TRANS_SHOW_MORE') + '</span></td></tr></tbody>');
        html.push('</table>')
    }
}

function add_golf_noduel_info(html, labelId, sportId) {
    if (sportId !== cjs.constants.sport.GOLF) {
        return
    }
    var show = false;
    var handler = cjs.dic.get('dataEventHolderProxy').getHandler();
    handler.each(function(index, id) {
        var eventItem = this.getItem(id);
        var leagueItem = eventItem.getLeague();
        if (leagueItem.getId() == labelId) {
            show = eventItem.getStage() == cjs.constants.event_stage_type.SCHEDULED && leagueItem.getValue('ZJ') == cjs.constants.tournament_stage_type.TST_MAIN;
            return false
        }
    });
    if (show) {
        html.push('<table class="table-golf-noduel-info noduel-info"' + (ie ? ' cellspacing="0" cellpadding="0"' : '') + '>');
        html.push('<tbody><tr class="row-link-more-games"><td><span>' + cjs.Util.trans('TRANS_GOLF_NODUEL_SCHEDULED_INFO') + '</span></td></tr></tbody>');
        html.push('</table>')
    }
}

function no_match_found(cat) {
    cat = (typeof cat == 'undefined' ? category : cat);
    var no_match_text = '';
    var sportList = cjs.dic.get('util_list').getSports();
    if (sport_id == sportList.GOLF) {
        var trans = 'TOURNAMENT'
    } else if (cjs.Util.Sport.isRacingSport(sport_id)) {
        var trans = 'RACE';
        if (sport_id == sportList.HORSE_RACING) {
            trans = 'HORSE_RACE'
        } else if (cjs.Util.Sport.inGroup(sport_id, sportList.WINTER_SPORTS)) {
            trans = 'WINTER_SPORTS_RACE'
        }
    } else {
        var trans = 'MATCH'
    }
    if (typeof cjs.filter != 'undefined' && cjs.filter.getSearchString()) {
        no_match_text = cjs.Util.trans('TRANS_' + trans + '_LIST_NOT_FOUND')
    } else if (cat == 5) {
        if (project_type_name == '_portable') {
            no_match_text = ''
        } else {
            no_match_text = 'You haven\'t selected any game yet.<br />To select your games just click the <span class=\"tomyg-ico\">&nbsp;</span> icon located next to games across FlashScore.com.'
        }
    } else if (cat == 1) {
        no_match_text = cjs.Util.trans('TRANS_' + trans + '_LIST_NOT_FOUND_LIVE')
    } else if (cat == 0 && country == null && sudate == 0) {
        if (sport_id == sportList.GOLF) {
            var trans = 'TRANS_TOURNAMENT_LIST_NOT_FOUND_TODAY'
        } else if (cjs.Util.Sport.isRacingSport(sport_id)) {
            var trans = 'TRANS_RACE_LIST_NOT_FOUND_TODAY';
            if (sport_id == sportList.HORSE_RACING) {
                trans = 'TRANS_HORSE_RACE_LIST_NOT_FOUND_TODAY'
            } else if (cjs.Util.Sport.inGroup(sport_id, sportList.WINTER_SPORTS)) {
                trans = 'TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND_TODAY'
            }
        } else {
            var trans = 'TRANS_' + trans + '_LIST_NOT_FOUND_TODAY'
        }
        no_match_text = cjs.Util.trans(trans);
        var no_match_sport = TXT_SPORT[sport]['name'];
        no_match_text = no_match_text.replace('[sport]', no_match_sport);
        no_match_text += getGamePlanInfo();
        if (getGamePlanSettings() == null || (getGamePlanSettings()[0] == "" && getGamePlanSettings()[1] == "")) {
            no_match_text += '<br /><br />You can follow scores from other sports. The most visited sections on FlashScore.com are <a href=\"/\" target=\"_top\">SOCCER</a> and <a href=\"/tennis/\" target=\"_top\">TENNIS</a>.<br />We offer live scores, final results, standings and match details from 37 sports.'
        }
    } else {
        no_match_text = cjs.Util.trans('TRANS_' + trans + '_LIST_NOT_FOUND');
        no_match_text += getGamePlanInfo(cat)
    }
    var page = cjs.dic.get('page');
    return !page.isSeasonPage() ? '<div class="no-match-found"><p>' + no_match_text + '</p></div>' : ''
}
function getGamePlanInfo(cat) {
    var sportList = cjs.dic.get('util_list').getSports();
    if (fullfeed_trigger == 'tournament' || fullfeed_trigger == 'country') return '';
    if (typeof cat == 'undefined') {
        cat = 0
    }
    var plan = "";
    if (getGamePlanSettings() != null) {
        if (sport_id == sportList.GOLF) {
            var trans = 'TOURNAMENT'
        } else if (cjs.Util.Sport.isRacingSport(sport_id)) {
            var trans = 'RACE';
            if (sport_id == sportList.HORSE_RACING) {
                trans = 'HORSE_RACE'
            } else if (cjs.Util.Sport.inGroup(sport_id, sportList.WINTER_SPORTS)) {
                trans = 'WINTER_SPORTS_RACE'
            }
        } else {
            var trans = 'MATCH'
        }
        plan = "<br/>";
        if (getGamePlanSettings()[0] != "" && cat == 0) {
            plan += '<br/>' + cjs.Util.trans('TRANS_' + trans + '_LIST_NOT_FOUND_PLAN_PAST_GAME').replace('[time]', '<a class="matches-nav-link" onclick="set_calendar_date(' + get_match_day(getGamePlanSettings()[0].split(":")[1]) + '); return false;" href="#">' + cjs.Util.Date.timestamp2date(cjs.fullDateFormat, getGamePlanSettings()[0].split(":")[1], get_gmt_offset()) + "</a>")
        } else if (getGamePlanSettings()[0] == "" && cat == 0) {
            plan += '<br/>' + cjs.Util.trans('TRANS_' + trans + '_LIST_NOT_FOUND_PLAN_NO_PAST_GAME').replace('%s', calendar.range)
        }
        if (getGamePlanSettings()[1] != "" && cat == 0) {
            plan += '<br/>' + cjs.Util.trans('TRANS_' + trans + '_LIST_NOT_FOUND_PLAN_NEXT_GAME').replace('[time]', '<a class="matches-nav-link" onclick="set_calendar_date(' + get_match_day(getGamePlanSettings()[1].split(":")[1]) + '); return false;" href="#">' + cjs.Util.Date.timestamp2date(cjs.fullDateFormat, getGamePlanSettings()[1].split(":")[1], get_gmt_offset()) + "</a>")
        } else if (getGamePlanSettings()[1] == "" && cat == 0) {
            if (sport_id != cjs.constants.sport.GOLF) {
                plan += '<br/>' + cjs.Util.trans('TRANS_' + trans + '_LIST_NOT_FOUND_PLAN_NO_NEXT_GAME').replace('%s', calendar.range)
            }
        }
    }
    return plan
}

function construct_fscon() {
    $("div#fscon").each(function() {
        if (!$(this).find("div#fs").length) {
            if (!cjs.dic.get('page').isSeasonPage()) {
                $(this).append('<ul class="ifmenu live-menu"></ul>')
            }
            var page = cjs.dic.get('page');
            if (!page.isSeasonSubPage() && !page.isPlayerProfile()) {
                $(this).append('<div id="fs" class="fs-table"></div>');
                fs_update.register_actions()
            }
        }
        if (!cjs.dic.get('page').isSeasonPage()) {
            generate_navigation(category)
        }
    })
}
function pgenerate_odds() {
    construct_fscon();
    setTimeout('updater.doc_update(\'odds\', true)', 100)
}
function pgenerate_country() {
    construct_fscon();
    if (category == 6) updater.country_tournament_order_fin = true;
    else updater.country_tournament_order_fin = false;
    category = category_default;
    var param = tournament == null ? 'country' : 'tournament';
    setTimeout('updater.doc_update(\'' + param + '\')', 100)
}
function generateGameContentFromTemplate(index, trClasses, html, group) {
    var gameRowHtml = cjs.templateGameDataProxy.getFilledGameRow(index, trClasses.join(' '), group > 0);
    if (group !== null) {
        gameRowHtml = gameRowHtml.replace('%%GROUP%%', group && group != '0' ? group : '-')
    }
    html.push(gameRowHtml)
}
function getGameHeader(labl_id) {
    var leagueItem = cjs.dic.get('dataLeagueHolderProxy').getHolder().getLeague(labl_id);
    var heading = [];
    var my_league_left = true;
    var stats_noplus = true;
    var expand_collapse_league_enable = false;
    if (cjs.mygames.canBeAddedByDay([sudate]) && cjs.mygamesCheckboxes.getMygamesIconPosition() == 'right') {
        stats_noplus = false
    }
    if (sub_category == 2) {
        var odds_label_flag_class = (cjs.mygamesCheckboxes.getMygamesIconPosition() == 'left' ? 'left-odds' : '');
        heading.push(fs_update.get_league_and_flag_container(leagueItem, odds_label_flag_class).html());
        if (cjs.myLeagues.isEditable()) {
            heading.push(cjs.myLeagues.getToggleIcon(labl_id))
        }
    } else {
        heading.push(leagueItem.getTournamentId() == 0 ? '' : (' ' + get_stats_link(leagueItem.hasDraw(), stats_noplus || my_league_left, stats_force_icon, leagueItem.getValue('ZO') == 1)), fs_update.get_league_and_flag_container(leagueItem, null).html(), cjs.myLeagues.isEditable() ? cjs.myLeagues.getToggleIcon(labl_id) : '')
    }
    return heading.join('')
}
function getTeamHeader(teamKey) {
    data = teamKey.match(/^([0-9]+)_([a-zA-Z0-9]{8})$/);
    var sportId = data[1];
    var teamId = data[2];
    var sport = TXT_SPORT[SPORT_LIST_BY_ID[sportId]].name;
    var participantData = cjs.myTeams.getParticipantData(teamKey);
    var flagId = participantData.countryId;
    var myGamesPos = cjs.mygamesCheckboxes.getMygamesIconPosition();
    html = [];
    html.push('<span class="country ' + myGamesPos + '">');
    html.push(get_flag(flagId, myGamesPos));
    var name = (participantData.title + "").split(': ');
    var url = participantData.url;
    html.push('<span>' + name[0] + ': <a href="' + url + '">' + name[1] + '</a></span>'); {
        html.push('<span id="tomyteams_' + sportId + '_' + teamId + '" class="tomyteams">' + cjs.myTeams.getToggleIcon(teamKey) + '</span>')
    }
    var iconRight = cjs.mygamesCheckboxes.getMygamesIconPosition() == 'right';
    html.push('<span class="sport' + (iconRight ? ' fsh' : '') + '">' + sport + '</span>');
    html.push('</span>');
    return html.join('')
}

function getStageHeader(leagueId) {
    var holder = cjs.dic.get('dataLeagueHolderProxy').findHolderByItemId(leagueId);
    if (holder === false) {
        return false
    }
    var leagueItem = holder.getLeague(leagueId);
    var sportId = parseInt(leagueItem.getValue('sport_id'));
    var stages = {};
    if (sportId == cjs.constants.sport.GOLF && isNoDuelTournament(leagueId)) {
        stages[cjs.constants.event_stage.FIRST_ROUND] = 'TRANS_DEFAULT_MATCH_STATUS_ROUND1';
        stages[cjs.constants.event_stage.SECOND_ROUND] = 'TRANS_DEFAULT_MATCH_STATUS_ROUND2';
        stages[cjs.constants.event_stage.THIRD_ROUND] = 'TRANS_DEFAULT_MATCH_STATUS_ROUND3';
        stages[cjs.constants.event_stage.FOURTH_ROUND] = 'TRANS_DEFAULT_MATCH_STATUS_ROUND4';
        stages[cjs.constants.event_stage.AFTER_ROUND1] = 'TRANS_DEFAULT_MATCH_STATUS_AFTER_ROUND1';
        stages[cjs.constants.event_stage.AFTER_ROUND2] = 'TRANS_DEFAULT_MATCH_STATUS_AFTER_ROUND2';
        stages[cjs.constants.event_stage.AFTER_ROUND3] = 'TRANS_DEFAULT_MATCH_STATUS_AFTER_ROUND3';
        stages[cjs.constants.event_stage.INTERRUPTED] = 'TRANS_DEFAULT_MATCH_STATUS_INT';
        stages[cjs.constants.event_stage.DELAYED] = 'TRANS_DEFAULT_MATCH_STATUS_DEL';
        stages[cjs.constants.event_stage.POSTPONED] = 'TRANS_DEFAULT_MATCH_STATUS_POST';
        stages[cjs.constants.event_stage.ABANDONED] = 'TRANS_DEFAULT_MATCH_STATUS_ABD';
        stages[cjs.constants.event_stage.PAUSE] = 'TRANS_DEFAULT_MATCH_STATUS_PAUSE';
        stages[cjs.constants.event_stage.AWARDED] = 'TRANS_DEFAULT_MATCH_STATUS_AWARD';
        stages[cjs.constants.event_stage.PENDING] = 'TRANS_DEFAULT_MATCH_STATUS_PENDING';
        stages[cjs.constants.event_stage.TO_FINISH] = 'TRANS_DEFAULT_MATCH_STATUS_TOFINISH';
        stages[cjs.constants.event_stage.LIVE] = 'TRANS_DEFAULT_MATCH_STATUS_LIVE';
        stages[cjs.constants.event_stage.CANCELED] = 'TRANS_DEFAULT_MATCH_STATUS_CANC'
    } else if (cjs.Util.Sport.isStageSport(sportId)) {
        stages[cjs.constants.event_stage.INTERRUPTED] = 'TRANS_DEFAULT_MATCH_STATUS_INT';
        stages[cjs.constants.event_stage.DELAYED] = 'TRANS_DEFAULT_MATCH_STATUS_DEL';
        stages[cjs.constants.event_stage.POSTPONED] = 'TRANS_DEFAULT_MATCH_STATUS_POST';
        stages[cjs.constants.event_stage.ABANDONED] = 'TRANS_DEFAULT_MATCH_STATUS_ABD';
        stages[cjs.constants.event_stage.PAUSE] = 'TRANS_DEFAULT_MATCH_STATUS_PAUSE';
        stages[cjs.constants.event_stage.AWARDED] = 'TRANS_DEFAULT_MATCH_STATUS_AWARD';
        stages[cjs.constants.event_stage.PENDING] = 'TRANS_DEFAULT_MATCH_STATUS_PENDING';
        stages[cjs.constants.event_stage.TO_FINISH] = 'TRANS_DEFAULT_MATCH_STATUS_TOFINISH';
        stages[cjs.constants.event_stage.LIVE] = 'TRANS_DEFAULT_MATCH_STATUS_LIVE';
        stages[cjs.constants.event_stage.CANCELED] = 'TRANS_DEFAULT_MATCH_STATUS_CANC';
        stages[cjs.constants.event_stage.AFTER_DAY1] = 'TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY1';
        stages[cjs.constants.event_stage.AFTER_DAY2] = 'TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY2';
        stages[cjs.constants.event_stage.AFTER_DAY3] = 'TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY3';
        stages[cjs.constants.event_stage.AFTER_DAY4] = 'TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY4';
        stages[cjs.constants.event_stage.AFTER_DAY5] = 'TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY5';
        stages[cjs.constants.event_stage.AFTER_ROUND1] = 'TRANS_DEFAULT_MATCH_STATUS_AFTER_ROUND1';
        stages[cjs.constants.event_stage.AFTER_ROUND2] = 'TRANS_DEFAULT_MATCH_STATUS_AFTER_ROUND2';
        stages[cjs.constants.event_stage.FIRST_ROUND] = 'TRANS_DEFAULT_MATCH_STATUS_ROUND1';
        stages[cjs.constants.event_stage.SECOND_ROUND] = 'TRANS_DEFAULT_MATCH_STATUS_ROUND2'
    } else {
        return ''
    }
    var eventItem = false;
    cjs.dic.get('dataEventHolderProxy').getHandler().each(function(index, id) {
        var _eventItem = this.getItem(id);
        if (_eventItem.getValue('labl_id') === leagueId) {
            eventItem = _eventItem;
            return false
        }
    });
    if (eventItem !== false) {
        var eventStageType = eventItem.getStageType();
        var eventStage = eventItem.getStage();
        var startTime = eventItem.getStartUTime();
        var endTime = eventItem.getEndUTime();
        if (cjs.dic.get('page').isParticipantPagePassiveTable()) {
            if (!endTime) {
                endTime = startTime
            }
            return cjs.Util.Date.timestamp2date(cjs.dateFormat, startTime, get_gmt_offset()) + '-' + cjs.Util.Date.timestamp2date(cjs.fullDateShortFormat, endTime, get_gmt_offset())
        }
        if (eventStage == cjs.constants.event_stage.FINISHED) {
            return cjs.Util.trans('TRANS_DEFAULT_MATCH_STATUS_FIN')
        } else if (eventStage >= cjs.constants.event_stage.AFTER_STAGE_1 && eventStage <= cjs.constants.event_stage.AFTER_STAGE_30) {
            var lastStage = [eventStage - cjs.constants.event_stage.AFTER_STAGE_1 + 1];
            if (cjs.Util.Sport.inGroup(sportId, cjs.constants.sport.MOTORSPORT)) {
                var transKey = 'TRANS_DEFAULT_MATCH_STATUS_AFTER_SS'
            } else {
                var transKey = 'TRANS_DEFAULT_MATCH_STATUS_AFTER_STAGE'
            }
            return cjs.Util.trans(transKey, [lastStage])
        } else if (typeof stages[eventStage] != 'undefined') {
            return cjs.Util.trans(stages[eventStage])
        } else if (eventStageType == cjs.constants.event_stage_type.SCHEDULED) {
            return cjs.Util.trans('TRANS_START_TIME') + ': ' + cjs.Util.Date.timestamp2date(cjs.dateTimeFormat, startTime, get_gmt_offset())
        }
    }
    return ''
}

function getBodyWidthGetter() {
    var content = document.getElementById('fs');
    if (content === null) {
        content = document.getElementById('fscon')
    }
    var width = (content.offsetWidth == 0 || typeof content.offsetWidth == 'undefined') && typeof body_width != 'undefined' ? body_width : content.offsetWidth;
    return parseInt(width)
}
function tr_over(element, param_hover_color) {
    if (typeof param_hover_color !== 'undefined') hover_color = param_hover_color;
    $(element).not(".clay, .grass, .hard").css('backgroundColor', hover_color);
    $(element).find("td.ah:not(.winH),td.ou:not(.winH),td.tp").addClass('tr_hover');
    var cursor = 'pointer';
    var id = null;
    if ($(element).get(0).id) {
        id = $(element).get(0).id
    } else if (getIdFromClass($(element).attr('class'))) {
        id = getIdFromClass($(element).attr('class'))
    } else {
        $(element).css('cursor', cursor);
        return
    }
    var sportId = parseInt(id.split('_')[1]);
    if (cjs.dic.get('util_sport').hasDisabledDetail(sportId)) {
        cursor = 'auto'
    }
    $(element).css('cursor', cursor);
    if (id.search("g") === 0) {
        $(element).next("tr[id*=x_], tr[class*=x_]").css({
            backgroundColor: hover_color,
            cursor: cursor
        }).next("tr[id*=y_], tr[class*=y_]").css({
            backgroundColor: hover_color,
            cursor: cursor
        });
        $(element).next("tr[id*=x_], tr[class*=x_]").find("td.ah:not(.winH),td.ou:not(.winH)").addClass('tr_hover')
    } else if (id.search("x") === 0) {
        $(element).prev("tr[id*=g_], tr[class*=g_]").css({
            backgroundColor: hover_color,
            cursor: cursor
        });
        $(element).next("tr[id*=y_], tr[class*=y_]").css({
            backgroundColor: hover_color,
            cursor: cursor
        });
        $(element).prev("tr[id*=g_], tr[class*=g_]").find("td.ah:not(.winH),td.ou:not(.winH)").addClass('tr_hover')
    } else if (id.search("y") === 0) {
        $(element).prev("tr[id*=x_], tr[class*=x_]").css({
            backgroundColor: hover_color,
            cursor: cursor
        }).prev("tr[id*=g_], tr[class*=g_]").css({
            backgroundColor: hover_color,
            cursor: cursor
        });
        $(element).prev("tr[id*=x_], tr[class*=x_]").find("td.ah:not(.winH),td.ou:not(.winH)").addClass('tr_hover');
        $(element).prev("tr[id*=x_], tr[class*=x_]").prev("tr[id*=g_], tr[class*=g_]").find("td.ah:not(.winH),td.ou:not(.winH)").addClass('tr_hover')
    }
}
function tr_out(element) {
    $(element).css('backgroundColor', '');
    $(element).find("td").removeClass('tr_hover');
    var id = $(element).get(0).id;
    if (!id) {
        id = getIdFromClass($(element).attr('class'))
    }
    if (!id) {
        return
    }
    if (id.search("g") === 0) {
        $(element).next("tr[id*=x_], tr[class*=x_]").css('backgroundColor', '').next("").css('backgroundColor', '');
        $(element).next("tr[id*=x_], tr[class*=x_]").find("td").removeClass('tr_hover')
    } else if (id.search("x") === 0) {
        $(element).prev("tr[id*=g_], tr[class*=g_]").css('backgroundColor', '');
        $(element).next("tr[id*=y_], tr[class*=y_]").css('backgroundColor', '');
        $(element).prev("tr[id*=g_], tr[class*=g_]").find("td").removeClass('tr_hover')
    } else if (id.search("y") === 0) {
        $(element).prev("tr[id*=x_], tr[class*=x_]").css('backgroundColor', '').prev("tr[id*=g_], tr[class*=g_]").css('backgroundColor', '')
    }
}
function detail_open(id, tab, team1, team2, season, checkHolder) {
    if (checkHolder == null) {
        checkHolder = true
    }
    if (checkHolder) {
        var holder = cjs.dic.get('dataEventHolderProxy').findEventHolderByEventId(id);
        if (holder === false) {
            return false
        }
        var eventItem = holder.getEvent(id);
        var detail_id = eventItem.getDetailId()
    } else {
        var tmp = id.split(/_/);
        var detail_id = tmp[2].substr(0, 8)
    }
    if (!click_detail) {
        click_detail = true;
        return
    }
    if (typeof tab == 'undefined' || tab === null) {
        tab = cjs.Util.trans('TRANS_DETAIL_BOOKMARK_URL_IDENT_SUMMARY')
    }
    var parentId = null;
    if (isNoDuelTournament(cjs.dic.get('dataEvent').getEventValue(id, 'labl_id'))) {
        parentId = cjs.dic.get('dataLeague').getLeagueValue(cjs.dic.get('dataEvent').getEventValue(id, 'labl_id'), 'ZZ')
    }
    var url = 'http://' + base_url + '/match/';
    if (cjs.Util.Config.get("app", "detail", "version") == 2) {
        if (cjs.dic.get('dataEventHolderProxy').findEventHolderByEventId(id) !== false) {
            var team1 = cjs.dic.get('dataEvent').getEventValue(id, 'WU');
            var team2 = cjs.dic.get('dataEvent').getEventValue(id, 'WV');
            var season = cjs.dic.get('dataLeague').getLeagueValue(cjs.dic.get('dataEvent').getEventValue(id, 'labl_id'), 'ZS')
        }
        url += team1 + '-' + (parentId ? '' : team2 + '-') + season + '/'
    }
    url = url + detail_id + '/' + (parentId ? 'p/' : '');
    var urlParams = {};
    var externalProjects = cjs.dic.get('util_config').get('app', 'odds', 'external_projects');
    if (externalProjects && externalProjects[config_hash_id]) {
        urlParams.externalProjectId = externalProjects[config_hash_id]
    }
    if (cjs.dic.get('util_object').keys(urlParams).length) {
        url += '?' + $.param(urlParams)
    }
    url += '#' + tab;
    clientStorage.drop('LS_refresh_web');
    var window_width = cjs.dic.get('Helper_Window').getWidth();
    var window_height = cjs.dic.get('Helper_Window').getHeight();
    if (cjs.Util.Config.get("app", "detail", "version") == 2) {
        detail_window = window.open(url, id)
    } else {
        detail_window = window.open(url, id, 'hotkeys=no, resizable=no, toolbar=no, status=no, dependent=yes, scrollbars=1, width=' + window_width + ', height=' + window_height);
        if (!detail_window.closed) {
            detail_window.focus()
        }
    }
}
function bookmaker_open(link, betslip) {
    if (!click_detail) {
        click_detail = true;
        return
    }
    if (cjs.dic.get('utilConfig').get("app", "odds", "betslip_detail_window") && betslip) {
        var detail_window = window.open(link, "betslip", 'hotkeys=no, resizable=no, toolbar=no, status=no, dependent=yes, scrollbars=1, width=635, height=700');
        if (!detail_window.closed) {
            detail_window.focus()
        }
    } else {
        window.open(link)
    }
}
function store_last_serial_checksum(content, valid_time) {
    if (typeof valid_time == 'undefined') valid_time = 360;
    clientStorage.store('LS_last_serials', content, valid_time * 86400)
}
function retrieve_last_serial_checksum() {
    var result = clientStorage.get('LS_last_serials');
    if (result) {
        result = result.split('-');
        return result
    }
    return null
}
function clear_last_serial_checksum() {
    store_last_serial_checksum(null, 0)
}
function check_static_serial(value) {
    var cookieCheck = true;
    var last_serial_checksum = retrieve_last_serial_checksum();
    if (last_serial_checksum) {
        if (last_serial_checksum[1] == value) cookieCheck = false
    }
    if (value != refresh_serial && refresh_in_progress == null && cookieCheck) {
        store_last_serial_checksum(refresh_serial + "-" + value);
        refresh_document(true, 'long')
    }
}
function send_refresh_failure_message() {
    return;
    var pf_dd = null;
    var pf_pdd = null;
    try {
        var pf_dd = document.domain;
        var pf_pdd = parent.document.domain
    } catch (e) {}
    var log_content = "serial=" + refresh_serial;
    log_content += "&browser_ver=" + navigator.appVersion;
    log_content += "&browser_lang=" + (navigator.userLanguage || navigator.language);
    log_content += "&dd=" + pf_dd;
    log_content += "&pdd=" + pf_pdd;
    ajax["refresh_fail"] = new cjs.AjaxJqObject("http://" + base_url + "/res/ajax/refresh-fail.php?" + ie6_suffix());
    ajax["refresh_fail"].update(log_content, 'POST')
}
function refresh_document(force_reload, type) {
    if (typeof type == 'undefined') {
        refresh_in_progress = setTimeout("reload(" + force_reload + ")", (Math.random() * 40 + 20) * 1000)
    } else if (type == 'long') {
        refresh_in_progress = setTimeout("reload(" + force_reload + ")", (Math.random() * 180 + 120) * 1000)
    }
}
function reload(force_reload) {
    if (force_reload || true) {
        var url, message = "reload:" + sudate + "-" + category;
        var matches = /^([^#]+)#(.*)\breload:([0-9]+\-[0-9])(.*)$/.exec(parent.location.href);
        if (matches) url = matches[1] + "#" + matches[2] + message + (matches[4].length ? ";" + matches[4] : "");
        else {
            matches = /^([^#]+)#(.*)$/.exec(parent.location.href);
            if (matches) url = matches[1] + "#" + (matches[2].length ? matches[2] + ";" : "") + message;
            else url = parent.location.href + "#" + message
        }
        parent.location.href = url;
        parent.location.reload()
    } else updater.doc_resume()
}
function counter_update() {
    if (sub_category == 2 || sub_category == 3) {
        return
    }
    var eventHandler = cjs.dic.get('dataEventHolderProxy').getHandler();
    var eventHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var currentTimestamp = cjs.dic.get('Helper_CurrentTime').getTimestamp();
    eventHandler.each(function(index, id) {
        var eventItem = this.getItem(id);
        var sportId = parseInt(eventItem.getSportId());
        var originalId = eventItem.getOriginalId();
        var AR = eventItem.getValue('AR');
        var AB = eventItem.getStageType();
        if (set_counter_time(id)) {
            var gameRows = cjs.templateGameDataProxy.getGameRowObjects(id);
            for (var i = 0, _len = gameRows.length; i < _len; i++) {
                var gameRow = gameRows[i];
                cjs.templateGameDataProxy.updateGameCell(cjs.TemplateCell.prototype.CELL_MATCH_STATUS, gameRow, true)
            }
        }
        if (typeof fs_counter[id] === "undefined" && AR > 0 && AR > (currentTimestamp - counter_duration_time) && AB > cjs.constants.MATCH_STATUS_TYPE_SCHED) {
            var duration = counter_duration_time - (currentTimestamp - AR);
            if (duration < 5) {
                duration = 5
            }
            cjs.scoreHighlighter.highlight(originalId, 'AR', sportId, false, duration);
            fs_counter[id] = AR
        }
    });
    for (var fsDataIndex in fs_counter) {
        if (fs_counter[fsDataIndex] < currentTimestamp - counter_duration_time) {
            if (eventHolder.hasItem(fsDataIndex)) {
                eventHolder.getItem(fsDataIndex).setValue('AR', 0)
            }
            fs_counter = cjs.Util.Object.deleteKey(fs_counter, fsDataIndex)
        }
    }
}
function score_highlight(index) {
    var eventHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    if (!eventHolder.hasItem(index) || sub_category == 2 || sub_category == 3) return;
    var indexParts = index.split("_");
    var sportId = indexParts[1];
    var eventId = indexParts[2];
    var durationTime;
    var index_array = cjs.scoreHighlighterHtmlDisplayer.getIndexes(sportId);
    var cleanup = {
        'AG': ['EA', 'EC', 'homeCorrection'],
        'AH': ['EB', 'ED', 'awayCorrection'],
        'EA': ['AG', 'EC'],
        'EB': ['AH', 'ED'],
        'EC': ['AG', 'EA'],
        'ED': ['AH', 'EB'],
        'homeCorrection': ['AG'],
        'awayCorrection': ['AH']
    };
    var stats = cjs.dic.get('util_list').getStatsDataTypes();
    var parser = cjs.dic.get('Helper_Parser');
    for (var i in index_array) {
        var dataIndex = index_array[i];
        var highlightConfig = {};
        if (fs_update.did_property_changed(index, dataIndex)) {
            if (dataIndex == 'WS') {
                var eventHolder = cjs.dic.get('dataEventHolderProxy').findEventHolderByEventId(index);
                var eventItem = null;
                if (eventHolder !== false) {
                    eventItem = eventHolder.getEvent(index)
                }
                if (eventItem !== null && eventItem.getSportId() == cjs.constants.sport.GOLF) {
                    if ((!fs_update.did_property_changed(index, 'GH') && !fs_update.did_property_changed(index, 'BI')) || !(eventItem.isParticipantLive() || eventItem.wasParticipantLive())) {
                        highlightConfig['use_sec_highlight_class'] = true
                    }
                } else if (eventItem !== null && cjs.Util.Sport.isRacingSport(eventItem.getSportId()) && isNoDuelTournament(eventItem.getLeagueId())) {
                    if ((!fs_update.did_property_changed(index, 'ND')) || !(eventItem.isParticipantLive() || eventItem.wasParticipantLive())) {
                        highlightConfig['use_sec_highlight_class'] = true
                    }
                }
            }
            if (dataIndex == parser.getStatsResultsIndex(stats.RANK)) {
                var eventHolder = cjs.dic.get('dataEventHolderProxy').findEventHolderByEventId(index);
                var eventItem = null;
                if (eventHolder !== false) {
                    eventItem = eventHolder.getEvent(index)
                }
                if (eventItem !== null && eventItem.getSportId() == cjs.constants.sport.WINTER_SPORTS_SKI_JUMPING) {
                    if ((!fs_update.did_property_changed(index, parser.getStatsResultsIndex(stats.POINTS))) || !(eventItem.isParticipantLive() || eventItem.wasParticipantLive())) {
                        highlightConfig['use_sec_highlight_class'] = true
                    }
                } else if (eventItem !== null && cjs.Util.Sport.inGroup(eventItem.getSportId(), cjs.constants.sport.WINTER_SPORTS)) {
                    if ((!fs_update.did_property_changed(index, parser.getStatsResultsIndex(stats.TIME))) || !(eventItem.isParticipantLive() || eventItem.wasParticipantLive())) {
                        highlightConfig['use_sec_highlight_class'] = true
                    }
                }
            }
            var _isCorrection = fs_update.did_property_decrease(index, dataIndex) && !isNoDuelTournament(cjs.dic.get('dataEvent').getEventValue(index, 'labl_id'));
            if (_isCorrection) {
                cjs.scoreHighlighter.highlight(eventId, dataIndex, sportId, _isCorrection, correction_duration_time)
            } else {
                durationTime = goal_duration_time;
                if (dataIndex == 'WA' || dataIndex == 'WB' || dataIndex == 'WC') {
                    durationTime = goal_duration_time / 3
                }
                if (dataIndex == 'EA' || dataIndex == 'EB' || dataIndex == 'EC' || dataIndex == 'ED') {
                    durationTime = penalty_duration_time
                } else if (dataIndex == 'homeCorrection' || dataIndex == 'awayCorrection') {
                    durationTime = correction_duration_time
                }
                cjs.scoreHighlighter.highlight(eventId, dataIndex, sportId, _isCorrection, durationTime, cleanup, highlightConfig)
            }
        }
    }
    return cjs.dic.get('Helper_CurrentTime').getTimestamp()
}
function get_cell_content(type, index, type_index) {
    var eventItem = cjs.dic.get('dataEventHolderProxy').getHolder().getEvent(index);
    var leagueItem = eventItem.getLeague();
    var sportName = eventItem.getSportName();
    var sportId = eventItem.getSportId();
    switch (type) {
        default: return '&nbsp;';
            break;
        case 'time':
            return cjs.Util.Date.timestamp2date(cjs.hourFormat, eventItem.getStartUTime(), get_gmt_offset());
            break;
        case 'date':
            return cjs.Util.Date.timestamp2date(cjs.dateFormat, eventItem.getStartUTime(), get_gmt_offset());
            break;
        case 'datetime':
            if (cjs.dic.get('page').isParticipantPagePassiveTable() || cjs.dic.get('page').isSeriesPagePassiveTable()) {
                var now = new Date();
                var yearStart = now.getUTCFullYear();
                var from = (new Date(yearStart, 0, 0, 0, 0, 0)).getTime() / 1000 + get_gmt_offset_diff();
                var until = (new Date(yearStart + 2, 0, 0, 0, 0, 0)).getTime() / 1000 + get_gmt_offset_diff();
                var dateFormat = eventItem.getStartUTime() > from && eventItem.getStartUTime() < until ? cjs.dateTimeFormat : cjs.fullDateFormat;
                return cjs.Util.Date.timestamp2date(dateFormat, eventItem.getStartUTime(), get_gmt_offset())
            } elseif (sportName == 'soccer' || sportName == 'golf' || tournamentPagePassiveTable) {
            return cjs.Util.Date.timestamp2date(cjs.dateTimeFormat, eventItem.getStartUTime(), get_gmt_offset())
        } else return cjs.Util.Date.timestamp2date(cjs.dateTimeFormatTwoLines, eventItem.getStartUTime(), get_gmt_offset());
            break;
        case 'counter':
            if (hasMatchFinalResultOnly(index) && eventItem.isScheduled()) {
                return '<span class="final_result_only">' + cjs.Util.trans('TRANS_FINAL_RESULT_ONLY_SHORT') + '</span>'
            }set_counter_time(index);
            return counter_format(index);
            break;
        case 'win_lose':
            var t = cjs.dic.get('utilTrans');
            var formTitles = {
                wo: t('TRANS_DRAW') + '/' + t('TRANS_WIN'),
                lo: t('TRANS_DRAW') + '/' + t('TRANS_LOST'),
                w: t('TRANS_WIN'),
                l: t('TRANS_LOST'),
                d: t('TRANS_DRAW'),
                dw: t('TRANS_WIN') + '/' + t('TRANS_DRAW'),
                dl: t('TRANS_LOST') + '/' + t('TRANS_DRAW')
            };
            var form = '';
            var participantSide = $.inArray(String(participant), String(eventItem.getValue('IE')).split('/')) != -1 ? 'home' : 'away';
            if (eventItem.getWinner() == 0) {
                form = 'd'
            } else if (eventItem.getWinner() == 1 && participantSide == 'home' || eventItem.getWinner() == 2 && participantSide == 'away') {
                form = 'w'
            } else {
                form = 'l'
            }
            var formClass = form;
            if (form == 'd' && (eventItem.getOddsWinner() == 1 || eventItem.getOddsWinner() == 2)) {
                if (eventItem.getOddsWinner() == 1 && participantSide == 'home' || eventItem.getOddsWinner() == 2 && participantSide == 'away') {
                    form = 'dw';
                    formClass = 'wo'
                } else {
                    form = 'dl';
                    formClass = 'lo'
                }
            } else if (eventItem.getValue('AT') !== '') {
                formClass += 'o';
                form += 'o'
            }
            return '<span class="win_lose_icon form-' + formClass + '" title="' + formTitles[form] + '">&nbsp;</span>';
            break;
        case 'home':
            return getCellContentHome(eventItem);
            break;
        case 'away':
            return getCellContentAway(eventItem);
            break;
        case 'score_home':
            var page = cjs.dic.get('page');
            var score_home = sportName == 'golf' && !page.isSeasonPage() && !isNoDuelTournament(leagueItem.getId()) ? '' : '-';
            if (eventItem.isLive() || (eventItem.isFinished() && eventItem.getStage() != cjs.constants.MATCH_STATUS_POST && eventItem.getStage() != cjs.constants.MATCH_STATUS_CANC) || eventItem.getStage() == cjs.constants.event_stage.TO_FINISH || (sportName == 'golf' && isNoDuelTournament(eventItem.getLeagueId()) && eventItem.getStage() == cjs.constants.event_stage.DELAYED)) {
                if (sportId == cjs.constants.sport.BOXING || sportId == cjs.constants.sport.MMA) {
                    var helper = sportId == cjs.constants.sport.BOXING ? cjs.dic.get('Helper_Boxing') : cjs.dic.get('Helper_Mma');
                    var winner = null;
                    var incidentId = null;
                    var round = null;
                    if (eventItem.isOddsHomeWinner()) {
                        winner = eventItem.getHomeName();
                        incidentId = eventItem.getHomeMartialArtsFinished();
                        round = eventItem.getHomeMartialArtsFinishedRound()
                    } else if (eventItem.isOddsAwayWinner()) {
                        winner = eventItem.getAwayName();
                        incidentId = eventItem.getAwayMartialArtsFinished();
                        round = eventItem.getAwayMartialArtsFinishedRound()
                    } else {
                        incidentId = eventItem.getHomeMartialArtsFinished();
                        round = eventItem.getHomeMartialArtsFinishedRound()
                    }
                    score_home = !page.isSeasonPagePassiveTable() ? (winner ? winner : helper.getTransDraw()) : '';
                    var result = helper.getResult(incidentId, round);
                    score_home += result ? ((!page.isSeasonPagePassiveTable() ? '<br/>' : '') + result) : ''
                } else {
                    if (sportName == 'golf' && isNoDuelTournament(eventItem.getLeagueId()) && !(eventItem.isParticipantLive() || eventItem.wasParticipantLive())) {
                        score_home = '-'
                    } else if (sportName == 'golf' && !isNoDuelTournament(eventItem.getLeagueId()) && eventItem.isGolfNational()) {
                        if (tournamentPage) {
                            score_home = eventItem.getHomeScore() + ' - ' + eventItem.getAwayScore()
                        }
                    } else if (sportName == 'golf' && !isNoDuelTournament(eventItem.getLeagueId()) && (eventItem.getValue('GR') || !page.isSeasonPage())) {
                        if (eventItem.getValue('GR')) {
                            score_home = eventItem.getValue('GR');
                            if (eventItem.getGolfHolesPlayed()) {
                                score_home += ' (' + eventItem.getGolfHolesPlayed() + ')'
                            }
                        }
                    } else if (((page.isSeasonPagePassiveTable() || sportName == 'soccer' || (sportName == 'golf' && !isNoDuelTournament(leagueItem.getId())) || sub_category == 2 || sub_category == 3) && !us_odds_layout || (page.isSeasonPagePassiveTable() || sportName == 'soccer' || (sportName == 'golf' && !isNoDuelTournament(leagueItem.getId())) && sub_category != 2 && us_odds_layout)) && !cjs.Util.Sport.isRacingSport(sportId)) {
                        if (sportName == 'golf' && isNoDuelTournament(leagueItem.getId())) {
                            if (eventItem.getHomeScore() !== '') {
                                score_home = eventItem.getPar()
                            }
                        } else {
                            var delimiter = (sub_category == 2 || sub_category == 3 || page.isSeasonPagePassiveTable() ? '&nbsp;:&nbsp;' : '&nbsp;-&nbsp;');
                            if (sportName == 'aussie-rules') {
                                score_home = cjs.dic.get('Helper_Formatter').getParsedMultiScoreWithTitle(eventItem.getHomeScore()) + delimiter + cjs.dic.get('Helper_Formatter').getParsedMultiScoreWithTitle(eventItem.getAwayScore())
                            } else {
                                if (eventItem.getHomeScore() == 0 && eventItem.getAwayScore() == 0 && !eventItem.isGoallessDraw() && eventItem.getStage() !== cjs.constants.event_stage.RETIRED) {
                                    score_home = '-'
                                } else {
                                    score_home = eventItem.getHomeScore() + delimiter + eventItem.getAwayScore()
                                }
                            }
                            if (eventItem.getValue('AT') !== '') score_home += '<br /><span class="aet">(' + eventItem.getValue('AT') + delimiter + eventItem.getValue('AU') + ')</span>'
                        }
                    } else if (eventItem.getHomeScore() !== '') {
                        if (sportName == 'aussie-rules') {
                            score_home = cjs.dic.get('Helper_Formatter').getParsedMultiScoreWithTitle(eventItem.getHomeScore())
                        } else {
                            if (eventItem.getHomeScore() == 0 && eventItem.getAwayScore() == 0 && !eventItem.isGoallessDraw() && eventItem.getStage() !== cjs.constants.event_stage.RETIRED) {
                                score_home = '-'
                            } else {
                                if (sportName == 'golf') {
                                    score_home = eventItem.getPar()
                                } else {
                                    score_home = eventItem.getHomeScore()
                                }
                            }
                        }
                    }
                }
            }
            return score_home;
            break;
        case 'home_score_part':
            var score = '&nbsp;';
            if (sportName == 'soccer') {
                if (eventItem.getValue('AW') !== '') {
                    if (eventItem.getStage() != cjs.constants.MATCH_STATUS_POST && eventItem.getStage() != cjs.constants.MATCH_STATUS_CANC) score = '<span class="icons"><span class="' + (eventItem.isLive() ? 'live-centre-active' : 'live-centre') + '"></span></span>'
                } else {
                    if (eventItem.getValue('BA') !== '' || eventItem.getValue('BB') !== '') score = '(' + eventItem.getValue('BA') + ' - ' + eventItem.getValue('BB') + ')'
                }
            } else {
                if (eventItem.getValue(type_index) !== null && eventItem.getValue(type_index) !== '') {
                    score = new String(eventItem.getValue(type_index))
                }
                if (sportName == 'tennis') {
                    var idx = type_index.replace(/^B/, "D");
                    if (eventItem.getValue(idx) !== null && eventItem.getValue(idx) !== '') score += '<sup>' + eventItem.getValue(idx) + '</sup>'
                }
                if (sportName == 'cricket') {
                    var title = cjs.Util.trans('TRANS_CRICKET_RUNS') + ": " + score;
                    switch (type_index) {
                        case 'BA':
                            score += eventItem.getValue('DK') ? '/' + new String(eventItem.getValue('DK')) : '';
                            title += eventItem.getValue('DK') ? " / " + cjs.Util.trans('TRANS_CRICKET_WICKETS') + ": " + eventItem.getValue('DK') : '';
                            score += eventItem.getValue('DO') ? ' (' + new String(eventItem.getValue('DO')) + ')' : '';
                            title += eventItem.getValue('DO') ? " (" + cjs.Util.trans('TRANS_CRICKET_OVERS') + ": " + eventItem.getValue('DO') + ")" : '';
                            break;
                        case 'BC':
                            score += eventItem.getValue('DM') ? '/' + new String(eventItem.getValue('DM')) : '';
                            title += eventItem.getValue('DM') ? " / " + cjs.Util.trans('TRANS_CRICKET_WICKETS') + ": " + eventItem.getValue('DM') : '';
                            score += eventItem.getValue('DQ') ? ' (' + new String(eventItem.getValue('DQ')) + ')' : '';
                            title += eventItem.getValue('DQ') ? " (" + cjs.Util.trans('TRANS_CRICKET_OVERS') + ": " + eventItem.getValue('DQ') + ")" : '';
                            break
                    }
                    score = '<span title="' + title + '">' + score + '</span>'
                }
                if (sportName == 'aussie-rules') {
                    if (score !== '&nbsp;') {
                        score = cjs.dic.get('Helper_Formatter').getParsedMultiScoreWithTitle(score, '', true)
                    }
                }
            }
            return score;
            break;
        case 'away_score_part':
            var score = '&nbsp;';
            if (eventItem.getValue(type_index) !== null && eventItem.getValue(type_index) !== '') {
                score = new String(eventItem.getValue(type_index))
            }
            if (sportName == 'tennis') {
                var idx = type_index.replace(/^B/, "D");
                if (eventItem.getValue(idx) !== null && eventItem.getValue(idx) !== '') score += '<sup>' + eventItem.getValue(idx) + '</sup>'
            }
            if (sportName == 'cricket') {
                var title = cjs.Util.trans('TRANS_CRICKET_RUNS') + ": " + score;
                switch (type_index) {
                    case 'BB':
                        score += eventItem.getValue('DL') ? '/' + new String(eventItem.getValue('DL')) : '';
                        title += eventItem.getValue('DL') ? " / " + cjs.Util.trans('TRANS_CRICKET_WICKETS') + ": " + eventItem.getValue('DL') : '';
                        score += eventItem.getValue('DP') ? ' (' + new String(eventItem.getValue('DP')) + ')' : '';
                        title += eventItem.getValue('DP') ? " (" + cjs.Util.trans('TRANS_CRICKET_OVERS') + ": " + eventItem.getValue('DP') + ")" : '';
                        break;
                    case 'BD':
                        score += eventItem.getValue('DN') ? '/' + new String(eventItem.getValue('DN')) : '';
                        title += eventItem.getValue('DN') ? " / " + cjs.Util.trans('TRANS_CRICKET_WICKETS') + ": " + eventItem.getValue('DN') : '';
                        score += eventItem.getValue('DR') ? ' (' + new String(eventItem.getValue('DR')) + ')' : '';
                        title += eventItem.getValue('DR') ? " (" + cjs.Util.trans('TRANS_CRICKET_OVERS') + ": " + eventItem.getValue('DR') + ")" : '';
                        break
                }
                score = '<span title="' + title + '">' + score + '</span>'
            }
            if (sportName == 'aussie-rules') {
                if (score !== '&nbsp;') {
                    score = cjs.dic.get('Helper_Formatter').getParsedMultiScoreWithTitle(score, '', true)
                }
            }
            return score;
            break;
        case 'score_home_hole':
            if (eventItem.isAnyRoundOverAfterTwo() && eventItem.getParticipantStatus()) {
                return ""
            }if (/^[0-9]{3,}$/i.test(eventItem.getParticipantHoleInfo())) {
            var format = cjs.hourFormat;
            if (!cjs.dic.get('Helper_Golf').isTeeTimeDayEqualToFeedDay(eventItem.getParticipantHoleInfo())) {
                format = cjs.dateFormat
            }
            eventItem.setParToday('');
            return cjs.Util.Date.timestamp2date(format, eventItem.getParticipantHoleInfo(), get_gmt_offset())
        } else {
            return eventItem.getParticipantHoleInfo()
        }
            break;
        case 'comparison':
            var icon = new Array();
            var iconClass = 'icon0';
            var mainBookmakerId = cjs.dic.get('application').getMainBookmakerId();
            if (eventItem.isLive() && eventItem.hasLiveBettingByBookmaker(mainBookmakerId)) icon.push('<span class="clive ' + iconClass + '"></span>');
            else if (!eventItem.isFinished() && eventItem.hasLiveBettingByBookmaker(mainBookmakerId)) icon.push('<span class="slive ' + iconClass + ' xxx"></span>');
            if (icon.length == 0) return '&nbsp;';
            else return '<span class="icons">' + icon.join('') + '</span>';
            break;
        case 'icon':
            return getCellContentIcon(eventItem);
            break;
        case 'mygames':
            return cjs.mygamesCheckboxes.getGameCheckboxHtml(index) + cjs.mygamesGroups.getGameDropDownHtml(index, '%%GROUP%%');
            break;
        case 'game_score_part':
            score = '&nbsp;';
            if (!eventItem.isFinished() || eventItem.getStage() == 36) {
                if (eventItem.getValue(type_index) !== '') {
                    score = eventItem.getValue(type_index)
                }
            }
            return score;
            break;
        case 'best_of':
            if (eventItem.getValue('WD')) {
                if (sportName == 'snooker') return '<span>' + cjs.Util.trans('TRANS_SNOOKER_BEST_OF_FRAMES_IFRAME').replace('%s', eventItem.getValue('WD')) + '</span>';
                else if (sportName == 'darts') {
                    var leg_set_trans = eventItem.getValue('WL') ? cjs.Util.trans('TRANS_DARTS_BEST_OF_SETS_IFRAME') : cjs.Util.trans('TRANS_DARTS_BEST_OF_LEGS_IFRAME');
                    return '<span>' + leg_set_trans.replace('%s', eventItem.getValue('WD')) + '</span>'
                }
            } else return '&nbsp;';break;
        case 'extra_row':
            return get_extra_row_cricket_sentence(eventItem.getData(), eventItem.getHomeName(), eventItem.getAwayName()) + get_cricket_extra_row_right(eventItem.getData());
            break;
        case 'extra_row_baseball':
            var content = get_extra_row_baseball_sentence(eventItem.getData());
            return content ? ('<span class="extra-info-right">' + cjs.Util.trans('TRANS_BASEBALL_PITCHERS') + ' &raquo; ' + content + '</span>') : '';
            break;
        case 'last_part_score_home':
        case 'last_part_score_away':
            var _type = (type === 'last_part_score_home' ? 'home' : 'away');
            return getLastPartScore(eventItem.getData(), _type);
            break
    }
}
function getCellContentHome(eventItem) {
    var home = new Array();
    var sportName = eventItem.getSportName();
    var sportId = eventItem.getSportId();
    var team_flag = eventItem.getHomeParticipantCountryId() ? get_flag(eventItem.getHomeParticipantCountryId(), '', eventItem.getCountryName()) : '';
    var css = (sportName == 'soccer' && sub_category != 2 && sub_category != 3 ? 'padr' : 'padl');
    home.push('<span class="', css, '">');
    var dwIconClass = "dw-icon" + (eventItem.getValue('BY') == 2 || sportName == 'golf' && eventItem.isHomeWinner() ? " win" : "");
    var isAssProject = project_type_name === '_ass';
    var page = cjs.dic.get('page');
    if (isNoDuelTournament(eventItem.getLeagueId()) || !page.isSeasonPagePassiveTable()) {
        if (eventItem.getValue('BY') && sub_category != 2 && sub_category != 3 && sportName == 'soccer') home.push('<span class="' + dwIconClass + '">&nbsp;</span>');
        if (sub_category != 2 && sub_category != 3 && sportName != 'soccer' && !(cjs.Util.Sport.isStageSport(sportId) && !isNoDuelTournament(eventItem.getLeagueId()))) home.push(team_flag);
        if (eventItem.getValue('AJ') > 0 && sub_category != 2 && sub_category != 3) home.push('<span class="rhcard rhcard', eventItem.getValue('AJ'), '">&nbsp;</span>')
    }
    home.push(eventItem.getHomeName());
    if (sub_category == 2 || page.isSeasonPagePassiveTable()) {
        if (eventItem.getValue('AJ') > 0) home.push('<span class="racard racard', eventItem.getValue('AJ'), '">&nbsp;</span>');
        if (eventItem.getValue('BY') && sub_category != 3 || sportName == 'golf' && eventItem.getValue('BY') == 1) home.push('<span class="' + dwIconClass + '">&nbsp;</span>')
    } else {
        if (sub_category != 2 && sub_category != 3 && sportName == 'soccer') home.push(team_flag);
        if (eventItem.getValue('AJ') > 0 && (isAssProject || sub_category == 2 || sub_category == 3)) home.push('<span class="rhcard rhcard', eventItem.getValue('AJ'), '">&nbsp;</span>');
        if (eventItem.getValue('BY') && (sub_category != 2 && sub_category != 3 && (sportName != 'soccer' || isAssProject)) || sportName == 'golf' && eventItem.isHomeWinner()) home.push('<span class="' + dwIconClass + '">&nbsp;</span>')
    }
    if (sportId == cjs.constants.sport.CYCLING && eventItem.getCyclingJersey()) {
        home.push(cjs.dic.get('Helper_CyclingJersey').getHtml(eventItem.getCyclingJersey()))
    }
    home.push('</span>');
    return home.join('')
}
function getCellContentAway(eventItem) {
    var sportName = eventItem.getSportName();
    var sportId = eventItem.getSportId();
    var away = new Array();
    var team_flag = eventItem.getValue('CB') ? get_flag(eventItem.getValue('CB')) : '';
    away.push('<span class="padl">');
    if (!(cjs.Util.Sport.isStageSport(sportId) && !isNoDuelTournament(eventItem.getLeagueId()))) {
        away.push(team_flag)
    }
    if (eventItem.getValue('WE')) away.push(cjs.Util.trans('TRANS_SWAP_TEAM_AT_IFRAME'));
    away.push(eventItem.getAwayName());
    if (eventItem.getValue('AK')) away.push('<span class="racard racard', eventItem.getValue('AK'), '">&nbsp;</span>');
    if (eventItem.getValue('BZ') && sub_category != 3 || sportName == 'golf' && eventItem.isAwayWinner()) {
        away.push('<span class="dw-icon' + (eventItem.getValue('BZ') == 2 || sportName == 'golf' && eventItem.isAwayWinner() ? " win" : "") + '">&nbsp;</span>')
    }
    away.push('</span>');
    return away.join('')
}
function getLastPartScore(match, type) {
    var score = '';
    if (typeof match !== 'undefined') {
        var indexes = [];
        if (type === 'home') {
            indexes = ['BA', 'BC', 'BE', 'BG', 'BI']
        } else {
            indexes = ['BB', 'BD', 'BF', 'BH', 'BJ']
        }
        indexes = indexes.reverse();
        for (var i in indexes) {
            var index = indexes[i];
            if (typeof match[index] !== 'undefined' && match[index] !== '') {
                score = match[index];
                break
            }
        }
    }
    return score
}
function get_cricket_extra_row_right(data) {
    var content = '';
    if (data.AB != cjs.constants.MATCH_STATUS_TYPE_FIN) {
        if ('WJ' in data) {
            content += cjs.Util.trans('TRANS_CRICKET_BATSMAN') + ': ' + data.WJ
        }
        if ('WK' in data) {
            content += (content ? ' | ' : '') + cjs.Util.trans('TRANS_CRICKET_BOWLER') + ': ' + data.WK
        }
        if ('WQ' in data && data.AW !== '') {
            if (content !== '') {
                content += '<br />'
            }
            content += cjs.Util.trans('TRANS_CRICKET_LAST_SIX_BALLS') + ': ';
            content += data.WQ
        }
    }
    if (content !== '') {
        content = '<span class="extra-info-right">' + content + '</span>'
    }
    return content
}

function get_extra_row_baseball_sentence(data) {
    var homePitcherExtraInfo = '';
    var awayPitcherExtraInfo = '';
    var homePitcherIndex = 0;
    var awayPitcherIndex = 1;
    var winMark = cjs.Util.trans('TRANS_WIN_SHORT');
    var lossMark = cjs.Util.trans('TRANS_LOST_SHORT');
    var homeWin = '';
    var awayWin = '';
    if (false && data.AB == cjs.constants.MATCH_STATUS_TYPE_FIN) {
        if (data.AS == 1) {
            homePitcherExtraInfo = winMark + ": ";
            awayPitcherExtraInfo = lossMark + ": "
        } else {
            if (data.AS == 2) {
                homePitcherExtraInfo = lossMark + ": ";
                awayPitcherExtraInfo = winMark + ": ";
                homePitcherIndex = 1;
                awayPitcherIndex = 0
            }
        }
    } else {
        if (data.AB == cjs.constants.MATCH_STATUS_TYPE_FIN) {
            if (data.AZ == 1) {
                homeWin = winMark + ', ';
                awayWin = lossMark + ', '
            } else {
                if (data.AZ == 2) {
                    awayWin = winMark + ', ';
                    homeWin = lossMark + ', '
                }
            }
        }
    }
    var content = [];
    if (data['WO'] !== undefined) {
        var pitcher_data = JSON.parse(data['WO']);
        if (data['WP'] == undefined) {
            homePitcherIndex = 0
        }
        content[homePitcherIndex] = homePitcherExtraInfo + pitcher_data[0] + ' [' + data['WM'] + '] (' + homeWin + pitcher_data[1] + '-' + pitcher_data[2] + ')'
    }
    if (data['WP'] !== undefined) {
        var pitcher_data = JSON.parse(data['WP']);
        if (data['WO'] == undefined) {
            awayPitcherIndex = 0
        }
        content[awayPitcherIndex] = awayPitcherExtraInfo + pitcher_data[0] + ' [' + data['WN'] + '] (' + awayWin + pitcher_data[1] + '-' + pitcher_data[2] + ')'
    }
    return content.length ? content.join(', ') : null
}

function get_extra_row_cricket_sentence(data, home_participant, away_participant) {
    var content = (function() {
        var content = "";
        if (typeof data['AQ'] == 'undefined') {
            return content
        }
        data['AQ'] += "";
        var sentence = data['AQ'].split(";");
        if (sentence[0] == 'e') {
            return content
        }
        content = sentences[sentence[0]];
        if (typeof content != 'string') return "";
        delete sentence[0];
        var part = "";
        for (var i in sentence) {
            part = sentence[i].split(":");
            switch (part[0]) {
                case "team":
                    var team = part[1] == 1 ? home_participant : away_participant;
                    content = content.replace("[:" + part[0] + "]", team);
                    break;
                case "num":
                    content = content.replace("[:" + part[0] + "]", part[1]);
                    break;
                case "wonby":
                    content = content.replace("[:" + part[0] + "]", sentences_parts[part[1]]);
                    break
            }
        }
        return content
    })();
    if (!content && typeof data['LS'] !== 'undefined' && data['LS']) {
        content = data['LS']
    }
    return cjs.dic.get('Helper_LiveSentence').getHtml(content)
}

function get_flag(coutry_id, classes, country_name) {
    if (typeof classes == 'undefined') classes = '';
    else classes = ' ' + classes;
    classes = 'flag fl_' + coutry_id + classes;
    if (country_name) {
        return '<span class="' + classes + '" title="' + country_name + '"></span>'
    } else {
        return '<span class="' + classes + '"></span>'
    }
}
function get_stats_link(is_draw, is_left, is_icon, is_live) {
    var is_draw = typeof is_draw == 'undefined' ? false : !!is_draw;
    var is_left = typeof is_left == 'undefined' ? false : !!is_left;
    var is_icon = typeof is_icon == 'undefined' ? false : !!is_icon;
    var is_live = typeof is_live == 'undefined' ? false : !!is_live;
    is_live = is_live && stats_live_enable;
    var title = get_stats_link_translate(is_draw, is_live);
    var text = title;
    var el_class = is_icon ? 'icons stats-container fsh' : 'stats-link ' + (is_draw ? 'link-draw' : 'link-tables') + (is_left ? '' : ' fsh');
    return '<span class="' + el_class + '"><span class="stats' + (is_draw ? '-draw' : (is_live ? ' live-table-txt' : '')) + '" title="' + title + '">' + (is_icon ? '' : text) + '</span></span>'
}
function get_stats_link_translate(is_draw, is_live) {
    if (is_draw) {
        return cjs.Util.trans('TRANS_STANDINGS_DRAW')
    }
    if (is_live) {
        return cjs.Util.trans('TRANS_STANDINGS_LIVE_TABLE')
    }
    return cjs.Util.trans('TRANS_STANDINGS_TABLE')
}
function get_odds_content(outcome_type, eventItem, current_odds, odds_side_class, divider) {
    var odds_index = null;
    var odds = null;
    var odds_old = null;
    var css = '';
    var css_shortie = '';
    var move = '';
    var winner = '';
    var last_css = '';
    var td_include = '';
    var outcome_css = null;
    var handicap = null;
    var handicap_val = null;
    var handicap_type = null;
    var over_under_char = '';
    var darken_column = '';
    var actual_format = get_odds_format();
    switch (outcome_type) {
        default: return '<td ' + td_include + 'class="kx">-</td>';
            break;
        case '1':
        case 'winner':
            odds_index = 'A';
            break;
        case 'top_3':
            odds_index = 'O';
            break;
        case '0':
        case 'top_5':
        case 'each_way':
            odds_index = 'B';
            break;
        case 'top_6':
            odds_index = 'P';
            break;
        case '2':
            last_css = ' last';
        case 'top_10':
            odds_index = 'C';
            if (cjs.Util.Sport.inGroup(eventItem.getSportId(), cjs.constants.sport.MOTORSPORT)) {
                last_css = ' last'
            }
            break;
        case 'top_20':
            odds_index = 'N';
            if (!cjs.Util.Sport.inGroup(eventItem.getSportId(), cjs.constants.sport.MOTORSPORT)) {
                last_css = ' last'
            }
            break;
        case 'AH':
            odds_index = 'H';darken_column = ' ah';
            break;
        case 'AH1':
            odds_index = 'F';darken_column = ' ah';
            break;
        case 'AH2':
            odds_index = 'G';darken_column = ' ah';
            break;
        case 'OU':
            odds_index = 'K';over_under_char = (odds_side_class == 'odds-bottom' ? 'Ov ' : 'Un ');darken_column = ' ou';
            break;
        case 'OU1':
            odds_index = 'I';darken_column = ' ou';
            break;
        case 'OU2':
            odds_index = 'J';darken_column = ' ou';
            break;
        case 'ML1':
            odds_index = 'L';
            break;
        case 'ML2':
            odds_index = 'M';
            break
    }
    outcome_css = ' o_' + outcome_type;
    cssSpanNoChange = '';
    if (eventItem.getValue('X' + odds_index) || ((odds_index == 'H' || odds_index == 'K') && eventItem.getValue('X' + odds_index) == 0)) {
        if (odds_index == 'H' || odds_index == 'K') {
            odds = eventItem.getValue('X' + odds_index).split("/");
            odds = odds[0];
            td = '<td ' + td_include + 'class="' + (odds_index == 'H' ? 'ah_handicap' : 'ou_total') + darken_column + (typeof(odds_side_class) != 'undefined' ? ' ' + odds_side_class : '') + (typeof(divider) != 'undefined' ? ' ' + divider : '') + '">';
            if (odds_index == 'H' && odds != 0) {
                odds = get_single_handicap_in_new_format(cjs.dic.get('util_odds').getHandicapFormat(sport_id), odds)
            }
        } else {
            if (eventItem.getValue('Y' + odds_index)) {
                if (eventItem.getValue('Y' + odds_index) < eventItem.getValue('X' + odds_index)) {
                    css = 'up';
                    css_shortie = '[u]'
                } else if (eventItem.getValue('Y' + odds_index) > eventItem.getValue('X' + odds_index)) {
                    css = 'down';
                    css_shortie = '[d]'
                }
            }
            var infoText = '';
            if (!eventItem.isOddPublished('X' + odds_index)) {
                css += ' not-published';
                cssSpanNoChange += ' not-published';
                infoText = cjs.dic.get('util_trans')('TRANS_ODDS_REMOVED_BY_BOOKMAKER')
            }
            score_current = [eventItem.getHomeScore(), eventItem.getAwayScore()];
            score_full = [eventItem.getValue('AT'), eventItem.getValue('AU')];
            var score_1st_period = [eventItem.getValue('BA'), eventItem.getValue('BB')];
            var score_2nd_period = [eventItem.getValue('BC'), eventItem.getValue('BD')];
            var tennis_game_score = null;
            if (sport == 'tennis') tennis_game_score = [eventItem.getValue('BA') + eventItem.getValue('BC') + eventItem.getValue('BE') + eventItem.getValue('BG') + eventItem.getValue('BI'), eventItem.getValue('BB') + eventItem.getValue('BD') + eventItem.getValue('BF') + eventItem.getValue('BH') + eventItem.getValue('BJ')];
            if (eventItem.getValue('XH') !== null && (odds_index == 'F' || odds_index == 'G')) {
                handicap = eventItem.getValue('XH').split("/");
                handicap_val = handicap[0];
                handicap_type = handicap[1]
            } else if (eventItem.getValue('XK') !== null && (odds_index == 'I' || odds_index == 'J')) {
                handicap = eventItem.getValue('XK').split("/");
                handicap_val = handicap[0];
                handicap_type = handicap[1]
            }
            winner = odds_index != 'D' && odds_index != 'E' && is_odd_winning(eventItem.getStage(), eventItem.getStageType(), outcome_type, score_current, score_full, score_1st_period, score_2nd_period, tennis_game_score, eventItem.getSportId(), handicap_val, handicap_type) ? ' win' : '';
            var odds_to_compare = eventItem.getValue('X' + odds_index);
            odds = odds_to_compare.toFixed(2);
            if (eventItem.getValue('Y' + odds_index)) odds_old = eventItem.getValue('Y' + odds_index).toFixed(2);
            if (typeof(current_odds) != 'undefined' && current_odds != null) {
                odds_old = current_odds;
                if (eventItem.getValue('X' + odds_index) !== null) {
                    if (odds_old < eventItem.getValue('X' + odds_index)) {
                        css = 'up';
                        css_shortie = '[u]'
                    } else if (odds_old > eventItem.getValue('X' + odds_index)) {
                        css = 'down';
                        css_shortie = '[d]'
                    }
                }
                odds_old = odds_old.toFixed(2)
            }
            if (cjs.dic.get('util_odds').hasUsHandicap(sport_id)) {
                if (odds == 2) {
                    odds = TXT_ODDS_EVEN_SHORT
                }
                if (odds_old == 2) {
                    odds_old = TXT_ODDS_EVEN_SHORT
                }
            }
            if (actual_format != 'eu') {
                odds = cjs.dic.get('util_odds').getSingleOddsInNewFormat(actual_format, odds);
                if (odds_old) odds_old = cjs.dic.get('util_odds').getSingleOddsInNewFormat(actual_format, odds_old)
            }
            if (odds_index == 'D' || odds_index == 'E') winner += winner + ' xx2';
            td = '<td ' + td_include + 'class="kx' + outcome_css + darken_column + winner + last_css + (typeof(odds_side_class) != 'undefined' ? ' ' + odds_side_class : '') + (typeof(divider) != 'undefined' ? ' ' + divider : '') + '">'
        }
        if (typeof(odds_side_class) != 'undefined' && odds_index == 'H') {
            handicap = odds;
            if (handicap != null) {
                if (handicap != 0) {
                    handicap = handicap.split("/");
                    if (odds_side_class == 'odds-bottom') odds = (eventItem.getValue('WE') ? handicap[1] : handicap[0]);
                    else odds = (eventItem.getValue('WE') ? handicap[0] : handicap[1])
                } else odds = handicap
            }
        }
        if (odds_to_compare == 1) td += '-';
        else {
            var oddSpan = '';
            if (odds == odds_old || odds_old == null) {
                oddSpan += '<span class="' + cssSpanNoChange + '"';
                if (infoText) {
                    oddSpan += ' alt="' + infoText + '"'
                }
                oddSpan += '>'
            } else {
                var separator = ((odds_old + css_shortie + odds) && infoText) ? '\n' : '';
                oddSpan += '<span class="' + css + '" alt="' + odds_old + css_shortie + odds + separator + infoText + '">'
            }
            oddSpan += over_under_char + odds + '</span>';
            td += oddSpan
        }
        return td + '</td>'
    } else {
        if (odds_index == 'D' || odds_index == 'E') css = ' xx2';
        else css = '';
        return '<td ' + td_include + ' class="kx no-odds' + css + darken_column + last_css + (typeof(odds_side_class) != 'undefined' ? ' ' + odds_side_class : '') + (typeof(divider) != 'undefined' ? ' ' + divider : '') + '">-</td>'
    }
}
function get_single_handicap_in_new_format(hFormat, handicap) {
    switch (hFormat) {
        case 'eu':
            numFormat = 1;
            break;
        case 'us':
            numFormat = 5;
            break;
        case 'ha':
            numFormat = 6;
            break;
        default:
            numFormat = null;
            break
    }
    formater.setHandicapFormat(numFormat);
    handicap = formater.formatHandicap(handicap);
    return handicap
}
function setNavigationCategory(cat) {
    navigation_category = cat
}
function getNavigationCategory() {
    return navigation_category
}
function getTabTrans(sportId, type) {
    var sportConstant = cjs.dic.get('util_sport').getConstant(sportId);
    var sportTransKey = 'TRANS' + sportConstant + '_BOOKMARK_' + type;
    var defaultTransKey = 'TRANS_BOOKMARK_' + type;
    var sportTransText = cjs.dic.get('util_trans')(sportTransKey);
    if (sportTransText === sportTransKey) {
        return cjs.dic.get('util_trans')(defaultTransKey)
    }
    return sportTransText
}

function generate_navigation() {
    var css = new Array();
    for (var i = 0; i <= 7; i++) css[i] = 'li' + i;
    var content = new Array();
    if (country == null) {
        css[getNavigationCategory()] += ' selected';
        content.push('<li class="ifmenu-all ', css[0], '"><span><a href="#" onclick="setNavigationCategory(0);pgenerate(true, 0); e_t.track_click(\'iframe-bookmark-click\', \'all-matches\'); return false;">', getTabTrans(sport_id, 'ALL'), '</a></span></li>');
        content.push('<li class="ifmenu-live ', css[1], '"><span><a href="#" onclick="setNavigationCategory(1);pgenerate(true, 1, false, 1); e_t.track_click(\'iframe-bookmark-click\', \'live\'); return false;">', getTabTrans(sport_id, 'LIVE'), '</a></span></li>');
        content.push('<li class="', css[2], '"><span><a href="#" onclick="setNavigationCategory(2);pgenerate(true, 2); e_t.track_click(\'iframe-bookmark-click\', \'finished\'); return false;">', getTabTrans(sport_id, 'FIN'), '</a></span></li>');
        content.push('<li class="ifmenu-odds ', css[3], '"><span><a href="#" onclick="setNavigationCategory(3);pgenerate(true, 3); e_t.track_click(\'iframe-bookmark-click\', \'scheduled\'); return false;">', getTabTrans(sport_id, 'SCHED'), '</a></span></li>');
        if (odds_enable && true && !cjs.Util.Sport.inGroup(sport_id, cjs.constants.sport.WINTER_SPORTS)) {
            content.push('<li class="ifmenu-odds ', css[4], '"><span><a href="#" onclick="setNavigationCategory(4);pgenerate(true, 0,false,false,2); e_t.track_click(\'iframe-bookmark-click\', \'odds\');  return false;">', cjs.dic.get('Helper_Bookmaker').getText(cjs.geoIP), '</a></span></li>')
        }
        if (custom_enable) {
            content.push('<li class="ifmenu-custom ', css[5], '"><span><a href="#" onclick="setNavigationCategory(5);pgenerate(true, 5, false, 5); e_t.track_click(\'iframe-bookmark-click\', \'my-games\');  return false;">', cjs.dic.get('util_trans')('TRANS_BOOKMARK_CUSTOMIZE'), ' <span id="mygames-count">', '(' + (1 * cjs.mygames.getCount()) + ')', '</span>', '</a></span></li>')
        }
        if (category == 1 || category == 5) {
            content.push('<li id="ifmenu-sound" class="ifmenu-sound-link" onclick=" e_t.track_click(\'iframe-bookmark-click\', \'sound\');" onmouseover="tt.show(this, event)" onmouseout="tt.hide(this)"><i></i></li>')
        }
        var right_calendar = false;
        if (category != 1 && category != 5) {
            right_calendar = true;
            var cname = [parseInt(sudate) < calendar.range ? "has-tomorrow" : "no-tomorrow", parseInt(sudate) > -calendar.range ? "has-yesterday" : "no-yesterday"];
            content.push('<li id="ifmenu-calendar" class="', cname.join(' '), '">');
            calendar.buttons.prev_day && content.push('<span class="day yesterday" title="', TXT_CALENDAR.prev_day, '" onclick="change_date(\'yesterday\'); e_t.track_click(\'iframe-bookmark-click\', \'calendar-arrow-previous\');"><span class="arrow"></span></span>');
            content.push('<span class="day today">', cjs.dic.get('Helper_Calendar').getSelectedDateHtml(), '</span>');
            calendar.buttons.next_day && content.push('<span class="day tomorrow" title="', TXT_CALENDAR.next_day, '" onclick="change_date(\'tomorrow\'); e_t.track_click(\'iframe-bookmark-click\', \'calendar-arrow-next\');"><span class="inner"><span class="arrow"></span></span></span>');
            content.push('</li>')
        }
        var settingsClass = right_calendar ? 'right_calendar ' : '';
        settingsClass += 'hidden';
        content.push('<li id="ifmenu-livescore-settings" class="' + settingsClass + '" onclick="tt.hide(this); cjs.livescoreSettings.show(); e_t.track_click(\'web-click\', \'settings\');  return false;" onmouseover="tt.show(this, event)" onmouseout="tt.hide(this)" title="' + cjs.Util.trans('TRANS_SETTINGS_LIVESCORE') + '"><i></i></li>')
    } else {
        if (!tournament) {
            if (updater.country_tournament_order_fin) css[1] = 'selected';
            else css[2] = 'selected';
            if (!cjs.Util.Sport.hasCategoryPage(sport_id) && sport_id != cjs.constants.sport.MOTORSPORT_AUTO_RACING && sport_id != cjs.constants.sport.MOTORSPORT_MOTO_RACING) {
                content.push('<li class="', css[1], '"><span><a href="#" onclick="pgenerate(true, 6); return false">', cjs.dic.get('util_trans')('TRANS_BOOKMARK_LATEST_SCORES'), '</span></a></li>');
                content.push('<li class="', css[2], '"><span><a href="#" onclick="pgenerate(true, 7); return false">', cjs.dic.get('util_trans')('TRANS_BOOKMARK_SCHED'), '</span></a></li>')
            } else {
                var resultTrans = sport_id == cjs.constants.sport.TENNIS ? cjs.dic.get('util_trans')('TRANS_TOURNAMENT_PAGE_TODAYS_MATCHES') : cjs.dic.get('util_trans')('TRANS_TOURNAMENT_PAGE_PLAYER_RESULTS');
                content.push('<li class="', css[1], ' single-nav-select"><span><span class="single-nav">', resultTrans, '</span></span></li>')
            }
        }
    }
    $("div#fscon > ul.ifmenu").html(content.join(''));
    if (false && country == null && odds_enable) {
        $("#ifmenu-submenu-wrap").remove();
        $("div#fscon > ul.ifmenu").after(generate_navigation_getSubmenu(category));
        handle_navigation_submenu(category)
    }
}
function generate_navigation_getSubmenu(cat) {
    var submenu = '<div id="ifmenu-submenu-wrap">' + '<ul class="ifmenu-live-submenu">' + '<li class="matches first selected"><a href="#">' + cjs.Util.trans('TRANS_SUB_BOOKMARK_MAIN') + '</a></li>' + '<li class="odds"><a href="#">' + cjs.Util.trans('TRANS_SUB_BOOKMARK_ODDS') + '</a></li>';
    if (cat == 1) {
        submenu += '<li class="live-odds last"><a href="#">' + cjs.Util.trans('TRANS_SUB_BOOKMARK_LIVE_ODDS') + '</a></li>'
    }
    submenu += '</ul>' + '</div>';
    return submenu
}
function handle_navigation_submenu(category) {
    $("#ifmenu-submenu-wrap .ifmenu-live-submenu li.matches a").unbind('click').click(function(cat) {
        return function(e) {
            e.preventDefault();
            pgenerate(true, cat);
            set_selected_item_submenu_navigation('matches', cat)
        }
    }(category));
    $("#ifmenu-submenu-wrap .ifmenu-live-submenu li.odds a").unbind('click').click(function(cat) {
        return function(e) {
            e.preventDefault();
            pgenerate(true, category, false, false, 2);
            set_selected_item_submenu_navigation('odds', cat)
        }
    }(category));
    $("#ifmenu-submenu-wrap .ifmenu-live-submenu li.live-odds a").unbind('click').click(function(cat) {
        return function(e) {
            e.preventDefault();
            pgenerate(true, category, false, false, 3);
            set_selected_item_submenu_navigation('live-odds', cat)
        }
    }(category));
    var activeTab = '';
    switch (sub_category) {
        case 2:
            activeTab = 'odds';
            break;
        case 3:
            activeTab = 'live-odds';
            break;
        default:
            activeTab = 'matches';
            break
    }
    set_selected_item_submenu_navigation(activeTab, category)
}
function set_selected_item_submenu_navigation(itemClass, category) {
    $("#mc .ifmenu-live-submenu li").removeClass('selected');
    $("#mc .ifmenu-live-submenu li." + itemClass).addClass('selected');
    $("#mc .ifmenu.live-menu  li.li" + category).addClass('selected')
}
function change_date(day) {
    var day_mark;
    if (day == 'tomorrow') day_mark = sudate + 1;
    if (day == 'yesterday') day_mark = sudate - 1;
    set_calendar_date(day_mark)
}
function set_calendar_date(value) {
    $("#ifmenu-calendar-content").remove();
    if (value == sudate) return;
    preload_show();
    sudate = cjs.Util.Number.toNumber(value);
    if (hasRepairFeed(value)) {
        delete cjs.gamesNotificationOnly
    } else {
        cjs.gamesNotificationOnly = true
    }
    push_update_subscription();
    push_connect(sudate);
    setTimeout("updater.doc_update()", 10)
}
function change_tz_callback() {
    if (typeof sports_count_reload != 'undefined') sports_count_reload();
    redrawTournamentPage();
    var page = cjs.dic.get('page');
    if (updater && !page.isSeasonPagePassiveTable()) {
        updater.doc_update()
    }
    if (project_type_name == '_ass') {
        var liveStreaming = cjs.dic.get('Helper_LiveStreaming');
        liveStreaming.regenerateLiveStreamingContent('kickoff');
        liveStreaming.regenerateLiveStreamingContent('event')
    }
}
function get_gmt_offset_diff() {
    var local_gmt_offset = new Date();
    local_gmt_offset = local_gmt_offset.getTimezoneOffset() * 60;
    return get_gmt_offset() - local_gmt_offset
}
function get_gmt_offset() {
    return (-1) * 60 * 60 * cjs.timezone.getTimezone()
}
function preload_show(element_id) {
    if (typeof element_id == 'undefined') element_id = 'preload';
    $("div#fscon div#fs").css("opacity", "0.6");
    $("div#" + element_id).css("display", "block");
    $('#fs_overlay').show()
}
function preload_hide(element_id) {
    if (typeof element_id == 'undefined') {
        element_id = 'preload'
    } else {
        $("div#" + element_id).addClass('no-height')
    }
    $("div#fscon div#fs").css("opacity", "1");
    $("div#" + element_id).css("display", "none");
    $('#fs_overlay').hide()
}
function banner_show() {
    $("div#fsifbanner").css("display", "block")
}
function banner_hide() {
    $("div#fsifbanner").css("display", "none")
}
function regenerate_page(reg) {
    if (reg) {
        ++debug_generate_no;
        pgenerate(true, category);
        regenerate = false
    }
}
function detail_format_utime() {
    var detail_utime = document.getElementById('utime');
    var url_gmt_offset = get_gmt_offset();
    if (detail_utime) {
        detail_utime.innerHTML = cjs.Util.Date.timestamp2date(cjs.fullDateTimeFormat, game_utime, url_gmt_offset);
        if (game_utime_end) detail_utime.innerHTML += ' - ' + cjs.Util.Date.timestamp2date(cjs.fullDateFormat, game_utime_end, url_gmt_offset)
    }
}
function stats_open(tournament_id, tournament_stage_id, sport_id, stats_type_ident, highlight_participants) {
    var window_width = cjs.dic.get('Helper_Window').getWidth();
    var window_height = cjs.dic.get('Helper_Window').getHeight();
    var sport_ident = SPORT_LIST_BY_ID[sport_id];
    if (stats_type_ident == 1) var url = '/standings/' + tournament_id + '/' + tournament_stage_id + '/';
    else var url = '/draw/' + tournament_id + '/' + tournament_stage_id + '/';
    if (typeof highlight_participants != 'undefined') {
        url = url + '?';
        for (var i in highlight_participants) {
            if (i > 0) {
                url = url + '&'
            }
            url = url + 'hp' + (parseInt(i) + 1) + '=' + highlight_participants[i]
        }
    }
    window.open(url, tournament_id, 'hotkeys=no, resizable=yes, toolbar=no, status=no, dependent=yes, scrollbars=1, width=' + window_width + ', height=' + window_height)
}
function header(url) {
    window.location = url;
    return
}
function game_in_category_visible(gameId, category) {
    var category_game_status_types = [, 2, 3, 1];
    return (typeof category_game_status_types[category] == "undefined" || cjs.dic.get('dataEventHolderProxy').getHolder().getEvent(gameId).getValue('AB') == category_game_status_types[category])
}
function add_my_game(index, contextElement, target) {
    tt.hide_all();
    if (cjs.mygamesGroups.showOnPage() && cjs.mygames.check(index) && !$(target).closest('div').is('#my-teams')) {
        var groupId = cjs.mygamesGroups._valueToKey($(target).parents('td').find('div.mg_dropdown span.mg_dropdown_selected').text()) + "";
        if (removeMyGameFromGroup(index, groupId)) {
            reloadIframeContent()
        }
        return
    }
    if (!cjs.mygames.toggle(index) && category == 5) {
        fs_update.property_set(index, 'custom', false)
    }
    cjs.mygamesCheckboxes.updateGameCheckboxState(index);
    var $tbody = $('tr#' + index).closest('tbody');
    var hasGames = $tbody.find('span.tomyga').length > 0;
    cjs.mygamesCheckboxes.setHeaderCheckboxState($tbody.prev('thead').find('span.tomyg, span.tomyga, span.tomygai'), hasGames);
    if (category == 5) {
        if ($(target).closest('#my-teams').length == 1) {
            reloadIframeContent()
        }
        fs_update.update()
    }
}
function add_my_team(index, contextElement, target) {
    tt.hide_all();
    var checked = $(target).hasClass('tomyga');
    var games = cjs.myTeams.getParticipantEvents(index);
    for (var i in games) {
        index = games[i];
        if (checked != cjs.mygames.check(index)) {
            continue
        }
        if (!cjs.mygames.toggle(index) && category == 5) {
            fs_update.property_set(index, 'custom', false)
        }
        cjs.mygamesCheckboxes.updateGameCheckboxState(index);
        var $tbody = $('tr#' + index).closest('tbody');
        var hasGames = $tbody.find('span.tomyga').length > 0;
        cjs.mygamesCheckboxes.setHeaderCheckboxState($tbody.prev('thead').find('span.tomyg, span.tomyga, span.tomygai'), hasGames)
    }
    if (category == 5) {
        if ($(target).closest('#my-teams').length == 1) {
            reloadIframeContent()
        }
        fs_update.update()
    }
}
function removeMyGameFromGroup(eventItemId, groupId) {
    var groups = cjs.mygames.getGamesGroups([eventItemId]);
    if (typeof groups[groupId] === 'undefined') {
        return false
    }
    cjs.mygames.removeGamesFromGroup([eventItemId], groupId);
    delete(groups[groupId]);
    if (cjs.dic.get('util_object').keys(groups).length === 0) {
        cjs.mygames.toggle(eventItemId)
    }
    return true
}
function removeLeagueFromGroup(leagueItemId, groupId) {
    var groups = cjs.mygames.getLabelGroups(leagueItemId);
    if (typeof groups[groupId] === 'undefined') {
        return false
    }
    cjs.mygames.removeLabelFromGroup(leagueItemId, groupId);
    delete(groups[groupId]);
    if (cjs.dic.get('util_object').keys(groups).length === 0) {
        cjs.mygames.removeAllEvents(leagueItemId)
    }
    return true
}
function is_custom_game(game_id) {
    return cjs.mygames.check(game_id) && game_in_category_visible(game_id, category)
}
function add_my_league($la_icon, contextElement) {
    if (typeof $la_icon.attr('id') == 'undefined') {
        return
    }
    labl_id = $la_icon.attr('id').replace(/^latomyg\_/, "");
    var icon_on = cjs.mygamesCheckboxes.getCheckboxState($la_icon);
    icon_on = !icon_on;
    var isNoduelTournament = false;
    if ((!icon_on && cjs.mygames.isAddedWholeTournament(labl_id)) || (icon_on && isNoDuelTournament(labl_id))) {
        isNoduelTournament = true
    }
    cjs.mygamesCheckboxes.setHeaderCheckboxState($la_icon, icon_on);
    tt.hide_all();
    var findClass = icon_on ? 'span.tomyg' : 'span.tomyga, span.tomygai';
    var $gameCheckBoxes = $la_icon.closest('thead').next('tbody').find(findClass);
    if (!icon_on && cjs.mygamesGroups.showOnPage()) {
        var groupId = cjs.mygamesGroups._valueToKey($la_icon.parents('td').find('div.mg_dropdown span.mg_dropdown_selected').text()) + "";
        var reload = false;
        if (isNoduelTournament) {
            reload = removeLeagueFromGroup(labl_id, groupId)
        } else {
            $gameCheckBoxes.each(function(index, checkBox) {
                var $tr = $(checkBox).closest('tr');
                var gameId = $tr.attr('id');
                if (!/^g_[0-9]*_[0-9a-z]{8,16}$/i.test(gameId)) {
                    var ret = /g_[0-9]*_[0-9a-z]{8,16}/i.exec($tr.attr('class'));
                    if (ret === null) {
                        return
                    }
                    gameId = ret[0]
                }
                reload = removeMyGameFromGroup(gameId, groupId) || reload
            })
        }
        if (reload) {
            reloadIframeContent()
        }
        return
    }
    if (isNoduelTournament) {
        if (icon_on) {
            cjs.mygames.addNoduelTournament(labl_id)
        } else {
            cjs.mygames.removeAllEvents(labl_id)
        }
    }
    $gameCheckBoxes.each(function(index, checkBox) {
        var gameId = $(checkBox).closest('tr').attr('id');
        if (!/^g_[0-9]*_[0-9a-z]{8,16}$/i.test(gameId)) {
            return
        }
        if (!isNoduelTournament) {
            if (icon_on) {
                cjs.mygames.add(gameId)
            } else {
                cjs.mygames.remove(gameId)
            }
        }
        cjs.mygamesCheckboxes.updateGameCheckboxState(gameId);
        if (category == 5 && !icon_on) {
            fs_update.property_set(gameId, 'custom', false)
        }
    });
    if (category == 5) {
        fs_update.update()
    }
    push_update_subscription()
}
function is_game_sync() {
    var currentTimestamp = cjs.dic.get('Helper_CurrentTime').getTimestamp();
    if ((typeof fs_detail['DZ'] != 'undefined' && fs_detail['DZ'] == 2) || (game_utime < currentTimestamp + (2 * 3600) && (game_utime_end ? game_utime_end : game_utime) > currentTimestamp - (6 * 3600))) return true;
    return false
}
function ie6_suffix() {
    if (ie) {
        var pom = cjs.dic.get('Helper_CurrentTime').getTimestamp() + '';
        var url_ie6 = '~' + pom.substr(6, 4)
    } else var url_ie6 = '';
    return url_ie6
}
function service_url_check() {
    if (url_check == false) {
        return
    }
    var referrer = document.referrer.toLowerCase();
    if (!referrer) {
        return
    }
    var ajaxSettings = {
        url: 'http://' + base_url + '/res/ajax/core-url.php',
        data: 'X-Referer=' + referrer,
        type: 'POST'
    };
    $.ajax(ajaxSettings);
    url_check = false
}
function setAjaxSyncMultiplier(multiplier, feedName) {
    multiplier = cjs.dic.get('Helper_AjaxSyncTime').setMultiplier(multiplier);
    if (updater.ajax_multiplier != multiplier) {
        updater.ajax_multiplier = multiplier;
        updater.ajax_time_update = true
    }
}
function set_service_status(value, forceResize) {
    if (typeof value == 'undefined') value = service_status;
    var cb = function() {
        if (forceResize) {
            if_resize()
        }
    };
    cjs.dic.get('Helper_ServiceStatusBox').showBox(value, cb);
    service_status = value
}
function if_resize() {
    if (typeof iframe_height == "undefined") {
        var iframe_height = 499
    }
    var if_rame;
    var if_height;
    if_height = $("body").outerHeight();
    if (if_height < 500) {
        if_height = 500
    }
    if (iframe_height == if_height) {
        return
    }
    if (typeof body_height != 'undefined' && body_height == 'auto') {
        try {
            if (document.referrer != '') {
                parent.location = document.referrer + "#inscore_ifheight_xdc_" + if_height
            }
        } catch (e) {}
    }
    try {
        if (if_rame = parent.document.getElementById('livescoreContent')) {
            if_rame.style.height = if_height + 'px'
        }
    } catch (e) {}
    var fsi = document.getElementById('fsi');
    if (typeof fsi != 'undefined') {
        try {
            var fsi_height = fsi.scrollHeight;
            var top_advert_height = 0;
            var top_advert = document.getElementById('topadvert');
            if (top_advert) {
                top_advert_height = top_advert.scrollHeight
            }
            var lsopat = document.getElementById('lsopat');
            if (lsopat) {
                lsopat.style.height = (if_height - fsi_height - top_advert_height + 5) + 'px'
            }
        } catch (e) {}
    }
    try {
        parent.document.refresh_alert()
    } catch (e) {}
    iframe_height = if_height
}
function CommCore(country_id, tournament_id, country_tournament_order_fin, game, content_utime, participant_id, seriesId) {
    var currentTimestamp = cjs.dic.get('Helper_CurrentTime').getTimestamp();
    this.interval_sync = null;
    this.interval_blink = null;
    this.interval_counter = null;
    this.interval_live = null;
    this.last_sync_utime = currentTimestamp;
    this.refresh_utime = currentTimestamp;
    this.last_doc_update_category = null;
    this.last_doc_update_action = null;
    this.parse_only = false;
    this.ajax_multiplier = cjs.dic.get('Helper_AjaxSyncTime').getMultiplier();
    this.ajax_cache_time = 30;
    this.ajax_odds_update_time = 60;
    this.ajax_odds_cache_time = 180;
    this.ajax_time_update = false;
    this.country_id = country_id;
    this.tournament_id = tournament_id;
    this.country_tournament_order_fin = (country_tournament_order_fin ? true : false);
    if (tournament_id != null) {
        this.init_action = 'tournament'
    } else if (typeof participant_id != 'undefined' && participant_id != null) {
        this.init_action = 'participant'
    } else if (typeof seriesId != 'undefined' && seriesId != null) {
        this.init_action = 'series'
    } else if (country_id != null) {
        this.init_action = 'country'
    } else if (typeof game != 'undefined' && game != null) {
        this.init_action = 'game'
    } else {
        this.init_action = 'full'
    }
    if (typeof game == 'undefined') {
        this.game = null
    } else {
        this.game = game
    }
    if (typeof content_utime == 'undefined') {
        this.content_utime = null
    } else {
        this.content_utime = content_utime
    }
}
CommCore.prototype.doc_resume = function() {
    if (category != 5) {
        updater.doc_update();
        updater.set_interval('update')
    } else {
        loadAndShowMygamesContent()
    }
};
CommCore.prototype.lastSyncUtimeIsTooOld = function(currentTimestamp, useOddsCacheTime) {
    currentTimestamp = currentTimestamp || cjs.dic.get('Helper_CurrentTime').getTimestamp();
    var cacheTime = useOddsCacheTime ? this.ajax_odds_cache_time : this.ajax_cache_time;
    return !this.ajax_time_update && (this.last_sync_utime + (0.8 * cacheTime) < currentTimestamp)
};
CommCore.prototype.lastSyncUtimeCanBeHandledByRepairFeed = function(currentTimestamp) {
    currentTimestamp = currentTimestamp || cjs.dic.get('Helper_CurrentTime').getTimestamp();
    return this.last_sync_utime + (0.8 * 300) > currentTimestamp
};

function referenceSameIdsInHolders(holder1, holder2) {
    var id, ids = holder1.getAllContainerIds();
    for (var i = 0, _len = ids.length; i < _len; i++) {
        id = ids[i];
        if (holder2.hasItem(id)) {
            holder2.setItem(id, holder1.getItem(id))
        }
    }
}
CommCore.prototype.doc_update = function(action, get_odds, prefered_sport_id, responseCallback) {
    var feedData;
    if (category == 5 && (action == 'update' || action == 'repair' || action == 'frepair')) {
        var neededFeeds = [];
        neededFeeds = neededFeeds.concat(cjs.mygames.getNeededFeeds(1));
        if (neededFeeds.length > 0) {
            for (var i in neededFeeds) {
                if (sport_id == neededFeeds[i].sport_id) {
                    continue
                }
                prefered_sport_id = 0;
                break
            }
        }
        if (typeof cjs.myTeams != 'undefined') {
            var sports = cjs.myTeams.getSports();
            if (sports.length > 1 || (sports.length == 1 && sports[0] != prefered_sport_id)) {
                prefered_sport_id = 0
            }
        }
    }
    action = (typeof action == 'undefined' ? updater.init_action : action);
    prefered_sport_id = (typeof prefered_sport_id == 'undefined') ? sport_id : prefered_sport_id;
    if (action == 'sys' && ((sudate != 0 && sudate != -1) || (typeof game_utime != 'undefined' && !is_game_sync()))) return;
    if (action == 'update' && (sudate != 0 && sudate != -1)) return;
    if (action == 'game' && !is_game_sync()) return;
    this.last_doc_update_category = category;
    this.last_doc_update_action = action;
    var count_part = false;
    switch (action) {
        case 'full':
        case 'country':
        case 'tournament':
            if (tournamentPage === false && $.inArray(action, ['country', 'tournament']) !== -1) {
                var eventHolder = cjs.dic.get('dataEventHolder');
                var leagueHolder = cjs.dic.get('dataLeagueHolder');
                var temporaryEventHolder = cjs.dic.get('dataEventHolderTemporary');
                var temporaryLeagueHolder = cjs.dic.get('dataLeagueHolderTemporary');
                if (eventHolder.hasData() && !temporaryEventHolder.hasData()) {
                    temporaryEventHolder.reinit(eventHolder.getReferences());
                    temporaryLeagueHolder.reinit(leagueHolder.getReferences())
                } else if (eventHolder.hasData() && temporaryEventHolder.hasData()) {
                    var tmpEventReferences = eventHolder.getReferences();
                    var tmpLeagueReferences = leagueHolder.getReferences();
                    eventHolder.reinit(temporaryEventHolder.getReferences());
                    leagueHolder.reinit(temporaryLeagueHolder.getReferences());
                    temporaryEventHolder.reinit(tmpEventReferences);
                    temporaryLeagueHolder.reinit(tmpLeagueReferences);
                    cjs.dic.get('dataEventHandler').resetIds();
                    cjs.dic.get('dataLeagueHandler').resetIds();
                    updater.generate_data();
                    break
                }
            }
            var afterCallback;
            if (project_type_name === '_portable') {
                if (category === 5) {
                    loadAndShowMygamesContent();
                    break
                }
                afterCallback = function() {
                    if (category === 5) {
                        loadAndShowMygamesContent()
                    }
                }
            }
            resetAndExecuteFeedRequests(prefered_sport_id, action, afterCallback);
            break;
        case 'tournament-fixtures':
        case 'tournament-results':
            var winScroll = window.pageYOffset || document.documentElement.scrollTop;
            $('#preload').css('top', winScroll + 100);
            preload_show();
            var elementId = (action === 'tournament-fixtures' ? '#tournament-page-season-fixtures' : '#tournament-page-season-results');
            var season_id = $(elementId).text();
            tournamentPageDataPart++;
            cjs.feedRequest.execute(action, prefered_sport_id, responseCallback, {
                seasonId: season_id,
                dataPart: tournamentPageDataPart
            });
            break;
        case 'participant':
            cjs.feedRequest.execute(action, prefered_sport_id, responseCallback, {
                participantId: participant
            });
            break;
        case 'series':
            cjs.feedRequest.execute(action, prefered_sport_id, responseCallback, {
                seriesId: series
            });
            break;
        case 'load-participant-odds':
            cjs.feedRequest.execute(action, prefered_sport_id, responseCallback, {
                participantId: participant
            });
            break;
        case 'participant-fixtures':
            var winScroll = window.pageYOffset || document.documentElement.scrollTop;
            $('#preload').css('top', winScroll + 100);
            preload_show();
            var dataPart = cjs.participantPage.getDataPart() + 1;
            cjs.participantPage.setDataPart(dataPart);
            cjs.feedRequest.execute(action, prefered_sport_id, responseCallback, {
                participantId: participant,
                dataPart: dataPart
            });
            break;
        case 'participant-results':
            var winScroll = window.pageYOffset || document.documentElement.scrollTop;
            $('#preload').css('top', winScroll + 100);
            preload_show();
            var dataPart = cjs.participantPage.getDataPart() + 1;
            cjs.participantPage.setDataPart(dataPart);
            cjs.feedRequest.execute(action, prefered_sport_id, responseCallback, {
                participantId: participant,
                dataPart: dataPart
            });
            break;
        default:
            var ret = cjs.feedRequest.execute(action, prefered_sport_id, responseCallback);
            if (ret === false) {
                return
            }
    }++debug_sync_no;
    try {
        if (/^detail/.test(action)) {
            document.parts_count_increase()
        }
    } catch (e) {}
};

function get_odds_format() {
    if (typeof odds_format_url != 'undefined' && typeof ODDS_FORMAT_LIST[odds_format_url] != 'undefined') {
        prefered_format = odds_format_url;
        default_odds_format = prefered_format
    } else {
        if (cjs.dic.get('utilConfig').get('app', 'project_type', 'name') == '_ass') {
            var prefered_format = clientStorage.get('fs_of')
        } else {
            var prefered_format = clientStorage.get('fs_of_' + cjs.dic.get('utilConfig').get('app', 'lang', 'web'))
        }
        if (typeof ODDS_FORMAT_LIST[prefered_format] == 'undefined') prefered_format = default_odds_format;
        else default_odds_format = prefered_format
    }
    return prefered_format
}
CommCore.prototype.response_full = function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
    cjs.dic.get('Helper_Bookmaker').setData(cjs.bookmakersData);
    cjs.dic.get('Helper_Bookmaker').setAvailableBookmakersData(cjs.availableBookmakers);
    CommCore.parse_custom_headers(r_custom_headers);
    var fsDetailObj = cjs.dic.getNewInstance('detail_fsdetail');
    fsDetailObj.setOverrideData(fs_detail);
    var geoIp = cjs.dic.getNewInstance('util_enviroment').getGlobalGeoIp();
    if (geoIp && fsDetailObj.getGeoBookmakerSettings() && fsDetailObj.getAvailableTabs()) {
        var geoOddsTabSettings = JSON.parse(fsDetailObj.getGeoBookmakerSettings());
        var overrideGeoIp = (geoIp in geoOddsTabSettings) ? geoIp : "default";
        if (overrideGeoIp in geoOddsTabSettings && !geoOddsTabSettings[overrideGeoIp]) {
            fsDetailObj.removeTab('OD')
        }
    }
    if (r_trigger == 'headers_hit') return;
    cjs.full_loaded = true;
    fullfeed_trigger = r_trigger;
    var mainBookmakerId = cjs.dic.get('Helper_Bookmaker').getId();
    if (cjs.geoIP) {
        var skippedGeoIPs = '';
        var langboxDenied = false;
        skippedGeoIPs = 'GB';
        if (skippedGeoIPs) {
            if (skippedGeoIPs.match(cjs.geoIP)) langboxDenied = true
        }
        if (!langboxDenied && cjs.langbox) {
            cjs.langbox.check(cjs.geoIP)
        }
        if (typeof showJobInfo === "function") {
            showJobInfo(cjs.geoIP)
        }
        mainBookmakerId = cjs.dic.get('Helper_Bookmaker').getId(cjs.geoIP)
    }
    cjs.dic.get('application').setMainBookmakerId(mainBookmakerId);
    updater.last_sync_utime = cjs.dic.get('Helper_CurrentTime').getTimestamp();
    if (updater.is_actual(r_status, r_headers)) {
        return
    }
    if (!updater.parse_only) {
        if (tournamentPage === false && $.inArray(r_trigger, ['country', 'tournament']) !== -1 && cjs.dic.get('dataEventHolderTemporary').hasData()) {
            cjs.dic.get('dataEventHolder').reinit();
            cjs.dic.get('dataEventHandler').resetIds();
            cjs.dic.get('dataLeagueHolder').reinit();
            cjs.dic.get('dataLeagueHandler').resetIds()
        } else {
            reset_env()
        }
    }++debug_generate_no;
    ff_data = r_content;
    parse(r_content);
    if (!updater.parse_only) {
        var page = cjs.dic.get('page');
        if (hasRepairFeed(sudate)) {
            var has_data = cjs.dic.get('dataEventHolderProxy').getHolder().hasData();
            if (has_data) {
                if (r_trigger === 'full' || r_trigger === 'country' || r_trigger === 'tournament') {
                    var feedData = cjs.feedRequest.getFeedData('frepair', sport_id);
                    cjs.feedLoader.executeCompleteCallback(feedData.context)
                } else {
                    updater.doc_update('frepair')
                }
            } else {
                if (project_type_name == '_ass' && !page.isParticipantPage() && !page.isSeriesPage()) {
                    updater.generate_data_odds();
                    updater.clear_interval('set_interval: odds')
                } else {
                    updater.generate_data();
                    updater.clear_interval('set_interval: update')
                }
            }
            if (has_data && r_trigger === 'full') {
                cjs.dic.get('dataEventHolderProxy').getHandler().each(function(index, id) {
                    var eventItem = this.getItem(id);
                    if (eventItem.isMarkedAsLive() && !eventItem.isLive()) {
                        fs_update.remove_event_live_status(id)
                    }
                })
            }
        } else {
            sort_fs_data();
            if (project_type_name == '_ass' && !page.isParticipantPage() && !page.isSeriesPage()) {
                updater.generate_data_odds()
            } else {
                updater.generate_data()
            }
        }
    }
    init_after_feeds();
    if (tournamentPage === false && $.inArray(r_trigger, ['country', 'tournament']) !== -1 && cjs.dic.get('dataEventHolderTemporary').hasData()) {
        var eventHolder = cjs.dic.get('dataEventHolder');
        var leagueHolder = cjs.dic.get('dataLeagueHolder');
        var temporaryEventHolder = cjs.dic.get('dataEventHolderTemporary');
        var temporaryLeagueHolder = cjs.dic.get('dataLeagueHolderTemporary');
        referenceSameIdsInHolders(eventHolder, temporaryEventHolder);
        referenceSameIdsInHolders(leagueHolder, temporaryLeagueHolder)
    }
    if (typeof cjs.bannerScrollManager === 'undefined' && cjs.BannerScrollManager != 'undefined' && typeof cjs.BannerScroll != 'undefined') {
        setTimeout(function() {
            var isMobileGetter = function() {
                return cjs.dic.get('util_browser').mobile()
            };
            var waypointGetter = function() {
                return cjs.dic.get('util_enviroment').getWaypoint()
            };
            var sbm = new cjs.BannerScrollManager($, isMobileGetter, waypointGetter);
            var scrollingConfig = {
                bannerObject: new cjs.BannerScroll($(".scrolling-banner-wrap:eq(0)"), $),
                startElementsOnDownHitTopOfView: [$(".scrolling-banner-top-stop:eq(0)")],
                stopElementsOnUpHitTopOfView: [$(".scrolling-banner-top-stop:eq(0)")],
                stopElementsOnHitByBottom: [],
                minWindowHeight: 750,
                fullBannerHeightVisibleOrDisable: true,
                leftPositionHandleElement: $(".scrolling-banner-top-stop:eq(0)")
            };
            switch ('_fs') {
                case "_fs":
                    scrollingConfig.stopElementsOnHitByBottom.push($("#e-content:eq(0)"));
                    break;
                case "_diretta-2":
                    scrollingConfig.stopElementsOnHitByBottom.push($(".scrolling-banner-bottom-stop:eq(0)"));
                    break
            }
            var elements = ['#facebook-bottom-like-box', '#bottom-box-fb-mobile-apps'];
            for (var i in elements) {
                var $element = $(elements[i]);
                if ($element.length) {
                    scrollingConfig.stopElementsOnHitByBottom.push($element)
                }
            }
            if (scrollingConfig.stopElementsOnHitByBottom.length === 0) {
                delete scrollingConfig.stopElementsOnHitByBottom
            }
            if ($(".scrolling-banner-wrap:eq(0)").length) {
                sbm.addBanner(scrollingConfig)
            }
            var scrollingConfig = {
                bannerObject: new cjs.BannerScroll($(".scrolling-mobile-version-wrap:eq(0)"), $),
                startElementsOnDownHitTopOfView: [$(".scrolling-mobile-version-top-stop:eq(0)")],
                stopElementsOnUpHitTopOfView: [$(".scrolling-mobile-version-top-stop:eq(0)")],
                stopElementsOnHitByBottom: [],
                minWindowHeight: 0,
                fullBannerHeightVisibleOrDisable: true,
                leftPositionHandleElement: $(".scrolling-mobile-version-top-stop:eq(0)")
            };
            switch ('_fs') {
                case "_fs":
                case "_diretta-2":
                    scrollingConfig.stopElementsOnHitByBottom.push($(".scrolling-mobile-version-bottom-stop:eq(0)"));
                    break
            }
            var elements = ['#facebook-bottom-like-box', '#bottom-box-fb-mobile-apps'];
            for (var i in elements) {
                var $element = $(elements[i]);
                if ($element.length) {
                    scrollingConfig.stopElementsOnHitByBottom.push($element)
                }
            }
            if (scrollingConfig.stopElementsOnHitByBottom.length === 0) {
                delete scrollingConfig.stopElementsOnHitByBottom
            }
            if ($(".scrolling-mobile-version-wrap:eq(0)").length) {
                sbm.addBanner(scrollingConfig)
            }
            sbm.manage();
            cjs.bannerScrollManager = sbm
        }, 500)
    }
    if (r_trigger == 'tournament') {
        tournamentPageNoMatchToday = !r_content;
        showTournamentPageNoMatch()
    }
    if (project_type_name === '_portable') {
        if (cjs.portable.page.isDetail() && cjs.portable.app.isFullFeedLoaded()) {
            preload_hide();
            cjs.portable.detailWindow.reload()
        }
        cjs.portable.app.setFullFeedIsLoaded(true)
    }
};
CommCore.prototype.response_update = function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
    var currentTime = cjs.dic.get('Helper_CurrentTime');
    if (ts = getUtimeFromDate(typeof r_custom_headers != 'undefined' ? r_custom_headers.Date : new Date())) {
        currentTime.setServerTimestamp(ts)
    }
    var currentTimestamp = currentTime.getTimestamp();
    if (r_trigger == 'repair' || r_trigger == 'frepair') cjs.repair_loaded = true;
    var resync = false;
    if (r_trigger == 'update') {
        if (cjs.synci) {
            var ajaxTime = cjs.dic.get('Helper_AjaxSyncTime').getTime(cjs.dic.get('Helper_AjaxSyncTime').updateAction);
            cjs.synci.htmlUpdate($("div#sync-indicator"), 'ajax', ajaxTime)
        }
    }
    if (updater.lastSyncUtimeIsTooOld(currentTimestamp)) {
        if (updater.lastSyncUtimeCanBeHandledByRepairFeed(currentTimestamp)) {
            if (r_trigger != 'repair' && r_trigger != 'frepair') {
                updater.set_interval('repair', true);
                resync = true
            }
        } else {
            updater.doc_resume();
            resync = true
        }
    }
    updater.last_sync_utime = currentTimestamp;
    if (cjs.midnight) {
        cjs.midnight.disableReload()
    }
    if (resync) return;
    if (updater.ajax_time_update && r_trigger != 'frepair') {
        updater.ajax_time_update = false;
        updater.set_interval('update')
    }
    if (updater.is_actual(r_status, r_headers)) {
        parse_status = true
    } else {
        var parse_status = parse(r_content, true, false, r_trigger)
    }
    if (r_trigger == 'frepair') {
        sort_fs_data();
        if (project_type_name == '_ass') {
            updater.generate_data_odds()
        } else {
            updater.generate_data()
        }
        var sport_id = 1 * r_content.substring(3, r_content.indexOf(JS_CELL_END, 4));
        updater.sync_score_data_with_update(sport_id)
    } else fs_update.update(r_trigger);
    if (r_trigger == 'repair' || mpe_delivery == 'a' && r_trigger == 'frepair') updater.set_interval('update');
    if (!parse_status) refresh_iframe();
    if (r_trigger == 'frepair') {
        init_after_feeds()
    }
};
CommCore.prototype.response_tournament_fixtures = function(r_status, r_headers, r_content, r_trigger) {
    var el;
    if ((el = $('#tournament-page-data-fixtures')).length == 1) {
        el.text(r_content);
        showTournamentPage('fixtures', true)
    }
};
CommCore.prototype.response_tournament_results = function(r_status, r_headers, r_content, r_trigger) {
    var el;
    if ((el = $('#tournament-page-data-results')).length == 1) {
        el.text(r_content);
        showTournamentPage('results', true)
    }
};
CommCore.prototype.response_participant_fixtures = function(r_status, r_headers, r_content, r_trigger) {
    var el;
    if ((el = $('#participant-page-data-fixtures')).length == 1) {
        el.text(r_content);
        cjs.participantPage.show('fixtures', true)
    }
};
CommCore.prototype.response_participant_results = function(r_status, r_headers, r_content, r_trigger) {
    var el;
    if ((el = $('#participant-page-data-results')).length == 1) {
        el.text(r_content);
        cjs.participantPage.show('results', true)
    }
};
CommCore.prototype.response_odds = function(r_status, r_headers, r_content, r_trigger) {
    updater.last_sync_utime = cjs.dic.get('Helper_CurrentTime').getTimestamp();
    if (updater.is_actual(r_status, r_headers)) {
        return
    }
    var parse_status = parse(r_content, false, true);
    cjs.dic.get('Feed_Content_OddsBonus').init(r_content);
    cjs.template.clearTemplateDefinitions();
    generate_content(category, true);
    preload_hide();
    if (!parse_status) updater.set_interval(updater.init_action, true)
};
CommCore.prototype.response_updated_odds = function(r_status, r_headers, r_content, r_trigger) {
    var resync = false;
    var currentTimestamp = cjs.dic.get('Helper_CurrentTime').getTimestamp();
    if (updater.lastSyncUtimeIsTooOld(currentTimestamp, true)) {
        if (updater.lastSyncUtimeCanBeHandledByRepairFeed(currentTimestamp)) {
            if (r_trigger != 'repair' && r_trigger != 'frepair') {
                updater.set_interval('repair', true);
                resync = true
            }
        } else {
            updater.doc_resume();
            resync = true
        }
    }
    updater.last_sync_utime = currentTimestamp;
    if (resync) return;
    if (updater.ajax_time_update && r_trigger != 'frepair') {
        updater.ajax_time_update = false;
        updater.set_interval('update')
    }
    if (updater.is_actual(r_status, r_headers)) {
        parse_status = true
    } else {
        var parse_status = parse(r_content, true, false, r_trigger)
    }
    if (r_trigger == 'frepair') {
        generate_content(category, true);
        var sport_id = 1 * r_content.substring(3, r_content.indexOf(JS_CELL_END, 4));
        updater.sync_score_data_with_update(sport_id)
    } else fs_update.update();
    if (!parse_status) refresh_iframe()
};
CommCore.prototype.response_load_odds = function(r_status, r_headers, r_content, r_trigger) {
    cjs.dic.get('Feed_Content_OddsBonus').init(r_content);
    cjs.template.clearTemplateDefinitions();
    updater.last_sync_utime = cjs.dic.get('Helper_CurrentTime').getTimestamp();
    if (updater.is_actual(r_status, r_headers)) {
        return
    }
    var parse_status = parse(r_content, false, true);
    updater.generate_data();
    if (!parse_status) updater.set_interval(updater.init_action, true)
};
CommCore.prototype.response_game = function(r_status, r_headers, r_content, r_trigger) {
    if (cjs.synci) {
        var ajaxTime = cjs.dic.get('Helper_AjaxSyncTime').getTime(cjs.dic.get('Helper_AjaxSyncTime').updateAction);
        cjs.synci.htmlUpdate($("div#sync-indicator"), 'ajax', ajaxTime)
    }
    var currentTimestamp = cjs.dic.get('Helper_CurrentTime').getTimestamp();
    var force_reload = false;
    if (updater.lastSyncUtimeIsTooOld(currentTimestamp)) {
        updater.last_sync_utime = currentTimestamp;
        force_reload = true
    }
    updater.last_sync_utime = currentTimestamp;
    if (updater.is_actual(r_status, r_headers)) {
        return
    }
    response_game_handler(r_content, force_reload);
    if (is_game_sync()) return updater.set_interval('game');
    else if (updater.ajax_time_update) {
        updater.ajax_time_update = false;
        updater.set_interval('game')
    }
};
CommCore.checkCacheKeys = function(keyId, newKey, feed) {
    if (CommCore.getExpectedNewCacheKey(keyId) != newKey && CommCore.getExpectedNewCacheKey(keyId) != null) {
        if (!CommCore.getUpdateInProgress(keyId)) {
            CommCore.setUpdateInProgress(keyId, true);
            setTimeout(function(_feed, _keyId) {
                return function() {
                    CommCore.setUpdateInProgress(keyId, false);
                    updater.doc_update(_feed)
                }
            }(feed, keyId), 2000)
        }
        return false
    }
    return true
};
CommCore.expectedCacheKeys = {};
CommCore.setExpectedNewCacheKey = function(key, value) {
    CommCore.expectedCacheKeys[key] = value
};
CommCore.getExpectedNewCacheKey = function(key) {
    if (typeof CommCore.expectedCacheKeys[key] != 'undefined') {
        return CommCore.expectedCacheKeys[key]
    }
    return null
};
CommCore.updateInProgress = {};
CommCore.setUpdateInProgress = function(key, value) {
    CommCore.updateInProgress[key] = value
};
CommCore.getUpdateInProgress = function(key) {
    if (typeof CommCore.updateInProgress[key] != 'undefined') {
        return CommCore.updateInProgress[key]
    }
    return null
};
CommCore.parse_custom_headers = function(r_custom_headers) {
    if (typeof r_custom_headers == 'undefined') return;
    if (typeof r_custom_headers['X-GeoIP'] != 'undefined' && r_custom_headers['X-GeoIP']) cjs.geoIP = r_custom_headers['X-GeoIP'];
    if (typeof r_custom_headers['X-ClientIP'] != 'undefined' && r_custom_headers['X-ClientIP']) cjs.clientIP = r_custom_headers['X-ClientIP'];
    if (typeof r_custom_headers['Date'] != 'undefined' && r_custom_headers['Date']) {
        var currentTime = cjs.dic.get('Helper_CurrentTime');
        if (ts = getUtimeFromDate(r_custom_headers['Date'])) {
            cjs.dic.get('Helper_CurrentTime').setServerTimestamp(ts)
        }
        if (!page_is_initialized) {
            page_utime_init_value(currentTime.getTimestamp())
        }
    }
    for (var i in cjs.parseCustomHeadersCallbacks) {
        cjs.parseCustomHeadersCallbacks[i]()
    }
    cjs.parseCustomHeadersCallbacks = null
};

function response_game_handler(content, force_reload) {
    var bak_detail = new Array();
    var added_refresh_delay = 0;
    if (mpe_delivery == 'p') added_refresh_delay = 500;
    for (var i in fs_detail) bak_detail[i] = fs_detail[i];
    var rows = content.split(JS_ROW_END);
    var game = rows[0].split(JS_CELL_END);
    var game_length = game.length - 1;
    for (var i = 0; i < game_length; i++) {
        if (game[i].substr(0, 2) == 'A1') u_304 = game[i].substr(3);
        else fs_detail[game[i].substr(0, 2)] = game[i].substr(3);
        CommCore.setExpectedNewCacheKey(game[i].substr(0, 2), game[i].substr(3))
    }
    if (bak_detail.CH != fs_detail.CH) {
        var url = window.location.toString();
        var url_parts = /^(.+)(\?|&)detail_refresh=([01]{1})(.*)$/.exec(url);
        url = cjs.Util.Url.replaceQueryString(url, 'detail_refresh', (url_parts ? (1 - url_parts[3]) : 1));
        setTimeout("header('" + url + "')", 1000 + added_refresh_delay);
        return
    }
    if (bak_detail.CA != fs_detail.CA) {
        setTimeout('updater.doc_update("detail")', 1000 + added_refresh_delay)
    }
    if (bak_detail.CD != fs_detail.CD) {
        detail_part_invalidate("summary");
        if (actual_tab == "summary") {
            setTimeout('detail_tab("summary", true)', 1000 + added_refresh_delay)
        }
        if (actual_tab == "player-statistics") {
            updater.doc_update("detail-summary-player-card")
        }
    }
    if (bak_detail.CG != fs_detail.CG) {
        detail_part_invalidate("lineups");
        if (actual_tab == "lineups") setTimeout('detail_tab("lineups", true)', 1000 + added_refresh_delay)
    }
    if (bak_detail.MP != fs_detail.MP) {
        detail_part_invalidate("summary", true);
        detail_part_invalidate("missing_players", true);
        if (actual_tab == "summary") {
            setTimeout('detail_tab("summary", true)', 1000 + added_refresh_delay)
        }
    }
    if (bak_detail.CE != fs_detail.CE) {
        detail_part_invalidate("statistics");
        if (actual_tab == "statistics") setTimeout('detail_tab("statistics", true)', 1000 + added_refresh_delay)
    }
    if (bak_detail.CZ != fs_detail.CZ) {
        detail_part_invalidate("player-statistics");
        detail_part_invalidate("player-statistics-preview");
        if (actual_tab == "player-statistics") setTimeout('detail_tab("player-statistics", true)', 1000 + added_refresh_delay);
        if (actual_tab == "summary") setTimeout('detail_tab("summary", true)', 1000)
    }
    if (bak_detail.CF != fs_detail.CF) {
        detail_part_invalidate("commentary");
        detail_part_invalidate("commentary_preview");
        if (actual_tab == "commentary") setTimeout('detail_tab("commentary", true)', 1000 + added_refresh_delay);
        if (actual_tab == "summary") setTimeout('detail_tab("summary", true)', 1000 + added_refresh_delay)
    }
    if (bak_detail.CJ != fs_detail.CJ) {
        detail_part_invalidate("match_history");
        if (actual_tab == "match-history") setTimeout('detail_tab("match_history", true)', 1000 + added_refresh_delay)
    }
    if (bak_detail.CL != fs_detail.CL) {
        detail_part_invalidate("highlights");
        if (actual_tab == "highlights") {
            setTimeout('detail_tab("highlights", true)', 1000 + added_refresh_delay)
        }
    }
    if (bak_detail.CN != fs_detail.CN) {
        var feedContentLiveOdds = cjs.dic.get('Feed_Content_LiveOdds');
        var feedContentOddsSetup = cjs.dic.get('Feed_Content_OddsSetup');
        feedContentLiveOdds.setBookmakerId(feedContentOddsSetup.getBookmakerId());
        if (feedContentLiveOdds.isActive()) {
            var delay = 1000 + added_refresh_delay;
            feedContentLiveOdds.downloadFeed(delay)
        }
    }
    push_update_subscription()
}
CommCore.prototype.response_detail = function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
    fs_detail_parsed = new Array();
    fs_detail_updated = {};
    var data = r_content.split(JS_CELL_END);
    var data_length = data.length - 1;
    var hash = '';
    CommCore.parse_custom_headers(r_custom_headers);
    setPageUtimeFromDate(r_custom_headers.Date);
    for (var i = 0; i < data_length; i++) {
        if (data[i] == JS_CELL_END) break;
        var key = data[i].substr(0, 2);
        var new_value_string = data[i].substr(3);
        var new_value = new_value_string - 0;
        if (isNaN(new_value) || new_value_string == '') new_value = new_value_string;
        if (typeof fs_detail[key] != 'undefined' && fs_detail[key] != new_value) fs_detail_updated[key] = new_value;
        fs_detail_parsed[fs_detail_parsed.length] = key;
        if (key == 'A1') hash = new_value;
        else fs_detail[key] = new_value
    }
    if (hash != '') {
        if (fs_detail.CA == null) fs_detail.CA = hash;
        else CommCore.checkCacheKeys('CA', hash, r_trigger)
    }
    var score_updated = false;
    var fs_detail_parsed_length = fs_detail_parsed.length - 1;
    var points_delimiter = '&nbsp;';
    if (project_type_name == '_scoreboard') {
        points_delimiter = '<br />'
    }
    for (var i = 0; i < fs_detail_parsed_length; i++) {
        var key = fs_detail_parsed[i];
        switch (key) {
            case 'BY':
                var dwIcon = '.tname-home .dw-icon';
            case 'BZ':
                if (key == 'BZ') {
                    var dwIcon = '.tname-away .dw-icon'
                }
                dwIcon = $(dwIcon);
                if (fs_detail[key] == 1) {
                    dwIcon.removeClass('win');
                    dwIcon.attr("title", cjs.Util.trans('TRANS_WINNER_TOOLTIP'));
                    dwIcon.show()
                } else if (fs_detail[key] == 2) {
                    dwIcon.addClass('win');
                    dwIcon.attr("title", cjs.Util.trans('TRANS_WINNER'));
                    dwIcon.show()
                } else {
                    dwIcon.hide()
                }
                break;
            case 'AQ':
                if (typeof fs_detail['AQ'] != 'undefined') {
                    $("#summary-content .extra-info").html(get_extra_row_cricket_sentence(fs_detail, $("#flashscore .tname-home .tname").text(), $("#flashscore .tname-away .tname").text()))
                }
                break;
            case 'DA':
                if (event_stage_type_id != fs_detail.DA) {
                    event_stage_type_id = fs_detail.DA;
                    detail_event_stage_type_changed()
                } else {
                    event_stage_type_id = fs_detail.DA
                }
                break;
            case 'DB':
                var score_top = $("table#flashscore td.mstat").get(0);
                var td_text = '';
                var red = (fs_detail.DA == cjs.constants.event_stage.LIVE || fs_detail.DB == cjs.constants.event_stage.PENDING);
                td_text += red ? '<span class="r">' : '';
                var gameTime = cjs.dic.get('Helper_GameTime');
                switch (fs_detail.DB) {
                    case cjs.constants.event_stage.FIRST_HALF:
                    case cjs.constants.event_stage.SECOND_HALF:
                        td_text += event_stage_trans[fs_detail.DB];
                        if (typeof fs_detail.DI != 'undefined' && fs_detail.DI > 0) {
                            td_text += gameTime.getBlinkingTime(get_sport_time(fs_detail.DI, sport_id, fs_detail.DB, fs_detail.CK))
                        }
                        td_text += gameTime.getTopPart(mid_s, fs_detail.DB);
                        td_text += '</span>';
                        break;
                    case cjs.constants.event_stage.FIRST_PERIOD:
                    case cjs.constants.event_stage.SECOND_PERIOD:
                    case cjs.constants.event_stage.THIRD_PERIOD:
                    case cjs.constants.event_stage.FIRST_QUARTER:
                    case cjs.constants.event_stage.SECOND_QUARTER:
                    case cjs.constants.event_stage.THIRD_QUARTER:
                    case cjs.constants.event_stage.FOURTH_QUARTER:
                    case cjs.constants.event_stage.EXTRA_TIME:
                        td_text += event_stage_trans[fs_detail.DB];
                        if (typeof fs_detail.DI != 'undefined' && fs_detail.DI > 0) {
                            td_text += gameTime.getBlinkingTime(get_sport_time(fs_detail.DI, sport_id, fs_detail.DB, fs_detail.CK))
                        } else if (mid_s == cjs.constants.sport.AUSSIE_RULES) {
                            switch (fs_detail.DB) {
                                case cjs.constants.event_stage.FIRST_QUARTER:
                                    part = 1;
                                    break;
                                case cjs.constants.event_stage.SECOND_QUARTER:
                                    part = 2;
                                    break;
                                case cjs.constants.event_stage.THIRD_QUARTER:
                                    part = 3;
                                    break;
                                case cjs.constants.event_stage.FOURTH_QUARTER:
                                    part = 4;
                                    break;
                                case cjs.constants.event_stage.EXTRA_TIME:
                                    part = 5;
                                    break
                            }
                            td_text += ' - </span><span class="r" id="atomclock"><span id="part-top' + part + '"></span>'
                        }
                        if (mid_s == cjs.constants.sport.SOCCER) {
                            td_text += ' - </span><span class="r" id="atomclock"><span id="part-top3"></span>'
                        }
                        break;
                    case cjs.constants.event_stage.WALKOVER:
                    case cjs.constants.event_stage.RETIRED:
                        td_text += event_stage_trans[fs_detail.DB];
                        if (typeof fs_detail.DJ != 'undefined') {
                            var winner = '';
                            if (fs_detail.DB == cjs.constants.event_stage.WALKOVER) {
                                winner = fs_detail.DJ == 'H' ? 'H' : 'A'
                            } else {
                                winner = fs_detail.DJ == 'H' ? 'A' : 'H'
                            }
                            if (winner == 'H') {
                                td_text += ' - ' + $("table#flashscore td.tname-home span.tname").get(0).innerHTML
                            } else if (winner == 'A') {
                                td_text += ' - ' + $("table#flashscore td.tname-away span.tname").get(0).innerHTML
                            }
                        }
                        break;
                    case cjs.constants.event_stage.SCHEDULED:
                        if (typeof fs_detail.DT != 'undefined' && fs_detail.DT == 1) {
                            td_text = '<span class="final_result_only">' + cjs.Util.trans('TRANS_FINAL_RESULT_ONLY_SHORT') + ' - ' + cjs.Util.trans('TRANS_FINAL_RESULT_ONLY') + '</span>'
                        }
                        break;
                    default:
                        td_text += event_stage_trans[fs_detail.DB];
                        if (fs_detail.DA == cjs.constants.event_stage.LIVE) {
                            switch (sport_id) {
                                case cjs.constants.sport.TENNIS:
                                {
                                    if (typeof fs_detail.DN != 'undefined' && typeof fs_detail.DO != 'undefined') {
                                        td_text += "<br />" + fs_detail.DN + " : " + fs_detail.DO;
                                        if (typeof fs_detail.DP != 'undefined' && typeof fs_detail.DQ != 'undefined') {
                                            td_text += " ( " + fs_detail.DP + " : " + fs_detail.DQ + " )"
                                        }
                                    }
                                    break
                                }
                                case cjs.constants.sport.SNOOKER:
                                {
                                    if (typeof fs_detail.DE != 'undefined' && typeof fs_detail.DF != 'undefined') {
                                        td_text += " - " + cjs.Util.trans('TRANS_SNOOKER_FRAME_NUMBER').replace('%s', (cjs.Util.Number.toNumber(fs_detail.DE) + cjs.Util.Number.toNumber(fs_detail.DF) + 1))
                                    }
                                    break
                                }
                                case cjs.constants.sport.DARTS:
                                {
                                    if (typeof fs_detail.DE != 'undefined' && typeof fs_detail.DF != 'undefined') {
                                        var leg_set_trans = playingOnSets ? cjs.Util.trans('TRANS_DARTS_SET_NUMBER') : cjs.Util.trans('TRANS_DARTS_LEG_NUMBER');
                                        td_text += " - " + leg_set_trans.replace('%s', (cjs.Util.Number.toNumber(fs_detail.DE) + cjs.Util.Number.toNumber(fs_detail.DF) + 1))
                                    }
                                    break
                                }
                            }
                        }
                        break
                }
                td_text += red ? '</span>' : '';
                score_top.innerHTML = td_text;
                if (typeof fs_detail_updated[key] != 'undefined' || event_stage_id == 1 && fs_detail[key] != 1) {
                    detail_part_invalidate("summary");
                    if (actual_tab == "summary") {
                        updater.doc_update("detail-summary")
                    }
                }
                event_stage_id = fs_detail.DB;
                break;
            case 'DC':
            case 'DS':
                var time_top = $("table#flashscore td#utime").get(0);
                switch (fs_detail.DB) {
                    case 4:
                    case 5:
                    case 37:
                        var line = " line-through";
                        break;
                    default:
                        var line = "";
                        break
                }
                time_top.className = "mstat-date" + line;
                if (key == 'DC') game_utime = fs_detail[key];
                else game_utime_end = fs_detail[key];
                detail_format_utime();
                break;
            case 'DD':
                g2utime = fs_detail.DD;
                cjs.detailTimeCounter.setTime();
                break;
            case 'DX':
                var fsDetailObj = cjs.dic.getNewInstance('detail_fsdetail');
                fsDetailObj.setOverrideData(fs_detail);
                var geoIp = cjs.dic.get('util_enviroment').getGlobalGeoIp();
                if (geoIp && fsDetailObj.getGeoBookmakerSettings() && fsDetailObj.getAvailableTabs()) {
                    var geoOddsTabSettings = JSON.parse(fsDetailObj.getGeoBookmakerSettings());
                    var overrideGeoIp = (geoIp in geoOddsTabSettings) ? geoIp : "default";
                    if (overrideGeoIp in geoOddsTabSettings && !geoOddsTabSettings[overrideGeoIp]) {
                        fsDetailObj.removeTab('OD')
                    }
                }
            case 'DE':
            case 'DF':
            case 'DG':
            case 'DH':
            case 'GR':
            case 'IA':
            case 'IB':
            case 'IC':
            case 'ID':
                if (score_updated) break;
                var title = document.title.split('|');
                var score_top = $("table#flashscore td.current-result").get(0);
                var score_html = '';
                var ft_score_string_start = '';
                var ft_score_string_end = '';
                var score_divider = '<span class="scoreboard-divider">-</span>';
                var empty_score = score_divider;
                if (sport_id != 18) {
                    ft_score_string_start = '(';
                    ft_score_string_end = ')'
                }
                if (sport_id == 18) {
                    if (fs_detail.DE) {
                        fs_detail.DE = cjs.dic.get('Helper_Formatter').getParsedMultiScoreWithTitle(fs_detail.DE, points_delimiter)
                    }
                    if (fs_detail.DF) {
                        fs_detail.DF = cjs.dic.get('Helper_Formatter').getParsedMultiScoreWithTitle(fs_detail.DF, points_delimiter)
                    }
                    if (fs_detail.DG) {
                        fs_detail.DG = cjs.dic.get('Helper_Formatter').getParsedMultiScoreWithTitle(fs_detail.DG, points_delimiter)
                    }
                    if (fs_detail.DH) {
                        fs_detail.DH = cjs.dic.get('Helper_Formatter').getParsedMultiScoreWithTitle(fs_detail.DH, points_delimiter)
                    }
                }
                switch (fs_detail.DA) {
                    case 2:
                        if (sport_id == 23 && typeof fs_detail.GR != 'undefined' && fs_detail.GR) {
                            title[0] = home_3char + ' ' + fs_detail.GR + ' ' + away_3char + ' '
                        } else {
                            if (cjs.Util.Config.get('app', 'detail', 'version') != 2) {
                                if (title_at_char) title[0] = home_3char + ' ' + fs_detail.DE + ' ' + title_at_char + ' ' + away_3char + ' ' + fs_detail.DF + ' ';
                                else title[0] = home_3char + ' ' + fs_detail.DE + '-' + fs_detail.DF + ' ' + away_3char + ' '
                            }
                        }
                        score_html += '<span class="r">';
                        score_html += '<span class="scoreboard">' + fs_detail.DE + '</span>' + score_divider + '<span class="scoreboard">' + fs_detail.DF + '</span>';
                        score_html += '</span>';
                        switch (fs_detail.DB) {
                            case 6:
                            case 7:
                                if (typeof fs_detail.DG != 'undefined' && typeof fs_detail.DH != 'undefined') {
                                    score_html += '<br />';
                                    score_html += '<span class="ft">' + ft_score_string_start + '<span class="scoreboard">' + fs_detail.DG + '</span>' + score_divider + '<span class="scoreboard">' + fs_detail.DH + '</span>' + ft_score_string_end + '</span>'
                                }
                                break
                        }
                        break;
                    case 3:
                        switch (fs_detail.DB) {
                            case 4:
                            case 5:
                            case 9:
                                score_html += empty_score;
                                break;
                            default:
                                if (sport_id == cjs.constants.sport.BOXING || sport_id == cjs.constants.sport.MMA) {
                                    var helper = sport_id == cjs.constants.sport.BOXING ? cjs.dic.get('Helper_Boxing') : cjs.dic.get('Helper_Mma');
                                    var winner = null;
                                    var incidentId = null;
                                    var round = null;
                                    if (typeof fs_detail.DJ != 'undefined') {
                                        if (fs_detail.DJ == 'H') {
                                            winner = $("table#flashscore td.tname-home span.tname").text().trim();
                                            incidentId = fs_detail.IA;
                                            round = fs_detail.IC
                                        } else if (fs_detail.DJ == 'A') {
                                            winner = $("table#flashscore td.tname-away span.tname").text().trim();
                                            incidentId = fs_detail.IB;
                                            round = fs_detail.ID
                                        }
                                    } else {
                                        incidentId = fs_detail.IA;
                                        round = fs_detail.IC
                                    }
                                    if (cjs.Util.Config.get('app', 'detail', 'version') != 2) {
                                        title[0] = home_3char + ' ' + helper.getResultShort(incidentId, round) + ' ' + away_3char + ' '
                                    }
                                    score_html += winner ? cjs.Util.trans('TRANS_WINNER') + ': ' + winner : helper.getTransDraw();
                                    var result = helper.getResult(incidentId, round);
                                    score_html += result ? '<br/>' + result : '';
                                    score_html = '<span class="scoreboard small">' + score_html + '</span>'
                                } else {
                                    if (sport_id == 23 && typeof fs_detail.GR != 'undefined' && fs_detail.GR) {
                                        if (cjs.Util.Config.get('app', 'detail', 'version') != 2) {
                                            title[0] = home_3char + ' ' + fs_detail.GR + ' ' + away_3char + ' '
                                        }
                                        var winner = null;
                                        if (typeof fs_detail.DJ != 'undefined') {
                                            if (fs_detail.DJ == 'H') {
                                                winner = $("table#flashscore td.tname-home span.tname").get(0).innerHTML
                                            } else if (fs_detail.DJ == 'A') {
                                                winner = $("table#flashscore td.tname-away span.tname").get(0).innerHTML
                                            }
                                            winner = winner.replace(/(<span).*(<\/span>)/, '')
                                        }
                                        var golfScoreHtml = fs_detail.GR;
                                        if (typeof fs_detail.EJ !== 'undefined' && fs_detail.EJ) {
                                            golfScoreHtml = '<span title="' + (cjs.dic.get('util_trans')('TRANS_GOLF_HOLES_PLAYED') + "").replace('%s', fs_detail.EJ) + '">' + fs_detail.GR + ' - ' + fs_detail.EJ + '</span>'
                                        }
                                        score_html = '<span class="scoreboard small">';
                                        score_html += winner ? TXT_GOLF_WINNER + ': ' + winner + '<br/>' : '';
                                        score_html += golfScoreHtml + '</span>'
                                    } else {
                                        if (cjs.Util.Config.get('app', 'detail', 'version') != 2) {
                                            if (title_at_char) title[0] = home_3char + ' ' + fs_detail.DE + ' ' + title_at_char + ' ' + away_3char + ' ' + fs_detail.DF + ' ';
                                            else title[0] = home_3char + ' ' + fs_detail.DE + '-' + fs_detail.DF + ' ' + away_3char + ' '
                                        }
                                        score_html += 42 == fs_detail.DB ? '<span class="r">' : '';
                                        score_html += '<span class="scoreboard">' + fs_detail.DE + '</span>' + score_divider + '<span class="scoreboard">' + fs_detail.DF + '</span>';
                                        score_html += 42 == fs_detail.DB ? '</span>' : '';
                                        switch (fs_detail.DB) {
                                            case 10:
                                            case 11:
                                                if (typeof fs_detail.DG != 'undefined' && typeof fs_detail.DH != 'undefined') {
                                                    score_html += '<br />';
                                                    score_html += '<span class="ft">' + ft_score_string_start + '<span class="scoreboard">' + fs_detail.DG + '</span>' + score_divider + '<span class="scoreboard">' + fs_detail.DH + '</span>' + ft_score_string_end + '</span>'
                                                }
                                                break
                                        }
                                    }
                                }
                                break
                        }
                        break;
                    case 1:
                        switch (fs_detail.DB) {
                            case 45:
                                if (sport_id == 23 && typeof fs_detail.GR != 'undefined' && fs_detail.GR) {
                                    if (cjs.Util.Config.get('app', 'detail', 'version') != 2) {
                                        title[0] = home_3char + ' ' + fs_detail.GR + ' ' + away_3char + ' '
                                    }
                                } else {
                                    if (cjs.Util.Config.get('app', 'detail', 'version') != 2) {
                                        if (title_at_char) title[0] = home_3char + ' ' + fs_detail.DE + ' ' + title_at_char + ' ' + away_3char + ' ' + fs_detail.DF + ' ';
                                        else title[0] = home_3char + ' ' + fs_detail.DE + '-' + fs_detail.DF + ' ' + away_3char + ' '
                                    }
                                }
                                score_html += '<span class="scoreboard">' + fs_detail.DE + '</span>' + score_divider + '<span class="scoreboard">' + fs_detail.DF + '</span>';
                                break;
                            default:
                                score_html += empty_score;
                                break
                        }
                        break
                }
                score_top.innerHTML = score_html;
                document.title = $('<span>' + title.join('|') + '</span>').text();
                score_updated = true;
                break;
            case 'DR':
                (function(DA, DB, DR) {
                    var $tname = {
                        home: $('#flashscore .tname-home .tname'),
                        away: $('#flashscore .tname-away .tname')
                    };
                    $('.serving-icon-box', $tname['home']).remove();
                    $('.serving-icon-box', $tname['away']).remove();
                    $tname['home'].addClass('tname-home-serving');
                    $tname['away'].addClass('tname-away-serving');
                    var isServingSport = cjs.Util.Sport.isServingSport(sport_id);
                    var isAfterDay = false;
                    if ($.inArray(DB, cjs.Util.List.getAfterEventStages()) !== -1) {
                        isAfterDay = true
                    }
                    if (DA == cjs.Util.List.getEventStageTypes().LIVE || DB == cjs.Util.List.getEventStages().INTERRUPTED || isAfterDay || isServingSport && DA == cjs.Util.List.getEventStageTypes().SCHEDULED) {
                        var isBaseballOrCricketOrPesapallo = sport_id == 13 || sport_id == 6 || sport_id == 30;
                        var servingIconTemplate = function(opposite) {
                            var append = opposite ? '-opposite' : '';
                            return ('<span class="icon-box serving-icon-box">' + '<span class="icon ' + sport + '-serve' + append + '">&nbsp;</span>' + '</span>')
                        };
                        if (DR == 1) {
                            $tname['home'].append(servingIconTemplate());
                            if (isBaseballOrCricketOrPesapallo) {
                                $tname['away'].prepend(servingIconTemplate(true))
                            }
                        } else if (DR == 2) {
                            $tname['away'].prepend(servingIconTemplate());
                            if (isBaseballOrCricketOrPesapallo) {
                                $tname['home'].append(servingIconTemplate(true))
                            }
                        }
                    }
                }(fs_detail.DA, fs_detail.DB, fs_detail.DR));
                break;
            case 'DK':
                var currentTimestamp = cjs.dic.get('Helper_CurrentTime').getTimestamp();
                var game_hlscore_totime = fs_detail.DK + counter_duration_time;
                if (fs_detail.DA == 2 && game_hlscore_totime > currentTimestamp) {
                    detailPage = new DetailPage([document.title, page_hlscore_title], 1500);
                    detailPage.hlTitle_on("detailPage", game_hlscore_totime - currentTimestamp)
                }
                break;
            case 'DL':
                detail_set_odds_winner();
                break;
            case 'DM':
                var infoTR = $("#info-row");
                if (infoTR.length == 0 && fs_detail.DM) {
                    $("table#flashscore>tbody").append(infoTR = $(document.createElement('tr')).attr("id", "info-row").append($(document.createElement('td')).attr("colspan", "5").append($(document.createElement('span')).attr("class", "info-bubble").append($(document.createElement('span')).attr("class", "icon-ico info").html("&nbsp;")).append($(document.createElement('span')).attr("class", "text")))))
                }
                if (!fs_detail.DM) {
                    infoTR.remove()
                } else {
                    var infoBubble = infoTR.find(".info-bubble .text");
                    infoBubble.text(fs_detail.DM)
                }
                break;
            case 'CQ':
                var feedContentLiveOdds = cjs.dic.get('Feed_Content_LiveOdds');
                feedContentLiveOdds.setCurrentEventStageType(fs_detail.DA);
                if (displayTabInActualTab('tab_live_odds', actual_tab)) {
                    if (!feedContentLiveOdds.wasUpdateAlreadyUsed()) {
                        feedContentLiveOdds.downloadFeed()
                    }
                } else {
                    feedContentLiveOdds.hide()
                }
                break
        }
    }
    checkLoadedDetailParts();
    if (typeof fs_detail_updated.DX != 'undefined' || typeof fs_detail_updated.HR != 'undefined') {
        cjs.dic.get('detail_tabs').show()
    }
};
CommCore.prototype.response_detail_ext = function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
    if (r_trigger == 'detail-player-statistics-golf') {
        r_trigger = 'detail-player-statistics'
    } else if (r_trigger == 'detail-odds-setup') {
        var cb = function(oddsSetup) {
            get_handicap_in_new_format('tab-prematch-odds')
        };
        var oddsSetup = cjs.dic.get('Feed_Content_OddsSetup');
        oddsSetup.setData(r_content);
        oddsSetup.setEventStageTypeId(event_stage_type_id);
        oddsSetup.addFinalCallback(cb);
        cjs.dic.get('Feed_Content_LiveOdds').setBookmakerId(oddsSetup.getBookmakerId())
    }
    if (updater.is_actual(r_status, r_headers)) {
        return
    }
    CommCore.parse_custom_headers(r_custom_headers);
    var elm_id = r_trigger.replace('detail-', '');
    var elm_preload = elm_id + '-preload';
    elm_id += '-content';
    var elm = null;
    if ((elm = document.getElementById(elm_id))) {
        var newFeedHashParts = r_content.match(/A1÷([a-z0-9]{32})¬/i);
        var hash = r_content.substr(Math.max(0, r_content.length - 100)).replace(/\n/, '').replace(/.*<[a-zA-Z]+ id=["\']secret_hash["\'][^\>]*>([^<]*)<\/[a-zA-Z]+>.*/, '$1');
        var htmlContent = r_content;
        if (newFeedHashParts) {
            hash = newFeedHashParts[1]
        }
        if (hash.length != 32) {
            hash = ''
        }
        switch (r_trigger) {
            case 'detail-player-statistics':
            case 'detail-player-statistics-preview':
                if (!CommCore.checkCacheKeys('CZ', hash, r_trigger)) {
                    return
                }
                break;
            case 'detail-statistics':
                if (!CommCore.checkCacheKeys('CE', hash, r_trigger)) {
                    preload_hide();
                    return
                }
                break;
            case 'detail-commentary':
            case 'detail-commentary-preview':
                if (!CommCore.checkCacheKeys('CF', hash, r_trigger)) {
                    preload_hide();
                    return
                }
                break;
            case 'detail-lineups':
                if (!CommCore.checkCacheKeys('CG', hash, r_trigger)) {
                    preload_hide();
                    return
                }
                break;
            case 'detail-missing-players':
                if (!CommCore.checkCacheKeys('MP', hash, r_trigger)) {
                    preload_hide();
                    return
                }
                $("#summary-content").show();
                elm_preload = "summary-preload";
                break;
            case 'detail-live-odds':
                htmlContent = null;
                var feedContentOddsSetup = cjs.dic.get('Feed_Content_OddsSetup');
                var cb = function() {
                    (function(hash, r_content) {
                        var feedContentLiveOdds = cjs.dic.get('Feed_Content_LiveOdds');
                        feedContentLiveOdds.setBookmakerId(feedContentOddsSetup.getBookmakerId());
                        var data = {
                            'hash': hash,
                            'feedContent': r_content,
                            'callbackAfterShow': function() {
                                set_detail_bet_icon_states(feedContentLiveOdds.getTableId())
                            },
                            'show': displayTabInActualTab('tab_live_odds', actual_tab) && feedContentLiveOdds.isActive()
                        };
                        feedContentLiveOdds.update(data)
                    })(hash, r_content)
                };
                feedContentOddsSetup.addOrRunCallback(cb);
                break
        }
        if (htmlContent) {
            elm.innerHTML = htmlContent
        }
        preload_hide(elm_preload);
        switch (r_trigger) {
            case 'detail-summary':
            case 'detail-summary-player-card':
                if (sport_id == cjs.constants.sport.GOLF) {
                    cjs.dic.get('Helper_Golf').setGolfStartTimes()
                }
                if (fs_detail.CD == null) {
                    fs_detail.CD = hash
                } else if (fs_detail.CD != hash) {
                    detail_part_invalidate("summary");
                    if (actual_tab == "summary") {
                        setTimeout('detail_tab("summary", true)', 2000)
                    }
                    if (actual_tab == "player-statistics") {
                        updater.doc_update("detail-summary-player-card")
                    }
                }
                if (typeof fs_detail['AQ'] != 'undefined') {
                    $("#summary-content .extra-info").html(get_extra_row_cricket_sentence(fs_detail, $("#flashscore .tname-home .tname").text(), $("#flashscore .tname-away .tname").text()))
                }
                $('#summary-content #parts .icon.video').each(function() {
                    var $el = $(this).parent();
                    var restriction = $el.data('restriction') || '1|';
                    if (!cjs.dic.get('Helper_HighlightRestriction').hasHighlight(restriction, cjs.geoIP)) {
                        $el.remove()
                    }
                });
                break;
            case 'detail-lineups':
                if (fs_detail.CG == null) {
                    fs_detail.CG = hash;
                    detail_tab("lineups", false)
                } else if (fs_detail.CG != hash) {
                    detail_part_invalidate("lineups");
                    if (actual_tab == "lineups") {
                        setTimeout('detail_tab("lineups", true)', 2000)
                    } else if (cjs.Util.Config.get('live_centre', 'sub_tabs', 'lineups') && actual_tab == "summary") {
                        setTimeout('detail_tab("summary", true)', 2000)
                    }
                } else {
                    detail_tab("lineups", false)
                }
                break;
            case 'detail-missing-players':
                if (fs_detail.MP == null) {
                    fs_detail.MP = hash;
                    detail_tab("summary", false)
                } else if (fs_detail.MP != hash) {
                    detail_part_invalidate("summary", true);
                    detail_part_invalidate("missing_players", true);
                    if (actual_tab == "summary") {
                        setTimeout('detail_tab("summary", true)', 2000)
                    }
                } else {
                    detail_tab("summary", false)
                }
                break;
            case 'detail-match-history':
                if (fs_detail.CJ == null) {
                    fs_detail.CJ = hash;
                    detail_tab("match-history", false)
                } else if (fs_detail.CJ != hash) {
                    detail_part_invalidate("match-history");
                    if (actual_tab == "match-history") setTimeout('detail_tab("match-history", true)', 2000)
                } else {
                    detail_tab("match-history", false)
                }
                break;
            case 'detail-statistics':
                if (fs_detail.CE == null) {
                    fs_detail.CE = hash;
                    detail_tab("statistics", false)
                } else if (fs_detail.CE != hash) {
                    detail_part_invalidate("statistics");
                    if (actual_tab == "statistics") {
                        setTimeout('detail_tab("statistics", true)', 2000)
                    } else if (cjs.Util.Config.get('live_centre', 'sub_tabs', 'statistics') && actual_tab == "summary") {
                        setTimeout('detail_tab("summary", true)', 2000)
                    }
                } else {
                    detail_tab("statistics", false)
                }
                break;
            case 'detail-commentary':
            case 'detail-commentary-preview':
                if (fs_detail.CF == null) {
                    fs_detail.CF = hash;
                    if (r_trigger == 'detail-commentary') {
                        detail_tab("commentary", false)
                    }
                } else if (fs_detail.CF != hash) {
                    detail_part_invalidate("commentary");
                    detail_part_invalidate("commentary_preview");
                    if (actual_tab == "commentary") {
                        setTimeout('detail_tab("commentary", true)', 2000)
                    }
                    if (actual_tab == "summary") {
                        setTimeout('detail_tab("summary", true)', 2000)
                    }
                } else {
                    if (r_trigger == 'detail-commentary') {
                        detail_tab("commentary", false)
                    }
                }
                break;
            case 'detail-head-2-head':
                detail_tab("head-2-head", false);
                cjs.Util.Date.fromUnixtimeToDatetime('short', 'text', 'span.date');
                mark_last_row_in_h2h();
                break;
            case 'detail-tv':
                cjs.Util.Date.fromUnixtimeToDatetime('tv', 'text', 'td.tv-time');
                set_detail_bet_icon_states("tv-content");
                break;
            case 'detail-highlights':
                if (fs_detail.CL == null) fs_detail.CL = hash;
                else if (fs_detail.CL != hash) {
                    detail_part_invalidate("highlights");
                    if (actual_tab == "highlights") setTimeout('detail_tab("highlights", true)', 2000)
                }
                detail_tabs.tabs.tab_highlights.contentBackup = r_content;
                processHighlights();
                break;
            case 'detail-standings':
                detail_tab("standings", false);
                break;
            case 'detail-draw':
                detail_tab("draw", false);
                break;
            case 'detail-player-statistics':
            case 'detail-player-statistics-preview':
                if (fs_detail.CZ == null) {
                    fs_detail.CZ = hash;
                    if (actual_tab == "player-statistics") detail_tab("player-statistics", false);
                    if (actual_tab == "summary") detail_tab("summary", false)
                } else if (fs_detail.CZ != hash) {
                    detail_part_invalidate("player-statistics");
                    detail_part_invalidate("player_statistics_preview");
                    if (actual_tab == "player-statistics") setTimeout('detail_tab("player-statistics", true)', 2000);
                    if (actual_tab == "summary") setTimeout('detail_tab("summary", true)', 2000)
                } else {
                    if (actual_tab == "player-statistics") detail_tab("player-statistics", false);
                    if (actual_tab == "summary") detail_tab("summary", false)
                }
                sortables_init();
                $('#player-statistics-content').find('th.sortable-default-col a.sortheader').each(function() {
                    $(this).click()
                });
                var playerStatisticsTabsCount = 3;
                var playerStatisticsTabsHide = [];
                for (var i = 0; i < playerStatisticsTabsCount; i++) {
                    var tab = $('#tab-player-statistics-' + i + '-statistic');
                    if (tab.length && !tab.is(':visible')) {
                        playerStatisticsTabsHide.push(tab);
                        tab.css('visibility', 'hidden');
                        tab.show()
                    }
                }
                $("table.ts-table").each(function() {
                    var tSlider = new cjs.TableSlider({
                        table: $(this),
                        fixedColumns: [".player-label", ".team-label"]
                    }, $);
                    tSlider.init();
                    var updateFixedColumnsCallback = function(sliderObject) {
                        return function() {
                            sliderObject.updateFixedColumns()
                        }
                    }(tSlider);
                    var updateSortFixedColumnsCallback = function(sliderObject) {
                        return function() {
                            sliderObject.updateFixedColumns(true)
                        }
                    }(tSlider);
                    ts_addOnResortTableStopCallback(updateSortFixedColumnsCallback, this);
                    detail_tab_addOnDetailTabShowCallback(updateFixedColumnsCallback, 'player_statistics');
                    detail_tab_addOnDetailTabShowCallback(updateFixedColumnsCallback, 'summary');
                    $(this).removeClass('ts-table')
                });
                for (var i in playerStatisticsTabsHide) {
                    playerStatisticsTabsHide[i].hide();
                    playerStatisticsTabsHide[i].css('visibility', 'visible')
                }
                break;
            case 'detail-live-table':
                jQuery.globalEval(jQuery(elm).find("script").text());
                break;
            case 'detail-odds-comparison':
                load_detail_odds_comparison_tabs();
                set_detail_bet_icon_states("odds-comparison-content");
                detail_tab("odds-comparison", false);
                sortables_init();
                backup_eu_odds_and_betslip_in_html('odds-comparison-content');
                get_handicap_in_new_format('odds-comparison-content');
                detail_switch_odds_format(get_odds_format(), null, true);
                break;
            default:
                break
        }
        var cb = function() {
            cjs.dic.get('Odds_Prematch').prepareAndSetDetailOddsWinner(elm)
        };
        cjs.dic.get('Feed_Content_OddsSetup').addOrRunCallback(cb)
    }
    checkLoadedDetailParts()
};
CommCore.prototype.response_sys = function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
    var row = r_content.split(JS_CELL_END);
    var row_length = row.length - 1;
    var ts = null;
    if (ts = getUtimeFromDate(r_custom_headers.Date)) {
        var currentTime = cjs.dic.get('Helper_CurrentTime');
        currentTime.setServerTimestamp(ts)
    }
    for (var i = 0; i < row_length; i++) {
        var key = row[i].substr(0, 3);
        var value = row[i].substr(4);
        if (key == 'mlp') {
            setAjaxSyncMultiplier(value)
        } else if (key == 'sst') {
            set_service_status(value, true)
        } else if (key == 'fcr') {
            check_static_serial(value)
        } else if (key == 'dmo') {
            data = value.split(',');
            for (var j = 0; j < data.length; j++) {
                record = data[j].split('|');
                if (record[0] === 'all' || parseInt(record[0], 10) === 2) {
                    if (record[1] === 'p' && cjs.push) {
                        cjs.push.enable(true);
                        push_connect()
                    }
                }
            }
        } else if (key == 'stu') {
            if (cjs.dic.get('Helper_AjaxSyncTime').setTime(cjs.dic.get('Helper_AjaxSyncTime').updateAction, value)) {
                updater.ajax_time_update = true
            }
        } else if (key == 'stg') {
            if (cjs.dic.get('Helper_AjaxSyncTime').setTime(cjs.dic.get('Helper_AjaxSyncTime').gameAction, value)) {
                updater.ajax_time_update = true
            }
        } else if (key == 'mpr') {
            if (mpr != value) {
                mpr = value
            }
        } else if (key == 'ben') {
            if (typeof cjs.benchmarkRequest != 'undefined' && !cjs.benchmarkRequest.compareRequestRate(value)) {
                cjs.benchmarkRequest.setRequestRate(value)
            }
        }
    }
};
CommCore.prototype.response_utime = function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
    var currentTime = cjs.dic.get('Helper_CurrentTime');
    if (ts = getUtimeFromDate(r_custom_headers.Date)) {
        currentTime.setServerTimestamp(ts)
    }
    var server_date = new Date();
    server_date.setTime(currentTime.getTimestamp() * 1000);
    tudate = Date.UTC(server_date.getUTCFullYear(), server_date.getUTCMonth(), server_date.getUTCDate()) / 1000;
    server_date.setDate(server_date.getDate() + 1);
    tudate_end = Date.UTC(server_date.getUTCFullYear(), server_date.getUTCMonth(), server_date.getUTCDate()) / 1000
};
CommCore.prototype.is_actual = function(r_status, r_headers) {
    if (r_status == 304 || r_status == 204 || r_status == 1223 || r_headers == '') return true;
    return false
};
CommCore.prototype.set_interval = function(action, useTimeout) {
    if (typeof useTimeout === 'undefined') {
        useTimeout = false
    }
    var timerFunction = useTimeout ? setTimeout : setInterval;
    updater.clear_interval('set_interval: ' + action);
    if (action == 'odds') {
        updater.interval_sync = timerFunction('updater.doc_update(\'odds\')', 100)
    } else {
        var ajaxTime = cjs.dic.get('Helper_AjaxSyncTime').getTime(action);
        updater.interval_sync = timerFunction('updater.doc_update(\'' + action + '\')', ajaxTime * 1000)
    }
};
CommCore.prototype.clear_interval = function(pom) {
    if (updater.interval_sync != null) {
        clearTimeout(updater.interval_sync);
        clearInterval(updater.interval_sync);
        updater.interval_sync = null;
        return true
    }
    return false
};
CommCore.prototype.generate_data_odds = function() {
    if (category == 5) {
        start_updating_odds();
        return
    }
    var page = cjs.dic.get('page');
    if (!page.isCountryPage() && !page.isSeasonPage()) {
        var param = 'load-full-odds'
    } else {
        if (!page.isSeasonPage()) {
            var param = 'load-country-odds'
        } else {
            if (!page.isParticipantPage()) {
                var param = 'load-tournament-odds'
            } else {
                var param = 'load-participant-odds'
            }
        }
    }
    updater.doc_update(param)
};
CommCore.prototype.generate_data = function() {
    if (updater.parse_only) {
        return
    }
    fs_update = new core_update();
    pgenerate(true, category, false, false, sub_category)
};
CommCore.prototype.sync_score_data_with_update = function(sportId) {
    if ('undefined' === typeof fs_update) {
        return
    }
    var scores = ['AG', 'AH', 'BA', 'BB', 'BC', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'FA', 'FB', 'IA', 'IB', 'IC', 'ID'];
    cjs.dic.get('dataEventHolderProxy').getHandler().each(function(index, id) {
        var eventItem = this.getItem(id);
        var scorePos, scoreIndex, historyScore;
        if (eventItem.getSportId() != sportId) {
            return
        }
        scorePos = scores.length;
        while (scorePos--) {
            scoreIndex = scores[scorePos];
            if (eventItem.getValue(scoreIndex) === null) {
                continue
            }
            historyScore = undefined;
            if (fs_update.property_defined(id, scoreIndex)) {
                historyScore = fs_update.data_update[id][scoreIndex]
            }
            fs_update.property_set(id, scoreIndex, eventItem.getValue(scoreIndex), historyScore)
        }
    });
    fs_update.clear_update()
};

function sync_change() {
    if (cjs.synci) {
        cjs.synci.htmlUpdate($("div#sync-indicator"), 'off')
    }
    if (cjs.push) {
        if (cjs.push.isConnected()) {
            push_disconnect();
            cjs.push.startFallback()
        } else push_connect()
    }
}
function push_fallback(action, fail_msg) {
    if (typeof action == 'undefined' || (action != 'start' && action != 'stop')) action = 'start';
    if (action == 'start') {
        if (cjs.synci) {
            cjs.synci.htmlUpdate($("div#sync-indicator"), 'off')
        }
        if (ajax_updater == 'game') updater.set_interval(ajax_updater);
        else if (updater.interval_sync == null) updater.set_interval('update');
        updater.doc_update('sys');
        sys_interval_checker = setInterval('updater.doc_update(\'sys\')', 60 * 1000)
    } else {
        updater.clear_interval('push working, dissabling ajax');
        clearInterval(sys_interval_checker);
        push_connect()
    }
}
function push_connect() {
    if (cjs.dic.get('dataEventHolderProxy').getHolder().hasData() || typeof cjs.gamesNotificationOnly !== 'undefined') {
        if (cjs.push) {
            cjs.push.connect(sudate);
            push_update_subscription()
        }
    }
}
function push_update_subscription() {
    if (cjs.push) {
        var subscription = [];
        if (typeof cjs.gamesNotificationOnly === 'undefined') {
            subscription.push('sys');
            subscription.push('service');
            if (ajax_updater == 'game') {
                subscription.push("g_" + project_type_id + "_" + updater.game)
            } else {
                subscription.push("u_" + sport_id + "_" + project_type_id);
                if (cjs.dic.get('list_navigation').isMyGames()) {
                    var sports = cjs.mygames.getSports();
                    for (var i in sports) {
                        if (i != sport) {
                            subscription.push("u_" + sports[i] + "_" + project_type_id)
                        }
                    }
                    if (typeof cjs.myTeams != 'undefined') {
                        var sports = cjs.myTeams.getSports();
                        for (var i in sports) {
                            if (i != sport) {
                                subscription.push("u_" + sports[i] + "_" + project_type_id)
                            }
                        }
                    }
                }
            }
        }
        if (typeof ls !== 'undefined' && ls.loginClient && ls.loginClient.loggedIn()) {
            subscription.push("lsid_" + ls.loginClient.email() + "_" + ls.loginClient.namespace())
        }
        if (cjs.Util.Config.get('app', 'game_notification_push', 'enable') && (typeof cjs.isDetailPage == 'undefined' || cjs.isFullPage)) {
            var subscriptionInfo = {};
            if (typeof cjs.mygames !== 'undefined') {
                for (var index in cjs.mygames.getFromStorage()) {
                    subscription.push('games_' + cjs.dic.get('utilConfig').get('app', 'lang', 'web') + '_' + index.split('_')[2]);
                    subscriptionInfo[index.split('_')[2]] = {
                        sportId: index.split('_')[1],
                        timestamp: new Date().getTime()
                    }
                }
            }
            cjs.push.setSubscriptionInfo(subscriptionInfo)
        }
        cjs.push.updateSubscription(subscription)
    }
}
function push_disconnect() {
    if (cjs.push) {
        cjs.push.disconnect();
        if (cjs.synci) {
            cjs.synci.htmlUpdate($("div#sync-indicator"), 'off')
        }
    }
}
function push_refresh() {
    if (hasRepairFeed(sudate)) {
        delete cjs.gamesNotificationOnly
    }
    push_connect();
    push_update_subscription()
}
function refresh_iframe() {
    setTimeout("updater.set_interval('" + updater.init_action + "', true)", (Math.random() * 600 + 30) * 1000)
}
function iframe_cookie_path(path) {
    var tmp_path = "";
    if (protocol = path.indexOf('://')) {
        start = path.substr(protocol + 3).indexOf('/');
        path = path.substr(start + protocol + 3)
    }
    start = path.split("").reverse().join("").indexOf('/');
    tmp_path += path.substr(0, path.length - start);
    return tmp_path
}
function countCategoryGames(category, leagueId) {
    if (category != 1 && category != 2 && category != 3 && category != 5) {
        return cjs.dic.get('dataLeagueHolderProxy').getHolder().getLeague(leagueId).getEventCount()
    }
    var eventsCount = 0;
    cjs.dic.get('dataEventHolderProxy').getHandler().each(function(index, id) {
        var eventItem = this.getItem(id);
        if (leagueId != eventItem.getLeague().getId()) {
            return
        }
        if (category == 1 && (eventItem.isLive() || eventItem.isMarkedAsLive()) || category == 2 && eventItem.isFinished() || category == 3 && eventItem.isScheduled() || category == 5 && is_custom_game(id)) {
            eventsCount++
        }
    });
    return eventsCount
}
function detail_set_odds_winner(tennis_game_score, score_1st_period, score_2nd_period) {
    var $cells = $("table#default-odds tr.odd td");
    var oddTds = $cells.filter('.kx').removeClass("winner");
    var score_current = {
        0: fs_detail.DE,
        1: fs_detail.DF
    };
    var score_full = {
        0: fs_detail.DG,
        1: fs_detail.DH
    };
    if (isSwapped) {
        score_current = {
            0: fs_detail.DF,
            1: fs_detail.DE
        };
        score_full = {
            0: fs_detail.DH,
            1: fs_detail.DG
        }
    }
    if (typeof(tennis_game_score) == "undefined") var tennis_game_score = [0, 0];
    if (typeof(score_1st_period) == "undefined") var score_1st_period = [0, 0];
    if (typeof(score_2nd_period) == "undefined") var score_2nd_period = [0, 0];
    var handicap = null;
    var handicap_type = null;
    if (fs_detail.DL == 5) {
        var $asianHandicapCell = $cells.filter('.ah');
        if ($asianHandicapCell.length) {
            handicap = $asianHandicapCell.text().replace(/\s/g, '');
            handicap_type = $asianHandicapCell.attr('class').replace(/.*ht([0-9]+).*/, "$1");
            handicap_type = handicap_type ? parseInt(handicap_type) : handicap_type
        }
    }
    oddTds.each(function(index) {
        var text = $(this).text().replace(/\s/g, '');
        var outcome_type = null;
        if ($(this).hasClass('o_1')) outcome_type = 1;
        if ($(this).hasClass('o_0')) outcome_type = 3;
        if ($(this).hasClass('o_2')) outcome_type = 2;
        if (outcome_type && text != '-') {
            if (is_odd_winning(fs_detail.DB, fs_detail.DA, outcome_type, score_current, score_full, score_1st_period, score_2nd_period, tennis_game_score, sport_id, handicap, handicap_type)) {
                var betAndWinRow = $(this).closest('tr').next('tr.bet-and-win');
                $(this).addClass("winner");
                betAndWinRow.find('td.amount').removeClass('loser');
                betAndWinRow.find('td.amount').not(':eq(' + index + ')').addClass('loser')
            }
        }
    })
}
function is_odd_winning(stage_id, stage_type_id, outcome_type, score_current, score_full, score_1st_period, score_2nd_period, tennis_game_score, odd_sport, handicap, handicap_type) {
    if (stage_type_id != 3) return false;
    if (typeof score_current == 'undefined') {
        throw "Cannot evaluate odd - bad score definition";
        return NULL
    }
    for (i in odds_no_win_stages) {
        if (stage_id == odds_no_win_stages[i]) return false
    }
    var scope_id = cjs.dic.get('util_sport').getOddsScope(odd_sport);
    var betting_type_id = cjs.dic.get('util_sport').getBettingTypeId(odd_sport);
    switch (outcome_type) {
        case '0':
            outcome_type = 3;
            if (project_type_name === '_portable') {
                var bettingTypeList = cjs.dic.get('util_list').getBettingTypes();
                if (betting_type_id === bettingTypeList.HOME_AWAY) {
                    outcome_type = 1
                }
            }
            break;
        case 'AH1':
            outcome_type = 1;
            break;
        case 'AH2':
            outcome_type = 2;
            break;
        case 'ML1':
            betting_type_id = Oddsportal_Evaluator.BT_ML;
            outcome_type = 1;
            break;
        case 'ML2':
            betting_type_id = Oddsportal_Evaluator.BT_ML;
            outcome_type = 2;
            break;
        case 'OU1':
            betting_type_id = Oddsportal_Evaluator.BT_OU;
            outcome_type = 4;
            break;
        case 'OU2':
            betting_type_id = Oddsportal_Evaluator.BT_OU;
            outcome_type = 5;
            break;
        case '10':
            return is_odd_winning(stage_id, stage_type_id, '0', score_current, score_full, odd_sport) || is_odd_winning(stage_id, stage_type_id, '1', score_current, score_full, score_1st_period, score_2nd_period, tennis_game_score, odd_sport, handicap, handicap_type);
            break
    }
    if (typeof score_current[0] != 'undefined' && typeof score_current[1] != 'undefined') {
        score_current[0] = typeof score_current[0] == 'undefined' ? 0 : parseInt(score_current[0]);
        score_current[1] = typeof score_current[1] == 'undefined' ? 0 : parseInt(score_current[1]);
        typeof score_full[0] == 'undefined' && (score_full[0] = score_current[0]);
        typeof score_full[1] == 'undefined' && (score_full[0] = score_current[0]);
        score_full[0] = typeof score_full[0] == 'undefined' || score_full[0] === '' ? score_current[0] : score_full[0];
        score_full[1] = typeof score_full[1] == 'undefined' || score_full[1] === '' ? score_current[1] : score_full[1];
        if (sport == 'tennis' && handicap_type == 2) {
            score_current[0] = score_full[0] = typeof tennis_game_score[0] == 'undefined' ? 0 : parseInt(tennis_game_score[0]);
            score_current[1] = score_full[1] = typeof tennis_game_score[1] == 'undefined' ? 0 : parseInt(tennis_game_score[1])
        }
        event_params = {
            "sportId": odd_sport,
            "score": {
                "1": score_current,
                "2": score_full,
                "3": score_1st_period,
                "4": score_2nd_period,
                "5": score_1st_period,
                "8": score_1st_period,
                "12": score_1st_period
            }
        };
        outcome_params = {
            "scopeId": scope_id,
            "outcome": outcome_type,
            "type": betting_type_id
        };
        if (betting_type_id == Oddsportal_Evaluator.BT_AH || betting_type_id == Oddsportal_Evaluator.BT_OU) {
            outcome_params['handicapValue'] = parseFloat(handicap);
            outcome_params['handicapTypeId'] = parseFloat(handicap_type)
        }
        var ret = false;
        try {
            ret = Oddsportal_Evaluator.evaluate(event_params, outcome_params) == Oddsportal_Evaluator.RESULT_WON
        } catch (e) {}
        return ret
    } else {
        return false
    }
    return false
}
function browser_init() {
    var version = parseInt(jQuery.browser.version);
    var browser = cjs.dic.get('util_browser').getBrowserType().toLowerCase().replace(" ", "_");
    $("body").addClass(browser).addClass(browser + version).addClass("os-" + (navigator.platform).toLowerCase());
    var trident = cjs.Util.Browser.trident();
    if (trident !== null) {
        $("body").addClass('trident' + trident)
    }
    $("#fsbody").addClass(project_layout);
    try {
        document.execCommand("BackgroundImageCache", false, true)
    } catch (err) {}
}
function try_alien_referer_protection() {
    if (tournamentPage || cjs.Util.Config.get('app', 'detail', 'version') == 2) {
        return
    }
    if (typeof document.referrer != 'undefined' && document.referrer != '') {
        var tester = document.createElement('a');
        tester.href = document.referrer + "";
        if (typeof tester.hostname != 'undefined' && tester.hostname != '' && !tester.hostname.match(base_url) && !$(".alien-referer").length) {
            $("body").prepend('<div class="alien-referer"><a href="/" onclick="window.open(this.href); return false">' + 'More info on FlashScore.com' + '</a></div>')
        }
    }
}
function testjsready() {
    return 'ok'
}
function is_serving_player(param_sport) {
    if (param_sport == 'american-football' || param_sport == 'baseball' || param_sport == 'cricket' || param_sport == 'darts' || param_sport == 'tennis') return true;
    else return false
}
function is_point_by_point(param_sport) {
    if (param_sport == 'tennis' && tennis_point_by_point) return true;
    else return false
}
function has_hits_and_errors(param_sport) {
    if (param_sport == 'baseball') return true;
    else return false
}
function init_layout() {
    browser_init()
}
function show_iframe_top_messages() {
    var skip_x_content = false;
    skip_x_content = show_one_box("box-over-content-a") || skip_x_content;
    skip_x_content = show_one_box("box-over-content-b") || skip_x_content;
    skip_x_content = show_one_box("box-over-content-c") || skip_x_content;
    skip_x_content = show_one_box("box-over-content-caption") || skip_x_content;
    if (!skip_x_content) show_one_box("box-over-content-x")
}
function copy_and_show_iframe_message(parent_id) {
    var iframe_message = $(document.createElement('div'));
    var newId = 'iframe-' + parent_id;
    iframe_message.attr('id', newId);
    iframe_message.html($("#" + parent_id).html());
    iframe_message.hide();
    iframe_message.find('.box_over_content').hide();
    $("#fs").prepend(iframe_message);
    show_one_box(newId)
}
function show_one_box(parent_id) {
    var visitCounter = cjs.dic.get('Helper_VisitCounter');
    var currentVisit = visitCounter.getCurrentCount();
    var selector = "#" + parent_id + " .box_over_content";
    var boxes = $(selector);
    if (!boxes.length) {
        selector = "#" + parent_id + " .promotion";
        boxes = $(selector)
    }
    if (!boxes.length) {
        selector = "#" + parent_id + " .box-over-content";
        boxes = $(selector)
    }
    if (boxes.length) {
        boxes.hide();
        for (var boxIter = 0; boxIter < boxes.length; boxIter++) {
            var boxId = "box" + boxes[boxIter].id.substring(16);
            var boxTime = "box_time" + boxes[boxIter].id.substring(16);
            var boxClosedByUser = (clientStorage.get(boxId) !== null);
            var boxExpiredByTime = (clientStorage.get(boxTime) !== null && clientStorage.get(boxTime) < new Date().getTime());
            var removeByLogin = ((boxId == 'box_bl' || boxId == 'box_pmlogin1') && typeof ls !== 'undefined' && typeof ls.loginClient !== 'undefined' && ls.loginClient.loggedIn());
            var removeByVisits = ($(boxes[boxIter]).attr('data-min-visit-count') > currentVisit);
            if (boxClosedByUser || boxExpiredByTime || removeByLogin || removeByVisits) {
                $(boxes[boxIter]).remove()
            }
        }
        boxes = $(selector);
        if (!boxes.length) return false;
        var boxRand = Math.floor(Math.random() * boxes.length);
        $(boxes[boxRand]).show();
        $("#" + parent_id).css("display", "inline");
        return true
    }
    return false
}
function page_utime_init_value(currentTimestamp) {
    refresh_utime = currentTimestamp;
    page_is_initialized = true;
    counter_update();
    if (updater) {
        updater.refresh_utime = currentTimestamp
    }
    cjs.timezone.setActualTime(currentTimestamp)
}
function switch_odd_format(format) {
    clientStorage.store('fs_of_' + cjs.dic.get('utilConfig').get('app', 'lang', 'web'), format, 365 * 86400, 'self', '/');
    default_odds_format = format;
    if (sub_category == 2 || sub_category == 3) {
        generate_content(null, true)
    }
}
function highlight_odds_update(element) {
    var className = element.attr("class");
    if (typeof className === 'undefined') {
        return
    }
    var highParams = {};
    var before_class = null;
    highParams['highBgColor'] = oHighBgColor;
    highParams['highColor'] = oHighColor;
    highParams['numOfBlinks'] = numOfOHighBlinks;
    highParams['blinkTime'] = oHighBlinkTime;
    highParams['highTime'] = oHighTime;
    highParams['fadeTime'] = oHighFadeTime;
    highParams['origColor'] = $(element).css("color");
    highParams['origBgColor'] = '';
    if (className.match(/win/)) {
        highParams['origBgColor'] = $(element).css("backgroundColor");
        element.removeClass("win");
        element.addClass("winH");
        before_class = 'win'
    } else if (className.match(/ah/) && us_odds_layout) {
        highParams['origBgColor'] = $(element).css("backgroundColor");
        element.removeClass("ah");
        before_class = 'ah'
    } else if (className.match(/ou/)) {
        highParams['origBgColor'] = $(element).css("backgroundColor");
        element.removeClass("ou");
        before_class = 'ou'
    } else highParams['origBgColor'] = $(element).closest("tr").css("backgroundColor");
    $(element).css("backgroundColor", highParams['origBgColor']);
    animate_highlight(element, before_class, highParams)
}
function animate_highlight(element, before_class, highParams, back) {
    if (highParams['numOfBlinks'] > 0) {
        if (typeof(back) == "undefined") {
            $(element).animate({
                backgroundColor: highParams['highBgColor'],
                color: highParams['highColor']
            }, highParams['blinkTime'], function() {
                animate_highlight(element, before_class, highParams, 'unHigh')
            });
            highParams['numOfBlinks']--
        } else {
            $(element).animate({
                backgroundColor: highParams['origBgColor'],
                color: highParams['origColor']
            }, highParams['blinkTime'], function() {
                animate_highlight(element, before_class, highParams)
            })
        }
    } else {
        $(element).delay(highParams['highTime']).animate({
            backgroundColor: highParams['origBgColor'],
            color: highParams['origColor']
        }, highParams['fadeTime'], function() {
            $(element).removeAttr("style");
            if (before_class != null) {
                $(element).addClass(before_class);
                $(element).removeClass("winH")
            }
        })
    }
}
function load_geoIP_clientIP(callback, waitOnHeaders) {
    if (cjs.geoIP !== null) {
        if (typeof callback !== 'undefined') {
            callback(cjs.geoIP)
        }
        return
    }
    if (typeof waitOnHeaders !== 'undefined' && waitOnHeaders) {
        if (cjs.parseCustomHeadersCallbacks === null) {
            load_geoIP_clientIP(callback)
        } else {
            var t = setTimeout(function() {
                cjs.parseCustomHeadersCallbacks = null;
                load_geoIP_clientIP(callback)
            }, 1500);
            cjs.Feed_Request.beforeFullFeedCallbacks.push(function() {
                clearTimeout(t)
            });
            cjs.parseCustomHeadersCallbacks.push(function() {
                clearTimeout(t);
                callback(cjs.geoIP)
            })
        }
        return
    }
    var cb = function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
        CommCore.prototype.response_full(r_status, r_headers, r_content, r_trigger, r_custom_headers);
        if (typeof callback !== 'undefined') {
            callback(cjs.geoIP)
        }
    };
    if (typeof document.change_subdocument_domain != 'undefined') {
        document.change_subdocument_domain()
    }
    document.domain = base_url.replace(/^www\./, '').replace(/:\d+$/, '');
    var url = 'http://' + base_url.replace('www.', 'd.') + '/x/feed/f_';
    var action = function() {
        return function() {
            var action = new cjs.AjaxJqObject(url, cjs.feedProxy, cb, 'headers_hit', void 0, function() {
                return u_304
            }, ie6, webkit, feed_sign);
            action.update('', null, {
                'X-GeoIP': 1,
                'X-ClientIP': 1
            });
            action = null
        }
    }();
    cjs.dic.get('DicProxy').onReady(action)
}
function check_supported_browser(msg_parent_id) {
    if (cjs.isBrowserDeprecated()) {
        var unsuported_browser = $(document.createElement('div'));
        $("#" + msg_parent_id).prepend(unsuported_browser);
        unsuported_browser.append($(document.createElement('div')).addClass('caption-box').append($(document.createElement('div')).addClass('content').html(cjs.Util.trans('TRANS_SYSTEM_ERROR_UNSUPPORTED_BROWSER_PART_1') + ' ' + cjs.Util.trans('TRANS_SYSTEM_ERROR_UNSUPPORTED_BROWSER_PART_2') + '<br />' + '<br />' + 'We recommend: <a href=\"http://www.google.com/chrome/\" target=\"_blank\">Chrome</a> | <a href=\"http://www.mozilla.org/products/firefox/\" target=\"_blank\">Firefox</a> | <a href=\"http://www.microsoft.com/windows/ie/downloads/default.mspx\" target=\"_blank\">Explorer</a> | <a href=\"http://www.opera.com/download/\" target=\"_blank\">Opera</a> | <a href=\"http://www.apple.com/safari/\" target=\"_blank\">Safari</a>'))).attr('id', 'service-status')
    }
}
function check_highlight_restriction(restrictionData, countryCode) {
    var allow = [],
        deny = [],
        _tmp, _tmp1;
    restrictionData = restrictionData + "";
    if (restrictionData.match(/^[0-9]*|/)) {
        restrictionData = restrictionData.replace(/[0-9]*\|(.*)/, "$1");
        if (restrictionData == "") {
            restrictionData = 1
        }
    }
    if (restrictionData == 1) {
        return true
    }
    if (restrictionData == null || restrictionData == 0 || countryCode == null) {
        return false
    }
    _tmp = restrictionData.split(',');
    for (var i in _tmp) {
        _tmp1 = _tmp[i].split(':');
        if (_tmp1[1] == 'a') allow.push(_tmp1[0]);
        else deny.push(_tmp1[0])
    }
    if (allow.length) {
        if (jQuery.inArray(countryCode, allow) !== -1) return true;
        return false
    }
    if (deny.length) {
        if (jQuery.inArray(countryCode, deny) !== -1) return false;
        return true
    }
    return true
}
function disableLive() {
    cjs.push.disconnect();
    updater.clear_interval('push working, dissabling ajax');
    clearInterval(sys_interval_checker)
}
function jsonp_cb() {
}
load_pop_under_banner = (function() {
    var loaded = false;
    return function() {
        if (loaded) return;
        loaded = true;
        var MGCD = new Date();
        jQuery('body').append('<scr' + 'ipt type="text/javascript"' + ' src="http://jsu.dt07.net/f/l/flashresultats.fr.5377.js?t=' + MGCD.getYear() + MGCD.getMonth() + MGCD.getDate() + MGCD.getHours() + '" charset="utf-8"></script>')
    }
})();

function getSpreadTrans() {
    var spreadTransArr = [];
    spreadTransArr['full'] = cjs.Util.trans('TRANS_ODDS_COMPARISON_ASIAN_HANDICAP');
    spreadTransArr['short'] = cjs.Util.trans('TRANS_ODDS_COMPARISON_ASIAN_HANDICAP_IFRAME_SHORT');
    return spreadTransArr
}
function inherits(child, parent) {
    var F = function() {};
    F.prototype = parent.prototype;
    child.prototype = new F();
    child._parent = parent.prototype;
    child.prototype.constructor = child
}
function css3_transitions_supported() {
    return css3_get_transition_property() !== false
}
function css3_get_transition_property() {
    var window_key = '__css3_transition_property';
    if (window_key in window) {
        return window[window_key]
    }
    var $body = $('body');
    if (!$body.length) {
        return false
    }
    var style = $body.get(0).style;
    var properties = ['transition', 'OTransition', 'MsTransition', 'MozTransition', 'WebkitTransition'];
    for (var i in properties) {
        if (properties[i] in style) {
            window[window_key] = properties[i];
            break
        }
    }
    if (!(window_key in window)) {
        window[window_key] = false
    }
    return window[window_key]
}
function css3_add_transition($elem, property, duration, easing, delay) {
    if (!css3_transitions_supported()) {
        return false
    }
    var delay = delay || 0;
    var transitionProperty = css3_get_transition_property();
    var transition = $elem.css(transitionProperty) + '';
    if (transition !== '') {
        transition += ', '
    }
    transition += property + ' ';
    transition += duration + 'ms ';
    transition += easing + ' ';
    transition += delay + 'ms';
    $elem.css(transitionProperty, transition);
    return true
}
function getOddsLayoutForSport(sportId) {
    var oddsLayoutTypes = cjs.Template_OddsPartDefinition.prototype;
    if (us_odds_layout) {
        return oddsLayoutTypes.ODDS_TYPE_US_LAYOUT
    }
    if (cjs.dic.get('util_odds').isAhOverrideActive(sportId)) {
        return oddsLayoutTypes.ODDS_TYPE_AH
    }
    var sportIdent = SPORT_LIST_BY_ID[sportId];
    switch (SPORT_ODDS_TYPE_LIST[sportIdent]) {
        case '1x2':
            return oddsLayoutTypes.ODDS_TYPE_1X2;
        case '12':
        default:
            return oddsLayoutTypes.ODDS_TYPE_12
    }
}
function getMygamesCellClass(cellContent) {
    retClass = '';
    retClass = cellContent.indexOf("tomyga") != -1 && category != 5 ? ' mygame' : '';
    return retClass
}
function redrawTournamentPage() {
    if (tournamentSubPage) {
        showTournamentPage('results');
        showTournamentPage('fixtures')
    } else if (tournament) {
        showTournamentPage('summary-results');
        showTournamentPage('summary-fixtures')
    }
}
function showTournamentPage(idSuffix, add, isNoDuelPage) {
    if (typeof isNoDuelPage === 'undefined') {
        isNoDuelPage = false
    }
    idSuffix = typeof idSuffix != 'undefined' ? '-' + idSuffix : '';
    if ($('#tournament-page-tab' + idSuffix).length == 0) {
        return
    }
    $('#fs' + idSuffix).empty();
    var showMoreHelper = cjs.dic.get('Helper_ShowMore');
    var tab = $('#tournament-page-tab' + idSuffix).text();
    var data = $('#tournament-page-data' + idSuffix).text();
    var sportId = $('#tournament-page-sport' + idSuffix).text();
    var utime = $('#tournament-page-utime' + idSuffix).text();
    var more = $('#tournament-page-more' + idSuffix).text();
    var maxEventsCount = cjs.dic.get('utilConfig').get('app', 'tournament_pages', 'data_part_match_limit');
    var countryId = cjs.dic.get('util_enviroment').getCountryId();
    var category = cjs.dic.get('util_enviroment').getCategory();
    var sportId = parseInt(cjs.dic.get('util_enviroment').getSportId());
    if (cjs.dic.get('util_sport').isRacingSport(sportId)) {
        maxEventsCount = cjs.dic.get('page').getMaxEvents(sportId, category, countryId)
    }
    var isSpeedway = countryId == cjs.dic.get('util_list').getTournamentTemplateCategoriesFlipped().SPEEDWAY;
    var hiddenLinesEnabled = !isSpeedway && $('#fs' + idSuffix).hasClass('show-more-hidden-lines') ? true : false;
    var noMatch = '<div class="no-match-found"><p>' + cjs.Util.trans('TRANS_MATCH_LIST_NOT_FOUND') + '</p></div>';
    if (data == '' && tournamentPageDataPart == 0) {
        $('#fs' + idSuffix).append(noMatch).css('border-bottom', 'none');
        return
    } else if (idSuffix == '-summary-results' || idSuffix == '-summary-fixtures') {
        tournamentPagePassiveTable = true
    } else if (tournamentSubPage) {
        tournamentPagePassiveTable = true
    }
    switch (tab) {
        case 'fixtures':
            var template = 'TournamentFixtures';
            updater.country_tournament_order_fin = false;
            break;
        case 'results':
            var template = 'TournamentResults';
            updater.country_tournament_order_fin = true;
            break;
        default:
            var template = null
    }
    if (idSuffix == '-results' && tournamentPageDataPart == 0 || idSuffix == '-fixtures' && tournamentPageDataPart == 0 || !page_is_initialized) {
        page_utime_init_value(cjs.dic.get('Helper_CurrentTime').getTimestamp())
    }
    tournamentPage = true;
    tournamentPageTab = tab;
    var holderProxyClass = cjs.dic.getClass('dataHolderProxy');
    var eventHolderProxy = cjs.dic.get('dataEventHolderProxy');
    var leagueHolderProxy = cjs.dic.get('dataLeagueHolderProxy');
    var currentScope = eventHolderProxy.getScope();
    eventHolderProxy.setScope(holderProxyClass.prototype.SCOPE_TEMPORARY);
    leagueHolderProxy.setScope(holderProxyClass.prototype.SCOPE_TEMPORARY);
    var temporaryEventHolder = eventHolderProxy.getHolder();
    var temporaryEventHandler = eventHolderProxy.getHandler();
    var temporaryLeagueHolder = leagueHolderProxy.getHolder();
    temporaryEventHolder.reinit();
    temporaryLeagueHolder.reinit();
    eventHolderProxy.setScope(holderProxyClass.prototype.SCOPE_ARCHIVE);
    leagueHolderProxy.setScope(holderProxyClass.prototype.SCOPE_ARCHIVE);
    var archiveEventHolder = eventHolderProxy.getHolder();
    var archiveEventHandler = eventHolderProxy.getHandler();
    var archiveLeagueHolder = leagueHolderProxy.getHolder();
    archiveEventHandler.each(function(index, id) {
        var eventItem = this.getItem(id);
        if (eventItem.getValue('tableIdSuffix') !== idSuffix) {
            return
        }
        var leagueItem = eventItem.getLeague();
        var leagueId = leagueItem.getId();
        var temporaryEventItem = temporaryEventHolder.getOrCreateNewEvent(id);
        temporaryEventItem.reinit(eventItem.getData());
        if (!temporaryLeagueHolder.hasLeague(leagueId)) {
            var temporaryLeagueItem = temporaryLeagueHolder.getOrCreateNewLeague(leagueId);
            temporaryLeagueItem.reinit(leagueItem.getData())
        }
    });
    eventHolderProxy.setScope(holderProxyClass.prototype.SCOPE_TEMPORARY);
    leagueHolderProxy.setScope(holderProxyClass.prototype.SCOPE_TEMPORARY);
    eventHolderProxy.getHandler().resetIds();
    leagueHolderProxy.getHandler().resetIds();
    var n1 = eventHolderProxy.getHandler().count();
    parse(data, false, false);
    sort_fs_data();
    preload_hide();
    midnight1 = cjs.Util.Date.getMidnight();
    midnight2 = midnight1 + 24 * 60 * 60;
    var prevEventRound = '';
    var prevEventId = '';
    temporaryEventHandler.filter((function() {
        var eventsCount = 0;
        var matchMidnight1 = null;
        var limit = 10;
        var lastDate = '';
        var showLinkMore = more == 1;
        return function(index, id) {
            var eventItem = this.getItem(id);
            var leagueItem = eventItem.getLeague();
            var leagueId = leagueItem.getId();
            var AC = eventItem.getStage();
            var AD = eventItem.getStartUTime();
            if (!isNoDuelPage) {
                if (AC == cjs.constants.MATCH_STATUS_POST && AD < midnight1) {
                    return
                }
                if ((idSuffix == '-results' || idSuffix == '-fixtures') && tournamentPageDataPart == 0) {
                    if (matchMidnight1 === null && eventsCount >= maxEventsCount - 1) {
                        var matchDate = new Date(AD * 1000);
                        var matchMidnight = new Date(matchDate.getUTCFullYear(), matchDate.getUTCMonth(), matchDate.getUTCDate(), 0, 0, 0);
                        var d = 0;
                        if (matchDate.getUTCHours() + cjs.timezone.getTimezone() >= 24) {
                            d = 1
                        } else if (matchDate.getUTCHours() + cjs.timezone.getTimezone() < 0) {
                            d = -1
                        }
                        var matchMidnight1 = matchMidnight.getTime() / 1000 + d * 24 * 60 * 60 + get_gmt_offset_diff();
                        var matchMidnight2 = matchMidnight1 + 24 * 60 * 60
                    }
                    if (matchMidnight1 !== null && (idSuffix == '-results' && AD < matchMidnight1 || idSuffix == '-fixtures' && AD >= matchMidnight2)) {
                        return
                    }
                } else if (idSuffix == '-summary-results' || idSuffix == '-summary-fixtures') {
                    if (eventsCount >= limit && lastDate != cjs.Util.Date.timestamp2date(cjs.dateFormat, AD, get_gmt_offset())) {
                        showLinkMore = true;
                        return
                    } else {
                        if (tab == 'results' && AD >= midnight1 || tab == 'fixtures' && AD < midnight2) {
                            return
                        } else {
                            lastDate = cjs.Util.Date.timestamp2date(cjs.dateFormat, AD, get_gmt_offset())
                        }
                    }
                }
            }
            eventItem.setValue('tableIdSuffix', idSuffix);
            if (eventItem.getRound() != prevEventRound) {
                prevEventRound = eventItem.getRound();
                if (prevEventId) {
                    this.getItem(prevEventId).setValue('noBorderBottom', 1)
                }
            }
            prevEventId = id;
            var archiveEventItem = archiveEventHolder.getOrCreateNewEvent(id);
            archiveEventItem.reinit(eventItem.getData());
            if (!archiveLeagueHolder.hasLeague(leagueId)) {
                var archiveLeagueItem = archiveLeagueHolder.getOrCreateNewLeague(leagueId);
                archiveLeagueItem.reinit(leagueItem.getData())
            }
            eventsCount++;
            return true
        }
    })());
    var n2 = eventHolderProxy.getHandler().count();
    eventHolderProxy.setScope(holderProxyClass.prototype.SCOPE_ARCHIVE);
    leagueHolderProxy.setScope(holderProxyClass.prototype.SCOPE_ARCHIVE);
    eventHolderProxy.getHandler().resetIds();
    leagueHolderProxy.getHandler().resetIds();
    if ((idSuffix == '-results' || idSuffix == '-fixtures' || idSuffix == '-summary-results' || idSuffix == '-summary-fixtures') && parseInt($('#tournament-page-allmatchcount' + idSuffix).text()) <= n2 || n2 - n1 < 1) {
        $('#tournament-page' + idSuffix + '-more').hide()
    } else {
        $('#tournament-page' + idSuffix + '-more').show()
    }
    var eventsGenerated = 0;
    var headerLastId = 0;
    var lastSportName = '';
    var html = [];
    var sportDefinition;
    var colGroupHtml;
    temporaryEventHandler.each(function(index, id) {
        var eventItem = this.getItem(id);
        var leagueItem = eventItem.getLeague();
        lastSportName = eventItem.getSportName();
        if (headerLastId != leagueItem.getId()) {
            prevEventRound = '';
            if (isNoDuelPage) {
                sportDefinition = cjs.template.getTemplateDefinitionForLabel(sportId, leagueItem.getTournamentStageId())
            } else {
                sportDefinition = cjs.template.getTemplateDefinitionForTemplate(template, sportId)
            }
            colGroupHtml = sportDefinition.getHeaderColumnsHtmlTemplate();
            if (headerLastId != 0) {
                html.push('</tbody>');
                html.push('</table>');
                if (hiddenLinesEnabled && eventsGenerated > maxEventsCount) {
                    html.push(showMoreHelper.createLink(lastSportName))
                }
            }
            eventsGenerated = 0;
            html.push('<table class="' + eventItem.getSportName() + (isNoDuelPage ? ' no-duel' : '') + '">');
            html.push(colGroupHtml);
            html.push('<thead' + (eventItem.getRound() ? ' class="no-border-bottom" ' : '') + '>');
            var gameHeaderHtml = cjs.templateHeaderDataProxy.getFilledHeaderFromTemplate(sportDefinition, leagueItem.getId());
            html.push(gameHeaderHtml);
            html.push('</thead>');
            html.push('<tbody>');
            headerLastId = leagueItem.getId()
        }
        if (prevEventRound != eventItem.getRound()) {
            prevEventRound = eventItem.getRound();
            html.push('<tr class="event_round"><td colspan="' + sportDefinition.getGameColumnCount() + '">' + prevEventRound + '</td></tr>')
        }
        var rowClass = eventsGenerated % 2 ? 'even' : 'odd';
        if (eventItem.getValue('noBorderBottom')) {
            rowClass += ' no-border-bottom'
        }
        if (hiddenLinesEnabled && eventsGenerated >= maxEventsCount) {
            rowClass += ' hidden'
        }
        var gameRowHtml = cjs.templateGameDataProxy.getFilledGameRowFromTemplate(sportDefinition, id, rowClass);
        html.push(gameRowHtml);
        eventsGenerated++
    });
    if (headerLastId != 0) {
        html.push('</tbody>');
        html.push('</table>');
        if (hiddenLinesEnabled && eventsGenerated > maxEventsCount) {
            html.push(showMoreHelper.createLink(lastSportName))
        }
        if (isNoDuelPage) {
            html.push('<div class="table-line-bottom"></div>')
        }
    }
    if (temporaryEventHandler.count() == 0) {
        $('#fs' + idSuffix).append(noMatch)
    }
    if ((idSuffix == '-summary-results' || idSuffix == '-summary-fixtures') && eventsGenerated > 0) {
        $('#block' + idSuffix).show()
    }
    $('#fs' + idSuffix).append(html.join(''));
    tournamentPagePassiveTable = false;
    tournamentPageTab = null;
    eventHolderProxy.setScope(currentScope);
    leagueHolderProxy.setScope(currentScope)
}
function showTournamentPageNoMatch() {
    if (tournamentPageNoMatchToday === true && tournamentPageNoMatchfixturesResults === true && $('#no-match-found').length == 0) {
        $('#fscountry').append('<div id=\"no-match-found\" class=\"no-match-found\"><p>' + cjs.Util.trans('TRANS_MATCH_LIST_NOT_FOUND') + '</p></div>')
    }
}

function loadAndShowMygamesContent(downloadFeedsForMovedGames, downloadedFeedsInPrevCall, prevNeedRepair) {
    var loadTodayFeed = false;
    var feedRequest;
    prevNeedRepair = !!prevNeedRepair;
    downloadFeedsForMovedGames = !!downloadFeedsForMovedGames;
    if (typeof downloadedFeedsInPrevCall === 'undefined') {
        downloadedFeedsInPrevCall = {}
    }
    updater.last_doc_update_category = 5;
    var myGamesCount = cjs.mygames.getCount();
    var myTeamsCount = 0;
    if (cjs.dic.exists('MyTeams')) {
        myTeamsCount = cjs.dic.get('MyTeams').getCount()
    }
    if (myGamesCount || myTeamsCount) {
        if (sudate != 0) {
            sudate = 0;
            if (myGamesCount) {
                loadTodayFeed = true
            }
            push_refresh()
        }
    }
    if (myGamesCount) {
        cjs.feedLoader.reset();
        cjs.feedLoader.beforeCallback(function() {
            updater.parse_only = true
        });
        cjs.feedLoader.executeFilterCallback(function(context) {
            return /^full|^odds/.test(context)
        });
        var eventHolderProxy = cjs.dic.get('dataEventHolderProxy');
        var leagueHolderProxy = cjs.dic.get('dataLeagueHolderProxy');
        eventHolderProxy.getHolder().addItemsFromRawObject(cjs.mygames.getData());
        leagueHolderProxy.getHolder().addItemsFromRawObject(cjs.mygames.getLabels());
        eventHolderProxy.getHandler().resetIds();
        leagueHolderProxy.getHandler().resetIds();
        var frepair = prevNeedRepair;
        var neededFeeds = [];
        neededFeeds = neededFeeds.concat(cjs.mygames.getNeededFeeds(1));
        var tmpSudate = sudate;
        for (var i in neededFeeds) {
            if (neededFeeds[i].sport_id == sport_id && !cjs.Util.Page.isMixed() && !cjs.Util.Page.isParent() && !loadTodayFeed) {
                continue
            }
            feedRequest = cjs.feedRequest.getFeedData('full', neededFeeds[i].sport_id);
            if (downloadedFeedsInPrevCall[feedRequest.context] === true) {
                continue
            }
            downloadedFeedsInPrevCall[feedRequest.context] = true;
            cjs.feedLoader.addIntoQueue(feedRequest);
            frepair = true
        }
        var neededFeeds = [];
        neededFeeds = neededFeeds.concat(cjs.mygames.getNeededFeeds());
        for (var i in neededFeeds) {
            feedRequest = cjs.feedRequest.getFeedData('full', neededFeeds[i].sport_id, neededFeeds[i].day);
            if (downloadedFeedsInPrevCall[feedRequest.context] === true) {
                continue
            }
            downloadedFeedsInPrevCall[feedRequest.context] = true;
            cjs.feedLoader.addIntoQueue(feedRequest);
            frepair = true
        }
        cjs.feedLoader.afterCallback(function() {
            if (downloadFeedsForMovedGames != true) {
                loadAndShowMygamesContent(true, downloadedFeedsInPrevCall, frepair);
                return
            }
            var feedData = cjs.feedRequest.getFeedData('frepair', 0);
            cjs.feedLoader.executeCompleteCallback(feedData.context);
            updater.parse_only = false;
            if (project_type_name == '_ass') {
                expand_collapse_league_load()
            }
            if (!frepair) {
                sort_fs_data()
            }
            if (cjs.mygames.getCount()) {
                cjs.mygames.load(true)
            }
            if (cjs.dic.get('list_navigation').isMyGames()) {
                generateMygames()
            }
        });
        sudate = tmpSudate;
        if (frepair && downloadFeedsForMovedGames === true) {
            cjs.feedLoader.addIntoQueue(cjs.feedRequest.getFeedData('frepair', 0))
        }
        cjs.feedLoader.downloadAndExecuteFeeds()
    } else {
        generateMygames()
    }
}
function generateMygames() {
    construct_fscon();
    generate(true, 5, false)
}
function initScoreHighlighterHtmlDisplayer() {
    var stats = cjs.dic.get('util_list').getStatsDataTypes();
    var parser = cjs.dic.get('Helper_Parser');
    cjs.scoreHighlighterHtmlDisplayer = new cjs.HighlightHtml({
        background: {
            'default': ['AG', 'AH', 'BA', 'BB', 'BC', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'FA', 'FB', 'DO', 'DP', 'WF', 'WG', 'WH', 'WI', 'AC', 'WA', 'WB', 'WC', 'homeCorrection', 'awayCorrection', 'WS', 'GR', 'GH', 'NC', 'ND', 'NE', 'NF', 'NG', 'NJ', 'DK', 'DL', 'DM', 'DN', parser.getStatsResultsIndex(stats.RANK), parser.getStatsResultsIndex(stats.POINTS), parser.getStatsResultsIndex(stats.JUMP_COUNT), parser.getStatsResultsIndex(stats.JUMP_ROUND_1), parser.getStatsResultsIndex(stats.JUMP_ROUND_2), parser.getStatsResultsIndex(stats.TIME), parser.getStatsResultsIndex(stats.GAP), parser.getStatsResultsIndex(stats.STOP_REASON), parser.getStatsResultsIndex(stats.PENALTY_LAP), parser.getStatsResultsIndex(stats.MISSED_SHOT), parser.getStatsResultsIndex(stats.POINTS_ROUND_1), parser.getStatsResultsIndex(stats.POINTS_ROUND_2), parser.getStatsResultsIndex(stats.TIME_ROUND_1), parser.getStatsResultsIndex(stats.TIME_ROUND_2), parser.getStatsResultsIndex(stats.STOP_REASON_ROUND_1), parser.getStatsResultsIndex(stats.STOP_REASON_ROUND_2)],
            1: ['AG', 'AH', 'AC', 'homeCorrection', 'awayCorrection', 'EC', 'ED'],
            4: ['AG', 'AH', 'AC', 'homeCorrection', 'awayCorrection', 'EC', 'ED', 'BA', 'BB', 'BC', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ'],
            23: ['WS', 'AG', 'AH', 'GH', 'GI'],
        },
        message: {
            1: ['AG', 'AH', 'EA', 'EB', 'EC', 'ED', 'homeCorrection', 'awayCorrection'],
            2: ['AG', 'AH', 'homeCorrection', 'awayCorrection'],
            4: ['AG', 'AH', 'EA', 'EB', 'EC', 'ED', 'homeCorrection', 'awayCorrection'],
            23: ['PF', 'PG'],
            13: ['DK', 'DL', 'DM', 'DN']
        },
        trans: {
            c: "",
            1: cjs.Util.trans('TRANS_SOCCER_GOAL'),
            2: cjs.Util.trans('TRANS_TENNIS_SET'),
            4: cjs.Util.trans('TRANS_HOCKEY_GOAL'),
            u1: cjs.Util.trans('TRANS_SOCCER_CORRECTION_OFFSIDE'),
            u2: cjs.Util.trans('TRANS_TENNIS_CORRECTION_HAWK_EYE'),
            u4: cjs.Util.trans('TRANS_HOCKEY_CORRECTION_VIDEO_REFEREE'),
            p1: cjs.Util.trans('TRANS_SOCCER_MATCH_SCORER_TYPE_PEN'),
            p4: cjs.Util.trans('TRANS_HOCKEY_MATCH_SCORER_TYPE_PEN'),
            pm1: cjs.Util.trans('TRANS_SOCCER_MATCH_SCORER_TYPE_PEN_MISS'),
            pm4: cjs.Util.trans('TRANS_HOCKEY_MATCH_SCORER_TYPE_PEN_MISSED'),
            par3: cjs.Util.trans('TRANS_HOLE_RESULT_DOUBLE_EAGLE'),
            par2: cjs.Util.trans('TRANS_HOLE_RESULT_EAGLE'),
            par1: cjs.Util.trans('TRANS_HOLE_RESULT_BIRDIE'),
            par0: cjs.Util.trans('TRANS_HOLE_RESULT_PAR'),
            parm1: cjs.Util.trans('TRANS_HOLE_RESULT_BOGEY'),
            parm2: cjs.Util.trans('TRANS_HOLE_RESULT_DOUBLE_BOGEY'),
            parm3: cjs.Util.trans('TRANS_HOLE_RESULT_TRIPLE_PLUS_BOGEY'),
            wicket: cjs.Util.trans('TRANS_CRICKET_WICKET')
        },
        homeScore: 'AG',
        awayScore: 'AH',
        finalScore: 'GR',
        hole: 'GH',
        homeScorePart: home_score_part.concat(['WF', 'WH', 'DO']),
        awayScorePart: away_score_part.concat(['WG', 'WI', 'DP']),
        homeCorrection: 'homeCorrection',
        awayCorrection: 'awayCorrection',
        homePenalty: 'EA',
        awayPenalty: 'EB',
        homePenaltyMissed: 'EC',
        awayPenaltyMissed: 'ED',
        matchStatus: 'AC',
        serve: 'WC',
        rank: 'WS',
        homePointByPoint: 'WA',
        awayPointByPoint: 'WB',
        laps: 'NC',
        lapTime: 'ND',
        gap: 'NG',
        grid: 'NE',
        pitStops: 'NF',
        parDiff: 'PF',
        parDiffAway: 'PG',
        parToday: 'GI',
        wicketHome: ['DL', 'DN'],
        wicketHome_1st_period: ['DL'],
        wicketHome_2nd_period: ['DN'],
        wicketAway: ['DK', 'DM'],
        wicketAway_1st_period: ['DK'],
        wicketAway_2nd_period: ['DM'],
        isPointByPointGetter: function(sportId) {
            return is_point_by_point(SPORT_LIST_BY_ID[sportId])
        }
    }, project_type_name);
    cjs.scoreHighlighter = new cjs.HighlightData(cjs.scoreHighlighterHtmlDisplayer)
}
function lsClientRegisterCallbacksForTournamentPage() {
    if (cjs.dic.get('page').isSeasonPage()) {
        var updateMygamesCheckboxes = function() {
            $('#fs-results, #fs-fixtures, #fs-summary-results, #fs-summary-fixtures').find('thead tr span.tomyg, thead tr span.tomyga').each(function(i, headEl) {
                var hasCheckedMg = false;
                var $headEl = $(headEl);
                $headEl.closest('thead').next('tbody').find('tr span.tomyg, tr span.tomyga').each(function(i, gameEl) {
                    $gameEl = $(gameEl);
                    var gameId = $gameEl.closest('tr').attr('id');
                    var checked = cjs.mygames.check(gameId);
                    $gameEl.toggleClass('tomyg', !checked);
                    $gameEl.toggleClass('tomyga', checked);
                    if (checked) {
                        hasCheckedMg = true
                    }
                    if (cjs.dic.get('utilConfig').get('app', 'mygames', 'position') == 'left') {
                        $gameEl.parent().parent().toggleClass('mygame', checked)
                    }
                });
                $headEl.toggleClass('tomyg', !hasCheckedMg);
                $headEl.toggleClass('tomyga', hasCheckedMg)
            })
        };
        ls.loginClient.registerCallback('login', updateMygamesCheckboxes);
        ls.loginClient.registerCallback('logout', updateMygamesCheckboxes);
        cjs.mygames.registerLocalStorageSyncCB(updateMygamesCheckboxes);
        cjs.mygames._startStorageSyncTimer()
    }
}
function getUtimeFromDate(date) {
    date = new Date(date);
    if (isNaN(date.getTime())) {
        return false
    }
    return Math.floor(date.getTime() / 1000)
}
function setPageUtimeFromDate(date) {
    var ts = null;
    if (ts = getUtimeFromDate(date)) {
        cjs.dic.get('Helper_CurrentTime').setServerTimestamp(ts)
    }
}
function getLeagueIdFromClassName(className) {
    var id = className.match(/l\_([0-9]*\_[a-z0-9]{8,16})/i);
    if (id != null && typeof id[1] != 'undefined') {
        return id[1]
    }
    return null
}
function getParticipantIdFromClassName(className) {
    var id = className.match(/p\_([0-9]*\_[a-z0-9]{8,16})/i);
    if (id != null && typeof id[1] != 'undefined') {
        return id[1]
    }
    return null
}
function getIdFromClass(className) {
    className = className + "";
    var id = className.match(/([gxy]\_[0-9]*\_[a-z0-9]{8,16})/i);
    if (id != null && typeof id[1] != 'undefined') {
        return id[1]
    }
    return null
}
function isNoDuelTournament(leagueId) {
    var holder = cjs.dic.get('dataLeagueHolderProxy').findHolderByItemId(leagueId);
    if (holder === false) {
        return false
    }
    var leagueItem = holder.getLeague(leagueId);
    if ($.inArray(parseInt(leagueItem.getValue('sport_id')), cjs.cfg.noDuelSports) == -1) {
        return false
    }
    if (leagueItem.getValue('ZW') === null || leagueItem.getValue('ZW') == 1) {
        return false
    }
    return true
}
function isNoDuelSport(sportId) {
    return $.inArray(sportId, cjs.cfg.noDuelSports) !== -1
}

function isDetailGetter() {
    return false
}
function getCellContentIcon(eventItem) {
    var icon = new Array();
    var icon2 = new Array();
    var ii = 0;

    function getCellContentIconInfo(eventItem, pos) {
        if ((ii = $.inArray('info', ICON_LIST)) !== -1 && true) {
            if (eventItem.getValue('AM') != '' || ((eventItem.getValue('BW') == 1 || eventItem.getLeague().getValue('ZF') == 1 && eventItem.getValue('BW') == -1) && (cjs.dic.get('Helper_CurrentTime').getTimestamp() - eventItem.getStartUTime()) <= 3600 * 4 && (eventItem.getStage() != cjs.constants.MATCH_STATUS_POST && eventItem.getStage() != cjs.constants.MATCH_STATUS_CANC))) {
                icon.push('<span class="info icon', typeof pos != 'undefined' ? pos : ii, '"></span>');
                return true
            }
        }
        return false
    }
    function getCellContentIconTv(eventItem, pos) {
        var allowedBookmakersByGeoIp = cjs.dic.get('Helper_Bookmaker').getAvailableBookmakerListByGeoIp(cjs.geoIP);
        if (eventItem.hasBroadcast(allowedBookmakersByGeoIp) && (ii = $.inArray('tv', ICON_LIST)) !== -1) {
            return ['<span class="tv icon', typeof pos != 'undefined' ? pos : ii, '"></span>'].join('')
        }
        return ''
    }
    function getCellContentIconVideo(eventItem, pos) {
        if (eventItem.getValue('AV') !== '' && cjs.dic.get('Helper_HighlightRestriction').hasHighlight(eventItem.getValue('AV'), cjs.geoIP) && (ii = $.inArray('tv', ICON_LIST)) !== -1) {
            return ['<span class="video icon', typeof pos != 'undefined' ? pos : ii, '"></span>'].join('')
        }
        return ''
    }
    function getCellContentIconLive(eventItem, pos) {
    }
    function getTvOrVideoIcon(eventItem, pos, useVideoHighlight) {
        var highlightAllowed = true;
        var highlightDisabledByTournamentTemplate = false;
        var videoIcon = getCellContentIconVideo(eventItem, pos);
        var tvIcon = getCellContentIconTv(eventItem, pos);
        if (eventItem.isScheduled()) {
            icon.push(tvIcon)
        } else {
            if (typeof useVideoHighlight === 'undefined') {
                useVideoHighlight = true
            }
            var highlightEnabled = cjs.Util.Config.get('app', 'video_highlights_live_icon', 'enable') === true;
            var tournamentTemplateId = eventItem.getLeague().getTournamentTemplateId();
            highlightDisabledByTournamentTemplate = videoHighlightsDisabledTournamentTemplates.indexOf(tournamentTemplateId) !== -1;
            highlightAllowed = highlightEnabled && !highlightDisabledByTournamentTemplate;
            if (highlightAllowed && useVideoHighlight && getVideoIconBlinkTimeout(eventItem) > 0) {
                icon.push(videoIcon.replace(/video icon([0-9]*)/, 'video icon$1 video-blink'))
            } else if (!eventItem.isFinished() && tvIcon) {
                icon.push(tvIcon)
            } else if (!highlightDisabledByTournamentTemplate) {
                icon.push(videoIcon)
            }
        }
    }
    var page = cjs.dic.get('page');
    if (page.isSeasonPageFixtures()) {
        getCellContentIconInfo(eventItem, 0);
        getTvOrVideoIcon(eventItem, 1);
        getCellContentIconLive(eventItem, 2)
    } else if (page.isSeasonPageResults()) {
        getCellContentIconInfo(eventItem, 0);
        getTvOrVideoIcon(eventItem, 1, eventItem.isLive())
    } else {
        getCellContentIconInfo(eventItem);
        getTvOrVideoIcon(eventItem);
        getCellContentIconLive(eventItem);
        if (eventItem.getValue('AX') && (ii = $.inArray('shirt', ICON_LIST)) !== -1 && ($.inArray(eventItem.getSportName(), ['soccer', 'handball', 'hockey', 'basketball', 'cricket', 'aussie-rules', 'rugby-union', 'rugby-league', 'baseball', 'volleyball']) !== -1)) {
            icon.push('<span class="shirt icon', ii, '"></span>')
        }
        if (eventItem.getValue('AW') !== '' && ($.inArray(eventItem.getSportName(), ['aussie-rules', 'tennis', 'hockey', 'baseball', 'american-football', 'basketball', 'cricket', 'rugby-union', 'rugby-league']) !== -1)) {
            if (eventItem.getStage() != cjs.constants.MATCH_STATUS_POST && eventItem.getStage() != cjs.constants.MATCH_STATUS_CANC) {
                icon2.push('<div class="live-centre-click"><span class="' + (eventItem.isLive() ? 'live-centre-active' : 'live-centre') + '"></span></div>')
            }
        }
    }
    if (icon.length == 0 && icon2.length == 0) {
        return '&nbsp;'
    } else {
        if (icon2.length == 0) {
            return '<span class="icons">' + icon.join('') + '</span>'
        } else if (icon.length == 0) {
            return '<span class="icons">' + icon2.join('') + '</span>'
        }
        var iconsHtml = '';
        var iconsList = [icon, icon2];
        for (var i in iconsList) {
            var iconHtml = iconsList[i].join('');
            if (iconHtml) {
                iconsHtml += ('<span class="icons">' + iconHtml + '</span>')
            }
        }
        return iconsHtml
    }
}
function checkLoadedDetailParts() {
    try {
        document.parts_counted_increase();
        if (document.have_all_parts()) {
            detail_loaded();
            document.refresh_alert('detail');
            cjs.dic.get('Feed_Content_OddsSetup').show()
        }
    } catch (e) {}
}
function hasRepairFeed(sd) {
    return sd == 0 || sd == -1
}
function runCoreLoadedCallbacks() {
    if (typeof coreLoadedCB !== 'undefined') {
        for (var i in coreLoadedCB) {
            coreLoadedCB[i]()
        }
        coreLoadedCB = []
    }
}

function matchMustBeOnPage(matchId, isOnPage) {
    var eventItem = cjs.dic.get('dataEventHolderProxy').getHolder().getEvent(matchId);
    return (category == 0 || (category == 1 && eventItem.isMarkedAsLive()) || (category == 2 && eventItem.isFinished()) || (category == 3 && eventItem.isScheduled()) || (category == 5 && cjs.mygames.check(matchId))) && !isGameHidden(matchId) && !isOnPage
}
function matchMustNotBeOnPage(matchId, isOnPage) {
    var eventItem = cjs.dic.get('dataEventHolderProxy').getHolder().getEvent(matchId);
    return ((category == 1 && !eventItem.isMarkedAsLive()) || (category == 2 && !eventItem.isFinished()) || (category == 3 && !eventItem.isScheduled()) || (category == 5 && !cjs.mygames.check(matchId)) || isGameHidden(matchId)) && isOnPage
}
function hasMatchFinalResultOnly(fsDataIndex) {
    var holder = cjs.dic.get('dataEventHolderProxy').getHolder();
    if (!holder.hasEvent(fsDataIndex)) {
        return false
    }
    var eventItem = holder.getEvent(fsDataIndex);
    var BW = eventItem.getValue('BW');
    return (BW == 2 || eventItem.getLeague().getValue('ZF') == 2 && BW == -1)
}
function registerDetailTabCallbacks() {
    var $highlightsContent = $('#highlights-content');
    detail_tab_addOnDetailTabShowCallback(function(currentTab, lastTab) {
        if (currentTab.join() == lastTab.join()) {
            return
        }
        processHighlights()
    }, 'highlights');
    detail_tab_addOnDetailTabHideCallback(function(currentTab, lastTab) {
        if (currentTab.join() == lastTab.join()) {
            return
        }
        $('#highlights-content').html('')
    }, 'highlights')
}
function fixHeaderBackground() {
    if (project_type_name === '_diretta-2') {
        var $body = $('body');
        if (cjs.Util.Browser.mobile() && ($body.css('backgroundPositionX') === '' || cjs.Util.Browser.windows())) {
            var backgroundPositions = $body.css('backgroundPosition').split(' ');
            $body.css('backgroundPosition', '-350px ' + backgroundPositions[1])
        }
    }
}
function isGameHidden(fsDataIndexId, groupId) {
    groupId = groupId || 0;
    var eventItem = cjs.dic.get('dataEventHolderProxy').getHolder().getEvent(fsDataIndexId);
    var sportId = eventItem.getSportId();
    var isStageSport = (cjs.Util.Sport.isStageSport(sportId));
    if ((cjs.Util.Sport.hasCategoryPage(sport_id) && country) || (tournamentPage == true && !isStageSport) || tournamentPagePassiveTable == true) {
        return false
    }
    var leagueItem = eventItem.getLeague();
    var leagueId = eventItem.getValue('labl_id');
    var itemKey = leagueId + ":" + groupId;
    if (!isNoDuelTournament(leagueId) || (temporaryLeagueData.hasItem(itemKey) && temporaryLeagueData.getItem(itemKey).getValue('show_all') === 1)) {
        return false
    }
    if (!cjs.mygames.isGameFromTournament(fsDataIndexId) && category == 5) {
        return false
    }
    var categoryId = leagueItem.getSuperTemplateId();
    var sportId = leagueItem.getSportId();
    if (eventItem.getValue('pos') <= cjs.dic.get('page').getMaxEvents(sportId, category, categoryId)) {
        return false
    }
    return true
}
function runAfterGtmLoaded() {
    if (typeof ga !== 'undefined') {
        var clientStorage = cjs.dic.get('ClientStorage');
        var tracker = ga.getAll()[0];
        var linkerParamValue = tracker.get('linkerParam').replace('_ga=', '');
        var twoYears = 3600 * 24 * 365 * 2;
        clientStorage.store_cookie('_lsga', linkerParamValue, twoYears)
    }
}
function resetAndExecuteFeedRequests(sportId, feedName, afterCallback) {
    cjs.feedLoader.reset();
    if (feedName !== 'full' || hasRepairFeed(sudate)) {
        cjs.feedLoader.addIntoQueue(cjs.feedRequest.getFeedData('frepair', sportId))
    }
    cjs.feedLoader.addIntoQueue(cjs.feedRequest.getFeedData(feedName, sportId));
    cjs.feedLoader.executeFilterCallback(function(contextName) {
        var pattern = "^" + feedName;
        var re = new RegExp(pattern);
        return re.test(contextName)
    });
    cjs.feedLoader.afterCallback(afterCallback);
    cjs.feedLoader.downloadAndExecuteFeeds()
}
function reloadIframeContent() {
    var positions = {};
    $('.cell_ra', '#fs').each(function(i, e) {
        var r = /position-(up|down)/;
        var ret = r.exec(e.className);
        if (ret === null) {
            return
        }
        var direction = ret[1];
        var node = e.parentNode;
        var eventItemId;
        var _tmp = fs_update._getEventItemIdFromElement(node);
        if (_tmp === false) {
            return
        }
        eventItemId = _tmp.eventItemId;
        positions[eventItemId] = direction
    });
    var top = $(document).scrollTop();
    sort_fs_data();
    if (project_type_name == '_ass' || sub_category == 2 || sub_category == 3) {
        generate_content(category, true)
    } else {
        var cb = function() {
            $(document).scrollTop(top);
            cjs.scoreHighlighter.displayAll();
            var selectorsUp = [],
                selectorsDown = [];
            for (var eventItemId in positions) {
                var selector = "#" + eventItemId + " .cell_ra, ." + eventItemId + " .cell_ra";
                if (positions[eventItemId] === 'up') {
                    selectorsUp.push(selector)
                } else {
                    selectorsDown.push(selector)
                }
            }
            if (selectorsUp.length) {
                $(selectorsUp.join(', '), '#fs').addClass('position-up')
            }
            if (selectorsDown.length) {
                $(selectorsDown.join(', '), '#fs').addClass('position-down')
            }
            if (cjs.bannerScrollManager && category === 5) {
                cjs.bannerScrollManager.correctPositionsOfAllBanners()
            }
        };
        generate_content(category, false, true, true, null, null, cb, null, null, true)
    }
}
function createUnsupportedBrowserDialogContent() {
    var dialogKey, $dialogContent = $(document.createElement('div'));
    $dialogContent.addClass('lsid-messages').append($(document.createElement('div')).addClass('message').addClass('err').html(cjs.Util.trans('TRANS_SYSTEM_ERROR_UNSUPPORTED_BROWSER_PART_3') + '<br />' + '<br />' + 'We recommend: <a href=\"http://www.google.com/chrome/\" target=\"_blank\">Chrome</a> | <a href=\"http://www.mozilla.org/products/firefox/\" target=\"_blank\">Firefox</a> | <a href=\"http://www.microsoft.com/windows/ie/downloads/default.mspx\" target=\"_blank\">Explorer</a> | <a href=\"http://www.opera.com/download/\" target=\"_blank\">Opera</a> | <a href=\"http://www.apple.com/safari/\" target=\"_blank\">Safari</a>'));
    return $dialogContent
}
function getVideoIconBlinkTimeout(eventItem) {
    var lastTs = cjs.dic.get('Helper_HighlightRestriction').getLastHighlightTs(eventItem.getValue('AV'), cjs.geoIP);
    if (lastTs === false) {
        return 0
    }
    var time = 60 - (cjs.dic.get('Helper_CurrentTime').getTimestamp() - lastTs);
    return time
}
function callFbPixelCampaignCallback(pixelId) {
    if (!pixelId) {
        return
    }(function() {
        var _fbq = window._fbq || (window._fbq = []);
        if (!_fbq.loaded) {
            var fbds = document.createElement('script');
            fbds.async = true;
            fbds.src = '//connect.facebook.net/en_US/fbds.js';
            var s = document.getElementsByTagName('script')[0];
            s.parentNode.insertBefore(fbds, s);
            _fbq.loaded = true
        }
        _fbq.push(['addPixelId', pixelId + ''])
    })();
    window._fbq = window._fbq || [];
    window._fbq.push(['track', 'PixelInitialized', {}])
}
function clog() {
    try {
        if (window.console) {
            for (var i in arguments) {
                console.log(arguments[i])
            }
        }
    } catch (err) {}
}
function cerr() {
    try {
        for (var i in arguments) {
            console.error(arguments[i])
        }
    } catch (err) {}
}
function cdir() {
    try {
        for (var i in arguments) {
            console.dir(arguments[i])
        }
    } catch (err) {}
}
if (cjs.dic.exists('Helper_AutoRedirect')) {
    cjs.dic.get('Helper_AutoRedirect').redirect()
}
__coreLoaded = true;
runCoreLoadedCallbacks();
var Oddsportal_Evaluator = {
    NAMESPACE_DC: 1,
    NAMESPACE_OP: 2,
    BT_1X2: 1,
    BT_OU: 2,
    BT_ML: 3,
    BT_DC: 4,
    BT_AH: 5,
    BT_DNB: 6,
    BT_TQ: 7,
    BT_CS: 8,
    BT_HTFT: 9,
    BT_OE: 10,
    BT_LW: 11,
    OUTCOME_HOME: 1,
    OUTCOME_AWAY: 2,
    OUTCOME_DRAW: 3,
    OUTCOME_OVER: 4,
    OUTCOME_UNDER: 5,
    OUTCOME_AWAYDRAW: 7,
    OUTCOME_HOMEDRAW: 6,
    OUTCOME_HOMEAWAY: 8,
    OUTCOME_YES: 9,
    OUTCOME_NO: 10,
    RESULT_LOST: 1,
    RESULT_WON: 2,
    RESULT_RETURN: 3,
    RESULT_50RETURN50WON: 4,
    RESULT_50RETURN50LOST: 4,
    _statusReturnBet: {
        "4": 0,
        "5": 1,
        "8": 2,
        "9": 3,
        "36": 4,
        "37": 5,
        "54": 6
    },
    winning: function(eventParams, outcomeParams) {
        throw new Error('Not implemented !!!');
        switch (oddsTypeId) {
            case (this.BT_1X2):
                if (isHandicap) return null;
                return this.evaluate_1x2(homeScore, awayScore, outcomeParams['outcome']);
                break;
            case (this.BT_DC):
                if (isHandicap) return null;
                return this.evaluate_dc(homeScore, awayScore, outcomeParams['outcome']);
                break;
            case (this.BT_ML):
                if (isHandicap) return null;
                return this.evaluate_moneyline(homeScore, awayScore, outcomeParams['outcome']);
                break;
            case (this.BT_DNB):
                if (isHandicap) return null;
                return this.evaluate_drawnobet(homeScore, awayScore, outcomeParams['outcome']);
                break;
            case (this.BT_OU):
                return this.evaluate_overunder(eventParams, outcomeParams, scope);
                break;
            case (this.BT_AH):
                return this.evaluate_asianhandicap(eventParams, outcomeParams, scope);
                break;
            case (this.BT_OE):
                if (isHandicap) return null;
                return this.evaluate_oddeven(homeScore, awayScore, outcomeParams['outcome']);
                break;
            default:
                throw new Error('Cannot evaluate with JS');
                break
        }
    },
    evaluate: function(eventParams, outcomeParams) {
        if (!outcomeParams || !eventParams) return null;
        if (!outcomeParams['scopeId']) {
            throw new Error('outcome scope not defined')
        }
        var scope = outcomeParams['scopeId'];
        var status = eventParams['statusId'];
        if (this._statusReturnBet[status]) {
            return this.RESULT_RETURN
        }
        var sportId = eventParams['sportId'];
        var oddsTypeId = outcomeParams['type'];
        var isHandicap = outcomeParams['handicapTypeId'];
        if (oddsTypeId == this.BT_1X2 || oddsTypeId == this.BT_DC || oddsTypeId == this.BT_ML || oddsTypeId == this.BT_DNB) {
            try {
                var homeScore = eventParams['score'][scope][0] * 1;
                var awayScore = eventParams['score'][scope][1] * 1
            } catch (e) {
                throw new Error('score not available for this scope')
            }
        }
        if (sportId == 13) {
            throw new Error('Not implemented for this sport')
        }
        switch (oddsTypeId) {
            case (this.BT_1X2):
                if (isHandicap) return null;
                return this.evaluate_1x2(sportId, homeScore, awayScore, outcomeParams['outcome']);
                break;
            case (this.BT_DC):
                if (isHandicap) return null;
                return this.evaluate_dc(sportId, homeScore, awayScore, outcomeParams['outcome']);
                break;
            case (this.BT_ML):
                if (isHandicap) return null;
                return this.evaluate_moneyline(sportId, homeScore, awayScore, outcomeParams['outcome']);
                break;
            case (this.BT_DNB):
                if (isHandicap) return null;
                return this.evaluate_drawnobet(sportId, homeScore, awayScore, outcomeParams['outcome']);
                break;
            case (this.BT_OU):
                return this.evaluate_overunder(eventParams, outcomeParams, scope);
                break;
            case (this.BT_AH):
                return this.evaluate_asianhandicap(eventParams, outcomeParams, scope);
                break;
            default:
                throw new Error('Cannot evaluate with JS');
                break
        }
    },
    evaluate_1x2: function(sportId, homeScore, awayScore, outcome) {
        if (outcome == this.OUTCOME_DRAW) {
            if (homeScore == awayScore) {
                return this.RESULT_WON
            } else {
                return this.RESULT_LOST
            }
        } else if (outcome == this.OUTCOME_HOME) {
            if (homeScore > awayScore) {
                return this.RESULT_WON
            } else {
                return this.RESULT_LOST
            }
        } else if (outcome == this.OUTCOME_AWAY) {
            if (homeScore < awayScore) {
                return this.RESULT_WON
            } else {
                return this.RESULT_LOST
            }
        } else {
            throw new Error('invalid outcome for BT_1X2')
        }
    },
    evaluate_dc: function(sportId, homeScore, awayScore, outcome) {
        if (outcome == this.OUTCOME_HOMEDRAW) {
            if (homeScore < awayScore) {
                return this.RESULT_LOST
            } else {
                return this.RESULT_WON
            }
        } else if (outcome == this.OUTCOME_HOMEAWAY) {
            if (homeScore > awayScore) {
                return this.RESULT_LOST
            } else {
                return this.RESULT_WON
            }
        } else if (outcome == this.OUTCOME_AWAYDRAW) {
            if (homeScore == awayScore) {
                return this.RESULT_LOST
            } else {
                return this.RESULT_WON
            }
        } else {
            throw new Error('invalid outcome for BT_DC')
        }
    },
    evaluate_moneyline: function(sportId, homeScore, awayScore, outcome) {
        if (homeScore == awayScore) {
            return this.RESULT_RETURN
        } else if (outcome == this.OUTCOME_HOME) {
            if (homeScore > awayScore) {
                return this.RESULT_WON
            } else {
                return this.RESULT_LOST
            }
        } else if (outcome == this.OUTCOME_AWAY) {
            if (homeScore < awayScore) {
                return this.RESULT_WON
            } else {
                return this.RESULT_LOST
            }
        } else {
            throw new Error('invalid outcome for BT_ML')
        }
    },
    evaluate_drawnobet: function(sportId, homeScore, awayScore, outcome) {
        if (homeScore == awayScore) {
            return this.RESULT_RETURN
        } else if (outcome == this.OUTCOME_HOME) {
            if (homeScore > awayScore) {
                return this.RESULT_WON
            } else {
                return this.RESULT_LOST
            }
        } else if (outcome == this.OUTCOME_AWAY) {
            if (homeScore < awayScore) {
                return this.RESULT_WON
            } else {
                return this.RESULT_LOST
            }
        } else {
            throw new Error('invalid outcome for BT_DNB')
        }
    },
    evaluate_overunder: function(eventParams, outcomeParams, scope) {
        var sportId = eventParams['sportId'];
        var handicapType = outcomeParams['handicapTypeId'];
        var outcome = outcomeParams['outcome'];
        var handicapValue = outcomeParams['handicapValue'];
        if (sportId == 14) {
            throw new Error('Not implemented for this sport')
        }
        var total = null;
        try {
            if (sportId == 2) {
                if (scope == 2 && handicapType == 1) {
                    total = eventParams['score'][scope][0] + eventParams['score'][scope][1]
                } else if (scope == 2 && handicapType == 2) {
                    total = 0;
                    if (typeof eventParams['score'][12] !== "undefined") {
                        total += eventParams['score'][12][0] + eventParams['score'][12][1]
                    }
                    if (typeof eventParams['score'][13] !== "undefined") {
                        total += eventParams['score'][13][0] + eventParams['score'][13][1]
                    }
                    if (typeof eventParams['score'][14] !== "undefined") {
                        total += eventParams['score'][14][0] + eventParams['score'][14][1]
                    }
                    if (typeof eventParams['score'][15] !== "undefined") {
                        total += eventParams['score'][15][0] + eventParams['score'][15][1]
                    }
                    if (typeof eventParams['score'][16] !== "undefined") {
                        total += eventParams['score'][16][0] + eventParams['score'][16][1]
                    }
                } else if (scope > 2 && handicapType == 2) {
                    total = eventParams['score'][scope][0] + eventParams['score'][scope][1]
                } else {
                    throw new Error('invalid handicap type')
                }
            } else if (sportId == 12 || sportId == 17 || sportId == 21) {
                if (scope == 2 && handicapType == 1) {
                    total = eventParams['score'][scope][0] + eventParams['score'][scope][1]
                } else if (scope == 2 && handicapType == 3) {
                    total = 0;
                    if (typeof eventParams['score'][12] !== "undefined") {
                        total += eventParams['score'][12][0] + eventParams['score'][12][1]
                    }
                    if (typeof eventParams['score'][13] !== "undefined") {
                        total += eventParams['score'][13][0] + eventParams['score'][13][1]
                    }
                    if (typeof eventParams['score'][14] !== "undefined") {
                        total += eventParams['score'][14][0] + eventParams['score'][14][1]
                    }
                    if (typeof eventParams['score'][15] !== "undefined") {
                        total += eventParams['score'][15][0] + eventParams['score'][15][1]
                    }
                    if (typeof eventParams['score'][16] !== "undefined") {
                        total += eventParams['score'][16][0] + eventParams['score'][16][1]
                    }
                } else if (scope > 2 && handicapType == 3) {
                    total = eventParams['score'][scope][0] + eventParams['score'][scope][1]
                } else {
                    throw new Error('invalid handicap type')
                }
            } else if (sportId == 6) {
                if (scope == 3 && typeof eventParams['score'][scope] === "undefined") {
                    total = 0;
                    if (typeof eventParams['score'][17] !== "undefined") {
                        total += eventParams['score'][17][0] + eventParams['score'][17][1]
                    }
                    if (typeof eventParams['score'][18] !== "undefined") {
                        total += eventParams['score'][18][0] + eventParams['score'][18][1]
                    }
                    if (typeof eventParams['score'][19] !== "undefined") {
                        total += eventParams['score'][19][0] + eventParams['score'][19][1]
                    }
                    if (typeof eventParams['score'][20] !== "undefined") {
                        total += eventParams['score'][20][0] + eventParams['score'][20][1]
                    }
                    if (typeof eventParams['score'][21] !== "undefined") {
                        total += eventParams['score'][21][0] + eventParams['score'][21][1]
                    }
                } else if (scope == 4 && typeof eventParams['score'][scope] === "undefined") {
                    total = 0;
                    if (typeof eventParams['score'][22] !== "undefined") {
                        total += eventParams['score'][22][0] + eventParams['score'][22][1]
                    }
                    if (typeof eventParams['score'][23] !== "undefined") {
                        total += eventParams['score'][23][0] + eventParams['score'][23][1]
                    }
                    if (typeof eventParams['score'][24] !== "undefined") {
                        total += eventParams['score'][24][0] + eventParams['score'][24][1]
                    }
                    if (typeof eventParams['score'][25] !== "undefined") {
                        total += eventParams['score'][25][0] + eventParams['score'][25][1]
                    }
                } else {
                    total = eventParams['score'][scope][0] + eventParams['score'][scope][1]
                }
            } else if (sportId == 3 || sportId == 5 || sportId == 18 || sportId == 22) {
                if (scope == 3 && typeof eventParams['score'][scope] === "undefined") {
                    total = 0;
                    if (typeof eventParams['score'][8] !== "undefined") {
                        total += eventParams['score'][8][0] + eventParams['score'][8][1]
                    }
                    if (typeof eventParams['score'][9] !== "undefined") {
                        total += eventParams['score'][9][0] + eventParams['score'][9][1]
                    }
                } else if (scope == 4 && typeof eventParams['score'][scope] === "undefined") {
                    total = 0;
                    if (typeof eventParams['score'][10] !== "undefined") {
                        total += eventParams['score'][10][0] + eventParams['score'][10][1]
                    }
                    if (typeof eventParams['score'][11] !== "undefined") {
                        total += eventParams['score'][11][0] + eventParams['score'][11][1]
                    }
                } else {
                    total = eventParams['score'][scope][0] + eventParams['score'][scope][1]
                }
            } else {
                total = eventParams['score'][scope][0] + eventParams['score'][scope][1]
            }
        } catch (e) {
            throw new Error('UO: score not valid')
        }
        if (total == handicapValue) {
            return this.RESULT_RETURN
        }
        if (Math.round(handicapValue) != handicapValue && Math.round(handicapValue * 10) != handicapValue * 10) {
            var part1 = Math.ceil(handicapValue * 2) / 2;
            var part2 = Math.floor(handicapValue * 2) / 2;
            var won = 0;
            var lost = 0;
            var ret = 0;
            if (outcome == this.OUTCOME_OVER) {
                if (part1 > total) won++;
                if (part2 > total) won++;
                if (part1 < total) lost++;
                if (part2 < total) lost++
            } else if (outcome == this.OUTCOME_UNDER) {
                if (part1 < total) won++;
                if (part2 < total) won++;
                if (part1 > total) lost++;
                if (part2 > total) lost++
            } else {
                throw new Error('invalid outcome for BT_OU (' + outcome + ')')
            }
            if (part1 == total) ret++;
            if (part2 == total) ret++;
            if (won == 2) {
                return this.RESULT_WON
            }
            if (lost == 2) {
                return this.RESULT_LOST
            }
            if (ret == 2) {
                return this.RESULT_RETURN
            }
            if (ret == 1) {
                if (won == 1) {
                    return this.RESULT_50RETURN50WON
                }
                if (lost == 1) {
                    return this.RESULT_50RETURN50LOST
                }
            }
            throw new Error('Undefined state for handicap resolution')
        } else {
            if (outcome == this.OUTCOME_OVER) {
                return (total > handicapValue) ? this.RESULT_WON : this.RESULT_LOST
            } else if (outcome == this.OUTCOME_UNDER) {
                return (total < handicapValue) ? this.RESULT_WON : this.RESULT_LOST
            } else {
                throw new Error('invalid outcome for BT_OU (' + outcome + ')')
            }
        }
    },
    evaluate_asianhandicap: function(eventParams, outcomeParams, scope) {
        var sportId = eventParams['sportId'];
        var outcome = outcomeParams['outcome'];
        var handicapValue = outcomeParams['handicapValue'];
        var handicapType = outcomeParams['handicapTypeId'];
        var total = 0;
        if (sportId == 14) {
            throw new Error('Not implemented for this sport')
        }
        try {
            if (sportId == 2) {
                if (scope == 2 && handicapType == 1) {
                    total = eventParams['score'][scope][0] - eventParams['score'][scope][1]
                } else if (scope == 2 && handicapType == 2) {
                    total = 0;
                    if (typeof eventParams['score'][12] !== "undefined") {
                        total += eventParams['score'][12][0] - eventParams['score'][12][1]
                    }
                    if (typeof eventParams['score'][13] !== "undefined") {
                        total += eventParams['score'][13][0] - eventParams['score'][13][1]
                    }
                    if (typeof eventParams['score'][14] !== "undefined") {
                        total += eventParams['score'][14][0] - eventParams['score'][14][1]
                    }
                    if (typeof eventParams['score'][15] !== "undefined") {
                        total += eventParams['score'][15][0] - eventParams['score'][15][1]
                    }
                    if (typeof eventParams['score'][16] !== "undefined") {
                        total += eventParams['score'][16][0] - eventParams['score'][16][1]
                    }
                } else if (scope > 2 && handicapType == 2) {
                    total = eventParams['score'][scope][0] - eventParams['score'][scope][1]
                } else {
                    throw new Error('invalid handicap type')
                }
            } else if (sportId == 12 || sportId == 17 || sportId == 21) {
                if (scope == 2 && handicapType == 1) {
                    total = eventParams['score'][scope][0] - eventParams['score'][scope][1]
                } else if (scope == 2 && handicapType == 3) {
                    total = 0;
                    if (typeof eventParams['score'][12] !== "undefined") {
                        total += eventParams['score'][12][0] - eventParams['score'][12][1]
                    }
                    if (typeof eventParams['score'][13] !== "undefined") {
                        total += eventParams['score'][13][0] - eventParams['score'][13][1]
                    }
                    if (typeof eventParams['score'][14] !== "undefined") {
                        total += eventParams['score'][14][0] - eventParams['score'][14][1]
                    }
                    if (typeof eventParams['score'][15] !== "undefined") {
                        total += eventParams['score'][15][0] - eventParams['score'][15][1]
                    }
                    if (typeof eventParams['score'][16] !== "undefined") {
                        total += eventParams['score'][16][0] - eventParams['score'][16][1]
                    }
                } else if (scope > 2 && handicapType == 3) {
                    total = eventParams['score'][scope][0] - eventParams['score'][scope][1]
                } else {
                    throw new Error('invalid handicap type')
                }
            } else if (sportId == 6) {
                if (scope == 3 && typeof eventParams['score'][scope] === "undefined") {
                    total = 0;
                    if (typeof eventParams['score'][17] !== "undefined") {
                        total += eventParams['score'][17][0] - eventParams['score'][17][1]
                    }
                    if (typeof eventParams['score'][18] !== "undefined") {
                        total += eventParams['score'][18][0] - eventParams['score'][18][1]
                    }
                    if (typeof eventParams['score'][19] !== "undefined") {
                        total += eventParams['score'][19][0] - eventParams['score'][19][1]
                    }
                    if (typeof eventParams['score'][20] !== "undefined") {
                        total += eventParams['score'][20][0] - eventParams['score'][20][1]
                    }
                    if (typeof eventParams['score'][21] !== "undefined") {
                        total += eventParams['score'][21][0] - eventParams['score'][21][1]
                    }
                } else if (scope == 4 && typeof eventParams['score'][scope] === "undefined") {
                    total = 0;
                    if (typeof eventParams['score'][22] !== "undefined") {
                        total += eventParams['score'][22][0] - eventParams['score'][22][1]
                    }
                    if (typeof eventParams['score'][23] !== "undefined") {
                        total += eventParams['score'][23][0] - eventParams['score'][23][1]
                    }
                    if (typeof eventParams['score'][24] !== "undefined") {
                        total += eventParams['score'][24][0] - eventParams['score'][24][1]
                    }
                    if (typeof eventParams['score'][25] !== "undefined") {
                        total += eventParams['score'][25][0] - eventParams['score'][25][1]
                    }
                } else {
                    total = eventParams['score'][scope][0] + eventParams['score'][scope][1]
                }
            } else if (sportId == 3 || sportId == 5 || sportId == 18 || sportId == 22) {
                if (scope == 3 && typeof eventParams['score'][scope] === "undefined") {
                    total = 0;
                    if (typeof eventParams['score'][8] !== "undefined") {
                        total += eventParams['score'][8][0] - eventParams['score'][8][1]
                    }
                    if (typeof eventParams['score'][9] !== "undefined") {
                        total += eventParams['score'][9][0] - eventParams['score'][9][1]
                    }
                } else if (scope == 4 && typeof eventParams['score'][scope] === "undefined") {
                    total = 0;
                    if (typeof eventParams['score'][10] !== "undefined") {
                        total += eventParams['score'][10][0] - eventParams['score'][10][1]
                    }
                    if (typeof eventParams['score'][11] !== "undefined") {
                        total += eventParams['score'][11][0] - eventParams['score'][11][1]
                    }
                } else {
                    total = eventParams['score'][scope][0] - eventParams['score'][scope][1]
                }
            } else {
                total = eventParams['score'][scope][0] - eventParams['score'][scope][1]
            }
        } catch (e) {
            throw new Error('AH: score not valid')
        }
        if (Math.round(handicapValue) != 1 * handicapValue && Math.round(handicapValue * 10) != handicapValue * 10) {
            var part1 = Math.ceil((total + handicapValue) * 2) / 2;
            var part2 = Math.floor((total + handicapValue) * 2) / 2;
            var won = 0;
            var lost = 0;
            var ret = 0;
            if (outcome == this.OUTCOME_HOME) {
                if (part1 > 0) won++;
                if (part2 > 0) won++;
                if (part1 < 0) lost++;
                if (part2 < 0) lost++
            } else if (outcome == this.OUTCOME_AWAY) {
                if (part1 < 0) won++;
                if (part2 < 0) won++;
                if (part1 > 0) lost++;
                if (part2 > 0) lost++
            } else {
                throw new Error('invalid outcome for BT_AH')
            }
            if (part1 == 0) ret++;
            if (part2 == 0) ret++;
            if (won == 2) {
                return this.RESULT_WON
            }
            if (lost == 2) {
                return this.RESULT_LOST
            }
            if (ret == 2) {
                return this.RESULT_RETURN
            }
            if (ret == 1) {
                if (won == 1) {
                    return this.RESULT_50RETURN50WON
                }
                if (lost == 1) {
                    return this.RESULT_50RETURN50LOST
                }
            }
            throw new Error('Undefined state for handicap resolution')
        } else {
            total += handicapValue;
            if (total == 0) {
                return this.RESULT_RETURN
            } else if (outcome == this.OUTCOME_HOME) {
                return (total > 0) ? this.RESULT_WON : this.RESULT_LOST
            } else if (outcome == this.OUTCOME_AWAY) {
                return (total < 0) ? this.RESULT_WON : this.RESULT_LOST
            } else {
                throw new Error('invalid outcome for BT_AH')
            }
        }
    }
};
var formater = (function() {
    var oddsportalFormater = {
        oddsFormat: 1,
        handicapFormat: 1,
        setOddsFormat: function(oddsFormat) {
            this.oddsFormat = oddsFormat
        },
        setHandicapFormat: function(handicapFormat) {
            this.handicapFormat = handicapFormat
        },
        formatHandicap: function(handicap) {
            handicap = 1 * handicap;
            switch (this.handicapFormat) {
                case 1:
                    return handicap;
                case 2:
                    return this.formatHandicapHalfs(handicap);
                case 3:
                    return this.formatHandicapUs(handicap);
                case 4:
                    return this.formatHandicapHalfsQuarterOnly(handicap);
                case 5:
                    return this.formatHandicapUs(handicap);
                case 6:
                    return this.formatHandicapHalfsQuarterOnly(handicap)
            }
        },
        usFloat: function(num) {
            var ret = '';
            var whole = parseInt(num);
            var dec = Math.abs(num - whole);
            if (num > 0) ret += '+';
            if (num < 0) ret += '-';
            if (whole != 0 || this.handicapFormat == 5) {
                ret += Math.abs(whole) + ''
            }
            switch (dec) {
                default: ret += "";
                    break;
                case 0.25:
                    ret += "¼";
                    break;
                case 0.5:
                    ret += "½";
                    break;
                case 0.75:
                    ret += "¾";
                    break
            }
            return ret
        },
        formatHandicapHalfs: function(handicap) {
            var tmpHandicap = 2 * handicap;
            var dwn = Math.floor(tmpHandicap);
            var up = Math.ceil(tmpHandicap);
            if (dwn < 0 || up < 0) {
                if (this.handicapFormat == 6) {
                    return this.addSign(up / 2) + ', ' + this.addSign(dwn / 2)
                } else {
                    return (up / 2) + ', ' + (dwn / 2)
                }
            } else {
                if (this.handicapFormat == 6) {
                    return this.addSign(dwn / 2) + ', ' + this.addSign(up / 2)
                } else {
                    return (dwn / 2) + ', ' + (up / 2)
                }
            }
        },
        addSign: function(num, positive_only) {
            if (num * 1 > 0) {
                return '+' + num
            }
            if (num * 1 < 0 && positive_only != undefined) {
                return '-' + num
            }
            return num
        },
        formatHandicapHalfsQuarterOnly: function(handicap) {
            var whole = parseInt(handicap);
            var dec = Math.abs(handicap - whole);
            if (dec == 0.25 || dec == 0.75) {
                return this.formatHandicapHalfs(handicap)
            } else {
                if (this.handicapFormat == 6) {
                    return this.addSign(handicap)
                } else {
                    return handicap
                }
            }
        },
        addPositiveChar: function(num) {
            if (num > 0) num = '+' + num;
            return num
        },
        formatHandicapUs: function(handicap) {
            return this.usFloat(handicap) + '/' + this.usFloat(-1 * handicap)
        },
        formatOdd: function(num, returnOne) {
            if (!num) return '';
            num = num * 1;
            if (num > 0.999 && num < 1.001 && !returnOne) {
                return null
            }
            switch (this.oddsFormat) {
                case 1:
                    return this.formatTwodigits(num);
                case 2:
                    return this.formatUk(num);
                case 3:
                    return this.formatUs(num);
                case 4:
                    return this.formatHk(num);
                case 5:
                    return this.formatMa(num);
                case 6:
                    return this.formatIn(num);
                case 10:
                    return this.formatUkShort(num)
            }
        },
        formatUs: function(decimal) {
            if (decimal > 0.999 && decimal < 1.001) {
                return '-25000'
            }
            if (decimal >= 2) {
                return '+' + Math.floor((decimal - 1) * 100)
            } else if (decimal != 1) {
                return -Math.round(100 / (decimal - 1))
            } else {
                return null
            }
        },
        formatUk: function(decimal) {
            if (decimal > 0.999 && decimal < 1.001) {
                return '0/1'
            }
            var numerator = Math.round(decimal * 100);
            var denominator = 100;
            var gcd = this.GCD(numerator, denominator);
            if (gcd < -1) {
                gcd *= -1
            }
            if (gcd > 1) {
                numerator /= gcd;
                denominator /= gcd
            }
            if (numerator > denominator) {
                return ((Math.round(numerator) - Math.round(denominator)) + '/' + Math.round(denominator))
            } else {
                return (Math.round(numerator) + '/' + Math.round(denominator))
            }
        },
        formatUkShort: function(decimal) {
            if (decimal > 0.999 && decimal < 1.001) {
                return '0/1'
            }
            var numerator = Math.round(decimal * 1000) / 10 - 100;
            var denominator = 100;
            var minDelta = 100;
            var numeratorFinal = null;
            var denominatorFinal = null;
            var denominatorTmp = denominator;
            var numeratorTmp;
            for (var i = 1; i <= 11; i++) {
                denominatorTmp = i;
                numeratorTmp = numerator * (denominatorTmp) / (denominator);
                var delta = Math.abs(Math.round(numeratorTmp) / Math.round(denominatorTmp) - numerator / denominator);
                if (delta < minDelta) {
                    minDelta = delta;
                    numeratorFinal = numeratorTmp;
                    denominatorFinal = denominatorTmp
                }
            }
            return (Math.round(numeratorFinal) + '/' + Math.round(denominatorFinal))
        },
        formatHk: function(decimal) {
            if (decimal > 0.999 && decimal < 1.001) {
                return this.formatTwodigits(0)
            }
            return this.formatTwodigits(decimal - 1)
        },
        formatMa: function(decimal) {
            if (decimal > 0.999 && decimal < 1.001) {
                return this.formatTwodigits(0)
            }
            if (decimal <= 2) {
                decimal -= 1
            } else {
                decimal = (1 / (decimal - 1)) * -1
            }
            return this.formatTwodigits(decimal)
        },
        formatIn: function(decimal) {
            if (decimal > 0.999 && decimal < 1.001) {
                return '-250.00'
            }
            if (decimal <= 2) {
                decimal = (1 / (decimal - 1)) * -1
            } else {
                decimal -= 1
            }
            return this.formatTwodigits(decimal)
        },
        GCD: function(numerator, denominator) {
            var x = numerator;
            var y = denominator;
            while (y != 0) {
                var w = x % y;
                x = y;
                y = w
            }
            return x
        },
        formatTwodigits: function(num) {
            var dnum = Math.round(num * 100) / 100;
            var twoDPString = dnum + "";
            if (twoDPString.indexOf(".") == -1) {
                twoDPString += ".00"
            }
            if (twoDPString.indexOf(".") == twoDPString.length - 2) {
                twoDPString += "0"
            }
            return twoDPString
        }
    };
    if (typeof window === "undefined" || window === null) {
        exports.oddsportalFormater = oddsportalFormater
    }
    return oddsportalFormater
})();